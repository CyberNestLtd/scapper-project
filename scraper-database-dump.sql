-- MySQL dump 10.13  Distrib 8.0.28, for macos11 (x86_64)
--
-- Host: localhost    Database: scraper
-- ------------------------------------------------------
-- Server version	8.0.28

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `cron_job`
--

DROP TABLE IF EXISTS `cron_job`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `cron_job` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `command` varchar(1024) COLLATE utf8mb4_unicode_ci NOT NULL,
  `schedule` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `un_name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cron_job`
--

LOCK TABLES `cron_job` WRITE;
/*!40000 ALTER TABLE `cron_job` DISABLE KEYS */;
INSERT INTO `cron_job` VALUES (1,'scraper','publisher','00 00 * * *','Scrape web page new articles',1);
/*!40000 ALTER TABLE `cron_job` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cron_report`
--

DROP TABLE IF EXISTS `cron_report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `cron_report` (
  `id` int NOT NULL AUTO_INCREMENT,
  `job_id` int DEFAULT NULL,
  `run_at` datetime NOT NULL,
  `run_time` double NOT NULL,
  `exit_code` int NOT NULL,
  `output` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `error` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_B6C6A7F5BE04EA9` (`job_id`),
  CONSTRAINT `FK_B6C6A7F5BE04EA9` FOREIGN KEY (`job_id`) REFERENCES `cron_job` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cron_report`
--

LOCK TABLES `cron_report` WRITE;
/*!40000 ALTER TABLE `cron_report` DISABLE KEYS */;
INSERT INTO `cron_report` VALUES (1,1,'2022-12-03 01:02:47',0.20732498168945,1,'','\n                                                \n  Not enough arguments (missing: \"url, port\").  \n                                                \n\npublisher <url> <port> [<type>]\n\n');
/*!40000 ALTER TABLE `cron_report` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doctrine_migration_versions`
--

DROP TABLE IF EXISTS `doctrine_migration_versions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doctrine_migration_versions` (
  `version` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `executed_at` datetime DEFAULT NULL,
  `execution_time` int DEFAULT NULL,
  PRIMARY KEY (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doctrine_migration_versions`
--

LOCK TABLES `doctrine_migration_versions` WRITE;
/*!40000 ALTER TABLE `doctrine_migration_versions` DISABLE KEYS */;
INSERT INTO `doctrine_migration_versions` VALUES ('DoctrineMigrations\\Version20221201144433','2022-12-01 14:53:48',99),('DoctrineMigrations\\Version20221202112907','2022-12-02 11:32:08',90),('DoctrineMigrations\\Version20221203004510','2022-12-03 00:45:38',66);
/*!40000 ALTER TABLE `doctrine_migration_versions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messenger_messages`
--

DROP TABLE IF EXISTS `messenger_messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `messenger_messages` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `body` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `headers` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `queue_name` varchar(190) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `available_at` datetime NOT NULL,
  `delivered_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_75EA56E0FB7336F0` (`queue_name`),
  KEY `IDX_75EA56E0E3BD61CE` (`available_at`),
  KEY `IDX_75EA56E016BA31DB` (`delivered_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messenger_messages`
--

LOCK TABLES `messenger_messages` WRITE;
/*!40000 ALTER TABLE `messenger_messages` DISABLE KEYS */;
/*!40000 ALTER TABLE `messenger_messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `picture`
--

DROP TABLE IF EXISTS `picture`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `picture` (
  `id` int NOT NULL AUTO_INCREMENT,
  `scrap_page_id` int NOT NULL,
  `path` varchar(350) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_16DB4F892262F269` (`scrap_page_id`),
  CONSTRAINT `FK_16DB4F892262F269` FOREIGN KEY (`scrap_page_id`) REFERENCES `scrap_page` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `picture`
--

LOCK TABLES `picture` WRITE;
/*!40000 ALTER TABLE `picture` DISABLE KEYS */;
INSERT INTO `picture` VALUES (9,37,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023739.jpg'),(10,38,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023806.jpg'),(11,38,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023808.jpg'),(12,38,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023808.jpg'),(13,38,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023808.jpg'),(14,38,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023808.jpg'),(15,39,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023813.jpg'),(16,42,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023889.jpg'),(17,43,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023897.jpg'),(18,45,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670023969.jpg'),(19,47,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024037.jpg'),(20,47,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024037.jpg'),(21,50,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024141.jpg'),(22,52,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024181.jpg'),(23,52,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024182.jpg'),(24,52,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024182.jpg'),(25,52,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024182.jpg'),(26,53,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024187.jpg'),(27,55,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024228.jpg'),(28,60,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024376.jpg'),(29,60,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024377.jpg'),(30,65,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024521.jpg'),(31,67,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024631.jpg'),(32,67,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024631.jpg'),(33,67,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024631.jpg'),(34,68,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024635.jpg'),(35,68,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024638.jpg'),(36,68,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024638.jpg'),(37,68,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024638.jpg'),(38,72,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024779.jpg'),(39,75,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024882.jpg'),(40,75,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024882.jpg'),(41,75,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024882.jpg'),(42,75,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024882.jpg'),(43,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(44,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(45,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(46,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(47,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(48,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(49,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(50,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(51,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(52,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(53,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(54,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(55,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(56,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(57,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(58,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(59,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(60,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(61,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(62,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(63,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(64,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(65,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(66,77,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670024951.jpg'),(67,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(68,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(69,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(70,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(71,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(72,83,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025195.jpg'),(73,88,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025372.jpg'),(74,89,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025409.jpg'),(75,89,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025409.jpg'),(76,89,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025409.jpg'),(77,98,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025694.jpg'),(78,99,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670025731.jpg'),(79,112,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026156.jpg'),(80,114,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026199.jpg'),(81,115,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026234.jpg'),(82,115,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026234.jpg'),(83,117,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026305.jpg'),(84,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026309.jpg'),(85,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(86,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(87,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(88,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(89,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(90,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(91,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(92,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(93,118,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026311.jpg'),(94,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(95,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(96,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(97,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(98,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(99,120,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026381.jpg'),(100,121,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026416.jpg'),(101,123,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026485.jpg'),(102,124,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026521.jpg'),(103,125,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026556.jpg'),(104,132,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026698.jpg'),(105,132,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026698.jpg'),(106,149,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026895.jpg'),(107,155,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026950.jpg'),(108,157,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026980.jpg'),(109,158,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670026987.jpg'),(110,164,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027056.jpg'),(111,165,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027074.jpg'),(112,177,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027195.jpg'),(113,177,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027198.jpg'),(114,177,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027198.jpg'),(115,180,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027233.jpg'),(116,183,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027268.jpg'),(117,186,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027303.jpg'),(118,186,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027303.jpg'),(119,186,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027303.jpg'),(120,187,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027306.jpg'),(121,187,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027308.jpg'),(122,187,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027308.jpg'),(123,187,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027308.jpg'),(124,187,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027308.jpg'),(125,188,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027308.jpg'),(126,188,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027310.jpg'),(127,188,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027310.jpg'),(128,188,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027310.jpg'),(129,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027312.jpg'),(130,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027314.jpg'),(131,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027314.jpg'),(132,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027314.jpg'),(133,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027314.jpg'),(134,189,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027314.jpg'),(135,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027315.jpg'),(136,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027316.jpg'),(137,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027316.jpg'),(138,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027316.jpg'),(139,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027316.jpg'),(140,190,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027316.jpg'),(141,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(142,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(143,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(144,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(145,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(146,191,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027320.jpg'),(147,192,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027321.jpg'),(148,192,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027323.jpg'),(149,192,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027323.jpg'),(150,192,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027323.jpg'),(151,192,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027323.jpg'),(152,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027327.jpg'),(153,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(154,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(155,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(156,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(157,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(158,193,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027328.jpg'),(159,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027332.jpg'),(160,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(161,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(162,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(163,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(164,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(165,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(166,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(167,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(168,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(169,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(170,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(171,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(172,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(173,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(174,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(175,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(176,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(177,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(178,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(179,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(180,194,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027334.jpg'),(181,195,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027349.jpg'),(182,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027354.jpg'),(183,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(184,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(185,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(186,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(187,196,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(188,197,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(189,197,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(190,197,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(191,197,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027356.jpg'),(192,198,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027369.jpg'),(193,199,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027374.jpg'),(194,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(195,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(196,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(197,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(198,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(199,200,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027390.jpg'),(200,202,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027396.jpg'),(201,203,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027396.jpg'),(202,204,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027405.jpg'),(203,205,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027405.jpg'),(204,205,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027408.jpg'),(205,205,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027408.jpg'),(206,207,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027412.jpg'),(207,207,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027414.jpg'),(208,208,'/Users/usmanjavaid/Projects/php/symphony/scraper/assets/images/1670027413.jpg');
/*!40000 ALTER TABLE `picture` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `scrap_page`
--

DROP TABLE IF EXISTS `scrap_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `scrap_page` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` longtext COLLATE utf8mb4_unicode_ci,
  `body` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL COMMENT '(DC2Type:datetime_immutable)',
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=219 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `scrap_page`
--

LOCK TABLES `scrap_page` WRITE;
/*!40000 ALTER TABLE `scrap_page` DISABLE KEYS */;
INSERT INTO `scrap_page` VALUES (35,'Google надав гранти 25 українським стартапам','Игорь Шелудченко','Гранти від Google зі спеціального фонду отримало 25 українських стартапів. Це вже третя група стартапів з України, яким надаються кошти в 2022 році, говориться в блозі Google.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nГроші будуть виділені зі спеціального фонду Google for Startups Ukraine Support Fund, який був створений ще в березні.\n«Українські підприємці продовжують демонструвати велику мотивацію та відданість справі навіть у найскладніших обставинах. Згідно з нещодавнім звітом, у 2022 році сукупна вартість українських стартапів зросла втричі, і лише за три роки ця цифра збільшилась з 3 мільярдів євро до 23,3 мільярдів євро», – сказано в повідомленні.\nФінансування від фонду Google отримали 25 компаній:\nAdwisely — онлайн-інструмент для проведення цифрових рекламних кампаній, який допоможе збільшити дохід клієнтів;\nBirb — додаток для оренди квартир, що дозволяє шукати найкращі пропозиції в улюблених районах користувача;\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nBook Box — бібліотечний сервіс для великих компаній, що забезпечує співробітникам доступ до книг і будь-яких матеріалів для читання;\nDjookyX — платформа, що дозволяє музикантам продавати права на пісні та збирати кошти для подальшого розвитку своєї кар’єри;\nDrug Cards — ефективне програмне забезпечення для автоматичного моніторингу медичної літератури;\nFolderly — платформа на основі штучного інтелекту, що підвищує ефективність електронної пошти клієнтів;\nFuel Finance — фінансовий відділ у хмарі для стартапів;\nGradual — онлайн-платформа для спеціалістів з продажів, яка дозволяє їм розвивати свої професійні навички;\nHappy Monday — зв’язує людей, які шукають роботу, з компаніями, які можуть підійти саме їм;\nJiffsy — мобільний маркетплейс для брендів повільної моди (slow fashion), який допомагає їм збільшити продажі;\nKycaid — онлайн-система перевірки особистості та управління відповідністю;\nMama Plant a Tree — цифровий сервіс, який дозволяє користувачам посадити дерево в один клік;\nMate Academy — ІТ-курси, адаптовані до потреб людей, які хочуть почати працювати в галузі технологій;\nMathema — онлайн-школа математики для учнів від дитячого садка до старшої школи;\nNetHunt — система управління взаємовідносинами з клієнтами, розроблена для відділів продажів, інтегрована з Gmail і LinkedIn;\nNumo — додаток для підтримки благополуччя та продуктивності дорослих із СДУГ;\nOrderry — переводить місцеві підприємства з офлайн в онлайн, щоб зробити їх більш конкурентоспроможними;\nPeopleForce — HR-програмне забезпечення для компаній для управління продуктивністю співробітників;\nPricer24 — платформа, яка надає брендам, дистриб’юторам та інтернет-магазинам ринкову аналітику;\nRECEPTOR.AI — платформа на базі ШІ, що дозволяє фармацевтичним і біотехнологічним компаніям легше розробляти нові ліки;\nSorbsys — виробник дешевих і екологічно чистих карбонових батарей;\nStape — інструмент, який допомагає власникам сайтів і маркетологам відстежувати поведінку клієнтів;\nWantent — платформа на основі штучного інтелекту для вимірювання залучення аудиторії й тестування відеоконтенту на всіх етапах виробництва та розповсюдження;\nWorkee — простий конструктор сайтів, призначений для приватних репетиторів і фрілансерів;\nYouControl — онлайн-сервіс аналізу ринку та перевірки юридичних осіб.\nРаніше фінансування та підтримку для розширення свого бізнесу використали 33 реципієнти з першої та другої груп.\nТак, наприклад такі стартапи, як Releaf Paper і VanOnGo, вийшли на ринки нових країн; додаток для психічного здоров’я Mindly збільшив свій місячний дохід більш ніж на 300%; а Esper Bionics було обрано одним із 200 найкращих винаходів 2022 року за версією TIME.\nУ Google зазначили, що хоча це й остання група отримувачів фінансування в рамках Фонду підтримки Google для стартапів в Україні, Google for Startups продовжить надавати всім 58 стартапам менторські сесії та технічну підтримку.','2022-12-02 22:49:47','2022-12-02 22:49:47'),(36,'«Ілонфон» відкладається або чому з офісу Apple вийшов вдоволений Ілон Маск','Игорь Шелудченко','Новий директор Twitter Ілон Маск заявив в середу, що конфлікт між соціальною мережею та Apple вирішений. Про це написав Insider з посиланням на твіт Ілона Маска.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗгідно з повідомленням, у директорів була «гарна розмова».\n«Ми вирішили непорозуміння з приводу можливого видалення Twitter з App Store. Тім ясно дав зрозуміти, що Apple ніколи не думала про це», — написав Ілон Маск.\nЕкскурсія для Маска\nПро примирення директор Twitter написав після проведеної для нього екскурсії по штаб-квартирі Apple у Каліфорнії.\nВ середу Ілон Маск навіть опублікував відео, у якому показав кампус Apple. Це ж підтвердив репортер New York Times Кейт Конгер.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nТим більше, сам Ілон Маск почав розповідати про запрошення в кампус всього лише через два тижні після спільних скандальних заяв Apple та Twitter.\nКінець історії?\nМожливо, війна, яка ще не встигла розпочатися, вже закінчена. Ілон Маск вже видалив твіт, в якому розповідав, що виробник iPhone пригрозив видалити Twitter з App Store і «не сказав нам, чому».\nТакож показово, що можливо Twitter небуде платити комісію в 30% для AppStore. Так, Platformer повідомив, що Twitter не планує пропонувати свою послугу підписки як покупку в додатку,  що означає відміну 30%-ї комісії в App Store.\nРазом з тим, експерти заявляють, що Apple може знайти причину видалити Twitter з App Store, але, скоріше за все, утрима ється від цього через проблеми з антимонопольним законодавством.\nНагадаємо, недавно Ілон Маск заявив, що у випадку блокування Twittter в AppStore та Google Play Market має намір «сворити альтернативний телефон».\nЦьому передував цілий ряд подій. Так, в Ілон Маск повідомляв про погрози від Apple видалити Twitter зі свого App Store. Незадовго до цього видалив свій обліковий запис у Twitter Філ Шиллер, директор App Store.\nЦе було зроблено після того, як Ілон Маск поскаржився у Twitter на збори Apple, назвавши їх «прихованим 30-відсотковим податком в Інтернеті».\nКонфлікт відносно модерації контенту у Apple та Google існує вже достатньо давно. Ще до купівлі Twitter передувала критика платформи Ілоном Маском що та не дотримує «принципи свободи слова»\n   ','2022-12-02 22:52:53','2022-12-02 22:52:53'),(37,'1984 по-китайськи: Huawei автоматично видаляє відео з протестів','Игорь Шелудченко','Учасники та очевидці, які підтримують протести в Китаї, вважають, що смартфони Huawei автоматично видаляють відеозаписи зі зйомкою вуличних дій.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nВідповідні відео користувачі почали викладати у соціальні мережі.\nНа записах видно, що відео з протестів у Китаї просто зникають із галереї, а на їхньому місці з’являється піктограма ролика, який відкрити не можна. Це стосується відеозаписів, знятих у ці вихідні.\nРяд подібних випадків, зазначених користувачами, об’єднує те, що телефони інших користувачів у цьому не помічені.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nТакож китайці зазначають, що жодних повідомлень із цього приводу вони не отримували.\nТехнологічно незрозуміло, як можуть видалятися подібні відео. Ймовірно, за геоміткою і часом завантаження, проте й можливо що користувачі зіткнулися з роботою нейромережі.\nЗазначимо, що західні країни вже давно звинувачують Huawei у шпигунстві на користь Китаю, відмовляючись купувати деякі продукти компанії. Уорд Елкок, колишній директор Центру стратегічних та міжнародних досліджень та екс-заступник міністра оборони Канади, заявив, що компанія «по суті перебуває під контролем уряду Китаю».\n«Мені важко повірити, що така компанія, як Huawei, не виконуватиме розпорядження китайського уряду і не будуватиме пастки, чорні ходи у своїх технологіях від імені китайського уряду», — сказав він.\nНагадаємо, нещодавно Highload писав про те, що американська корпорація Apple обмежила роботу головного інструменту обміну інформацією про протести в Китаї – технологію передачі файлів Apple AirDrop.','2022-12-02 23:28:59','2022-12-02 23:28:59'),(38,'Українці «підсіли» на китайську нейромережу, яка малює аніме по фото: подивіться на це','Игорь Шелудченко','В українському, і не тільки інформаційному просторі набрала популярності китайська нейромережа Different Dimension Me, яка малює аніме-версії завантажених зображеннь.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nТак, користучачі по всьому світу почали масово завантажувати в програму власні фото, фото своїх друзів та фото знаменитостей.\nАніме-Арестович, брати Кличко та Порошенко: що показала нейромережа\nМожна було не сумніватися, що в застосунок неодмінно завантажать фотографії знаменитостей, а потім кумедні фото викладуть в Twitter, Facebook, чи кудись в інше місце.\nПропонуємо вам подивитися на декілька результатів:\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nЩо відомо про Different Dimension Me?\nНейромережу Different Dimension Me розробили ті ж самі люди, й месенджер QQ, який належить компанії Tencent. QQ — це китайський аналог Telegram, з відеозвінками та аудіоповідомленнями.\nДля того, що сгенерувати аніме-зображенння, потрібно зайти на сайт та обрати якесь фото. При цьому рекомендується заходити зі смартфону, а не через ПК. Обмеженнь на кількість генерацій немає, але за одну генерацію можна завантажити тільки одне фото.\nШтучний інтелект Different Dimension Me може розпізнати різні елементи одягу, риси обличчя, татуювання, а також деякі елементи оточення (трава, вода, церква, вулиця і т.д.). Але програма інтерпретує обєкти на свій лад, тому можливі й досить суттєві «коррективи».\nІнтерфейс в програмі китайською, але там можна без проблем розібратися: треба просто завантажити фото і дочекатися результатів.\nЧи безпечно це?\nНаразі про програму відомо не так багато. Тому довіряти їй чи ні це виключно ваша справа.\nПроте просимо звернути увагу, що недавно стало відомо, чому не треба користуватися застосунком для аватарів Lensa.\nЦя програма, аналогічно Different Dimension Me, обробляє  фото таким чином, що ви стаєте схожими на героїв аніме, казкових персонажів чи даму у стилі рококо.\nПроте розробники цього додатку – російська компанія Prisma lab. Відправляючі свої фотографії, користувач надає згоду на обробку персональних даних, таких як ідомості про використання, адреси інтернет-протоколу (IP) та інформацію, зібрану за допомогою файлів cookie. Це ж стосується і персональних даних, надісланих під час запитів  (ім’я, поштові адреси, електронна пошта та номери телефонів).\nКрім того, застосунок може бути пов’язаний з Mail.Ru Group.\n«За даними російського РБК, у 2016 році Mail.Ru Group інвестувала $2 млн в інший застосунок цієї компанії – Prisma – та придбала 10% його частки. Mail.Ru Group володіє забороненими в Україні mail.ru, VK та Однокласниками. Цей холдинг відомий своєю співпрацею з російськими спецслужбами, що нині ставить під сумнів репутацію Prisma Lab», – стверджується в матеріалі Liga.','2022-12-02 23:30:06','2022-12-02 23:30:06'),(39,'Україна призупинила інтеграцію Binance з «Дією»','Игорь Шелудченко','Український уряд вирішив призупинити інтеграцію платіжного сервісу Binance з застосунком «Дія». Про це повідомив CoinDesk з посиланням на коментарі представників уряду.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nТреба «прояснити декілька моментів»\nРішення про призупинку інтеграції було прийнято через те, що Binance продовжує вести бізнес в росії. Українські компанії, пов‘язані з ринками криптовалют, вважають, що ці функції вони можуть цілком і взяти на себе. Компанії вже висловили свою невдоволення, заблокувавши торгівлю токеном Binance BNB на своїх платформах.\nЗа словами співрозмовника CoinDesk в уряді, інтеграція призупинена, щоб спочатку «прояснити кілька моментів».\nОплата держпослуг криптовалютою\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nМіж Міністерством цифрової трансформації та Binance існує довготривале партнерство. Одна з останніх ініціатив — запуск оплати держпослуг криптовалютою в додатку «Дія», що було анонсовано на початку листопада.\nЦе досить сильно обурило українське криптоком‘юніті. Біржі Kuna, WhiteBit та сервіс криптокредитування Trustee Plus подали петицію Президентові України Володимиру Зеленському із проханням заблокувати інтеграцію. Вони також заблокували торгівлю BNB (токеном компанії Binance) на своїх платформах.\nДиректор Trustee Plus Вадим Груша вважає,що інтегрувати державну службу з іноземною компанією неправильно, оскільки в Україні є свої криптобіржі «з продуктом не гірше, ніж у Binance».\n«Це непатріотично та небезпечно для уряду. Крім того, Binance — китайська компанія, а Китай не є другом України. Ми не знаємо, які дані вони надсилають і кому. У будь-який момент нас можуть забанити», — підкреслив він.\nВ той же час CoinDesk підкреслює, що Binance не позиціює себе як китайська компанія та не має в цій крані юридичних осіб. Засновник біржі Чанпен Чжао, народився в Китаї, але виріс у Канаді.','2022-12-02 23:30:13','2022-12-02 23:30:13'),(40,'Знайшовся таємниче зниклий засновник AliExpress','Игорь Шелудченко','Засновник Alibaba Group Holding Ltd (AliExpress, Taobao, Alipay), міліардер Джек Ма майже шість місяців проживає в Японії, Токіо. Про це повідомило видання Finacial Times з посиланням на власні джерела. \nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПовсякденне дозвілля Джека Ма\nВідомий китайський бізнесмен чергує своє життя в Токіо з виїздами у сільську місцевість та перельотами до США та Ізраїлю.\nЯк повідомлять джерела Financial Times, Джек Ма відвідує декілька приватних клубів в центрі Токіо. Також він взяв з собою свою сім’ю, особистого шеф-кухаря і співробітників служби безпеки.\nЗ’явилося у міліардера і нове хобі: він став затятим колекціонером сучасного мистецтва і навіть почав малювати аквареллю. Інші ж джерела стверджуть, що Джек Ма намагається розширити свої ділові інтереси за межі онлайн-бізнесу.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nЩо змусило Джека Ма покинути Китай?\nFinancial Times підкреслює, що Джек Ма виїхав з Китаю «на тлі тиску Пекіна на технологічний сектор країни та її найвпливовіших бізнесменів».\nВін почав рідко з’являтися на публіці після того, як розкритикував китайську владу за тиск на бізнес. Бізнесмен звинуватив державні банки в «менталітеті ломбарду» і що регуляторні заходи чиновників, «придумані старими», не відповідають часу.\nВже через місяць Джек Ма в останній момент відклав лістинг (розміщення акцій на торговій біржі) своєї фінтех-компанії Ant Group, поява якої могла стати наймасштабнішою подією в історії. У 2021 році влада Китаю оштрафувала Alibaba на рекордні для країни 18,2 млрд юанів ($2,8 млд) за порушення антимонопольного законодавства.','2022-12-02 23:30:49','2022-12-02 23:30:49'),(41,'Кабмін звільнив імпорт Starlink від мита та ПДВ','Игорь Шелудченко','Кабінет Міністрів України прийняв рішення звільнити від мита та ПДВ імпорт засобів супутникового зв’язку до мережі Інтернет Starlink. Про це говориться в повідомленні на сайті Міністерства економіки.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТакож в оновленний перелік товарів, які постачаються на територію України без сплати мита та ПДВ, потрапили комплектуючі для виготовлення енергетичного обладнання та засоби очищення води.\nЗгідно з заявою відомства, це рішення робить таку продукцію дешевшою приблизно на 25%.\n«Сьогодні ми робимо ще один крок. Щоб українські виробники, які збирають таку продукцію в Україні, не опинились у невигідному положенні, Уряд додатково звільнив запчастини для зборки генераторів та енергетичного обладнання від ПДВ та мита. Таким чином, і продукція, що виготовляється на внутрішньому ринку, стане приблизно на чверть дешевшою», — пояснив перший заступник Міністра економіки України Денис Кудін.\nНагадаємо, вчора стало відомо, що компанія SpaceX Ілона Маска вирішила підняти тарифи на Starlink для користувачів з України з $60 до $75.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nПри цьому, як свідчать оновленні дані на офіційному сайті Starlink, також стали дорожче і термінали. Їх ціна піднялася з $500 до $700.','2022-12-02 23:31:24','2022-12-02 23:31:24'),(42,'Програміст з Києва подарував спецавто за $10 тис. бійцю з ампутованими ногами','Игорь Шелудченко','Анонімний програміст з Києва придбав для 20-річного військового Андрія Собковського машину з ручним керуванням, яка дозволяє управляти педалями гальма і газу рукою. Незвичну історію про благодійника розповіло видання Експрес.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nАндрій Собковський — військовий з міста Бар, що на Вінниччині. Він дивом вижив під час російського ракетного удару.\n«Увечері 7 квітня всі лягли спати. О третій ночі  мав заступати в наряд. Прокинувся від раптового вибуху — я опинився під завалами та не міг рухатись. На мої ноги впала бетонна плита», — згадує він.\nРятувальники прибули на місце тільки через 11 годин. Оскільки ноги тривалий час були перетиснуті, врятувати їх медики не змогли.\nВже під час лікування у шпиталі в Одесі Андрій познайомився з В’ячеславом Запорожцем, керівником благодійного фонду. Потім бійця перевезли в Київ.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\n«З’явилася ідея, як ще допомогти хлопцеві й посилити його віру у своє майбутнє, — розповідає В’ячеслав Запорожець. — Декілька тижнів тому я вирішив зібрати кошти на купівлю вживаної машини з ручним керуванням для Андрія. Знайшов таку за кордоном. Вона повнопривідна, має автоматичну коробку передач. Подібний автомобіль дозволяє управляти педалями гальма і газу рукою: достатньо просто потягнути ручку на себе чи від себе для прискорення або гальмування», — розповідає В’ячеслав.\nПро збір коштів на автомобіль дізнався молодий програміст з Києва. Він дав $10 тис.  на авто і ще $5 тис. — на постійні протези, які потребні Андрію. Повідомляється, що анонімний благодійник живе неподалік військового шпиталю і щодня бачить поранених.\nЗа словами самого бійця, на новій машині він уже декілька разів виїжджав у місто.\n«Я дуже щасливий, адже знову почуваюсь повноцінною людиною. Мрію жити у Вінниці та їздити до батьків у Бар. Я щиро дякую всім, хто мені допомагає! Українці — неймовірні люди!» , — розповів він.','2022-12-02 23:31:29','2022-12-02 23:31:29'),(43,'Ілон Маск підняв тарифи на Starlink для України','Игорь Шелудченко','Компанія SpaceX Ілона Маска вирішила підняти тарифи на Starlink для користувачів з України з $60 до $75. Про це повідомив в мікроблозі Twitter волонтер Павло Бондаренко, прикріпивши копію листа, який зараз отримують українці.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nВартість послуг повинна зрости з 29 грудня.\n«Щомісячна вартість послуги Starlink зросте з $60 до $75. Нова ціна діятиме для вашої підписки починаючи з 29.12.2022. Якщо ви не бажаєте продовжувати послугу, можете скасувати її в будь-який момент», — сказано в ньому.\nПри цьому раніше, в кінці серпня, 25 серпня 2022 року в Starlink знизив вартість послуг для українців зі $100 до $60 на місяць.\nТермінали дуже важливі для України — вони використовуться військовими, працівниками критичної інфраструктуру, залізничниками  і т.д.\nТак, наприклад недавно Україна отримала 1570 терміналів Starlink від Польщі. Їх планують встановити для налагодження звязку на звільнених територіях, а також у містах і селах, які відчують наслідки блекауту.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЗ початку повномасштабного вторгнення Україна отримала більше 20 тисяч терміналів Starlink. З них 5 тисяч Польщі.\nДовідка Highload: все, що ви хотіли знати про Starlink та боялися запитати\nЩо таке Starlink? Це інноваційний проєкт, який завдяки мережі супутників та спеціальному терміналу із супутниковою антеною забезпечує доступ до широкосмугового інтернету в будь-якій точці планети.\nХто може користуватися Starlink в Україні? Термінали Starlink можуть використовувати всі охочі українці на період воєнного стану.\nЯк підключитися до Starlink? Потрібен спеціальний користувацький термінал — він має вигляд супутникової антени. Термінали постачають в Україну з інструкціями зі встановлення та налаштування. Також інструкція є на сайті виробника.Насправді процес підключення — доволі простий. Треба приєднати антену до терміналу кабелем, який є у комплекті, а сам термінал підключити до електромережі. Потім встановити на свій смартфон чи планшет додаток Starlink із Google Play або AppStore. Дотримуючись інструкцій в додатку, ви можете приєднатися до супутникового інтернету.','2022-12-02 23:31:37','2022-12-02 23:31:37'),(44,'«Шахіди» можуть використовувати дані 2-GIS та «Яндекс» — дослідження','Игорь Шелудченко','Дрон-камікадзе іранського виробництва Shahed 136, який застосовується армією рф для авіаударів по території України, може використовувати дані застосунків  2-GIS та «Яндекс Карты и Навигатор». Про це повідомив DOU з посиланням на результати моніторингу громадської спілки «Асоціація відповідальних перевізників». \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗа даними асоціації, вишеназвані російські застосунки використовує кожен 7-й водій служб таксі та приватних авто.\n«Shahed 136 не керується оператором, а просто йде за заданим маршрутом і вражає ціль за заздалегідь заданими координатами. Тобто фактично 15% водіїв в режимі реального часу можуть опосередковано допомагати прокладати такі маршрути до цілей», — зазначає Олександр Дяченко, радник голови «Асоціації відповідальних перевізників» з питань законодавства.\nНаразі відомо, що Міністерство цифрової трансформації вже звернулось до корпорацій Google та Apple з проханням посприяти вирішенню ситуації.\nДо цього асоціація звернулась до РНБОУ, МВС, СБУ та інших державних установ щодо можливих загроз національній безпеці, повязаній з російськими застосунками.\nКрім того, а асоціації закликають й до більш активного інформування користувачів російських застосунків щодо можливих загроз.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\n«Водії служб таксі чи онлайн-сервіси виклику авто, а також кур’єрські служби як мінімум повинні провести інформаційну роботу зі своїми користувачами і працівниками, а як максимум — технічно заблокувати використання цих навігаторів. Ми готові надати усю допоміжну інформацію та підтримку», — заявли в асоціації.\n ','2022-12-02 23:32:13','2022-12-02 23:32:13'),(45,'Apple обмежила роботу AirDrop в Китаї напередодні масових протестів','Игорь Шелудченко','Американська корпорація Apple обмежила роботу головного інструменту обміну інформацією про протести в Китаї — технології передачі файлів Apple AirDrop. Про це повідомив BusinessInsider.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗміни включають обмеження часу, протягом якого користувач iPhone може використовувати налаштування «Все» для отримання контенту від будь-кого.  Тепер сервіс працює до 10 хвилин.\nRebelDrop\nApple AirDrop показав свою ефективність для організації протестів у Гонконгу у 2019 році. Цей інструмент використовувався протестуючими для поширення інформації про демонстрації та обходу «Великого китайського брандмауера».\nРаніше Apple повідомляла, що має намір розгорнути налаштування по всьому світу, щоб запобігти небажаному обміну файлами. Але поки обмеженння функції передачі данних залишаються ексклюзивними тільки для Китаю.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nПричини протестів\nПротести в Китаї розпочалися з місті Урумчі західного регіону Сіньцзян, де 24 листопада від пожежі загинуло 10 людей та ще як мінімум 9 отримали поранення. Протестуючі впевнені, що рятувальники не могли дістатися до людей через обмеження, направлені на стримування поширення пандемії коронавірусу. В результаті, люди залишилися заблокованими всередині приміщення, оскільки не мали права спускатися вниз.\nНевдовзі розпочалися протести й по іншим містам Китаю. Вони радикалізувалися, і громадяни закликали вже не стільки до перегляду пандемічних заходів, скільки до політичних свобод та відставки глави КНР, лідера Китайської комуністичної партії Сі Цзіньпіна.\nУ Apple в Китаї не все гладко\nАкції Apple за підсумками торгів на технологічній біржі Nasdaq подешевшали на 2,63%. Але це повязано вже з іншими протестами — на заводі Foxconn, найбільшому у світі заводі по збору iPhone. На ньому до початку протестів працювало понад 200 тисяч осіб.\nТак, на заводі відбулося массове розповсюдження коронавірусу, але керівництво вирішило не закривати підприємство на карантин, а просто посилити заходи. Ось як:\nпоселити робітників в гуртожитках поблизу заводу;\nзаборонити їм збиратися в окремих групах;\nзакрити їдальні, внаслідок чого почалися перебої з посавкою продуктів та харчуванням робітників;\nдобиратися до работи спеціальними машрутами, які прокладені за допомогою двохметрової огорожі. Повідомляється, що інколи робітники губилися в «лабіринті» та просто спали на вулиці.\nПовідомляється, що бунт на Foxconn може обійтися мінімум у 6 млн недороблених iPhone лінійки Pro. І це напередодні Нового Року, коли попит на цю продукцію тільки зростає.\nЕксперти називають нинішні протести самими значимими а массовими за останні 30 років — після подій на площі Тяньаньмень в 1989 році.','2022-12-02 23:32:49','2022-12-02 23:32:49'),(46,'Amazon скорочує HR-відділ завдяки розвитку штучного інтелекту','Игорь Шелудченко','Amazon розробляє технологію штучного інтелекту Automated Applicant Evaluation, яка покликана частково замінити функції HR-відділу. Про це повідомив Vox з посиланням на інформацію, представленном в конфіденційному документі компанії від жовтня 2021 року.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗгідно з ним, над технологією компанія працювала щонайменш останній рік (до жовтня 2021 року). Вона повинна буде визначити найоптимальнішу роботи для кандидатів, підготовувавши їх до співбесіди.\nТехнологія частково працює, знаходячи схожість між резюме нинішніх «хороших співробітників» Amazon і резюме претендентів на їх місця.\nТехнологія Automated Applicant Evaluation була розроблена і вперше протестована минулого року. Аналогічну технологію компанія вперше протестувала в середині 2010-х років, але припинила її використання через закладене в програмі «упереджене ставлення до жінок». \n«Модель забезпечує точність, порівнянну з точністю ручного процесу, і не має несприятливого впливу», — йдеться у конфіденційному документі.\nВперше технологію протестували на претендентах на посади медичних представників в Amazon, які працюють поза складською мережею компанії. Але з того часу вона використовувався для відбору претендентів на посади, починаючи від інженерів-розробників програмного забезпечення і до керівників технічних програм. Все це відкриває можливості для широкого використання технології в майбутньому.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nAmazon протягом багатьох років вкладала значні кошти у спроби автоматизувати різноманітні види роботи. У 2012 році компанія придбала компанію з робототехніки для складів під назвою Kiva, чиї роботи дещо полегшили роботу для складських робітників, але водночас збільшили темп та повторюваність роботи.\nНагадаємо, близько 2 тижнів тому стало відомо, що Amazon планує звільнити близько 10 тис. співробітників, які займають корпоративні та технологічні посади.\nЗвільнення в першу чергу торкнуться організації пристроїв Amazon, роздрібного підрозділу та HR-підрозділу. Заявлені звільнення становитимуть менше ніж 1% глобальної робочої сили Amazon і 3% корпоративних співробітників.','2022-12-02 23:33:23','2022-12-02 23:33:23'),(47,'Djinni назвала топ IT-напрямків з найбільшим стартовим ростом зарплат','Игорь Шелудченко','Команда сервісу по анонімному пошуку роботи Djinni проаналізувала, яка зараз є динаміка росту зарплат в українському IT у вакансіях по категоріям і досвіду.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗгідно з даними графіків, найбільший стартовий ріст зарплат (з/п кандидата без досвіду – з/п кандидата з досвідом роботи 1 рік) в таких напрямках:\nFlutter – +650% (мінімальна медіана зарплат кандидата без досвіду – $200, з 1 роком досвіду – $1,500);\nJava та SQL – +200% ($300-$900 та $500-$1500 відповідно);\nAndroid – +185% ($350-$1000);\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nLead,Python – +166% ($1500-$4000 та $300-$800 відповідно);\nScala – +160% ($1000-$2600);\nс++,Data Engineer, QA Automation – 150% ($1000-$2500, $1000-$2500, $400-$1000 відповідно).\nЗагалом в девеломпенті нижня медіана зарплат кандидатів без досвіду складає $350, верхня медіана – $800. Вже через рік нижня досягає –$850, а верхня – $2000. Кандидат з двохрічним досвідом роботи має зарплату $2000-$4000. При цьому спочатку ми маємо 86 кандидатів онлайн на одну вакансію, через рік – 10, а ще через рік – 1,9.\nНайбільший відсоток зменшення кількості кандидатів на одне місце (якщо дивитися на медіанну зарплат кандидатів без досвіду та на медіанну зарплат кандидатів з досвідом роботи в 1 рік) спостерігається в таких сферах:\nQA – 35,6 раз (з 821,5 до 23,7);\nC++ – в 28 раз (з 17,2 до 0,6) ;\nScala – в 20 раз (з 2 до 0,1);\nBusiness analyst – в 16 раз (з 49,8 до 3,1);\nDevOps – в 13,5 раза (з 39,3 до 2,9).\nНагадаємо, недавно Djinni назвав медіанну зарплату IT-спеціаліста в Україні в 2022 році.\nНайбільша медіанна зарплата у спеціалістів в Lead ($7500), Scala ($6500), Golang та Ruby (по $4500). Найменша – в Lead generation ($600), Recruiter, Support, Artist (по $1000).\n   ','2022-12-02 23:33:57','2022-12-02 23:33:57'),(48,'Маск пригрозив Apple та Google створенням «ілонфону»','Игорь Шелудченко','Новий власник Twitter Ілон Маск заявив, що у випадку блокування Twittter в AppStore та Google Play Market має намір «сворити альтернативний телефон». Про це він написав у себе в Twitter.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\n«Я звичайно сподіваюся, що до цього не дійде, але якщо не буде іншого виходу, зроблю альтернативний телефон», — підкреслив він.\nЦе повідомлення стало відповіддю на твіт консервативної політичної оглядачки та блогерки Елізабет Уіллер.\n«Якщо Apple і Google видалить Twitter, то Ілон Маск повинен виготовляти власний смартфон. Половина країни з радістю відмовилася б від упереджених, шпигунських iPhone і Android. Людина будує ракети на Марс, невже маленький смартфон повинен стати проблемою?», — написала вона.\n«Я — абсолютист свободи слова»\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nПодібні твіти зявилися не на пустому місці. Так, вже існує досить велика прірва між позицією Ілона Маска відносно модерації контенту та писаними правилами Apple та Google.\nКупівлі Twitter передувала критика платформи Ілоном Маском що та не дотримує «принципи свободи слова». Він же себе називає «абсолютистом свободи слова». Тут можна пригадати і недавнє розблокування аккаунту Дональда Трампа.\nБільше того, повідомляється, що Маск планує комерціалізувати на Twitter контент для дорослих аналогічно сайту Ony Fans. Джек Дорсі, екс-директор Twitter реалізовував більш жорстку політику модерації контенту, яка була зосереджена на «безпеці» користувачів, забороні розпалювання ненависті та насильства.\nТак, у Apple, наприклад, є досить детальні рекомендації для застосунків, і безпека залишається ключовим принципом.\n«Коли люди встановлюють програму з App Store, вони хочуть бути впевнені, що це безпечно — що програма не містить дратівливого або образливого контенту», — йдеться в першому правилі керівництва.\nТривожний дзвіночок\nНа минулому тижні Філ Шиллер, директор з маркетингу Apple, який очолює App Store, видалив свій обліковий запис у Twitter. Це було зроблено після того, як Ілон Маск поскаржився у Twitter на збори Apple, назвавши їх «прихованим 30-відсотковим податком в Інтернеті».\nЗвичайно, це ще нічого не значить. Але навколо Ілона Маска та Apple з Google вже є досить принциповий конфлікт і, враховуючи «вибуховий» темперамент нового директора Twitter, можна готуватися навіть до появи «Маскфону».\nНагадаємо, не так давно Ілон Маск без поясненнь тимчасово закрив офіси Twitter. Раніше він висунув новий ультиматум співробітникам компанії: вони повинні або погодитися на ненормований робочий день з високою інтенсивністю роботи («Прохідним балом буде вважатися тільки виключна робота»), або ж звільнитися.\n ','2022-12-02 23:34:32','2022-12-02 23:34:32'),(49,'Sony проговорилась офіційним органам про дату релізу Playstation 6','Игорь Шелудченко','В мережі з’явилася приблизна дата релізу Sony Playstation 6. Відповідні дати були опубліковані на офіційному саті парламенту Великобританії, повідомляє Hypebeast.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nДокументи опублікувало Управління конкурентних ринків Великобританії в рамках розслідування про злиття компаній Microsoft і Activision.\nЗгідно з цією інформацією, PS6 повинна вийти або наприкінці 2027 року, або в 2028 році.\n«У публічних коментарях Microsoft заявила, що планує пропонувати Call of Duty на PlayStation лише «доки це має сенс». Період до 2027 року — або якийсь інший (можливо, більш короткий) термін, який Microsoft в односторонньому порядку визначає як такий, що має сенс для Microsoft, — абсолютно неадекватний. На той час, коли Sony випустить наступне покоління своєї консолі PlayStation, вона втратить доступ до Call of Duty та інших ігор Activision, що зробить її надзвичайно вразливою», – йдеться у аргументі компанії Sony .\nТобто, Sony стверджує, що серія Call of Duty у рамках ранньої пропозиції Microsoft могла б стати ексклюзивом останньої вже у 2027 році При цьому компанія каже, що на момент виходу нової PlayStation це вже відбудеться. Тобто, мабуть, PlayStation 6 вийде в кінці 2027 року або ж не раніше 2028 року.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nТак, в рамках судової справа Sony намагається запобігти придбанню Activision-Blizzard за $68,7 млрд США для Microsoft Xbox. Це може дати Xbox, такі ігри як Overwatch, Diablo і World of Warcraft. Проте головною проблемою для Sony є Call of Duty, оскільки гра має настільки велику базу шанувальників, що може вплинути на конкуренцію між ігровими приставками.','2022-12-02 23:35:06','2022-12-02 23:35:06'),(50,'В Раді планують автоматизувати подачу звітності для ФОПів-айтівців','Игорь Шелудченко','В Верховній Раді розглядають можливість спрощення системи оподаткування для ФОПів третьої групи шляхом автоматизації подання звітності та сплати податків. Відповідний законопроект «Про внесення змін до Податкового кодексу України та деяких законодавчих актів України щодо особливого режиму оподаткування окремих платників третьої групи єдиного податку» зареєстрований під №8226.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТекст законопроекту на сайті парламенту поки недоступний, поте деякі подробиці вже відомі.\nДокумент передбачає повну автоматизацію подання податкової звітності та сплати податків, розповів один з авторів законопроекту, народний депутат від фракції «Голос» Ярослав Желєзняк.\nSmart-ФОП\nSmart-ФОП – це альтернативна назва ініціативи, представлена нардепом у презентації законопроекту. Його реалізація дозволить ІТ-фахівцям, SMM-менеджерам, дизайнерам та іншим ФОП 3-ї групи без найманих працівників обрати спрощену систему з податковим агентом-банком.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nЯк це працює?\nДля того, щоб звільнити себе від потреби заповнювати декларації, потрібно подати онлайн-заявку для переходу на нову систему через «Дію» та відкрити спеціальний підприємницький\nрахунок в банку. Після цього банк зробить усе необхідне:\nутримає 5% єдиного податку з усіх надходжень;\nутримає мінімальний ЄСВ;\nнадасть доступ ДПС до даних про зарахування кошті.\nЯк підкреслив голова Міністерства цифрової трансформації Михайло Федоров, це послуга тільки для тих, хто готовий працювати з безготівковою формою розрахунків.\n«Ідея точно спростить роботу великій кількості ІТ-шників, маркетологів, консультантів чи їх бухгалтерам. Ну і податковій теж», – резюмував один автор законопроекту Ярослав Желєзняк.\nДля того, щоб закон вступив в силу необхідно прийняття законопроекту в першому, потім в другому читанні та підписання Президентом України Володимиром Зеленським.','2022-12-02 23:35:41','2022-12-02 23:35:41'),(51,'Українські програмісти запустили мобільний застосунок «Світло»','Игорь Шелудченко','Українські розробники Іван Денісов та Андрій Захлюпаний запустили мобільний застосунок «Світло», за допомогою якого можна дізнатись, чи є світло в Києві та Київській області. Про це повідомив AIN.ua.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nВ застосунку є можливість додавати нові місця та моніторити локації з електроенергією (або ж дізнатися де її немає). Дані додаток отримує з офіційних графіків ДТЕК.\nНа даний момент застосунок доступний лише для пристроїв на iOS. Трохи згодом сервіс будет й на Android.\nДодаток показує дані по Києву та області. Також в ньому можна додавати важливі для себе локації і моніторити, чи є там світло.\n«Ідея додатку була проста: створити спосіб, у який можна дивитись, де є світло, де немає. Згодом до додатку додали ще й таймер: через який проміжок часу орієнтовно подадуть живлення на ту чи іншу локацію», – за результатами спілкування з розробниками підсумовує  AIN.ua.\nДані застосунок бере з графіків Yasno по API. Наразі реалізовані такі функції:\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nсписок з кількома локаціями;\nтаймер до відключення/включення;\nповний графік відключень;\nофлайн-перегляд збережених даних.\nВ подальшому розробники планують додати в застосунок сповіщення про екстренні та аварійні відключення, віджет на головний екран.\nВ планах – запустити сервіс і у інших містах України.\nСкачати додаток можна за посиланням.\nРозробники також запустили у застосунку Telegram-чат із користувачами.\n ','2022-12-02 23:36:16','2022-12-02 23:36:16'),(52,'Нейромережа Stable Diffusion випустила масштабний апдейт','Игорь Шелудченко','Нейромережа Stable Diffusion, яка генерує зображення по текстовому опису, випустила нове масштабне оновлення. Про це говориться на офіційному сайті компанії-розробника Stability AI.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nДля запуску нових моделей у поточних програмних збірках Stable Diffusion, таких як Automatic1111, NMKD, InvokeAi розробникам необхідно внести невеликі редагування в код. Або ж почекати оновлених версій програмного забезпечення, яке скоро повинно бути.\nНові моделі перетворення тексту на зображення\nВ Stable Diffusion 2.0 зявився новий текстовий кодувальник OpenCLIP, розроблений LAION. Він значно покращує якість генерованих зображень. Тепер у зображеннь з роздільною здатністю 768×768 пікселів не повинна ламатися композиція. Також можна безпроблемно генерувати зображення і з роздільною здатністю 512×512.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nМоделі генеруються на підмножинні набору даних LAION-5B , який потім додатково фільтрується для видалення “контенту для дорослих” за допомогою фільтра LAION NSFW.\nМодель-апскейлер для зображеннь 2048х2048\nРозробники додали в Stable Diffusion 2.0 модельа-апскейлер, яка підвищує роздільну здатність зображень у 4 рази. Таким чином, в поєднанні з новими моделями перетворення тексту на зображення тепер можна генерувати зображення з роздільною здатністю 2048х2048.\nРоспізнавання глибини на зображеннях\nВ новій версії програми тепер є модель depth2img з окремим шаром розпізнавання глибини зображення. Дозволяє краще переносити і зберігати глибину в методах img2img та inpainting. Це знадобиться при генерації скетчів та фотографій.\nDepth2img визначає глибину вхідного зображення (використовуючи існуючу модель), а потім генерує нові зображення, використовуючи як текст, так і інформацію про глибину.\nНова Inpainting модель\nНова модель в версії 2.0 зберігати форми та деталі вихідного зображення при перемальовці.\nРозробники обіцяють випустити моделі в Stability AI API Platform (platform.stability.ai) і DreamStudio в найближчі кілька днів.\nТакож для отримання більш детальної інформації про доступ до моделі компанія просить ознайомитись із примітками на GitHub.','2022-12-02 23:36:21','2022-12-02 23:36:21'),(53,'Stroom.digital створив мапу закладів зі світлом та інтернетом','Игорь Шелудченко','Команда маркетингової агенції Stroom.digital створили інтерактивну мапу, де можна знайти заклади зі світлом та інтернетом. На даний момент доступна мапа закладів Рівного, Львову та Києва.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nНа мапі можна знайти коворкінги, кафе та ресторани, які можуть надавати доступи до розеток, мають Wi-fi, генератори, тощо. Також на карті показані заклади, які в укритті чи працюють в часі повітряної тривоги.\nМапа оновлюється самими користувачами. Задля того, щоб повідомити про заклади з генератором, потрібно заповнити окрему форму або ж повідомити на e-mail компанії.\nStroom Digital – агенція, яка надає маркетингові послуги бізнесу й організаціям. Вона проводить дослідження, розробляє стратегії, комплексний SMM, налаштовує таргетинг, будує рекламні кампанії і т.д.','2022-12-02 23:36:27','2022-12-02 23:36:27'),(54,'Акції Zoom обвалилися на 90% з пікових показників','Игорь Шелудченко','Акції Zoom Video Communications Inc, провідної технологічної компанії, обвалилися на 90% в порівнянні зі своїми піковими показниками в жовтні. Про це повідомив Reuters.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗа результатами торгів у вівторок акції впали приблизно на 10%, коли компанія опулікувала свій звіт про діяльність в липні-вересні. Він показав найповільніше зростання за квартал.\nКрім того, після його публікації одразу шість великих брокерів змінили прогнози річних цін компанії.\nПослаблення економічного впливу коронавірусу\nСеред обєктивних причин погіршення економічних показників Zoom – послаблення впливу коронавірусу на світову економіку.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nНа початку «коронавірусної кризи» Zoom практично ж відразу зайняв провідні позиції. Його акції, як акції інших технологічних компаній, почали різко зростати.\nНаразі ж економічні проблеми не тільки у Zoom, але й Meta, Alphabet та Apple, які активно скорочують економічні витрати та проводять оптимізацію персоналу.\nСтабілізаційні інвестиції \nКомпанія була змушена інвестувати солідні кошти в те, щоб не втратити свою долю ринку. Це, на думку аналітиків, дуже сильно вплинуло на її економічні показники.\n«У Zoom є фундаментальний недолік — йому довелося витрачати значні кошти, щоб утримати частку ринку. Витрати, щоб триматися, а не рости, ніколи не є стратегічно перспективними, і це було ознакою неприємностей попереду», – заявив економічний аналітик Hargreaves Lansdown equity Софі Лунд-Єйтс.\nТак, операційні витрати компанії зросли на 56% у третьому кварталі, оскільки вона витрачала більше на маркетинг. Скоригована операційна маржа скоротилася до 34,6%.\nЕксперти відмічають, що відновити економічний ріст Zoom може допомогти придбання інших компаній або продуктів, які розширять сферу ринкового впливу.\nНаразі Zoom зосередитись на розробці таких продуктів, як сервуісі хмарних дзвінків Zoom Phone і конференц-хостингу Zoom Rooms.\nРіст конкурентів\nНа початку пандемії Zoom був ледве не єдиним інструментом проведення відеконференцій. Зараз на ринку досить багато конкурентів. Так, в жовтні про партнерство оголисили Cisco та Microsoft Corp., а в кінці вересня стало відомо про інтеграцію Webex для Salesforce.\nЩо б говорити, яко навіть Ілон Маск анонсував в Twitter створення системи відеодзвінків.','2022-12-02 23:37:03','2022-12-02 23:37:03'),(55,'Інтернет-трафік поступово відновлюється після падіння на 65%','Игорь Шелудченко','Внаслідок ракетних ударів по інфраструктурі ввечері 23 листопада інтернет в Україні впав до 35%. Про падіння трафіку повідомив NetBlocks.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nНаразі завдяки відновленню електропостачання в деяких областях України цей показник покращився, проте про конкретні ціфри нічого не відомо.\n«Оперативні показники показують, що звязок зараз складає 35% від попередніх рівнів», – сказано в повідомленні.\nNetBlocks повідомив, що дані мережі в реальному часі показують оночасні перебої в підключенні, дуже схожі на ті, які трапилися 15 листопада.\nПри цьому 15 листопада, як вже писав Highload, інтернет-трафік впав до 67% від норми.\nОфіс Президента наразі повідомив про заживлення електропостачання у Львівській, Вінницький, Кіровоградській, Дніпропетровській, Харківській, Миколаївській, Одеській, Запорізькій, Чернівецькій, Чернігівській, Хмельницькій, Волинській, Івано-Франківській, Рівненській, Київській областях та місті Київ.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nУ Львівській області електропостачання підключено на 90%.','2022-12-02 23:37:08','2022-12-02 23:37:08'),(56,'Засновник збанкрутілої FTX володіє часткою в Twitter на $100 млн','Игорь Шелудченко','Засновник збанкрутілої криптовалютної біржі FTX Сем Бенкман-Фрід володіє часткою в Twitter Ілона Маска на сумму в $100 млн. Про це повідомив Insider з посиланням на звіт Semafor.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк повідомляє видання, після офіційної пропозиції щодо покупки мікроблогу Ілон Маск відправив Сему Бенкману-Фріду текстове повідомлення з пропозицією перевести свої публічні акції Twitter в частку в компанії.\nУ балансовому звіті FTX за цей місяць акції Twitter були вказані як «неліквідні» активи.\nДо цього засновник FTX висловив свою підтримку планам Маска купити мікроблог, але сказав, що не зможе інвестувати нові гроші у Twitter. Він заявив, що має акції на суму близько $100 млн, які він може вкласти в угоду.\nПри цьому сам Сем Бенкман-Фрід розглядав можливість покупки Twitter і був готовий внести від $8 до $15 млрд.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nНагадаємо, менш ніж 2 тижні тому стало відомо про офіційне банкрутство FTX, другої в світі за величиною криптовалютної біржі.\nЦя подія стала логічним завершенням тижневої турбулентності на криптовалютному ринку, викликанному бажанням врятувати FTX.\nНевдовзі після цього стало відомо про зникнення з рахунків FTX мінімум $1 млрд коштів клієнтів. \nЗазначимо, що про покупку Twitter CEO SpaceX та Tesla Ілоном Маском стало відомо ще у квітні. Сума операції склала $44 млрд із розрахунку $54,2 за акцію. Насамперед новий власник почав скорочення співробітників та бюджету компанії.\nНаразі кількість працівників Twitter скоротилася в 2-3 рази. Цьому й посприяв недавній ультиматум нового власника, Так, Ілон Маск запропонував співробітникам компанії обрати: понаднормову працю з високою інтенсивністю або звільнення.','2022-12-02 23:37:44','2022-12-02 23:37:44'),(57,'ЗМІ: ISsoft з офісом у Львові заморозила перегляд зарплат','Игорь Шелудченко','Американська аутсорс-компанія Coherent Solutions, в яку входить підрозділ розробки ISsoft (має офіс у Львові) вирішила заморозити перегляд розміру заробітніх плат до 31 березня 2023 року.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПро це співробітників повідомив CEO та засновник компанії Ігор Епштейн, повідомило dev.by джерело в компанії.\nУ зверненні до співробітників Ігор Епштейн пояснив, що компанія заморозила зарплати виходячи з ситуації, що склалася. Серед причин, що вплинули на це рішення, — велика кількість фахівців на ринку, зростання витрат, проблеми з новими замовленнями.\nВсі підвищення зарплат, які обговорювалися або планувалися в період заморозки зсуваються на 6 місяців вперед (наприклад, якщо співробітник розраховував на підвищення зарплати у грудні, на нього чекає перенесення на червень).\nCEO запевнив співробітників, що у разі покращення економічної ситуації компанія перегляне рішення про заморожування зарплат. Але зараз керівництво не бачить до цього передумов.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nПроте деякі виплати компанія вирішили не заморожувати:\nсоціальні виплати;\nбонуси при прийомі на роботу;\nбонуси під час переїзду в іншу локацію;\nкомпенсації при легалізації;\nбонуси за керування групою;\nбонуси за участь в асесментах та інтерв’ю претендентів,\nвиплати співробітникам із зарплатою нижче за верхню межу зарплати джуна у своїй локації;\nвиплати працівників, які перейшли з неповного на повний робочий день.','2022-12-02 23:38:19','2022-12-02 23:38:19'),(58,'Криптобіржа Genesis шукає $1 млрд для уникнення банкрутства','Игорь Шелудченко','Брокерська криптовалютна компанія Genesis попередила потенційних інвесторів про можливість банкрутства в разі, якщо пошук коштів для кредитного підрозділу завершиться невдачею. Про це повідомив  Bloomberg з посиланням на інформоване джерело.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nОстанні дні компанія провела в пошуку щонайменше $1 млрд капітал. Були переговори з криптобіржею Binance, але поки про конкретику рано говорити.\nПошук фінансування повязаний з нестачею ліквідності у кредитора після раптового краху FTX, однієї з найбільших у світі криптовалютних бірж.\n«У нас немає планів оголосити банкрутство найближчим часом. Наша мета – врегулювати поточну ситуацію на основі консенсусу без подання заяви про банкрутство. Genesis продовжує вести конструктивні переговори із кредиторами», – заявив представник Genesis.\nКомпанія є контрагентом багатьох криптопроєктів. Її проблеми, зокрема, негативно позначилися на бізнесі мільярдерів братів Вінклвос, власників криптобіржі Gemini.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nНагадаємо, 11 листопада FTX, друга в світі за величиною криптовалютна біржа офіційно заявила про банкрутство. \nВ повідомленні сказано, що тепер мета FTX полягає в тому, щоб «почати впорядкований процес перевірки та монетизації активів на благо всіх зацікавлених сторін у всьому світі».\nЦя подія стала логічним завершенням тижневої турбулентності на криптовалютному ринку, викликанному бажанням врятувати FTX.\nПізніше Reuters повідомив, що з рахунків біржі зникли більш ніж $1 млрд після переведення $10 млрд до торгової компанії Bankman-Fried Alameda Research засновника FTX Сема Бенкмана-Фріда.','2022-12-02 23:38:56','2022-12-02 23:38:56'),(59,'Відомий хакер похвалив «реформи» Ілона Маска і влаштувався на стажування в Twitter','Игорь Шелудченко','Відомий хакер Джордж Хотц заявив, що приступив до 12-тижневого стажування у Twitter. Про це він повідомив у своєму статусі.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nМетою стажування буде виправлення функції пошуку та інших інтернет-функцій застосунку.\nТак, все почалося після того, як Джордж Хотц висловивився в підтримку «хардкорного ультиматума» Ілона Маска для співробітників компанії, в якому пропонувалося обрати: понаднормову працю з високою інтенсивністю або звільнення.\n«Таке відношення веде до великих справ. Нехай усі, хто не хоче величі, піде», – повідомив він.\nПотім він написав, що хоче пройти 12-тижневу практику в Twitter.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\n«Йдеться не про накопичення капіталу в мертвому світі, а про те, щоб зробити світ живим», – підкреслив він.\nПід цим твітом йому відповів Ілон Маск: «Звичайно, давай поговоримо». Невдовзі хакер написав, що його таки взяли на стажування.\nВідмітимо, що наприкінці минулого місяця Джордж Хотц пішов «у вільне плавання», залишивши стартап з надання допомоги водієві Comma.ai.\nНовина про стажування Джорджа Хотца з’явилася на фоні повідомленнь про старт найму інженерів в Twitter. Цьому передувало звільнення майже двох третин персоналу одразу після покупки компанії Ілоном Маском. А також після славнозвістного ультиматуму нового власника.\nДжордж Хотц – один з найпопулярніших хакерів у медійному просторі. Відомий широкому загалу завдяки роботі по розблокуванню iPhone та хаку Sony Playstation 3 за допомогою калькулятора техаського типу.','2022-12-02 23:39:30','2022-12-02 23:39:30'),(60,'Стартап із засновниками-росіянами позбавили $1 млн інвестицій. І ось чому','Игорь Шелудченко','Організатори міжнародного конкурсу стартапів Slush 100 відкликали перемогу Immigram – імміграційної платформи з російськими засновниками після критики європейської IT-спільноти. Про це заявив Slush у Twitter.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗ перемогою в конкурсі скасовано $1 млн вкладень від провідних інвесторів — Accel, General Catalyst, Lightspeed Venture Partners, NEA та Northzone.\n«На фоні нової інформації про масштаби діяльності переможця конкурсу Slush 100 Pitching Competition в Росії Slush прийняв рішення відкликати його перемогу», — йдеться у заяві організаторів конкурсу в понеділок.\nДещо раніше про зняття своєї кандидатури заявив і сам Immigram.\nЧим займається Immigram\nImmigram була заснована у 2019 році двома росіянами — Анастасією Миролюбовою та Михайлом Шароновим як платформа, яка допомагає технічним фахівцям із понад 10 країн, включаючи росію, Україну, білорусь, Індію та США подати заявку на отримання британської візи.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nВ обох співзасновників російські паспорти, вони переїхали до Великобританії в 2016 році.\nПри цьому компанія заявляє, що від фахівців зі Східної Європи надходить невеликий відсоток заявок.\nТакож Immigram заявила, що «не підтримує вторгнення Росії в Україну», а також, що допомогла купити для України машину швидкої допомоги і має намір пожертвувати $100 тис. некомерційним організаціям, які підтримують українських біженців.\nСуть критики\nУ правилах конкурсу зазначено, що російські компанії (що базуються в Росії) не можуть брати участь у конкурсі. Чи є обмеження для компаній із російськими засновниками — невідомо. Більше того, межа між «російськими компаніями» і «компаніями не в Росії, але зі 100% співробітників-росіян» досить умовна.\nІ хоча трохи вище засновники Immigram зазначали, що заявники зі Східної Європи — меншість, AIN.ua показує інтерв’ю Анастасії Миролюбової для Forbes Росія, де вона розповідає, що кількість клієнтів, які подали заявки на переїзд, збільшилася втричі, причому 65% з них подали росіяни.\nКрім того, AIN.ua знайшов на сайті для пошуку роботи hh.ru вакансії від компанії, яка шукала співробітників в Москві.\n  В Immigram відповіли, що компанія наймає фахівців у Росії з умовою, що вони переїдуть в іншу країну — Грузію, Вірменію чи Великобританію і т.д.\nЗалишається незрозумілим, чи є в компанії співробітники, що працюють в Росії. Так, у самій компанії стверджують, що ні. А старший юрист Movens Capital Ярослав Кремпович твердить, що є.\n«Immigram, програмне агентство зі 100% російською командою, деякі з яких все ще живуть в Росії, активно допомагає росіянам у складних імміграційних процедурах для пом’якшення наслідків економічних санкцій», — заявив він.\nСанкції та «туман війни»\nAIN.ua зазначає, що значна частина успіху компанії пов’язана з початком війни і дією санкцій, які змусили росіян шукати нові способи заробітку.\n«Мільйони українців були змушені тікати з країни, а тисячі підприємців приєдналися до збройних сил через окупацію своїх міст. Але по сусідству десятки тисяч технічних працівників залишили Росію, оскільки західні санкції починають впливати на галузь», — наголошує AIN.ua.\nЄ й інший бік питання — європейці, зокрема німці, страждають на дефіцит IT-фахівців і іноді навіть прямо заявляють, що готові приймати на роботу росіян, і створюють для цього необхідні умови. Immigram наводить аналогічні дані, посилаючись на прогноз консалтингової фірми Korn Ferry: через «нестачу талантів» світова економіка ризикує недорахуватися 8,5 трильйона доларів до 2030 року.\n«Slush пішов та дав мільйон євро російській компанії, яка допомагає росіянам обійти санкції. (Глава Slush) Еріка Саволайнен, тобі не соромно?» – написав депутат парламенту Фінляндії Мікко Карна\nТакож Immigram не приховує, що працював зі співробітниками російських IT-компаній: у презентації для Slush, з якою ознайомилася «Медуза», вказані логотипи «Яндекса» та онлайн-кінотеатру Okko (належить «Сбербанку»). На слайді вони поряд з Apple, Facebook, Google та Amazon згадуються у списку «технологічних топ-компаній» зі «щасливими клієнтами».\nТак чи інакше, мотиви участі російської компанії та європейського журі під час виборів компанії-переможця зрозумілі. «Туман війни» лежить у мотиваційній частині рішення позбавити російську компанію компанію із засновниками-росіянами перемоги у конкурсі та $1 млн інвестицій. Організатори у відповідь на критику заявляли, що проаналізують ситуацію, але жодних нових подробиць не повідомили.\nImmigram же у своєму повідомленні написав, що «підтримуватиме Україну і будуватиме компанію для мільйонів талановитих людей, які хочуть вільно пересуватися світом».\nРазом з тим, не варто забувати, що Slush — це великий майданчик для того, щоб заявити про себе і привернути увагу інвесторів навіть без перемоги в конкурсі. Тим більше, це були б не перші інвестиції після 24 лютого. У квітні 2022 року, на другому місяці повномасштабної війни, стартап отримав $500 000 в рамках раунду фінансування під керівництвом Xploration Capital.','2022-12-02 23:39:36','2022-12-02 23:39:36'),(61,'EPAM University оголосив прийом на безкоштовний курс по .NET','Игорь Шелудченко','EPAM University оголосив прийом на безкоштовний курс по .NET  – програму підготовки .NET Self-Paced Program в форматі самостійного навчання. Про це йде мова в повідомленні на офіційному сайті EPAM.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nКурс безкоштовний, складається з навчальних матеріалів та практичних завдань для самоконтролю. За бажанням учасники курсу можуть спілкуватися між собою та обговорювати курс на платформі Discord.\nТакож курс доступний англійською мовою.\nEPAM після успішного проходження програми обіцяє видати сертифікат та рекомендовані курси для подальшого опанування професії.\nЗареєструватися можна за посиланням.','2022-12-02 23:40:11','2022-12-02 23:40:11'),(62,'Конкурент GitHub Copilot закрився через слабкий штучний інтелект','Игорь Шелудченко','Kite, сервіс для допомоги розробникам в написанні коду припинив роботу. «Прощальний лист» розмістив на головній сторінці офіційного сайту засновник проекту Адам Сміт.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nКоманда Kite заявила, що більше не буде підтримувати програмне забезпечення.\nВ листі виділяються дві причини закриття проекту: слабкий штучний інтелект та відсутність монетизації.\nСлабкий штучний інтелект\nРозробники Kite заявили, що вони розробили передовий штучний інтелект, проте технічний рівень в коді для машинного навчання недостатньо хороший. Аналогічні проблеми, на думку розробників, є й у Copilot.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\n«Станом на кінець 2022 року Copilot подає великі надії, але він ще має пройти довгий шлях», – так Kite похвалив свого конкурента.\nІнша проблема – неможливість считування сучасними моделями структури коду. Створення потрібного інструменту на даний момент може коштувати $100 млн, і ніхто ще не намагався це робити.\nМонетизація\nKite побудував бізнес в такому порядку: створення команди, потім продукту, потім дистрибуція, а на сам кінець – монетизація.\n«Ми досягли дуже хороших результатів і збільшили нашу базу користувачів до 500 000 активних розробників на місяць при майже нульових витратах на маркетинг. Тоді наш продукт не приносив прибутку. Наші 500 тисяч розробників не платили», – підкреслює компанія.\nАле як заявляє команда Kite, розробники не платять за інструменти, а їх менеджери готові платити більше за конкретні можливості, наприклад за пришвидшення праці робітників на 18%. Функція написання коду не викликало особливого резонансу.\nНагадаємо, недавно веб-сервіс Github представив нову експериментальну функцію в Copilot, яка забезпечує можливість написання коду голосом.','2022-12-02 23:40:46','2022-12-02 23:40:46'),(63,'«Не бачу причин для повернення»: Трамп не оцінив розблокування в Twitter від Ілона Маска','Игорь Шелудченко','Президент США Дональд Трамп не оцінив розблокування в Twitter та запевнив, що не планує туди повертатися. Про це він заявив під час з’їзду Коаліції єврейських республіканців, повідомляє Reuters.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n«Я не бачу для цього жодних причин», – так відповів політик на запитання про можливість повернення в соцмережу.\nДональд Трамп відмітив, що не хоче повертатися в Twitter через засилля фейкових аккаунтів та падіння залучення користувачів.\nНатомість він запропонував приєднатися до власної соціальної мережі (TRUTH Social) тому що «в ній зручніше за Twitter» та там «наймовірне охоплення користувачів».\nРазом з тим Дональд Трамп позитивно оцінив придбання Twitter Ілоном Маском, заявивши, що останній завжди був йому симпатичний.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nВ свою чергу, Ілон Маск встиг відреагувати на слова Дональда Трампа, опублікувавши тематичний мем в Twitter.\nAnd lead us not into temptation … pic.twitter.com/8qNOXzwXS9\n— Elon Musk (@elonmusk) November 21, 2022\nНа днях Ілон Маск створив голосування в Twitter, де користувачі повинні були вирішити, чи треба розблоковувати в Twitter аккаунт Дональда Трампа. За розблокування проголосував 51,8% користувачів.\nЗа підсумками голосування Ілон Маск розблокував аккаунт Трампа.\nЕкс-президента заблокували в соціальній мережі в 2021 році, всього через 2 після того як його прихильники увірвалися до Капітолію. Причина – заклики до насилля та систематичне поширення дезінформації.\nТакож Дональда Трампа заблокували в Facebook, Instagram, Reddit, Discord, TikTok, Twitch, Snapchat та YouTube.\nУ відповідь на це він заявив про створення власної соціальної мережі. В результатів 21 лютого 2022 року була запущена TRUTH Social – соціальна мережа, в основі якої модифікована версія вільного програмного забезпечення з відкритим вихідним кодом Mastodon.','2022-12-02 23:41:21','2022-12-02 23:41:21'),(64,'IT-компанії Німеччини через дефіцит чекають спеціалістів з рф та білорусі. Але не з України','Игорь Шелудченко','IT-компанії Німеччини планують цілеспрямовано після перевірки державними органами на благонадійність залучати спеціалістів з рф та білорусі. Про це йде мова в опитуванні німецьких фірм, які опублікувала Асоціація цифрової промисловості, передає Deutsche Welle.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nСтуденти Німеччини кидають навчання в університетах\nУ Німеччині різко загострився дефіцит IT-фахівців. Підприємства з різних галузей не можуть знайти айтішників на 137 000 вакансій. На пошук відповідного співробітника йде в середньому 7 місяців.\nПричина цього — ріст попиту при дефіциті кадрів.\n«Більше половини студентів, які вивчають у німецьких вузах інформатику, не витримують високих вимог і переривають навчання. До того ж ось уже два роки падає кількість тих учнів, які вступили на факультети даного профілю», — сказано в дослідженні.\nТому асоціація вважає, що немає іншого виходу, ніж залучати спеціалістів з інших картин.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЧому не з України?\nПрезидент Bitkom Ахім Берг вважає, що українських спеціалістів не варто переманювати їдо Німеччини, оскільки це послабить Україну.\nЗамість цього асоціація пропонує підтримувати наших спеціалістів: «по-партнерськи стабілізувати українські IT-компанії», «утримати їх у цифрових ланцюжках створення доданої вартості» і т.д.\nУ ході опитування 25% фірм повідомили, що цілком допускають заповнення вакансій айтішниками з росії та білорусі. Ще 11% —після 24 лютого намагалися найняти IT-фахівців із цих двох країн, але працевлаштуванню завадили бюрократичні перепони. 1% компаній взяв на роботу в свої підрозділи росіян та білорусів.\n16% зазначили, що не хотіли б наймати айтішників із росії та білорусі, оскільки «у нинішній ситуації стурбовані питаннями безпеки». 18% відповіли «ні», оскільки вважають, що прийом їх на роботу вимагав би надмірних адміністративних зусиль. Ще 26% сказали, що, не зацікавлені в іноземних IT-фахівцях.\nПри цьому треба відмитити, що з закликом переманювати айтішників цих двох країн асоціація вже виступала раніше.\n«Якщо ми візьмемо до себе IT-фахівців із росії та білорусі, це відчутно послабить агресора та зміцнить економіку Німеччини», — заявив тоді Ахім Берг.\nАле поки цей процес йде вкрай повільно та важко. Поки тільки мінимум висококваліфікованих росіян та білорусів висловив бажання працевлаштуватися у Німеччіні.','2022-12-02 23:41:56','2022-12-02 23:41:56'),(65,'Арештовано творця культового Sonic The Hedgenog','Игорь Шелудченко','Розробник легендарної гри Sonic на Sega Юдзі Нака був арештований окружною прокуратурою Токіо за звинуваченням в інсайдерській торгівлі. Про це повідомив Financial Times.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nВ заяві прокуратури стверджується, що Юдзі Нака, який працював в компанії Square Enix, в 2020 році купив акції ігрової студії Aiming на суму 2,8 млн ієн ($20 тис.).\nЧерез пару тижнів Square оголосила, що працюватиме з Aiming над розробкою популярної серії мобільних ігор Dragon Quest. Правоохоронці стверджують, що розробник знав про угоду.\nПісля оголошення угоди акції виросли. В липні, коли було випущено гру, вони досягли рекордного максимуму. Таким чином, Юдзі Нака отримав теоретичний прибуток в розмірі 250% ( $30 тис. при $20 тис. інвестицій). Прокурори не повідомили, чи відомо їм щось про те, чи продав розробник свої акції.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nМоже, все не так просто?\nАрешту передував конфлікт Юдзі Нака з компанією Square Enix. Square Enix, треба сказати, люб’язно передала всю інформацію по справі правоохоронцям.\nРозробник керував роботою над грою Balan Wonderworld. Боси компанії наполягали на її випуску, сам же розробник стверджував, що вона не готова.\nВ результаті, гру випустили в 2021 році і вона зібрала шквал негативних відгуків.\nЮдзі Нака назвав Square Enix компанією, яка «не цінує ігор чи фанатів ігор». У відповідь вона його звільнила. Потім він подав до суду за незаконне звільнення.','2022-12-02 23:42:01','2022-12-02 23:42:01'),(66,'Якщо хочете стати крутим фронтендником, клонуйте ці сайти: 17 найкращих прикладів','Оленка Пилипчак\nРедактор у Highload','Навіщо клонувати вебсайти? Якщо сайт завантажується довше, ніж 2 секунди, більшість користувачів не будуть чекати: вони просто закриють вкладку. Не варто недооцінювати дизайн: він має таке ж значення, як і програмування інтерфейсу, що виконується у фоновому режимі.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nCoders Hub — це інтернет-спільнота для ентузіастів технологій і програмістів. Сьогодні вони діляться своїми порадами щодо того, які сайти варто клонувати, щоб отримати крутий досвід і мати гарне портфоліо.\nПередаємо їм слово.\nСаме розробники перетворюють професійний дизайн у сайт, що працює. Це дуже важлива частина роботи, тож, якщо ви хочете підвищити свою кваліфікацію — цю навичку варто вдосконалювати. \nКлонуючи сайти, ви отримуєте важливий досвід. Тому намагайтесь зробити дублі якомога ближче до оригінала. Спробуйте відтворити меню сайтів, додайте адаптивний дизайн, мобільну навігацію та сітки.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nОсь список сайтів, з якими варто попрацювати. Вони схожі, але в той же час дозволять відтворити різні концепції дизайну. Наприклад, більшість з них має:\nвеликі банери на домашній сторінці;\nвеликі блоки;\nреверсивні стовпці сітки;\nповне або половинне меню;\n«липке» або абсолютне позиціонування навігації;\nгалереї;\nменю, що випадає / «акордеони»;\nдругорядну анімацію, наприклад, ефект згасання;\nдва стовпці сітки;\nадаптивний дизайн.\n1\nNetflix\nЯкщо ви авторизувались на сайті, то побачите досить простий дизайн: горизонтальні ряди та галереї з великим банером.\n2\n Hulu \nПісля входу на сайт, ви побачите схожу на Netflix картину. Тут є і великий банер, і основні рядки з відео чи TV-шоу. \n3\nApple\nОсь це хороший приклад дизайну з великими блоками. Його легко перетворити на зручний сайт. Він не перевантажений, інтуїтивно зрозумілий та досить простий. \n4\n Airbnb\nAirbnb — просто прекрасний сайт. Спробуйте розкласти цей дизайн на менші компоненти і побачите, що це поєднання великих та малих рядів. Блоки охоплюють різні колонки чи цілий ряд.\n5\nSpaceX\nСуперлегкий дизайн. SpaceX — це, по суті, кілька повноекранних зображень із зникаючим вмістом та розділом посилань.\n6\nNVIDIA\nЩе один простий, але професійний дизайн. Лише банер, макет сітки та рядки.\n7\nRazer\nПоєднання великого банера на першій сторінці, повносторінкових розділів і дизайну big box. А, і досить нестандартна кольорова гамма. \n8\nSalesforce\nЩе один чудовий вебсайт для вдосконалення ваших навичок CSS. Поєднання банерів, рядків, стовпців, реверсивних стовпців, дизайн big box. А ще — кілька закликів до дії та веселі зображення.\n9\nAdobe\nЩе один сайт з дизайном big box. Також у нього є кілька цікавих фонових градієнтів.\n10\nMicrosoft\nМає великі банери, кілька окремих розділів та одразу помітний заклик до дії. Досить простий, але професійний дизайн.\n11\nBlockchain\nДизайн цього сайту поєднує кілька складних концепцій. Він має великий банер, заклик до дії, градієнтні ефекти. А ще — дизайн big box у вигляді посилань та динамічних «акордеонів». У вкладці «акордеон» не лише є додаткова інформація, вона ще і змінюється! \n12\nPaypal\nМає великий банер, заклик до дії та реверсивні рядки. Простий, але ефективний дизайн.\n13\nSlack \nТут цікавий банер першої сторінки. Є заклик до дії, кнопка для входу за допомогою Google і ряд значків із зображенням компаній, які використовують Slack. Решта макета — це проста система сітки з типовим дизайном реверсних рядів. Мінімум анімації, як-от ефекти наведення.\n14\nDiscord\nНапевно, мій улюблений сайт у списку. Він має веселі яскраві кольори, мінімалістичний банер домашньої сторінки із закликом до дії, макет реверсивної сітки рядків.\n15\nAmazon\nКороль електронної комерції. Якщо ви можете розробити клон Amazon, ваші навички розробника інтерфейсів просто чудові.\nЦей сайт має дещо складніший макет сітки, рядок пошуку в навігації, розділ «Рекомендоване», ефекти наведення, каруселі тощо. \n16\nPlaystation\nНа Playstation.com є якісний великий банер, що демонструє слайд-шоу з гарним ефектом затухання. Ви можете кодувати це з нуля або використовувати свою улюблену бібліотеку. Також сайт має однорядкову галерею, великі банери, динамічний вміст після натискання, кілька повноекранних закликів до дії та невеликі анімації.  \n17\nNintendo\nОх, спогади дитинства! Але не будемо відволікатись: сайт має гарний яскравий банер домашньої сторінки з не надто помітним закликом до дії під ним. Має безперервну прокручувану однорядкову галерею. Ви можете використовувати для цього бібліотеку, оскільки вам не потрібно щоразу створювати колесо заново. Хороший сайт, щоб попрактикуватись у швидкому додаванні елемента до вибраного.\nВисновок\nЯ справді вірю, що клонування одного або кількох вебсайтів суттєво покращить ваші навички. Клонування сайтів вимагає багато аналітичного мислення, оскільки ви розбиваєте дизайни на менші компоненти. А ще вам потрібно обирати найкращі інструменти для певних задач та думати про адаптивний дизайн. Тож, незалежно від того, працюєте ви на фрілансі чи в великій компанії, клонування сайтів допоможе вам у професійному розвитку!\nСтаття від Coders Hub\nТекст адаптувала Євгенія Козловська','2022-12-02 23:43:14','2022-12-02 23:43:14'),(67,'Через рік — $1200, а потім можна підвищити майже вчетверо: що важливо вміти фронтенд-розробнику','Діана Смєлікова BLOG\nОпераційний директор WEZOM.ACADEMY','Новачки, які тільки починають вивчати фронтенд, стикаються з безліччю нових термінів. \nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nСьогодні ми коротко розберемо, що таке Node.JS, NPM та Git, навіщо ці інструменти майбутньому фронтенднику і чому ми вивчаємо їх на курсі «Frontend розробка 2022. Junior -верстальник». Почнемо із самого початку.\nЩо таке фронтенд і яка зарплата у фахівців\nФронтенд — це будь-який інтерфейс користувача, видима частина сайту або програми. \nФактично ви прямо зараз бачите перед собою фронтенд — «обличчя» сайту з текстами, зображеннями, кнопками, блоками тощо. Все це результат роботи фронтенд-розробників (але, звичайно, не тільки їх).\nФронтендник — це верстальник та програміст в одній особі. А якщо максимально узагальнити список його завдань, то це переведення дизайн-макета в код, що легко читається і розширюється.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nІ тут у вас, мабуть, постає питання: «А чи варто зараз вчитися на фронтенд-розробника? Скільки можна заробляти та як розвиватися?»\nВідповідаємо!\nФронтендник-новачок в Україні може розраховувати на «вхідну» зарплату $500-600 на місяць. Але в міру професійного зростання рівень прибутку підвищується кратно. Пропонуємо подивитись результати опитування розробників від DOU.\nФронтендник — зелений рядок. Натисніть, щоб розгледіти\nТут важливо розуміти, що сучасний фронтенд — це не лише HTML, CSS та трохи JavaScript. У міру професійного зростання потрібно вивчати та використовувати:\nNode.JS;\nNPM;\nGit;\nметодологію БЕМ;\nJavaScript Core (DOM, AJAX, JSON);\nінструменти управління програмами;\nWebpack;\nGulp / Grunt;\nTypeScript. \nЗрозуміло, неможливо за півроку чи рік вирости з недосвідченого джуна до сеньйора. І намагатися вчити все й одразу — цілком провальна витівка. Після вивчення базису HTML, CSS та JS ми рекомендуємо переходити до вивчення Node.JS, NPM та Git. Докладніше про те, що це і навіщо використовується — далі.\nЩо таке Node.JS\nNode.js — це платформа для роботи з JavaScript, за допомогою якої можна писати серверний код для динамічних сторінок, вебдодатків та командного рядка.\nДо появи Node додатки на JS можна було запускати виключно у браузері, але зараз ви можете запускати їх прямо на сервері, що суттєво розширює можливості застосування JavaScript в принципі. Фреймворк Node.js використовують такі гіганти як Netflix, Uber, PayPal, eBay, Yahoo! та інші. \nПричин популярності багато:\nвисока швидкість роботи;\nуніверсальність;\nбезліч модулів і бібліотек;\nробота на високоефективному двигуні Chrome V8.\nДо переваг можна віднести простоту установки Node.js. Вам потрібно встановити консоль або емулятор консолі (наприклад, CMDER), завантажити актуальну версію Node.js з офіційного сайту та запустити інсталятор.\nЯк розшифровується NPM\nNPM (Node Package Manager) — це пакетний менеджер JavaScript, який працює на Node.js.\nNPM — це одночасно репозиторій для публікації проєктів Node.js та інструмент командного рядка для взаємодії з онлайн-платформами. Якщо ж спробувати максимально просто пояснити, що таке NPM, то це менеджер пакетів, за допомогою якого можна швидко та зручно підключити до вашого проекту бібліотеку чи фреймворк.\nНаприклад, щоб підключити фреймворк Bootstrap, вам не доведеться вручну завантажувати відповідні js- та css-файли, а потім зберігати їх у GIT. Достатньо ввести один рядок у конфізі NPM, і пакетний менеджер підключить Bootstrap до вашого проєкту. Це зручно і заощаджує багато часу!\nВажливе уточнення! Якщо ви правильно встановили Node.js, то NPM вже буде включено до його складу. Додаткових дій з вашого боку не знадобиться.\nЩо таке Git\nGIT — найпопулярніша у світі система контролю версій, за допомогою якої можна робити відгалуження в проєкті, відкочуватися до попередніх напрацювань, паралельно працювати над різними функціями одного проєкту.\nПрипустимо, що ви розробляєте, наприклад, калькулятор. У вас є основна гілка розробки master — основа. Ви вирішуєте додати функцію конвертера валют. А ще знаходите якийсь дрібний баг у додатку. Суть у тому, що вам необов’язково вносити зміни до master, щоб додати нову функцію та виправити баг.\nДля кожної задачі у Git можна створити окрему гілку і працювати з нею. А коли задачу буде виконано — підключити до master .\nЗвичайно, над різними завданнями можуть працювати різні люди та різні команди. І таких відгалужень може бути скільки завгодно.\nВстановлення та налаштування Git для різних операційних систем відрізняється. Радимо ознайомитися з інформацією на офіційному сайті. Тут же можна завантажити GIT для вашої ОС та почитати документацію для розуміння принципів роботи із системою контролю версій.\nЯк використовувати ці інструменти\nОписати навіть на базовому рівні принципи роботи з Git, Node.js та NPM у рамках однієї статті неможливо. А їх поверхневий розгляд тільки ще сильніше заплутає фронтендника-початківця. Тому ми зробимо трохи інакше — дамо кілька корисних порад, які надалі допоможуть вам швидше потоваришувати з цими інструментами:\nПочинайте з Git, а Node.js та NPM залиште на потім. Останні два інструменти є актуальними, коли ви починаєте працювати з JavaScript. На початковому етапі у них зазвичай немає необхідності.\nНамагайтеся зрозуміти, як Node.js та NPM спрощують роботу. Спочатку може здатися, що вони її ускладнюють, але це не так. Тому тут важливо оцінити реальні переваги, а не просто заучувати команди.\nНе бійтеся просити допомоги та поради у досвідченіших колег чи свого наставника. Це не найпростіші теми для вивчення і розібратися в них самостійно буває проблематично.\nGit, Node.js та NPM оптимізують та прискорюють робочий процес у рази. При вивченні головне пам’ятати: не все так складно, як може здатися на початку. Успіхів!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:43:51','2022-12-02 23:43:51'),(68,'Чи можна швидко та безкоштовно вивчити JavaScript: поради для тих, хто хоче увійти до IT','Діана Смєлікова BLOG\nОпераційний директор WEZOM.ACADEMY','В Україні словосполучення «увійти до IT» давно перетворилося на мем — всі хочуть працювати в індустрії, що бурхливо розвивається, з зарплатами, що швидко зростають. Але сьогодні нам вже не до сміху — для багатьох українців зміна професії стала питанням виживання. \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗ чого розпочати кар’єру розробника? Якщо хочете кодити, починайте з JavaScript — це основа основ для фронтенд-фахівця.\nВін мегапопулярний, простий в опануванні та лідирує у багатьох напрямках розробки. На JavaScript створюють сайти та програми, сьогодні це єдина мова програмування, яка доступна у всіх браузерах без винятку. Хтось примудряється навіть програмувати на ньому побутову техніку. Спільнота мови величезна, і новачок без проблем знайде багато гайдів, документації та відповідей на будь-які питання. Фахівці з JavaScript та його фреймворки потрібні скрізь і завжди. \nЧи можна стати кодером за місяць\nВикладачі WEZOM.academy дуже люблять це питання, його зазвичай ставлять самовпевнені першокурсники з палаючими очима.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nНі, за місяць стати розробником неможливо.\nАле якщо намагатися, можна зрозуміти основи. Пам’ятайте, зміна професії — це зміна всього способу життя. Перший місяць буде присвячений тому, щоби сформувати звичку щоденних занять.\nЗвикайте ставити собі короткострокові цілі та досягати їх, мотивуючи себе до подальших успіхів.\nЯкщо ви готові щодня приділяти кодингу 5-6 годин, ви можете вийти на рівень джуніора за 4-5 місяців. Якщо навчання потрібно поєднувати з роботою, то базове освоєння JavaScript забирає на кілька місяців більше.\nУ будь-якому разі, ключ до успіху — це ваша мотивація.\nЯк вчитися?\nІнформації з JavaScript настільки багато, що новачки просто губляться у ній. Це буквально сотні книг, сайтів та каналів на YouTube. Підберіть собі якийсь комплексний самовчитель. Від себе можемо порадити такі книги: \n«JavaScript для чайників» (К. Міннік. Е. Голланд) — один з найпопулярніших самовчителів, дає непогану базу для верстки та роботи з онлайн-графікою. \n«Виразний JavaScript. Сучасне вебпрограмування»  (М. Гавербеке) — посібник для кодерів-початківців, з масою прикладів і практичних завдань. \n«Самовчитель з JavaScript для дітей» (М. Морган) — на практиці корисний і багатьом дорослим, яким потрібно починати з основ.\nКоли ви підбираєте книгу, обов’язково шукайте останнє видання, інакше можете витратити час на застарілу інформацію. \nЯкщо у вас є базова англійська, радимо спробувати FreeCodeCamp або подібний ресурс, де є інтерактивні курси з вебдизайну та JavaScript. \nВивчайте теорію, але якнайшвидше переходьте до практики. Кодинг — це багато в чому не тільки знання, а й навички, які можна лише напрацювати. Тут ми підходимо до однієї з головних проблем самостійного навчання, де вигоряють багато новачків. У відриві від реальної практики розробки людина просто не відчуває прогресу та втрачає інтерес. Якщо ви маєте можливість, знайдіть собі ментора, практикуючого розробника. Якщо такої можливості немає, то гарним варіантом для вас можуть стати онлайн-курси. \nХороший навчальний курс — це не тільки найактуальніша «збірка» з предмету, а й регулярний контакт з викладачами. Скажімо, у WEZOM.academy курс з frontend веде наш розробник з десятирічним досвідом, Олег Дутченко. На онлайн-заняттях студенти мають можливість обговорити з ним помилки в домашньому завданні та досягнутий прогрес.\nНа що звернути увагу новачкові у JavaScript\nОсвоєння мови програмування завжди приховує масу підводного каміння. Почніть із базових понять:\nзмінні;\nоператори;\nумови;\nфункції;\nподії.\nВивчіть загальну логіку пристрою вебсторінок та скриптів.\nДобре, якщо після пари занять ви зможете написати сторінку і найпростіший скрипт до неї — щоб її можна було відкрити в браузері і побачити там щось на кшталт «Hello world». \nЗ погляду нашого викладача, новачкові у JavaScript слід приділити особливу увагу таким питанням: \nпідключення та синтаксис, включаючи ES6 та вище;\nплагін jQuery та його застосування;\nзбірки з використанням Webpack;\nNPM-модулі та їх використання;\nплагіни для JS: React, Angular, Vue та фреймворки для них.\nЯк перейти на новий рівень\nДуже важливо поступово розширювати поріг складності завдань, які ви виконуєте на заняттях. Інакше можна надовго зависнути на початковому рівні, подібно до того, як багато хто зависає на одному рівні під час вивчення іноземної мови.\nЯкщо ви опанували ази, починайте ходити на GitHub. Дивіться, як пишеться код. Якщо навички дозволяють, там можна з часом включитися в якийсь простий некомерційний проєкт. Повірте, такий досвід коштує десятка навчальних гайдів, досвідченіші кодери допоможуть вам порадою і вкажуть на помилки.\nТут важливо зробити невелику ремарку. Багато хто сьогодні ставиться до IT-курсів упереджено, чи не як до якогось новомодного інфоциганства. Зрозуміти таке ставлення можна. Якоїсь миті в нішу онлайн-освіти почали рватися всі кому не ліньки.\nЄ курси, які за фактом не навчають професії, а розважають слухачів солянкою з наукпопу та мотивуючих промов. Є школи, які обіцяють студентам 100% працевлаштування, хоча давати таку гарантію просто неетично.\nРаджу уважно вивчити бекграунд цікавих для вас курсів. Пошукайте відгуки від реальних студентів, поцікавтеся реальним досвідом викладачів. Обговоріть програму курсу зі знайомим айтівцем – а раптом вона давно застаріла? Хороша онлайн-школа не ховає такої інформації.\nФінальним етапом навчання може бути фріланс або стажування в ІТ-компанії. \nЧи можна навчатись безкоштовно?\nТак, кожен може опанувати професію без вкладень. Вся необхідна інформація у відкритому доступі, і за належної навички її можна знайти та переварити самостійно. Інше питання в тому, що на пошук та перевірку потрібних знань знадобиться час. \nРаджу сфокусуватися спочатку на якійсь вузькій темі. Починайте вивчати конкретну мову, попутно заповнюючи прогалини у знаннях індустрії. Надалі з базою в тому ж JavaScript буде набагато простіше опанувати інші мови або суміжні з кодингом професії. \nЯкщо розмірковуєте над онлайн-курсами, то не звертайте уваги на програми із назвами на кшталт «Основи програмування». Беріть ті, які присвячені конкретній мові чи інструменту. Після початку війни багато онлайн-шкіл відкрили безкоштовний доступ до своїх матеріалів для українців, і це також хороша можливість для новачків. До речі, нашій академії трохи пощастило, ми встигли запустити наш новий курс з верстання на початку 2022 року незадовго до 24 лютого. \nУ нинішніх умовах життєво важливою є можливість вчитися швидко. Сьогодні сотні тисяч українців втратили роботу та звичний спосіб життя. Дуже ймовірно, що до кінця року десятки тисяч людей перевчатимуться на IT-професії та вийдуть на ринок праці. А ті, хто зробить це раніше, зможуть розраховувати на більш цікаві вакансії та вищі зарплати.  \nА що ж із профільною освітою?\nДобре, коли кодер може похвалитися своїм дипломом програміста — п’ятьма роками навчання у профільному виші, з парами, лекціями та гарними викладачами. Багато хто отримує у вишах відмінну математичну базу, яка допомагає у професії. Але три четверті працівників сучасної IT-індустрії такою розкішшю похвалитися не можуть. Це галузь талантливих ентузіастів, які вивчилися та продовжують вчитися самостійно. \nІ пам’ятайте, кожен спеціаліст може розповісти вам власну унікальну історію опанування професії.\nГоловне — відчуйте, що це ваша улюблена справа, тоді мотивація та ентузіазм виникнуть самі собою.\nА якщо кодинг вам не подобається, то в IT є безліч інших професій: тестувальники, маркетологи, дизайнери, SMM та багато інших. Шукайте себе і все вийде!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:43:55','2022-12-02 23:43:55'),(69,'Фундамент для JavaScript-розробника: як відповісти, що таке libuv на співбесіді з Node.js','Владислав Хирса BLOG\nSoftware Engineer','Розуміння що таке libuv і як вона працює — є фундаментальними знаннями для JavaScript-розробника, які на перший погляд можуть бути складними або незрозумілими, але про них можливо розповісти і простими словами.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nІз цієї статті ви дізнаєтеся відповіді на запитання:\nЩо таке libuv та для чого вона потрібна?\nЯкі переваги не блокуючого I/O перед блокуючим?\nЯк працює libuv?\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nКоротка історія libuv.\nЩо таке libuv та для чого вона потрібна\nLibuv — це бібліотека, яка відповідає за  асинхронне введення/виведення I/O –операцій в Node.js.\nАле одна з головних задач libuv — це зробити Node.js сумісною з більшістью оперативних систем (OS) для нормалізації не блокуючих операцій. Тому що кожна OS має власний інтерфейс для роботи з демультиплексером подій.\nЄ такі інтерфейси як kqueue на macOS, epoll на Linux та I/O Copmletion Port API на Windows та інші менш відомі, і з ними всіма треба працювати за їхніми правилами, але добре що це крайнє ефективно робить libuv.\nЯкі переваги не блокуючого I/O перед блокуючим\nЯкщо ми використовуємо мову програмування з многопоточністю, наприклад, таку, як Java, то при надходжені запита на сервер вона створює під кожен запит окремий потік (thread), сам процес створення потоку та їхнє обслуговування займає час, також кожен потік не може обробляти декілька з’єднань, кожна операція I/O в сокет блокує обробку будь-якого іншого з’єднання.\nІ таким чином кожен потік забирає пам’ять та використовує CPU, тож кількість потоків та час їхнього життя використовують набагато більше потужностей сервера в тих випадках, де Node.js дає раду без проблем (чати, стрімінг відео тощо).\nТож основні переваги не блокуючого I/O в тому, що він швидко приймає запит, реєструє його і одразу приймаються інші запити, коли хтось з них буде готовий — і тільки тоді він буде викликаний. Тобто наш потік не припиняє роботу, він не блокується для кожного запиту. За замовчуванням використовується один потік в Node.js, але навіть і з одним потоком Node.js може обробляти десятки тисяч простих запитів одночасно.\nЯк працює libuv\nLibuv складається з таких частин як:\nДемультиплексор подій (Event Demultiplexor)\nЧерги подій (Event Queue)\nЦикл подій (Event Loop)\nЯк це працює:\nПерше що відбувається, це програма відправляє запит до Event Demultiplexor та назначає обробник (handler), який буде визвано при завершені операції (operation).\nПри завершенні набору I/O-операцій Event Demultiplexor відправляє набір подій до Event Queue.\nВ цій частині Event Loop проводить ітерацію по подіям в Event Queue.\nДля кожної події викликається відповідний обробник.\nІ коли handler завершиться, то він повертає управління до Event Loop.\nКоли вже всі події Event Queue будуть оброблені, то Event Loop блокується і дає управління Event Demultiplexor, який запускає інший цикл для стеження (чи не надійшли нові запити) і вже потім, після того як Event Demultiplexor отримає новий запит, то Event Loop буде запущений.\nІ так все відбувається по колу, якщо handler на етапі виконання має інші запити в базу даних файлової системи, до інших ресурсів тощо, то він створює новий запит і все повторюється.\nКоротка історія libuv\nБібліотека передусім спроєктована для використання в Node.js, але застосовується також в інших програмних продуктах таких як Luvit, Julia, uvloop.\nСпочатку це була абстракція навколо libev, оскільки вона підтримувала Unix і не підтримувала IOCP у Windows. У libuv-версії node-v0.9.0 libev була вилучена.\nДякую вам за увагу і продуктивного кодування 😉\nЧитайте також: Опануй справжню силу в Node.js: розбираємо мікро- та макрозадачі на прикладах\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:44:33','2022-12-02 23:44:33'),(70,'Опануй справжню силу в Node.js: розбираємо мікро- та макрозадачі на прикладах','Владислав Хирса BLOG\nSoftware Engineer','Привіт усім! В цій статті я розповім, як оперувати виконанням коду на більш нижчому рівні. Якщо ви розумієте, що у вашому коді є макро- і мікрозадачі, то ви можете більше передбачити поведінку коду і послідовність виконання певних функцій та методів, що значно полегшує роботу в оптимізації вашого додатку.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЩо таке макро- і мікрозадачі\nМакро: setTimeout, setImmediate, setInterval, I/O, UI rendering.\nМікро: Promise, process.nextTick, queueMicrotask, і на фронті ми маємо наглядача за DOM елементами — MutationObserver.\nРізниця між ними в тому, що мікрозадачі мають пріоритет перед макрозадачами.\nВони виконуються в першу чергу, лише після того, як виконуються всі мікрозадачі. Event loop переходить до черги макрозадач — і потім знову після макрозадачі виконуються всі мікро-. І так по колу, поки Event queue не стане порожнім.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЯк обробляються задачі?\nУ нас є черга подій Event queue, в якій знаходяться всі наші події з їхніми обробниками в черзі. Event loop обробляє всі події по принципу FIFO (first in first out) — тобто остання подія буде оброблена в останню чергу — все як за етикетом 🙂\nПроте у нас є можливість піти поза чергою, використати, так би мовити, VIP-перепустку і обійти зареєстровані події 😉 Ми можемо це зробити завдяки декільком методам:\n1. process.nextTick()\n2. queueMicrotask()\n3. setImmediate()\nЗараз пропоную вам детально розглянути код, який наочно покаже, яка функція виконується і в якій послідовності, не дивлячись на те, де вона розташована і скільки часу потрібно для її виконання:\nconst fibonacci = n => {\n  if(n <= 1){\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}\nconst loging = (...args) => {\n  const [ colorKey, text, fibNumber ] = args;\n  const colors = {\n    y:\'x1b[33m%sx1b[0m\',\n    b:\'x1b[34m%sx1b[0m\',\n    w:\'x1b[37m%sx1b[0m\',\n  };\n  const color = colors[colorKey] || colors[\'w\'];\n  console.log(color, text + \' \' + fibonacci(fibNumber));\n}\nconst task = async(a) => {\n  const task2 = (t) =>Promise.resolve(t());\n  return await task2(fibonacci.bind(null, a));\n}\nconst taskContainer = () => {\n  console.log(\'x1b[32m%sx1b[0m\', \'--- START taskContainer ---\');\n  setImmediate(() =>loging(\'y\', \'2 -- setImmediate\', 15)); // not regular execution\n  setTimeout(() =>loging(\'y\', \'2 -- setTimeout\', 15)); // not regular execution\n  queueMicrotask(() =>loging(\'y\', \'2 -- queueMicrotask\', 20));\n  process.nextTick(() =>loging(\'y\', \'2 -- nextTick\', 35));\n  Promise.resolve().then(_=>loging(\'y\', \'2 -- Promise\', 12));\n \n  console.log(\'x1b[31m%sx1b[0m\', \'--- END taskContainer ---\');\n};\nsetImmediate(() => loging(\'b\', \'1 -- setImmediate\', 15)); // not regular execution\nsetTimeout(() => loging(\'b\', \'1 -- setTimeout\', 15)); // not regular execution\ntask(20).then(res => console.log(\'Nested task result\', res));\nPromise.resolve().then(_ => loging(\'b\', \'1 -- Promise\', 32));\nqueueMicrotask(() => loging(\'b\', \'1 -- queueMicrotask\', 20));\nprocess.nextTick(() => loging(\'b\', \'1 -- nextTick\', 35));\nconsole.log(\'x1b[34m%sx1b[0m\', `1 -- log ${fibonacci(10)}`);\ntaskContainer();\nРезультат:\nConsole output:\n\n1 -- log 55\n\n--- START taskContainer ---\n\n--- END taskContainer ---\n\n1 -- nextTick 9227465\n\n2 -- nextTick 9227465\n\n1 -- Promise 2178309\n\n1 -- queueMicrotask 6765\n\n2 -- queueMicrotask 6765\n\n2 -- Promise 144\n\nNested task result 6765\n\n1 -- setTimeout 610\n\n2 -- setTimeout 610\n\n1 -- setImmediate 610\n\n2 -- setImmediate 610\nРозберемо отриманий результат:\nconsole.log() — завжди виконуються першими, тому що це теж I/O-операція і вона — завжди перша після ініціалізації коду. Це відбувається через те, що таймери виконуються після того, як будуть назначені — їх поведінку контролює poll-фаза, а до next tick queue черга ще не дійшла.\nprocess.nextTick() — виконується другим, тому що він спрацьовує в next tick queue.\nqueueMicrotask() є альтернативою process.nextTick() і виконується в тій самій черзі, де і Promise, тому виконується завжди після process.nextTick(). Але з Promise виконуються на рівних правах, тобто залежно лише від послідовності в коді.\nsetTimeout/setImmediate() — це таймери, вони є макрозадачами, завжди виконуються після мінімальної затримки, якщо вона не вказана або, як ми знаємо, після всіх мікрозадач.\nЯк ми можемо використати отримані знання\nМікрозадачі ми використовуємо для того, щоб виконати асинхронну роботу коду. Це є надважливим, коли ми, наприклад, хочемо виконати функцію після ініціалізації всього коду даного файла, але до того, як весь код починає виконуватись.\nВиключенням можуть бути деякі I/O-операції, вони виконуються синхроно одразу після ініціалізації, але перед next tick queue. У всіх інших випадках краще використовувати макрозадачі, тому що їх поведінка більш передбачувана.\nconst importantObject = {\n  _name:\'Vladyslav\'\n}\nprocess.nextTick(() => {\n  console.log(\'My name is \', importantObject.getName());\n});\nimportantObject.getName = function () {\n  return this._name\n}\nРезультат:\nConsole output: `My name is Vladyslav`\nНа прикладі цього коду ми можемо побачити, як ми відклали виконання методу importantObject.getName() і виведення його результату в консоль завдяки process.nextTick(). Таким чином ми зачекали його ініціалізацію.\nconst importantObject = {\n  _name:\'Vladyslav\'\n}\nconsole.log(\'My name is \', importantObject.getName());\nimportantObject.getName = function () {\n  return this._name\n}\nРезультат:\nConsole output: `TypeError: importantObject.getName is not a function`\nБез process.nextTick() ми отримаємо помилку, бо викличемо той метод якого ще не матимемо в importantObject.\nОтже, ми розглянули детально мікро- і макрозадачі. І тепер кожен, прочитавши цю статтю і протестуючи код в прикладах, зможе чітко відповісти на питання стосовно послідовності виконання різних задач.\nЗа що вам дякую і бажаю всім продуктивного кодування 😉\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:45:08','2022-12-02 23:45:08'),(71,'Можна все, і за своїми правилами: як працює ітерація в JavaScript','Владислав Хирса BLOG\nSoftware Engineer','Привіт усім. Мене звати Владислав Хирса, я — Software Engineer у Grid Dynamics. У цій статті я розповім вам багато корисного про ітерацію у JavaScript.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nМи всі використовуємо ітерацію для перебору масивів та об’єктів різних розмірів та для різних задач. Проте чи знаємо ми, як це працює? Як ми можемо змінити поведінку ітерації над нашими даними та в яких випадках це може знадобитись?\nЯкщо вам цікаві відповіді на ці запитання, тоді цей матеріал точно для вас.\nПригадаємо терміни\nДля кращого розуміння пригадаємо декілька значень, а саме:\nПерелічувані властивості enumerable properties — одна з трьох властивостей (configurable, enumerable, writable), які є в об’єкті. Щодо enumerable, то вона відповідає за те, чи можна повернути властивість у циклі for...in.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nНаприклад, так:\nObject.prototype.getType = function() {\n  return this.type;\n};\n\nconst object = {\n  language: \'JavaScript\',\n  type: \'Lesson\'\n};\n\nfor (const key in object) {\n  console.log(key); // JavaScript, Lesson, getType;\n};\nІтерований об’єкт i terable object — це об’єкт, який побудований за певним патерном і має типову ітераційну поведінку. Він ітерується за допомогою spread syntax [...], for...of та for await...of. І в цій статті ми поговоримо саме про нього.\nПротокол ітерації iterator protocol — це протокол, за допомогою якого ми можемо створити власні правила, за якими буде ітеруватись наш об’єкт. Якщо докладніше, то ітерувати ми зможемо такі типи даних, як string, array, object.\nГоловні правила iterator protocol — це:\nМи повинні мати метод next().\nМетод next() повинен обов’язково повертати об’єкт типу iterable object. Він містить ключі value, який може мати будь-яке значення, та done, який може бути true або false.\nКоли ітерація завершилася, потрібно обов’язково повернути об’єкт { done: true }, адже тільки після цього наша ітерація закінчиться.\nЯкщо done не буде повернуто або ж done буде мати будь-яке негативне значення, такі як undefined, null та інші, то наша ітерація буде безкінечною.\nСтворення ітеративної поведінки\nДля створення ітеративної поведінки ми будемо використовувати наступні підходи:\nSymbol.iterator з методом next().\nSymbol.iterator з генератором.\nSymbol.asyncIterator з генератором.\nТож по порядку, і почнемо ми з Symbol.iterator з методом next().\nvar array = [10, 20, 30, 40, 50];\n\narray[Symbol.iterator] = function () {\n  let i = 0;\n  return {\n    next() {\n      i++\n      return (i <= 5)\n        ? { value: i, done }\n        : { done: true }\n    }\n  }\n};\n\nfor (const el of array) {\n  console.log(el) // 1, 2, 3, 4, 5\n};\nЯк це працює?\nСпершу цикл for...of шукає у нашому об’єкті або серед тих, від яких він наслідується в prototype, чи має він Symbol.iterator. Якщо ні — то буде викликана автоматична помилка, а якщо так — тоді він викликає функцію, функція повертає наш об’єкт з методом next(), де і є вся наша основна логіка, та найголовніше, що при кожній ітерації циклу використовується метод next(), який і повертає значення за наших умов.\nSymbol.iterator з генератором\nЗ Symbol.iterator ми вже ознайомилися, а як щодо генераторів?\nГенератор, якщо коротко, то це спосіб створення того ж iterable object для ітерації по iterator protocol, тобто в нього теж є метод next() і ітерується він циклом for...of, тільки синтаксис інший, та використовувати його у деяких випадках зручніше:\nvar it = {};\n\nit[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\nit.type = \'Lesson\';\nconsole.log(it); // { type: \"Lesson\", Symbol(Symbol.iterator): * Symbol.iterator() }\nconsole.log([...it]); // [1, 2, 3]\nУ цій частинні ми змінили поведінку об’єкта та дали йому змогу бути ітерованим. Без Symbol.iterator була б помилка такого типу — Uncaught TypeError: it is not iterable при спробі ітерувати об’єкт. Також як ми бачимо, що до ітераційних даних ми не маємо доступу напряму, а з Symbol.iterator немає доступу до значень об’єкта. Це дуже зручно, і немає ніяких мутацій даних.\nSymbol.asyncIterator з генератором\nДуже цікавий метод обробки даних, з допомогою якого ми можемо асинхронно обробляти дані, розбивати важкі і тривалі операції, що не перенавантажує та не блокує нашу систему. Тож хочу поділитися з вами, можливо, трохи складним, але корисним прикладом використання. Для зручності у цьому прикладі ми будемо використовувати типи.\nФайл async-iterator.ts:\nimport { AsyncLimitIteratorParametersType } from \'./types\';\n\nexport default class Iterator {\n  public static generateAsyncLimitIterator(\n    data: AsyncLimitIteratorParametersType\n  ) {\n    const {\n      from,\n      to,\n      limit,\n      asyncFunction,\n      asyncFunctionParams\n\n   } = data;\n\n    return {\n      async *[Symbol.asyncIterator]() {\n        for (let now = from; now < to; now += limit) {\n          yield await asyncFunction(\n            asyncFunctionParams,\n            { from, to, limit, now }\n          );\n        }\n      }\n    }\n  }\n};\nФайл types.d.ts:\nexport type AsyncLimitIteratorParametersType = {\n  from: number;\n  to: number;\n  limit: number;\n  asyncFunction: Function;\n  asyncFunctionParams: any;\n}\n\nexport type IterationDataType = {\n  from: number;\n  to: number;\n  limit: number;\n  now: number;\n};\nКлас Iterator створений для асинхронної обробки (зміни) великих масивів даних.\nТож розберемо, як його можна використовувати і в чому його переваги.\nКлас Iterator\nОтож, клас Iterator. У нього є один статичний метод generateAsyncLimitIterator, до якого ми маємо доступ, не використовуючи оператор new, метод generateAsyncLimitIterator приймає параметри:\nfrom — з якого індексу змінювати масив;\nto — по яку позицію за індексом змінювати масив;\nlimit — скільки елементів за одну ітерацію захопити та пройти;\nasyncFunction — функція, в якій виконуються основні дії.\nНаприклад, запит до бази даних для зміни об’єкта користувачів.\nasyncFunctionParams — параметри, які приймає функція asyncFunction.\nПриклад застосування:\nconst iteratorParams = {\n  from: 0,\n  to: 1000,\n  limit: 10,\n  asyncFunction: changeUsers,\n  asyncFunctionParams: params\n};\n\nconst iterateObj = Iterator.generateAsyncLimitIterator(iteratorParams);\n\nfor await (let value of iterateObj) {\n  //\n}\nПісля того, як ми створили асинхронний ітератор, ми просто використовуємо його в асинхронному циклі та не турбуємося про переповнений стек викликів і те, що заблокований Event Loop, а просто використовуємо надійний спосіб обробки даних.\nНа цьому все! Сподіваюся, що було корисно. Бажаю успіху та продуктивного кодування 😉\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:45:43','2022-12-02 23:45:43'),(72,'Як створити потік відеоданих за допомогою Node.js: розбираю деталі на своєму проєкті','Владислав Хирса BLOG\nSoftware Engineer','Привіт усім! Мене звати Владислав Хирса, я — Software Engineer у Grid Dynamics. Сьогодні я розповім вам, як за допомогою Node.js створити потік відеоданих. Стаття буде корисною для тих, хто ще тільки розбирається у темі Streams in Node.js (наприкінці буде трохи важливої теорії).\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nСтворити потік даних у Node.js зараз просто, але чи все ми розуміємо про те, яким чином працює ця абстракція?\nЗнайти код ви можете за посиланням.\nПочнемо!\nСпочатку запустимо наш сервер, перебуваючи у папці проєкту, командою npm start.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nДалі наш сервер запуститься за адресою http://localhost:8000/. Перейшовши за посиланням, у вашому браузері має з’явитися вкладка такого змісту:\nТут ми можемо бачити в дії наш проєкт. І тепер те, задля чого ми тут — дізнатися, як все працює.\nФайл index.js\nНатисніть, щоб роздивитися\nТут ми створили простий сервер, функцією зворотного виклику призначили функцію router, яка отримує параметри request і response. Далі ми перевіряємо, чи маємо по отриманому request.url збіги в нашому об’єкті runnersByRouts за даним іменем ключа. Якщо так — то викликаємо відповідну функцію, якщо ні — то повертаємо відповідь про помилку до клієнта.\nПри відкритті вкладки в браузері за нашим посиланням до нашого сервера надходить запит з url /, і ми віддаємо нашу сторінку, файл index.html.\nФайл src/send-home-page.js\nНатисніть, щоб роздивитися\nСпочатку ми знаходимо шлях до нашої папки за допомогою url.fileURLToPath(new URL(\'.\', import.meta.url)), назначаємо тип контенту, який збираємось надіслати клієнту res.setHeader(\'Content-Type\', \'text/html\'), далі створюємо читабельний потік fs.createReadStream(__dirname + \'../public/index.html\') і на останньому рядку викликаємо наш потік за допомогою функції pipeline().\nТож поки що все зрозуміло, але трішки нижче ми поговоримо, як воно все працює трохи детальніше.\nФайл index.html\nНатисніть, щоб роздивитися\nРозглянемо декілька важливих для нас атрибутів в html елементі <video>:\nsrc=\"/video-stream\" — при рендерингу нашої сторінки в браузері ми звертаємось до нашого серверу за адресою http://localhost:8000/video-stream і отримуємо наше відео.\ncontrols — цей атрибут дає користувачу можливість мати контроль над відео (старт/пауза, звук тощо).\npreload=\"auto\" — у специфікації вказано те, що весь відеофайл може завантажитись навіть якщо користувач не буде використовувати його. Але на практиці все залежить від браузера і відбуватиметься, скоріш за все, більш динамічно. Наприклад, так — ваше відео буде завантажено приблизно на 1 хв. наперед і через кожні 5 секунд пройденого відео дозавантажаться ще 5 секунд і т.д.\nТож нам надходить запит з url /video-stream і ми викликаємо нашу функцію sendVideoFile.\nФайл src/send-video-file.js\nНатисніть, щоб роздивитися\nУ нашій функції sendVideoFile все починається з того, що:\nМи створюємо абсолютний шлях до файлу — шлях, який нам вказали в параметрі pathToVideo. Було public/nature.mp4 — стало /your_folder/your_folder/project_folder/public/nature.mp4.\nfs.statSync(resolvedPath).size — дізнаємося розмір файлу в байтах.\nreq.headers.range — отримуємо параметр range (bytes=12582912-), тобто те, з якої позиції треба завантажувати відео в байтах.\nЗалежно від браузера і плеєра параметр range може бути null або, наприклад, bytes=123456-, тож у нас є дві різні функції для обробки цих насправді різних підходів.\nФайл utils/create-video-stream.js\nНатисніть, щоб роздивитися\nТут вже все просто — код схожий з тим, який ми вже розглядали в src/send-home-page.js. Єдина різниця в тому, що ми назначаємо обов’язкові заголовки Content-Type і Content-Length для того, щоб браузер розумів, якого типу ми надсилаємо йому інформацію і якого розміру. Це необхідно як для коректної роботи плеєра, так і для подальшої взаємодії плеєра з сервером під час наступних транзакцій даних.\nІ внизу також один із найчастіших випадків — коли параметр range існує.\nФайл utils/create-video-stream-by-range.js\nНатисніть, щоб роздивитися\nТут у нас є функція getChunkData, яка бере вхідний параметр range та fileSize та здійснює наступні кроки:\nБере пару значень з range = bytes=36634624- і отримує масив parts = [ \'36634624\', \'\' ].\nОбчислює значення start = 36896768, end = 86890916, chunkSize = 49994149.\nФайл utils/get-chunk-data.js\nНатисніть, щоб роздивитися\nТакож в createVideoStreamByRange ми вказуємо обов’язковим статус відповіді 206, а також Content-Range — яку частину даних з усього відео ми відправляємо, а також Accept-Ranges — у якому форматі дані, які ми відправляємо.\nЩе кілька доповнень, які корисно знати:\npipeline — чому краще використовувати pipeline(), а не чергу pipe() при роботі з потоками. У функції pipeline() останнім аргументом є функція зворотного виклику. Ми використовували її у вищезазначених прикладах коду. Якщо виникне помилка в будь-якому з переданих потоків, то ми її можемо обробити в одному місці. Також pipeline() самостійно закриває всі закінчені, але не закриті запити до сервера. Наприклад, коли ми використовуємо someReadStream(path).pipe(res), то після помилки або закінчення передачі даних запит до сервера скоріш за все не зачинить, через що виникають незрозумілі та дуже вагомі помилки та втрата оперативної пам’яті. Про це ви можете почитати детальніше тут.\nES modules — щоб використати імпортування функціоналу за допомогою imports, в js-файлах нам потрібно вказати в package.json тип таким чином { \"type\": \"module\" }, але такі змінні, як __dirname та __filename не існують в ES modules, а є можливістю CommonJS. З цим ви можете ознайомитись за посиланням з офіційної документації. Тож знайти шляхи ми можемо таким чином:\nconst __filename = url.fileURLToPath(import.meta.url);\nconst __dirname = url.fileURLToPath(new URL(\'.\', import.meta.url));\nhighWaterMark — це значення розміру внутрішнього буферу, тобто кількість даних у байтах, які ми можемо прочитати за один раз, тобто один chunk даних (за замовчуванням він 64kB). Також значення highWaterMark ми можемо змінити при створенні потоку fs.createReadStream(path, { highWaterMark: 2 }), тепер ми будемо зчитувати наш файл по два символи за раз, а також можемо дізнатися його розмір таким чином: readStream.readableHighWaterMark, значення за умовчанням буде 65536 байтів.\nНатисніть, щоб роздивитися\nЯк працює потік і відправлення даних в деталях?\nCпершу ми створюємо потік зі зчитування файлу і призначаємо його в зміну readStream, після цього використовуємо його в функції pipeline(), далі chunk даних передається до потоку res (тобто response, якщо повністю) і тоді res його отримує і відправляє клієнту за допомогою res.write(chunk). Щоразу коли ми читаємо і передаємо йому наш chunk даних, то в кінці, коли вже немає даних для зчитування, викликається подія end для кожного потоку і функція pipeline() самостійно закриває їх. Що дуже важливо, у випадку з res після останнього викликається res.end() і наш запит до сервера успішно закінчується.\nНа цьому все, дякую всім за увагу. Продуктивного вам кодування 😉\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:46:19','2022-12-02 23:46:19'),(73,'Що потрібно знати майбутньому бекенд-розробнику до того, як вивчати мову: 7 важливих порад','Ігор Шатило BLOG\nLead Backend Developer в ІТ-команді NIX','Сьогодні більшість бізнесів (якщо не всі) потребують повнофункціональних вебсайтів для обслуговування своїх клієнтів. Бекенд-розробники значною мірою сприяють створенню та оптимізації таких ресурсів.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nБекенд-розробка — це всі процеси, які приховані від очей потенційного користувача, те, що відбувається поза його браузером та комп’ютером.\nБекенд-розробники відповідають за побудову логіки застосунків та сайтів, створення алгоритмів, а також вирішують задачі з обробки даних. Такі IT-фахівці зазвичай вміють інтегрувати в наявну платформу різноманітні сервіси, інструменти, бібліотеки.\nУ цій статті я розповім, які знання та навички знадобляться вам для старту кар’єри бекенд-розробника. Мова піде про технічну базу, яка дозволить успішно опанувати програмування. А наприкінці — невеликий бонус для практики.\n7 кроків, які варто пройти перед вивченням мови програмування\nРозберіть комп’ютер по запчастинах\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nСаме на цьому пристрої ви будете створювати програмні застосунки. Тому варто добре розуміти, що знаходиться «під капотом» і як усе працює: процесор, оперативна та постійна пам’ять, материнська плата, дисководи, роз’єми тощо.\nОпануйте операційні системи\nЗ власного досвіду скажу так: гарному бекендеру ліпше тямити в декількох з них. Хоча для розробки можете обрати ту, яка більше до вподоби. Найчастіше бекенд-розробники звертаються саме до Linux. Популярність системи зумовлена тим, що на ній працює значна кількість серверів. Особисто я обрав Linux Mint та Ubuntu, а в якості основної системи використовую MacOS.\nОзнайомтеся з командним рядком (терміналом)\nВарто знати основні консольні команди: робота з директоріями, файлами, підключення до сторонніх серверів, консольний текстовий редактор. Використовуючи ці знання, ви зможете виконувати більшість дій за допомогою терміналу. Наприклад, створювати файли, директорії, шукати необхідні дані, встановлювати додаткові програми, керувати процесами операційної системи тощо. До того ж, більшість серверів можуть не мати графічної панелі адміністрування. В такому випадку в нагоді стає в нагоді використання терміналу.\nДізнайтесь, як відбувається передача даних від фронтенду до бекенду\nКористувач вводить в адресному рядку запит. Браузер намагається зрозуміти IP-адресу сервера, на якому знаходиться сайт. Зазвичай така інформація зберігається в DNS — розподіленій системі серверів. Це щось на кшталт списку контактів у смартфоні. Тільки в якості номерів тут IP-адреси, а замість імен людей — домени сайтів.\nНаприклад, якщо необхідно знайти IP-адресу сайту mail.google.com, браузер запитує про неї у DNS-сервера. Сервер може відповісти: «Я не знаю про mail.google.com. Мені відомий сервер, який відповідає за google.com». Запит переадресовується далі, допоки один із серверів не знайде відповідь на питання. Тільки-но це вдалося, браузер намагається встановити з’єднання, обробити відповідь та відобразити запитувану сторінку кінцевому користувачу.\nПопрацюйте з серверами\nОскільки бекенд-частина знаходиться на серверах, розробнику необхідно навчитися працювати й з ними. Саме вони надають доступ до даних за протоколами HTTP та HTTPS. Спробуйте встановити вебсервер, вивчіть його конфігурації та команди для роботи з сервером. А потім дізнайтесь, як створити конфігурацію для вашого майбутнього сайту або вебзастосунку. \nОпануйте роботу з базами даних\nАдже майже кожен застосунок працює на основі інформації, яку потрібно десь зберігати. Розпочніть із реляційних баз даних — MySQL або Postgre. Вони використовують однакову мову для роботи — SQL. Вивчіть базовий синтаксис запитів, зокрема Select, Insert, Update, Delete. Потім дізнайтеся, як створювати бази даних, модифікувати таблиці, додавати та видаляти колонки, ознайомтеся з індексами та транзакціями.\nРозберіть алгоритми для роботи з даними\nДля того, щоб якісно опрацювати отриману інформацію, зверніться до найпоширеніших функцій для роботи з масивами, строковими та іншими типами даних. Важливо розуміти базові алгоритми для роботи з даними, зокрема, сортування масивів. Почніть з сортування бульбашкою та поступово опануйте алгоритм швидкого сортування. Дослідивши обидва варіанти, можете порівняти їх продуктивність. Після цього ви вже зможете написати набір інструкцій на псевдокоді, а згодом перетворити їх на справжній код.\nРаджу потренуватися на задачах з обробки масивів даних. Вправи раз за разом допомагатимуть усвідомити, як влаштована мова програмування «зсередини».\nТакож необхідно ознайомитися з такими термінами:\nмасиви даних\nзмінні\nфункції\nконстанти\nЩось знайоме? Так, це все може нагадувати вам класичну математику. Тож, якщо вам добре давалась ця наука в університеті, то з мовою програмування буде значно легше розібратися.\nЗазвичай, перераховану вище теорію викладають на технічних кафедрах. Для початку цих знань цілком достатньо. А далі — терпіння, завзятість і бажання вивчати нове допоможуть осягнути бекенд.\nЯкі мови програмування підійдуть для розробки на бекенді\nПерш ніж розпочати вивчення будь-якої мови програмування, я рекомендую чітко зрозуміти, яке у тієї чи іншої мови призначення. Кожна з них використовується для різних сфер програмування, хоча в деколи ці сфери збігаються:\nPHP та JS (Node JS) передусім потрібні для розробки бекенд-частини сайтів та застосунків.\nC# (з платформою .NET) гарно підходить у якості бекенду для вебзастосунків, десктопних програм, ігор, IoT-рішень.\nPython — для застосунків у сфері Data Science, зокрема Machine Learning.\nJava — універсальна мова для бекенду, яку використовують для високонавантажених проєктів, наприклад, у сфері fintech. Також Java підійде для ігор, мобільних та десктопних застосунків.\nЯкщо хочете розвиватися у сфері машинного навчання, обирайте Python або мову R. Для веб-розробки краще за все підійде стандартний стек LAMP (Apache) / LEMP (Nginx), PHP або Python.\nСвого часу я обрав PHP, бо хотів пов’язати своє життя з веброзробкою, працювати з проєктами e-commerce. На сьогодні це одна з найпопулярніших мов для серверної розробки. Чим це зумовлено? \nСинтаксис РНР інтуїтивно зрозумілий. Читання та написання коду максимально комфортне. Командні функції PHP теж легко вивчити, тому багато початків обирають саме цю мову.\nНайбільша кількість сайтів у світі написана на PHP. Серед них сайти компаній Pfizer, BBC, Disney, The New York Times, Twitch, Warner Bros. Ресурси весь час необхідно оновлювати, підтримувати, тож РНР-фахівці завжди будуть затребувані.\nЗручні фреймворки. Наприклад, Laravel та Symphony дозволяють створювати застосунки будь-якого рівня складності.\nПізнаємо патерни програмування на практиці\nЗауважу: наведене нижче завдання не з легких, вимагає трохи креативу, але добре допоможе вам розібратись з основними підходами в програмуванні.\nКоли початківець створює сайт, для кожної сторінки він зазвичай робить окремий файл. З часом сторінок стає все більше. Розробнику дедалі важче підтримувати структуру в належному вигляді. В нашому випадку, слід створити файл index.php, на який будуть відправлятися всі запити з фронтенду. Потім треба налаштувати конфігурацію вебсерверу таким чином, щоб отримувати запити саме через цей файл.\nПереходимо до формування структури папок. Краще за все зробити так, щоб  бізнес-логіка вашого фреймворку була відокремлена від тієї частини, яка доступна користувачу в браузері. Рекомендую наступне:\napp:\nModels\nControllers\npublic:\nindex.php\nviews\nПочаткова структура директорій готова. Наступний етап — маршрутизація логіки для застосунку. Її можна помістити, наприклад, у файл bootstrap.php у директорії app та обовʼязково підключити цей файл у index.php. Окрім цього, потрібно створити масив роутів, де будуть співставлятися сторінки і відповідні контролери та обробляти запити користувача.\nПісля створення маршрутизації переходимо до створення контролерів, моделей даних і темплейтів для відображення результатів користувачу.\nЛогіка буде наступна: маємо роут, до якого привʼязаний контролер — у контролері відбувається запит до бази даних за допомогою моделі даних — отримана модель використовується у темплейті для відображення даних користувачу — готовий темплейт видається як результат роботи контролера.\nНадалі ви зможете розширювати функціонал фреймворку, додавати файли для конфігурації, міграції для бази даних, змінювати структуру директорій, використовувати сторонні бібліотеки тощо.\nКорисні ресурси для початківців\nУ цих матеріалах ви знайдете базові поняття з веброзробки:\nHow does a computer work\nComputers\nHow does a computer work and what is inside\nWhat is a web server\nApache Vs NGINX — which is the best web server for you\nWhat Are the Different Types of Databases\nHow to Choose the Right Backend Technology\nЯк працює материнська плата\nТипи баз даних\nOSI-модель\nTCP/IP-модель\nПатерни проєктування\nДокументація:\nGIT\nMySQL / SQL\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:46:54','2022-12-02 23:46:54'),(74,'Як надсилати push-повідомлення на Android та iOS з Laravel: інструкція','Тетяна Козельська BLOG\nFull-Stack Developer в Grid Dynamics','Привіт! Сьогодні я хочу поділитися з вами робочим механізмом надсилання push-повідомлень на Android та iOS з вебфреймворку Laravel.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nОтож, для довідки, почну з визначення.\nPush-повідомлення — це сповіщення зазвичай невеликого розміру, яке періодично з’являється у додатках чи в браузері.\nУ моєму випадку це повідомлення на телефон у мобільний додаток, який працює через АРІ з моїм сайтом.\nНадсилання повідомлень на мобільний може відбуватися за різних потреб та за різними схемами. Наприклад, це може бути регулярна розсилка в конкретну дату місяця. Для реалізації такої логіки буде зручно використовувати Laravel Cron Jobs. Це скрипт, який зможе викликати надсилання повідомлень у потрібний час.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nІнший варіант, що мені довелося реалізовувати на проєкті в Grid Dynamics, — це розсилка на девайси, щойно подія була створена у вебдодатку. Але для будь-якого варіанту нам треба, щоб працювало відправлення на мобільний.\nОдразу треба сказати, що цей функціонал неможливо реалізувати без знання мобільної розробки.\nТому вам потрібен або Mobile Developer, який забезпечить всі необхідні деталі зі свого боку. Або ви самі маєте знати, як це зробити. У мене є колега, який робить мобільні додатки. \nДля роботи з push-повідомленнями можна використовувати curl-запити, але особисто мені цей метод не дуже подобається, тому я використовую бібліотеку Edujugon/PushNotification. Вона є досить простою і зрозумілою, а налаштування — базовими. Першим нашим кроком буде встановлення цього розширення за допомогою composer:\ncomposer require edujugon/push-notification\nДалі нам потрібно запаблішити провайдер — як це завжди буває із встановленням розширення у фреймворк:\nphp artisan vendor:publish --provider=\"EdujugonPushNotificationProvidersPushNotificationServiceProvider\" --tag=\"config\"\nПісля цих дій ми маємо файл конфігурації (config/pushnotification.php), де нам потрібно внести правки. У цьому файлі є такий код:\n<?php\n/**\n* @see https://github.com/Edujugon/PushNotification\n*/\nreturn [\n   \'gcm\' => [\n       \'priority\' => \'normal\',\n       \'dry_run\' => false,\n       \'apiKey\' => \'My_ApiKey\',\n   ],\n   \'fcm\' => [\n       \'priority\' => \'normal\',\n       \'dry_run\' => false,\n       \'apiKey\' => env(\'API_KEY\'),\n   ],\n   \'apn\' => [\n       \'certificate\' =>  __DIR__ . env(\'IOS_CERTIFICATE\'),\n       \'passPhrase\' => \'\', //Optional\n       \'passFile\' => \'\',\n       \'dry_run\' => false,\n       \'app_bundle_id\' => env(\'APNS_TOPIC\')\n   ],\n];\nТут у нас є три елементи в масиві для різних систем: apn — для iOS, fcm — для Android, gcm — для надсилання через Google Cloud Messaging. У моєму файлі внесені зміни для apn та fcm, для кожного з них я використовую .env-файл. Чому? Бо то є правильним, і наші дані, вказані у файлі, будуть змінюватися.\nРіч у тім, що для тестової та продакшн-збірки мобільних додатків на iOS будуть різні файли сертифікатів і топіки. Для Android у нас є тільки один АРІ-ключ для всіх оточень. Тобто для початку роботи вам треба мати ці ресурси. Окрім того, в конфігурації ви можете бачити значення \'dry_run\' => false. Якщо збірка мобільного додатка є тестовою, то вам необхідно змінити це значення на true. \nДалі ми маємо дізнатися ідентифікатори наших пристроїв, куди ми будемо надсилати повідомлення. Для цього необхідно додати у вашу базу даних поле, яке буде зберігати цей ідентифікатор. Отримати цей токен можна з АРІ. Я використовую окремий запит, в якому розробник мобільного додатка надсилає мені id. Це може бути один ідентифікатор для одного акаунту або декілька ідентифікаторів для одного юзера з різних пристроїв — все залежить від ваших потреб. Тож у файлі роутів для АРІ я маю такий маршрут для залогіненого юзера:\nRoute::post(\'saveDeviceToken\', \'ApiController@saveDeviceToken\')->name(\'saveDeviceToken\');\nВ ApiController.php у вас має бути просто метод, який збереже токен для юзера, що залогінився. Окрім того, вам необхідно знати операційну систему телефона, тому я зберігаю ще одне поле, яке буде вказувати на Android та iOS. Думаю, що це є досить простий код і ви знаєте, як це зробити. \nЩе один момент, що стосується токена, — це його видалення. Звісно, якщо токен не активний чи додаток було видалено, повідомлення не буде надіслано. Можна також додати роут та функцію для видалення токена.\nНаступний крок до відправлення повідомлення — інформація про те, чи хоче юзер отримувати нотифікацію? Зараз ми всі найчастіше маємо змогу відмовитися від розсилки різного роду повідомлень. Тому у мене зазвичай є прапорець у даних юзера, що показує, хоче він отримувати нашу інформацію чи ні. Цей прапорець юзер може ввімкнути/вимкнути як у мобільному додатку, так і в вебресурсі, якщо має туди доступ. \nНу і, нарешті, найголовніша частина всього цього — це саме відправлення. Перед безпосередньо кодом надсилання у вас може бути безліч своїх умов, коли й кому надіслати. Але у вас точно має бути вибірка юзерів з бази з умовою, що вони хочуть отримувати повідомлення і що ми маємо токен для користувача. У мене це має такий вигляд:\n$users = User::all()->where(\'pushNotification\', \'=\', true)->where(\'deviceTokens\', \'!=\', \' \');\nПісля цього ви можете додати свої перевірки або просто пройти циклом по вибраних даних. Методи відправлення на iOS та Android різні, тому є ще одна необхідна перевірка на систему. Все це буде виглядати так:\nforeach ($users as $user) {\n    if ($user->OSType == \'Android\') {\n        $service = \'fcm\';\n        $message = [\'notification\' => [\'title\' => ‘Your title’, \'body\' => ‘Your description’, \'sound\' => \'default\']];\n    } else {\n        $service = \'apn\';\n        $message = [\'aps\' => [\'alert\' => [\'title\' => ‘Your title’, \'body\' => ‘Yout description’], \'sound\' => \'default\', ‘content-  available\' => \'1\'], \'headers\' => [\'apns-topic\' => env(\'APNS_TOPIC\')]];\n    }\n    $res = PushNotification::setService($service)>setMessage($message)>setDevicesToken($user->token)>send()>getFeedback();\n}\nУ цьому коді я використовую бібліотеку для надсилання повідомлень, тому в файлі, де ви будете проводити відправлення, також необхідно вказати використання файлу: \nuse EdujugonPushNotificationFacadesPushNotification;\nОсь і все. Обов’язково перевіряйте, що для iOS ви використовуєте правильні дані для нотифікації, а саме: сертифікат і топік. Дотримавшись всіх умов та успішно отримавши токен, на тестовий девайс має прилетіти повідомлення, яке відправили саме ви. Успіхів!\nЧитайте також: Моя історія з Laravel, MongoDB та видачею токена для API: як я навчилася вирішувати непрості задачі\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:47:28','2022-12-02 23:47:28'),(75,'Чому я обираю FastAPI: основні можливості та переваги фреймворку','Ярослав Мартиненко BLOG\nPython Developer в NIX','Привіт! Мене звуть Ярослав Мартиненко, я Python Developer в NIX. Раніше я займався Embedded-розробкою, пізніше пішов у бік вебу. Вже більше року я розробляю бекенд на Python. Намагаюся постійно вивчати щось нове і прагну створювати те, що спростить життя оточуючим.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nРік тому я дізнався про FastAPI. Він є «спадкоємцем» філософії Flask, але вже «з коробки» надає цікаві фічі, про які я розповім у цій статті.\nFastAPI не пропонує більше, ніж необхідний мінімум, тому розробник вільно може використовувати разом з цим фреймворком будь-які інструменти.\nЩо ж це за FastAPI\nFastAPI — це відносно новий асинхронний вебфреймворк для Python. По суті, це гібрид Starlett та Pydantic.\nStarlett — асинхронний вебфреймворк, Pydantic — бібліотека для валідації даних, серіалізації тощо. У документації FastAPI написано, що він може наблизитися за швидкістю до Node.js та Golang. Я цього не перевіряв, тому й вірити в це не буду. Для мене він швидкий з іншої причини. FastAPI дозволяє просто та оперативно написати невеликий REST AРІ, не витративши на це багато зусиль.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nДавайте поглянемо, як легко (це лише моя суб’єктивна думка) можна почати роботу з FastAPI.\nПочаток роботи\nНасамперед варто встановити потрібні нам залежності, а це — сам фреймворк та ASGI-сервер, оскільки FastAPI не має вбудованого сервера, як у Flask або Django. У документації пропонується використовувати uvicorn як ASGI-сервер:\npip install fastapi\npip install uvicorn\nУ FastAPI використовується подібна до Flask система оголошення ендпоінтів — за допомогою декораторів. Тому тим, хто працював із Flask, буде досить легко пристосуватися до FastAPI. Тепер створимо об’єкт нашої програми та додамо роут HelloWorld:\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\nМи оголосили, що при GET-запиті на / ми повернемо json {\"message\": \"Hello World\"}, особливо відмінностей від Flask тут немає.\nВажлива ремарка: ендпоінт також можна оголосити в синхронному стилі, використовуючи просто def, якщо ви хочете використовувати await. FastAPI розрулить все за вас. За що я полюбляю FastAPI — так це за його лаконічність.\nДавайте оголосимо роут, який буде очікувати якийсь параметр як частину шляху:\n@app.get(\"/item/{id}\")\nasync def get_item(id):\n    return id\nТепер, якщо ми перейдемо за адресою /item/2, то отримаємо 2 у відповідь. А що робити, якщо хтось захоче нам надіслати замість цифри рядок, наприклад, dva? Хотілося б якось захистити себе від таких конфузів. І тут нам приходить на допомогу Python 3.6+ і type_hints.\nТайп-хінтинг (оголошення типів) загалом допомагає зробити код більш зрозумілим і дає можливість використовувати інструменти для статичного аналізу (такі, як mypy). FastAPI змушує вас використовувати тайп-хінтинг, тим самим покращуючи якість коду і зменшуючи ймовірність того, що ви десь припустилися помилки через неуважність.\nТепер визначимо, що наш id має бути типу int:\n@app.get(\"/item/{id}\")\nasync def get_item(id: int):\n    return id\nМи досить просто додали валідацію і тепер можна спробувати передати dva та подивитися, що ж вийде. У відповідь отримаємо те, що ми робимо щось не так.\nСервер поверне нам 422 статус-код і наступний json:\n{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\nНа цьому етапі настав час Pydantic. Він згенерує дані про те, де виявлена помилка, і підкаже, що ми зробили не так. Знову ж таки, не всім припаде до душі статус код 422 і дані про помилку, які нам генерує Pydantic. Але це все можна кастомізувати, якщо дуже хочеться.\nА як оголосити, що ми хочемо якийсь квері-параметр та ще й щоб він був необов’язковий? Усе просто: якщо аргумент функції не оголошений як частина шляху, то FastAPI буде вважати, що він повинен бути отриманий як квері-параметр. Для того, щоб зробити його необов’язковим, надамо йому дефолтне значення.\nЩе однією прекрасною фічею FastAPI є те, що ми можемо оголосити, наприклад, enum — щоб задати певні значення, які очікуємо на вхід:\nclass Framework(str, Enum):\n    flask = \"flask\"\n    django = \"django\"\n    fastapi = \"fastapi\n\n@app.get(\"/framework\")\ndef framework(framework: Framework = Framework.flask):\n    return {\"framework\": framework}\nНаступна цікава фіча — перетворення типів. Якщо ми хочемо отримати булеве значення як квері-параметр, нам все одно доведеться його передати як число або як рядок. Рydantic пропонує перетворити логічно правильне значення на булевий тип ось так:\n@app.get(\"/items\")\nasync def read_item(short: bool = False):\n    if short:\n        return \"Short items description\"\n    else:\n        return \"Full items description\"\nДля ендпоінту, вказаного вище, наступні значення будуть валідні та перетворені на булеве значення True:\nhttp://127.0.0.1:8000/items?short=1\nhttp://127.0.0.1:8000/items?short=True\nhttp://127.0.0.1:8000/items?short=true\nhttp://127.0.0.1:8000/items?short=on\nhttp://127.0.0.1:8000/items?short=yes\nІнколи нам потрібно гнучкіше налаштовувати той момент, де шукати і звідки діставати параметри. Наприклад, ми хочемо дістати значення з хедера. Для цього FastAPI надає нам такі інструменти: Query, Body, Path, Header, Cookie, які імпортуються з FastAPI. Вони допомагають не лише явно визначити, де шукати параметр, але й дозволяють оголосити додаткову валідацію.\nДавайте розглянемо це на прикладі:\nfrom typing import Optional\nfrom fastapi import FastAPI, Query, Header\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def test(number: Optional[int] = Query(None, alias=\"num\", gt=0, le=10), owner: str = Header(...)):\n    return {\"number\": number, \"owner\": owner}\nМи визначили ендпоінт, який очікує, що ми передамо йому число від 0 до 10 включно як квері-параметр. Причому квері-параметр ми повинні передавати як /?num=3, оскільки визначили alias для цього параметра і тепер очікуємо, що він прийде нам під ім’ям num, і що у нас буде хедер Owner.\nPydantic-моделі\nНайчастіше, коли ми будуємо REST API, то хочемо передавати якісь складніші структури у вигляді json у тілі запиту. Ці структури можна описати за допомогою Рydantic-моделей.\nНаприклад, ми хочемо приймати об’єкт item, який має ім’я, ціну та опціональний опис:\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\nТакож ми хочемо додати ендпоінт, який прийматиме POST-запити, десеріалізувати та валідувати json і десь зберігати його. Наша модель Item — це клас, тому ми можемо успадковуватися від неї і створити модель, яка також буде містити id. Адже нам хочеться зберегти десь наш item. Йому присвоюється id, і вже разом із цим ми можемо повернути клієнту відповідь із кодом 201.\nДля початку створимо модель із новим полем id:\nclass ItemOut(Item):\n    id: int\nДалі — ендпоінт з аргументом item типу Item. Оскільки Item — це Pydantic-модель, FastAPI передбачає, що нам потрібно дістати item з тіла запиту і content-type = application/json. Pydantic десеріалізує ці дані та провалідує їх. Потім створимо об’єкт типу ItemOut, який матиме ще й поле id, і повернемо все це користувачеві:\n@app.post(\"/item/\", response_model=ItemOut, status_code=201)\nasync def create_item(item: Item):\n    item_with_id = ItemOut(**item.dict(), id=1)\n    return item_with_id\nЯк ви можете побачити в декораторі, ми визначили, що дані, що повертаються будуть типу ItemOut, а статус код —  201. Вказівка response_model необхідна для того, щоб правильно згенерувати документацію (про це розповім далі), а також щоб серіалізувати та провалідувати дані. Ми могли б передати словник замість об’єкта ItemOut. Тоді FastAPI спробував би перетворити цей словник на ItemOut -об’єкт і провалідував дані.\nЯкщо хочемо створити більш складні структури з вкладеністю, то тут також не виникає особливих труднощів. Ми просто визначаємо нашу модель Pydantic, яка містить об’єкти з типом іншої Pydantic-моделі:\nclass OrderOut(BaseModel):\n    id: int\n    items: list[Item]\nЩе одна перевага FastAPI — автогенерація OpenApi-документації. Нічого не потрібно підключати, не потрібно танцювати з бубном — просто бери і користуйся. За замовчуванням документація перебуває на шляху /docs.\nВідкладені задачі\nІноді буває, що ми хочемо швиденько повернути респонс клієнту, а витратні задачі виконати потім у фоні. Зазвичай для цього використовується щось на зразок Celery або RQ. Щоб не морочитися з чергою та воркерами, у FastAPI є така фіча, як background tasks. Ми можемо оголосити, що наша функція набуває аргументу типу BackgroundTasks, і цей об’єкт буде інтерфейсом для створення бекграунд-тасків:\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\nНа прикладі вище зображено функцію, яка щось записує у файл. Нам необхідно обробити її після того, як повернемо користувачеві респонс. Для цього оголосимо аргумент background_tasks з типом BackgroundTasks і за допомогою нього зможемо додавати функції, які нам потрібно виконати після того, як відпрацює наша view.\nТут варто розуміти, що це не заміна Celery і подібних інструментів для виконання асинхронних завдань. У даному випадку у нас є процес з Python, в якому обробляються наші запити, і в ньому ж буде запущена відкладена функція, на відміну від тієї ж Celery, де є черга й окремі процеси-воркери, які обробляють нашу задачу.\nІн’єкція залежностей\nFastAPI надає систему для ін’єкції залежностей у наші view. Для цього є Depends. Залежністю може бути callable-об’єкт, у якому буде реалізована певна логіка. Об’єкт, який ми інжектуємо, матиме доступ до контексту реквеста. Це означає, що ми зможемо винести певну загальну логіку з наших view та перевикористати її. \nПропоную розглянути цей процес на прикладі:\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\ndef read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\nМи створили функцію, яка дістає нам параметр для фільтрації і повертає його як словник. Потім підключили цю функцію як залежність у наші view функції read_items та read_users. Оголосили аргумент common типу dictі та надали йому Depends (common_parameters).\nDepends приймає аргументом callable-об’єкт, який буде викликаний перед обробкою нашого view. У цьому випадку він поверне словник із параметрами для фільтрації. Цікавим тут є те, що нам байдуже, чи є функція синхронною. Ми можемо оголосити common_parameters як синхронну і як асинхронну. FastAPI усе розрулить за нас.\nОскільки залежностями можуть бути callable-об’єкти, ми можемо замінити нашу функцію, яка повертає словник з параметрами, на щось більш елегантне:\nclass CommonQueryParams:\n    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n@app.get(\"/items/\")\ndef read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    return commons\nЯк бачите, ми замінили функцію на клас і тепер передаємо його в Depends. У результаті нам повертається об’єкт класу CommonQueryParams. Тепер ми можемо отримати доступ до його атрибутів через точку, наприклад,commons.q. Ось так виглядають наші залежності:\nПо суті, це граф. Ми можемо зробити його більш складним, де у поточні залежності додамо інші та зробимо їх більш специфічними. Припустимо, у нас буде залежність, яка перевіряє, чи авторизований користувач, і дістає його з бази. Інша — пов’язана з першою залежність — перевіряє, чи є користувач активним, а третя — котра залежить від другої — визначає, чи є він адміном:\nОскільки це граф, виникає питання ромбовидної залежності: скільки разів буде виконуватись найперша батьківська залежність? Відповідь проста — всього раз. Зазвичай нам потрібно лише один раз виконати дію над реквестом, а потім закешувати дані, які нам поверне залежність. Це можна перевизначити, передавши в Dependsuse_cache=False:\ndef dep_a():\n    logger.warning(\"A\")\n\ndef dep_b(a = Depends(dep_a)):\n    logger.warning(\"B\")\n\ndef dep_c(a = Depends(dep_a, use_cache=False)):\n    logger.warning(\"C\")\n\n@app.get(\"/test\")\ndef test(dep_a = Depends(dep_a), dep_b = Depends(dep_b), dep_c = Depends(dep_c)):\n    return \"Hello world\"\nЗалежність dep_a йде першою в аргументах і не має інших залежностей, тому вона виконається та кешує її. Залежність dep_b йде слідом і має залежність від dep_a, але виклик dep_a було зроблено, і відповідь закешована, тому dep_a не буде викликатися. Далі йде dep_c, яка залежить від dep_a та визначає use_cache=False для залежності dep_a. Незважаючи на те що dep_a була закешована, вона все одно буде викликатися, і відповідь також закешується. Потім викличеться dep_c. І тільки наприкінці виконається наша функція test.\nІ це ще не все. Ми можемо використовувати наші залежності разом з yield. Це буде щось на зразок контекстного менеджера. Ми зможемо виконати якусь ініціалізацію до yield, потім виконається наша view, далі — бекграунд-таски, а також відпрацює код після yield. Це можна використовувати для ініціалізації ресурсів, наприклад, для налаштування підключення до бази даних:\nasync def get_db():\n    logger.warning(\"Open connection\")\n    yield \"database\"\n    logger.warning(\"Close connection\")\n\nasync def task(database):\n    logger.warning(\"Some task\")\n    logger.warning(f\"DB: {database}\")\n\n@app.get(\"/test\")\nasync def test(background_tasks: BackgroundTasks, database = Depends(get_db)):\n    background_tasks.add_task(task, database)\n    return database\nDependency Injector необхідний для того, щоб легко підмінити нашу залежність на mock. Припустимо, ця залежність — і є клієнт, який звертається до стороннього API за http. Робиться це просто: підмінюємо залежність, яка повертає клієнта, на залежність, яка повертає mock із таким самим публічним API.\nЯкщо у нас є сервіс для надсилання повідомлень, то при спробі запустити тести з цим сервісом, вони впадуть з помилкою. Однак ми можемо визначити pytest-фікстуру, в якій наша залежність буде підмінятися. Як це зробити? Додамо функцію яка поверне mock у app.dependency_overrides, і після того, як тест спрацює, очистимо наші перевизначення залежностей app.dependency_overrides = {}:\nimport pytest\nfrom fastapi import Depends\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef send_msg():\n    raise ValueError(\"Error\")\n\n@app.get(\"/api\")\ndef some_api(msg = Depends(send_msg)):\n    return msg\n\n@pytest.fixture\ndef mock_dependencies():\n    def get_msg_mocked():\n        return \"Test pass\"\n    app.dependency_overrides[send_msg] = get_msg_mocked\n    yield\n    app.dependency_overrides = {}\n\n@pytest.mark.usefixtures(\"mock_dependencies\")\ndef test_my_api():\n    res = client.get(\"/api\")\n    assert res.status_code == 200\nВисновок\nЯ спробував коротко описати основні можливості FastAPI і показати, чим мені подобається цей фреймворк. Вам варто спробувати його хоча б для невеликого pet-проєкту. Довкола FastAPI досить швидко розростається спільнота його шанувальників, мало не щодня з’являються нові бібліотеки. Тому деякі проєкти вже поступово переходять із Flask на FastAPI. Успіхів!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:48:02','2022-12-02 23:48:02'),(76,'Моя історія з Laravel, MongoDB та видачею токена для API: як я навчилася вирішувати непрості задачі','Тетяна Козельська BLOG\nFull-Stack Developer в Grid Dynamics','Привіт! Мене звати Таня Козельська і я Full-Stack Developer з семирічним досвідом. Зараз я працюю у компанії Grid Dynamics. Якщо ви колись, як і я, обрали чи збираєтесь обрати композицію для свого проєкту, яка складається з фреймворку Laravel, бази MongoDB і при цьому вам треба видавати токен для АРІ — ця стаття може стати у нагоді. \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯк з’явилася проблема\nТрошки загальної сухої інформації. Ну, про всяк випадок.\nLaravel — це безкоштовний PHP вебфреймворк з відкритим кодом, призначений для розробки вебдодатків, що слідує за архітектурною схемою моделі-перегляду (MVC) та заснований на Symfony. \nMongoDB — це нереляційна база даних документів, масштабована та гнучка, із запитами та індексацією.\nОтже, почну розповідь з мого досвіду роботи. У недалекому 2018 році для одного зі своїх проєктів я обрала саме такий набір. Спочатку все було добре, адже Laravel має вбудований у свою структуру компонент Passport, який дозволяє легко аутентифікувати юзера, видавати токен, контролювати час сесії й все таке інше.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nТа виявилося, що є невелика проблемка, і за замовчуванням Laravel не вміє працювати, використовуючи Passport і MongoDB.\nЧерез те, що в моєму проєкті були досить об’ємні та різні за структурою дані, відмовлятися від бази мені не хотілося. Тому я почала шукати, що можна зробити з усім цим, і, як не дивно, виявилося, що я не одна така, і вже є люди, які зіткнулися з цією проблемою і створили спеціальну бібліотеку.\nБібліотека на GitHub\nНазва бібліотеки — designmynight/laravel-mongodb-passport. Якщо знайдете її на GitHub, то там все дуже просто і детально описано: \nвстановлюємо залежність через composer; \nвказуємо в моделі юзера використання бібліотеки, а не стандартне розширення для роботи з базою;\nдодаємо бібліотеку у файл конфігурації провайдерів.\nНа цьому все, далі можемо використовувати функцію createToken. Все працює досить стабільно. Та є один момент — ця корисна бібліотека залежить від багатьох інших залежностей у composer-файлі. І поки Laravel не оновилася до версії 7, все було гаразд. А після оновлення використання цієї бібліотеки стало просто неможливим.\nЧомусь розробники designmynight вирішили не оновлювати свій код для нових версій фреймворку. Так часто буває з кастомними бібліотеками, скажете ви, і я цілком згодна, та на той момент я вже мала декілька проєктів, які використовують схожу базову структуру. І з цим треба було щось робити.\nСпочатку я відстежувала репозиторій бібліотеки й думала: «Ну, окей, у мене Laravel 6, а вийшло лише ще одне оновлення, можна ще почекати». Можливо, все складеться добре і бібліотека почне підтримувати оновлення. Тим часом на GitHub все більше і більше з’являється коментарів про необхідне оновлення, і я одна з тих розробниць, хто чекає на апдейт.\nЗ’являється fork від основної бранчі з коментарем: «Хей, гайз, все працює для нової версії». Я, звісно, випробовую це оновлення, з дивними махінаціями при оновленні composer-файлу.\nВсе це виглядало так, ніби я намагаюся обдурити залежності і якимось дивом отримати завершення роботи команди composer update. \nМаю сказати, що я таки отримала бажаний результат, але стосувався він лише composer. Попри успішне виконання, додаток нормально працювати не хотів, невідповідність версій залежностей наздогнала мене в роботі функцій логіну, того ж таки токену. Довелося повернутися і почекати ще трошки.\nНове розширення Laravel Sanctum\nВийшла Laravel 8, а оновлення бібліотеки так і не сталося. Я відставала вже на дві версії фреймворку. Я отримала час і дозвіл від клієнта на експерименти та почала шукати вихід самостійно, досліджуючи надри фреймворку та Passport. \nМоя увага була спрямована на нове розширення Laravel Sanctum, яке з’явилося з 7-ої версії. За інформацією, вказаною у документації, з його допомогою можна створити легку систему аутентифікації для SPA (односторінкових додатків), мобільних додатків і простих API на основі токенів. Тож це виглядало як потрібна мені деталь для додатка. Але і тут я зіткнулася з тим самим — використанням MongoDB.\nМій досвід з MongoDB\nЯ вирішила все-таки спробувати заюзати цей механізм, при цьому мені потрібно було знайти файл, в який йшло підключення на стандартний модуль для роботи з базою даних і замінити його на модуль для роботи з MongoDB. \nОтож, покроково це виглядає так:\n1. Виконуємо базові команди, які вказані в документації Laravel Sanctum для composer:\ncomposer require laravel/sanctum\n2. Паблішимо провайдер-файл, який пізніше ми замінимо на власний:\nphp artisan vendor:publish --provider=\"LaravelSanctumSanctumServiceProvider\"\n3. В моделі юзера підключаємо все необхідне для роботи Sanctum:\nuse AppsanctumHasApiTokens;\nuse AppAuthUser as Authenticatable;\nДля моєї моделі це ось такі два файли та при цьому модель має наслідувати і юзати ці класи:\nclass User extends Authenticatable implements CanResetPasswordContract\n{\n   use  Notifiable, CanResetPassword, HasApiTokens;\nДумаю, що з третього пункту вже зрозуміло, що потрібно створити свою директорію для Sanctum, в якій буде ще багато файлів. Також нам необхідний файл AuthUser.php. \n4. Файл AuthUser.php містить у собі весь базовий код з ядра Laravel Sanctum, але для нас важливо те, що ми вказуємо тут модуль для роботи з базою MongoDB:\nuse JenssegersMongodbEloquentModel as Model;\n\n<?php\n\nnamespace App;\n\nuse IlluminateAuthAuthenticatable;\nuse IlluminateAuthMustVerifyEmail;\nuse IlluminateAuthPasswordsCanResetPassword;\nuse IlluminateContractsAuthAccessAuthorizable as AuthorizableContract;\nuse IlluminateContractsAuthAuthenticatable as AuthenticatableContract;\nuse IlluminateContractsAuthCanResetPassword as CanResetPasswordContract;\nuse JenssegersMongodbEloquentModel as Model;\nuse IlluminateFoundationAuthAccessAuthorizable;\n\nclass AuthUser extends Model implements\n\n   AuthenticatableContract,\n   AuthorizableContract,\n   CanResetPasswordContract\n{\n   use Authenticatable, Authorizable, CanResetPassword, MustVerifyEmail;\n}\n5. Далі потрібно у директорію sanctum помістити такі файли:\nЦі файли потрібні, оскільки кожен із них викликає інший, і якщо не змінити у них використання на кастомний файл, що використовує монгу, то нічого не вийде. Начиння цих файлів також можна взяти з базової структури фреймворку і нічого не міняти, окрім namespace. У мене це: Appsanctum;.\nВинятком є файл PersonalAccessToken.php. У ньому нам також треба вказати використання MongoDB.\n6. Отож, тут ми підключаємо потрібний клас для PersonalAccessToken.php:\n<?php\n\nnamespace Appsanctum;\nuse JenssegersMongodbEloquentModel;\nuse LaravelSanctumContractsHasAbilities;\nclass PersonalAccessToken extends Model implements HasAbilities\n{\n 7. Якщо ви помітили, то в директорії sanctum є файл SanctumServiceProvider.php, саме на нього  треба змінити у файлі configapp.php базовий провайдер для Sanctum.\nСтворення і передача токена\nНа цьому налаштування і підготовка закінчуються і можна спокійно використовувати метод createToken для створення і передачі токена юзеру по АРІ. У мене це виглядає так: \n$user->createToken(\'app_name\', base64_encode($user->_id))->plainTextToken;\nГотово!\nСподіваюся, мій досвід був цікавим та корисним для вас. Успіху! \nЧитайте також: Майстер на всі руки: дорожня карта фулстек-розробника на 2022 рік\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:48:36','2022-12-02 23:48:36'),(77,'Все не так просто, як здається: розбираємо складні випадки міграції баз даних у Django','Михайло Сердюк BLOG\nBackend Developer в NIX','При знайомстві фреймворком Django багато хто схвально оцінює механізм міграцій. З його допомогою можна синхронізувати код у моделях Django з базою даних, яка під’єднана до вебзастосунку. При цьому міграції робляться автоматично, що значно полегшує роботу. Але чи так все гарно, як виглядає на перший погляд? З власного досвіду скажу, що на практиці з міграціями може бути чимало проблем.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nМене звати Михайло Сердюк, я Backend Developer в NIX та спікер IT-конференції NIX MultiConf. У цій статті я розповім, як вирішити проблеми, які можуть виникнути під час міграцій в Django. Поїхали!\nЗміст\n1. Що таке міграції\n2. Навіщо розбиратися з міграціями\n3. Як замінити міграцію\n4. Складні випадки при міграціях\n5. Дата-міграції\n6. Скасування дата-міграції\n7. Повторний запуск дата-міграцій\n8. Фейк-міграції\n9. Squashing migrations\n10. Замість висновку\nЩо таке міграції\nДля початку — трохи теорії. Припустимо, що в Django-застосунку в файлі моделей ми вказали певний клас, щоб описати, як має виглядати наша таблиця з даними:\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\n  У такому випадку зі створенням міграцій все було б добре. Але уявімо, що в якийсь момент з’явилась необхідність доповнити модель.\nНаприклад, в Question треба додати поле для опису title питання. Може здатися, що достатньо просто вписати його, але насправді цього замало. Щоб Django сприйняв ці зміни і заніс їх до бази даних, модель потрібно промігрувати до Django. У наведеному нижче прикладі я навмисно задав для поля title параметр blank=True. Трохи далі по тексту поясню це:\n  Отже, ми змінили базу даних. Тепер потрібно створити міграцію. Для цього прописуємо команду manage.py makemigrations. Після цього Django автоматично створить файл із міграціями. Ці файли створюються в хронологічному порядку, за нумерацією. Коли ми перший раз запускаємо застосунок, з’являється initial-міграція, а після неї — наступні. В нашому випадку це друга міграція з прописаними в моделі змінами.\nОднак у нас з’явилися лише файли, які порівняли стан файлу з моделями застосунку. Для цього Django проаналізував файли міграції, створені до цього, з класами і моделями в файлі model.py. Різниця між ними і стала основою файлу міграції. Але для застосування цього файлу в базі даних потрібно запустити ще одну команду — manage.py migrate.\nПісля цього в консолі з’явиться вивід — міграції застосовані. При першому запуску застосунку цей вивід дуже масивний, адже в Django є багато вбудованих моделей, які першочергово застосовуються при міграції:\n  Варто розібратися, що являє собою сам файл із міграцією:\nПо-перше, в ньому вказуються залежності, з яких він створений. Для цього робиться посилання з бази даних на останню застосовану міграцію.\nПо-друге, в файлі вказуються потрібні зміни в базі даних. У нашому випадку це створення в моделі question нового поля з назвою title і параметри для нього:\nНавіщо розбиратися з міграціями\nМоже здатися, що тут достатньо оперувати лише двома командами: makemigrations та migration. На невеликих проєктах це саме так і відбувається: пишете та застосовуєте міграції і додаєте код для оперування даними. Однак часто замовник формує задачу дуже абстрактно.\nПоясню через аналогію. Клієнту потрібен транспорт, на якому він зможе дістатися з пункту А до пункту Б і перевезти вантаж. Виконавець, як раціональна людина, піде шляхом найменшого спротиву та зробить велосипед. Це транспорт? Так. Ним можна дістатися з пункту А до пункту Б? Можна. Він підходить для перевезення вантажу? Безумовно. І якщо повернутися до наших з вами завдань, то подібна ситуація може призвести до схеми бази даних, яка наведена на цій ілюстрації:\nЦе приклад першої реалізації бази даних, взятий з реальної практики. Тут були великі моделі, у них були властивості, пов’язані з основними моделями. Але замовник сказав, що має декілька зауважень.\nЯкщо повернутися до нашої аналогії, ситуація виглядала приблизно так:\nпо-перше, відстань від пункту А до пункту Б велика, тому потрібен більш швидкий транспортний засіб, аніж велосипед;\nпо-друге, на шляху чимало підйомів та спусків, тому замість педалей краще встановити двигун;\nпо-третє, використання транспорту планується впродовж року, тому потрібна кабіна з обігрівачем і кондиціонером;\nта й взагалі вантажі великі, і багажника на велосипеді замало.\nПісля зауважень розробник вносить зміни до структури бази даних, і згодом проєкт трансформується у дещо інше. Результат змін ви можете побачити на наступній ілюстрації. До речі, ця схема — ще не кінцевий варіант, а десь 10% від реальної структури:\nЦей приклад каже нам: постійні зміни бази даних — це нормально. Бо відразу прорахувати можливі ризики складно. Задача може коригуватися декілька разів. Та й, відверто кажучи, інколи сам замовник не може чітко описати потрібний йому продукт.\nСаме тому розробнику дуже часто потрібно виправляти певні моменти в схемі бази даних. Для цього він має відкотити у змінах міграції все назад.\nТаке може статися в декількох випадках. На щастя, є дієві варіанти, як із цим впоратися.\nЯк замінити міграцію\nПерший і найбільш простий сценарій — коли ми створили файл, але не запустили команду migrate. В такому разі зміни до бази даних не були застосовані. Тому можна просто видалити останні файли з міграціями, зробити зміни в моделях, створити нову міграцію та застосувати її.\nТрохи складніша ситуація — коли ми і запускали команду migrate, і застосували зміни з міграціями в базу даних. Для вирішення такої проблеми потрібно зрозуміти, чи важлива база даних. Якщо нею можна знехтувати, видаляйте всі міграції і базу даних, створюйте нові міграції з потрібними змінами і мігруйте в нову БД. Але якщо база даних важлива, тоді варто зробити відкат до попередніх міграцій. Для цього вводимо команду manage.py show migration.\nДалі побачимо застосовані в базу даних міграції. В моєму випадку попередньою була 0010_previous_migration. Щоб до неї відкотитися, ми прописуємо команду:\nmanage.py migrate my_app 0010_previous_migration\nЗазначаємо тут назви нашого застосунку і бажаної міграції. Після відкату залишається видалити непотрібну міграцію та зробити зміни в моделях, а потім заново промігрувати.\nКрім цього, можна відкотитися і до нульової міграції — зробленої на початку створення застосунку. Для цього використовується команда manage.py migrate my_app zero.\nСкладні випадки при міграціях\nВпевнений, що більшість із вас з описаними прикладами вже так чи інакше стикалися. Але що робити в більш складних ситуаціях? Спробуємо розібрати найбільш поширені варіанти подібних проблем:\n  Уявімо, що в моделі question із полем question_text необхідно додати title з описом, якої довжини мають бути дані в цьому полі.\nКоли ми почнемо створювати міграції, Django відразу нам вкаже: у полі не прописано значення за замовчуванням. І хоча для нових полів це поле буде заповнюватись, Django повторюватиме: його треба заповнити.\n  Є декілька шляхів вирішення цієї проблеми. Розглянемо їх.\nЗадати значення за замовчуванням\nТаблиця на ілюстрації показує суть ситуації: ми створили поле title, яке в попередніх записах не заповнено:\nМожна заповнити дані для раніше створених записів за допомогою одноразових значень. Для цього в консолі треба прописати значення для заповнення таблиці за дефолтом. В моєму випадку це default title:\n  У такому випадку таблиця з попередніми записами буде заповнена. Але також можна використати й багаторазові значення в самій моделі:\n  Додаємо параметр default і в ньому описуємо значення для попередніх та нових записів. Після запуску міграції буде створено нове поле — і попередні записи в ньому будуть вже заповнені.\n  Залишити поле порожнім\nНа цьому прикладі я додав поле з датою published_at, якому дозволено бути пустим. Для цього потрібно вказати два параметри: null=True та blank=True.\n  При створенні запису в таблиці з question є як обов’язкові поля (наприклад, question_text), так й інші (в нашому випадку published_at). Останні завдяки позначці null=True будуть заповнені зі значенням null — тобто вони будуть пустими. Дозаповнювати такі поля можна пізніше.\n    Також є параметр blank=True. Якщо null відповідає за поводження у середині бази даних, то blank — за роботу в адмінці Django. Навіть за наявності поля null=True при створенні запису адміністративна панель не дозволить зробити пусті записи без поля blank=True. За допомогою цієї позначки ми можемо створювати в адмінці такі поля.\nЯкщо не хочеться ставити default або null\nІнколи недоцільно або неможливо дозволити появу пустих полів — бо це не є логічним поводженням моделей. Припустимо, що у нас є дві моделі: Question та Choice. Перша — для опису якогось питання, друга — для пулу відповідей на це питання.\nВ якийсь момент вам потрібно об’єднати чойси з квесченами.\nДля цього вказуємо, до якого запитання відноситься кожен question. Через це ми не можемо дозволити, щоб поле було пустим або заповненим по дефолту. Навіть Django буде казати, щось не так. Адже він розумітиме, як поводитися з попередніми записами без дефолту.\nНайпростіший спосіб — знести базу даних, видалити старі міграції, створити нову базу, внести необхідні зміни в моделі та створити міграцію. Вона задасть ці зв’язки, і кожного разу при заповненні бази даних все буде добре. Якщо ж дані в цій базі дуже важливі, то цей спосіб не підходить. Тоді варто створити дублікатну модель для моделі Choice:\n  Я назвав її QuestionChoice. Вона складається з choice_text та question із ForeignKey-зв’язком на Question. Далі треба зробити міграцію та мігрувати нову модель у базу даних, а потім — створити дата-міграцію. За відомою вже логікою з її допомогою модель QuestionChoice буде заповнюватись даними з моделі Choice та зав’язаними на кожен із цих записів ключами на записі в моделі Question. Після цього можна запускати дата-міграцію та використовувати всі ці зміни. Вам залишиться лише видалити попередню модель Choice та зробити міграцію з перейменуванням моделі-дубліката QuestionChoice на звичну Choice.\nДата-міграції\nДо цього ми розглядали структурні міграції, які відповідали за зміни структури даних. В описаному сценарії з’явилося поняття дата-міграції. Вона допомагає змігрувати та зберегти дані за нетиповими правилами, які не розуміє Django. Для початку роботи з дата-міграціями треба створити пусту міграцію наступною командою:\nmanage.py makemigrations --empty yourappname\nУ результаті ми отримуємо міграцію у такому вигляді:\n  Наступний крок — заходимо в середину пустої міграції та прописуємо певні дані для дата-міграцій. Насамперед потрібно прописати функцію з логікою, яка має бути виконана:\n  В моєму випадку виникла необхідність у створенні та заповненні поля name, яке має включати first_name та last_name з попередньої моделі. Тобто ми створюємо функцію і викликаємо її всередині оператора operations, запускаємо міграції — і далі Django все зробить сам.\nСкасування дата-міграції\nІноді потрібно скасувати чи відкотити створену дата-міграцію. Проте якщо використати вже описаний вище механізм, з’явиться наступний warning:\n  Причина цього — при створенні міграції в автоматичному режимі в неї всередині функції міграції створюється дзеркальна міграція відката.\nФактично з’являються дві міграції: одна — яка мігрує та інша — яка повертає значення назад. При створенні та самостійному описі дата-міграції розробникам не хочеться писати багато коду, тому більшість нехтує створенням зворотної міграції. Через це і виникають складнощі. Тому якщо ви знаєте, що будете часто відкочувати дата-міграцію, краще пропишіть функцію відкату та вкажіть її другим параметром всередині функції RunPython усередині operations:\nПовторний запуск дата-міграцій\nПри створенні дата-міграції допустима різна логіка. Наприклад, можна робити її з прицілом на декілька запусків та дозаповнення. Проте інколи це неможливо чи просто не хочеться прописувати функцію відкату. Тоді допоможе так звана фейк-міграція:\n  Завдяки вказівці fake можна відкотити дата-міграцію і запустити її знову. Наприклад, ми промігрували до 8-ї міграції, потім відкотились назад до 7-ї за допомогою фейкової міграції:\n  Після відкочування з оператором fake повернулися на 7-му міграцію, зробили певні зміни у 8-й міграції та повторно запустили міграцію — і все спрацює, як потрібно:\nФейк-міграції\nХочу окремо зосередити вашу увагу на понятті фейк-міграції.\nУ міграції є два стани:\nСуттєвий, який можна побачити всередині папки з файлами migrate (це ті самі файли міграції).\nЦе запис в базі даних, де також є таблиця з усіма міграціями, які застосували до бази даних.\nКоли створюється фейкова міграція, вона додає або видаляє запис із цієї таблиці, але сама міграція не застосовується в жоден із боків.\nТому при використанні дата-міграції дуже зручно робити фейк-міграції назад або вперед. Так ми додаємо запис у таблицю з міграціями, проте зміни з бази даних не виконуємо.\nЗ фейковими міграціями працюють ті ж самі інструменти, як і зі звичайними. Ми можемо повернутися до початкової міграції, зробити фейк-міграцію застосунку, відкотитися до певної міграції та стерти записи в таблиці, не застосовуючи зміни до бази даних.\nДля цього використовуються наступні команди:\nmanage.py migrate --fake-initial\nmanage.py migrate --fake myapp\nmanage.py migrate --fake myapp migration_name\nАле треба пам’ятати: фейкові міграції добре показують себе під час роботи з дата-міграціями. Проте у випадку зі структурними міграціями, які описують структуру застосунку, є певні ризики.\nНаприклад, так ви можете видалити запис міграції про створення якоїсь моделі. Тоді в таблиці не буде даних про виконання міграції зі створенням цієї моделі — хоча в базі даних ця модель створена. Тому при повторній міграції цієї таблиці може виникнути помилка, пов’язана зі спробою створення поля, яке вже існує в базі даних.\nSquashing migrations\nІ наостанок розповім про сквош-міграції. Цей інструмент дозволяє зробити структуру міграцій більш лаконічною. Під час тривалої розробки застосунку може накопичуватися 100, 200, 300 та більше файлів з міграціями. Це не проблема для Django, він вміє працювати з такою структурою. Однак для програміста це все незручно. Якщо у вас, скажімо, 200 міграцій, а потрібно відкотитися до сотої, а потім назад, то важко все відслідкувати. Для поєднання та оптимізації міграцій роблять сквош-міграцію.\nПри використанні сквош-міграції можна в автоматичному режимі оптимізувати міграції всього застосунку або вказати, до якої міграції зробити сквошинг.\nУ такому випадку Django спочатку проаналізує всі міграції, виконані після вказаної міграції (в моєму прикладі — четвертої). Потім програма зробить їх оптимізацію, подивиться, які дії виконувались і чи суперечать вони одна одній, скомпонує все в один файл — і створить сквош-міграцію:\n  Після цього необхідно виконати фіксацію сквош-міграції. Тут маємо кілька кроків:\nВилучити всі міграційні файли, які включає сквош-міграція.\nОновити всі міграції, які залежали від стиснутих та видалених міграцій.\nВнести зміни в атрибуті Migration класі сквош-міграції. Так ми скажемо Django, що це стиснена міграція, і на неї треба орієнтуватися в майбутньому. \nЗамість висновку\nЯк бачите, нічого занадто складного у роботі з такими міграціями, як і з будь-якими іншими, в Django немає. Проте не все так легко, як могло здатися спочатку. І про це важливо пам’ятати кожному Python-розробнику.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:49:10','2022-12-02 23:49:10'),(78,'Засновник збанкрутілої FTX володіє часткою в Twitter на $100 млн','Игорь Шелудченко','Засновник збанкрутілої криптовалютної біржі FTX Сем Бенкман-Фрід володіє часткою в Twitter Ілона Маска на сумму в $100 млн. Про це повідомив Insider з посиланням на звіт Semafor.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк повідомляє видання, після офіційної пропозиції щодо покупки мікроблогу Ілон Маск відправив Сему Бенкману-Фріду текстове повідомлення з пропозицією перевести свої публічні акції Twitter в частку в компанії.\nУ балансовому звіті FTX за цей місяць акції Twitter були вказані як «неліквідні» активи.\nДо цього засновник FTX висловив свою підтримку планам Маска купити мікроблог, але сказав, що не зможе інвестувати нові гроші у Twitter. Він заявив, що має акції на суму близько $100 млн, які він може вкласти в угоду.\nПри цьому сам Сем Бенкман-Фрід розглядав можливість покупки Twitter і був готовий внести від $8 до $15 млрд.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nНагадаємо, менш ніж 2 тижні тому стало відомо про офіційне банкрутство FTX, другої в світі за величиною криптовалютної біржі.\nЦя подія стала логічним завершенням тижневої турбулентності на криптовалютному ринку, викликанному бажанням врятувати FTX.\nНевдовзі після цього стало відомо про зникнення з рахунків FTX мінімум $1 млрд коштів клієнтів. \nЗазначимо, що про покупку Twitter CEO SpaceX та Tesla Ілоном Маском стало відомо ще у квітні. Сума операції склала $44 млрд із розрахунку $54,2 за акцію. Насамперед новий власник почав скорочення співробітників та бюджету компанії.\nНаразі кількість працівників Twitter скоротилася в 2-3 рази. Цьому й посприяв недавній ультиматум нового власника, Так, Ілон Маск запропонував співробітникам компанії обрати: понаднормову працю з високою інтенсивністю або звільнення.','2022-12-02 23:49:44','2022-12-02 23:49:44'),(79,'Криптобіржа Genesis шукає $1 млрд для уникнення банкрутства','Игорь Шелудченко','Брокерська криптовалютна компанія Genesis попередила потенційних інвесторів про можливість банкрутства в разі, якщо пошук коштів для кредитного підрозділу завершиться невдачею. Про це повідомив  Bloomberg з посиланням на інформоване джерело.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nОстанні дні компанія провела в пошуку щонайменше $1 млрд капітал. Були переговори з криптобіржею Binance, але поки про конкретику рано говорити.\nПошук фінансування повязаний з нестачею ліквідності у кредитора після раптового краху FTX, однієї з найбільших у світі криптовалютних бірж.\n«У нас немає планів оголосити банкрутство найближчим часом. Наша мета – врегулювати поточну ситуацію на основі консенсусу без подання заяви про банкрутство. Genesis продовжує вести конструктивні переговори із кредиторами», – заявив представник Genesis.\nКомпанія є контрагентом багатьох криптопроєктів. Її проблеми, зокрема, негативно позначилися на бізнесі мільярдерів братів Вінклвос, власників криптобіржі Gemini.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nНагадаємо, 11 листопада FTX, друга в світі за величиною криптовалютна біржа офіційно заявила про банкрутство. \nВ повідомленні сказано, що тепер мета FTX полягає в тому, щоб «почати впорядкований процес перевірки та монетизації активів на благо всіх зацікавлених сторін у всьому світі».\nЦя подія стала логічним завершенням тижневої турбулентності на криптовалютному ринку, викликанному бажанням врятувати FTX.\nПізніше Reuters повідомив, що з рахунків біржі зникли більш ніж $1 млрд після переведення $10 млрд до торгової компанії Bankman-Fried Alameda Research засновника FTX Сема Бенкмана-Фріда.','2022-12-02 23:50:18','2022-12-02 23:50:18'),(80,'IdeaSoft запустила безкоштовні блокчейн-курси','Игорь Шелудченко','IT-компанія IdeaSoft запустила IdeaSoft Career Booster – платформу, яка пропонує безкоштовні курси по блокчейну для розробників. Про це стало відомо з прес-релізу IdeaSoft, який опинився в розпорядженні Highload.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПершим на платформі з’явився курс, створений у співавторстві з Blaize та присвячений технології Solana. Solana — це блокчейн, який використовує унікальний механізм консенсусу під назвою Proof of History (PoH).\nIdeaSoft підкреслює, що курси по блокчейну підійдуть не тільки IT-спеціалістам, а й тим, хто хоче освоїти професію з нуля. Крім того, у студентів буде можливість проходження співбесід та отримання job offers в IT-компаніях.','2022-12-02 23:50:54','2022-12-02 23:50:54'),(81,'Його рахунок перевищив $19 млрд і він не зняв жодного біткойна: хто насправді ховається під ім’ям Сатоші Накамото','Оленка Пилипчак\nРедактор у Highload','Найбільша загадка у світі технологій на сьогодні — це не як працює біткойн. Питання в тому, хто саме його вигадав.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\n31 жовтня 2008 року особа, відома як Сатоші Накамото, опублікувала технічний документ у криптографічній розсилці. Хто ж він, цей геній, що змінив історію грошової системи?\nПередаємо слово Вільяму Брюсі — викладачу, інвестору та екперту в сфері біткойну.\nЖурналісти та блогери роками намагались дізнатись правду. Дехто заявляв, буцімто він і є тим таємничим винахідником, але жоден з таких претендентів не зміг надати переконливих доказів. Тож пошуки все ще тривають. \nАле у мене є версія, хто це. Давайте подивимось, що ми знаємо про Сатоші Накамото.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nУ своїй біографії на сайті P2P Foundation Сатоші стверджує, що він японець, і народився 5 квітня 1975 року. Проблема у тому, що він не схожий на японця. По-перше, технічний документ та наступні статті написані бездоганною англійською. По-друге — у нього дуже дивний режим дня як для людини, що живе у Японії.\nСтефан Томас, учасник Bitcoin Forum, дослідив, коли саме були опубліковані майже 500 постів Сатоші. Він виявив, що Сатоші Накамото не публікував нічого у проміжку від 2 до 8 години дня за японським часом. Тож вірогідніше за все Сатоші — вигаданий персонаж.\nНавіщо йому прикидатися кимось іншим?\nСхожий проєкт (Pretty Good Privacy) був розроблений Філом Ціммерманом. Він давав змогу обмінюватися зашифрованими повідомленнями. Ціммерман хотів створити відкритий канал комунікації для дисидентів. Але уряд США оцінив потенціал цієї технології, вилучив її та розпочав поліцейське розслідування.\nЦя технологія всього лиш дозволяла двом людям спілкуватися в приваті, не боячись прослуховування.\nЗамислитеся, як уряд міг би покарати того, хто створив можливість безкоштовно пересилати гроші без банків або інших посередників. По суті, біткойн виводить гроші з-під контролю уряду.\nОтже, бачимо, що у винахідника біткойна були причини приховувати свою особистість.\nВперше Сатоші Накамото з’являється в криптографічній електронній розсилці metzdowd.com. На Геловін 2008 року він презентував документ на 9 сторінок «Нова електронна грошова система від людини до людини без довіреної третьої сторони».\nПісля цього він заснував форум bitcointalk, де перше повідомлення написав під ніком satoshi. Потім він створив вебсайт з доменним ім’ям bitcoin.org. Genesis block, перший блок біткойна, був намайнений Сатоші 3 січня 2009 року.\nУпродовж 2010 року Сатоші Накамото працював з іншими програмістами, щоб змінити протокол біткоїна. Він активно спілкувався у спільноті. Але наприкінці 2010-го він раптово віддав ключі та коди Гевіну Андерсену та передав домени членам спільноти.\n23 квітня 2011 року творець біткойна повернувся, щоб опублікувати прощальний пост. На питання, чи не збирається він знову приєднатися до групи, Сатоші відповів: «Я зараз займаюсь іншими речами. Довіряю Гевіну та іншим».\nСатоші Накамото\nНа біткойн-рахунку Сатоші знаходилося близько 1 000 000 BTC. У грудні 2017 року, коли ціни досягли максимуму, він мав понад $19 мільярдів. На той час він посів 44 місце за чистим капіталом.\nІ він досі не зняв жодного біткойна.\nЦі факти свідчать, що з творцем біткоїну щось могло трапитися. Я вважаю, що іменем Сатоші Накамото користувався Хел Фінні. З 2009 року він хворів на БАС (бічний аміотрофічний склероз) і помер у 2014-му. \nКим був Хел Фінні?\nХел Фінні отримав науковий ступінь в Каліфорнійському технологічному інституті у 1979 році. Коли він був студентом, то виграв нагороду «Найрозумніший» серед своїх однолітків. На першому курсі коледжу він записався на курс теорії гравітаційного поля, що був призначений для докторантів. Очевидно, Фінні мав достатній рівень інтелекту, щоб стати Сатоші Накамото.\nПід час навчання Фінні бачили з книгою «Атлант розправив плечі» Айна Ренда. Вірогідно, лібертаріанські погляди у нього з’явилися завдяки таким книжкам.\nНа початку 1990-х Фінні приєднався до маловідомої спільноти вільнодумців та програмістів під назвою Cypherpunks. Вони просували ідею «широкомасштабного використання надійної криптографії та технологій, що покращують конфеденційність». Це мало дати поштовх соціальним та політичним змінам. Разом з цими самопроголошеними захисниками приватності Фінні радо використовував свої знання. \nЦіммерман та Фінні знали одне одного досить добре. В одній з відповідей на розсилку Cypherpunk Хел згадував Ціммермана та його концепцію PGP. Також він став першим членом PGP Corporation, де працював до 2011 року. Сатоші Накамото припинив працювати з біткойном того ж року.\nФінні значно вдосконалив новий PGP-протокол, але він не надто афішував це. Він добре знав про проблеми Філа через PGP. Тому можна зрозуміти його бажання приховати, хто є творцем біткойну.\nВін обрав бути хлопцем з далекої Японії, але чому?\nЙого вигадана персоналія була насправді реальнішою, ніж можна було очікувати. У двох кілометрах від Фінні жив науковець Доріан Прентіс Сатоші Накамото. Фінні міг використати його ім’я, щоб приховати власне. \nДумаю, Хел Фінні відправляв собі повідомлення з аккаунту Сатоші. Розумію, що звучить дивно. Проте не для того, хто свідомо намагається приховати свою участь у проєкті.\nЩоб перевірити механізм транзакцій, він підробив ці повідомлення і переказав перші біткойни на свій рахунок. \nЯк стверджує Вікіпедія, Хел Фінні розробив першу багаторазову систему proof-of-work. Це, як ви добре знаєте, протокол, що підтримує біткойн. На додачу до цього, Фінні захоплювався концептом цифрових грошей в 1990-х. В 1993 він навіть винайшов свої власну валюту, CRypto cASH.\nСпадщина\nНезважаючи на те, що Хела Фінні уже немає з нами, не варто забувати його працю на користь людства. Навіть якщо я помиляюся, і він не був Сатоші Накамото, його внесок у розробку біткойна досить вагомий. \nАвтор: Вільям Брюсі\nТекст адаптувала Євгенія Козловська','2022-12-02 23:52:05','2022-12-02 23:52:05'),(82,'Не дайте себе обдурити: 8 популярних біткойн-шахрайств і як їх уникнути','Оленка Пилипчак\nРедактор у Highload','У блокчейн-просторі існує кілька видів шахрайства з криптовалютою. До найбільш поширених з них належать шантаж, фейкові біржі, фейкові Giveaway, фішинг у соціальних мережах, шкідливе ПЗ з копіюванням і вставкою, фішингові електронні листи, схема Понці та схеми пірамід, а також програми-вимагачі.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nВinance Academy коротко розкаже про кожен з них, щоб ви могли дізнатися, як уникнути найбільш поширених шахрайств з біткойном і зберегти свої криптовалютні активи в цілості та безпеці.\nВступ\nПоки у світі впроваджуються нові технології, шахраї будуть продовжувати шукати місце для процвітання. На жаль, біткойн дає криптошахраям цікаву можливість, оскільки це безмежна цифрова валюта.\nДецентралізований характер біткойну дозволяє вам повністю контролювати свої інвестиції. Однак це також ускладнює визначення належної нормативної та правоохоронної бази.\nЯкщо шахраям вдасться змусити вас робити помилки при використанні біткойну, вони можуть в кінцевому підсумку вкрасти ваші активи і ви практично нічого не можете зробити, щоб відновити свою криптовалюту.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nПроте дуже важливо зрозуміти, як працюють шахраї, і навчитися визначати потенційні «червоні прапорці». Є багато біткойн-шахрайств, на які варто звернути увагу, але деякі з них зустрічаються частіше, ніж інші.\nПоширені біткойн-шахрайства та як їх уникнути\nШантаж\nШантаж — це відомий метод, який використовується шахраями, щоб загрожувати іншим розкриттям конфіденційної інформації, якщо їм будь-яким чином не відшкодують витрати. Ці відшкодування зазвичай здійснюються у формі криптовалют, зокрема біткойну.\nШантаж здійснюється шахраями, які або знаходять, або фальсифікують конфіденційну інформацію про вас і використовують цю інформацію, щоб змусити вас відправляти їм біткойн або інші форми грошей.\nКращий спосіб уникнути шантажу шахраями, які позбавляють вас ваших біткойнів — це уважно обирати логін, які сайти ви відвідуєте в інтернеті та кому ви надаєте свою інформацію. Також розумно використовувати двофакторну аутентифікацію. Якщо інформація, якою вас шантажують, помилкова і ви це знаєте, можливо, вам нічого не загрожує.\nФейкові біржі\nФейкові біржі являють собою шахрайські копії законних криптобірж.\nЯк правило, ці шахрайства будуть представлені як мобільні додатки, але ви також можете знайти їх як десктопні додатки або фейкові сайти.\nЯк правило, ці фейкові біржі залучають криптотрейдерів та інвесторів, пропонуючи безкоштовні криптовалюти, конкурентоспроможні ціни, низькі комісії за угоди та навіть подарунки.\nЩоб уникнути шахрайства при використанні фейкових бірж, ви повинні додати реальну URL-адресу у закладки та завжди двічі перевіряти її перед входом у систему. Ви також можете використовувати Binance Verify для перевірки легітимності URL-адрес, Telegram груп, акаунтів Twitter і т.д.\nКоли справа доходить до мобільних додатків, обов’язково перевірте інформацію про розробника, кількість завантажень, відгуки та коментарі.\nФейкові giveaway\nФейкові giveaway використовуються для того, щоб виманити у вас криптовалюту, пропонуючи щось безкоштовно в обмін на невеликий депозит. Зазвичай шахраї просять вас спочатку відправити кошти на біткойн-адресу, щоб ви могли отримати натомість більше біткойнів (наприклад, відправте 0,1 BTC, щоб отримати 0,5 BTC).\nАле якщо ви зробите ці транзакції, ви нічого не отримаєте і ніколи більше не побачите свої кошти.\nІснує безліч варіантів шахрайств з фейковими giveaway. Замість BTC деякі шахраї можуть запросити інші криптовалюти, такі як ETH, BNB, XRP і багато інших. У деяких випадках вони можуть запросити ваші приватні ключі або іншу конфіденційну інформацію.\nФейкові giveaway найчастіше зустрічаються у Twitter та інших соціальних мережах, де шахраї публікують популярні твіти, вірусні новини або оголошення (наприклад, оновлення протоколу або майбутнє ICO).\nКращий спосіб уникнути фейкових giveaway — ніколи не брати участь у будь-яких розіграшах, коли від вас вимагається спочатку відправити щось цінне. Законні giveaway ніколи не вимагатимуть грошових коштів.\nФішинг у соціальних мережах\nШахраї створюють акаунт, який буде виглядати як акаунт з високим рівнем авторитету у криптопросторі (це також відомо як видача себе за іншу особу). Потім вони пропонують фейкові giveaway через твіти або повідомлення у чаті.\nКращий спосіб уникнути шахрайства за допомогою фішингу у соціальних мережах — це перевірити ще раз, що людина насправді та, за кого вона себе видає. Зазвичай існують індикатори на певних платформах соціальних мереж, наприклад, сині галочки у Twitter і Facebook.\nШкідливе ПЗ «копіювати-вставити»\nЦей тип шкідливого ПЗ захоплює дані вашого буфера обміну і, якщо ви не будете обережні, то відправите гроші шахраям.\nПрипустимо, ви хочете відправити платіж у біткойнах своєму другові Бобу. Як завжди, він відправляє вам свою біткойн-адресу, щоб ви могли скопіювати та вставити її у свій гаманець. Однак, якщо ваш пристрій заражено шкідливим ПЗ для копіювання і вставки, адреса шахрая автоматично замінить адресу Боба у той момент, коли ви її вставите.\nЦе означає, що як тільки ваша біткойн-транзакція буде відправлена і підтверджена, ваш платіж буде в руках шахрая, і Боб нічого не отримає.\nЩоб уникнути цього типу шахрайства вам потрібно бути дуже обережним з вашою комп’ютерною безпекою.\nОстерігайтеся підозрілих повідомлень або електронних листів, які можуть містити заражені вкладення (файли) або небезпечні посилання.\nЗверніть увагу на сайти, які ви переглядаєте, і на програмне забезпечення, яке ви встановлюєте на свої пристрої. Вам також слід подумати про встановлення антивірусу і регулярне сканування на наявність загроз. Також важливо оновлювати операційну систему вашого пристрою.\nФішингові електронні листи\nЄ кілька видів фішингу. Один з найбільш поширених — це використання фішингу через електронні листи, які намагаються обманом змусити вас завантажити заражений файл або натиснути на посилання, яке веде на шкідливий сайт.\nЦі електронні листи особливо небезпечні, якщо вони імітують продукт або послугу, які ви часто використовуєте.\nЗазвичай шахраї включають повідомлення з проханням вжити термінових заходів для захисту вашого акаунта або коштів. Вони можуть попросити вас оновити інформацію про акаунт, скинути пароль або завантажити документи. У більшості випадків їх мета — зібрати ваші дані акаунта, щоб спробувати його зламати.\nЯк уникнути фішингу:\nПершим кроком до запобігання фішингу через електронну пошту є перевірка, чи надходять електронні листи з оригінального джерела. У разі сумнівів ви також можете зв’язатися з компанією, щоб підтвердити, що лист, який ви отримали, був від неї.\nВи можете навести курсор миші на посилання електронної пошти (не натискаючи), щоб перевірити, чи є в URL-адресах орфографічні помилки, незвичайні символи або інші порушення.\nНавіть якщо ви не можете знайти «червоні прапорці», не переходьте за посиланнями. Якщо вам потрібно отримати доступ до свого акаунта, ви повинні зробити це іншими способами, наприклад, набравши URL-адресу вручну або використовуючи закладки.\nСхема Понці та піраміди\nЦе два найстаріших фінансових шахрайства в історії.\nСхема Понці — це інвестиційна стратегія, при якій старим інвесторам виплачується дохід за рахунок грошей нових інвесторів. Коли шахрай не може залучати нових інвесторів, гроші перестають надходити. OneCoin був хорошим прикладом криптосхеми Понці.\nСхема пірамід — це бізнес-модель, яка платить учасникам в залежності від того, скільки нових учасників вони зареєстрували. Коли неможливо залучити нових учасників, грошовий потік зупиняється.\nКращий спосіб уникнути будь-якої з цих схем — це вивчити криптовалюту, яку ви купуєте. Якщо вартість криптовалюти або біткойн-фонду залежить виключно від приєднання нових інвесторів або учасників, ви, ймовірно, потрапили у схему Понці або піраміду.\nПрограми-вимагачі\nПрограми-вимагачі — це тип шкідливого ПЗ, яке або блокує мобільні або комп’ютерні пристрої жертв, або не дає їм отримати доступ до цінних даних, якщо не буде сплачено викуп (зазвичай у BTC).\nЦі атаки можуть бути особливо руйнівними, якщо вони націлені на лікарні, аеропорти та урядові установи.\nЯк правило, програма-вимагач блокує доступ до важливих файлів або баз даних і загрожує видалити їх, якщо платіж не буде отриманий до встановленого терміну. Але, на жаль, немає гарантії, що зловмисники виконають свою обіцянку.\nОсь кілька способів захистити себе від атак програм-вимагачів:\nВстановіть антивірус та оновлюйте операційну систему і додатки.\nУникайте натискання на рекламу і підозрілі посилання.\nОстерігайтеся вкладень (файлів) в електронній пошті. Будьте особливо обережні з файлами, які мають розширення .exe, .vbs або .scr).\nНе забувайте регулярно створювати резервні копії файлів, щоб ви могли відновити їх у разі зараження.\nВи можете знайти корисні поради щодо запобігання впливу програм-вимагачів і безкоштовні інструменти відновлення на NoMoreRansom.org.','2022-12-02 23:52:40','2022-12-02 23:52:40'),(83,'$800 тисяч на рік і вище: скільки платять розробникам у блокчейн-компаніях','Анастасія Пономарьова\nЖурналістка Highload','Вже всі чули новини про «криптозиму», скорочення в компаніях, що працюють в області криптовалют та інші жахи. Однак рівень зарплат розробників як у криптобіржах, так і блокчейн-компаніях залишається незмінно високим — не гірше, ніж у FAANG.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЛікбез\nМаленьке пояснення для тих, хто все ще думає, що блокчейн і біткойн — одне й те саме: криптовалюта — відгалуження технології блокчейн, пов’язане з фінансами. Крипта — популярний спосіб використання цієї технології, але далеко не єдиний: за допомогою блокчейну можна організувати хоч зберігання даних, хоч електронні вибори президента — незмінність порядку та змісту ланцюжка блоків у цьому зіграють на руку.\nТому розберемо біржі та блокчейн-компанії окремо.\nКриптокомпанії\nCoinbase\nПочнемо з однієї із найвідоміших платформ для обміну криптовалют, яка цього року планує скоротити 18% штату: ті, хто залишаться, збережуть до непристойності високі зарплати. “Гола” ставка джуніора, за даними levels.fyi, $135 тисяч на рік ($11 250 на місяць), а з усіма бонусами — $189 тисяч ($15 750 на місяць). Максимум, який може заробити тут розробник, — $826 тисяч ($69 тисяч на місяць) на позиції Senior Staff Software Engineer.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nBinance\nНе менш знаменитий сервіс обміну криптовалют Binance не надто поширює інформацію про рівень зарплат у компанії. Відомо, що медіана зарплат розробників початкового рівня тут 125 тисяч доларів на рік або 10 тисяч доларів на місяць.\nKraken\nАмериканська біржа щедро платить своїм розробникам. Так, працюючи менше року, фахівці в середньому тут одержують $215 тисяч ($18 тисяч на місяць). Щоправда, приймають до штату лише інженерів, які мають 5–10 років досвіду у розробці.\nGemini\nНайбільша біржа та сховище криптовалют також наймає лише інженерів із досвідом 6+. Тут приблизно на другому році роботи айтівці рівня senior у середньому отримують $196 тисяч ($16,3 тисячі на місяць).\nБлокчейн-компанії\nChainalysis\nКомпанія не займається криптовалютою безпосередньо, але тісно працює з криптобіржами — постачає програмне забезпечення, яке допомагає виявляти шахраїв. Крім того, вона допомагає фінансовим та урядовим органам відслідковувати та досліджувати активність у блокчейн-сегменті ринку.\nМедіанна зарплата сеньйор-розробника тут $200 тисяч ($17 тисяч на місяць).\nDocuSign\nА ця компанія використовує технологію блокчейну для підписання електронних клієнтських договорів. Зарплата тут варіюється від $141 тисяч ($11,75 тисяч на місяць) для розробників початкового рівня до $393 тисяч ($33 тисяч на місяць) для лідів.\nIBM\nАбревіатура компанії International Business Machines: вона використовує блокчейн для створення ПЗ, щоб допомагати підприємствам у зміцненні мереж ланцюжків поставок, а також у галузі хмарних технологій та штучного інтелекту.\nМолодший інженер тут у середньому заробляє $102 тисячі ($8,5 тисячі на місяць), а так званий Distinguished Engineer — $403 тисячі ($33,5 тисячі на місяць).\n ','2022-12-02 23:53:15','2022-12-02 23:53:15'),(84,'Це як заміна двигунів у літаку, який летить: чого чекати від оновлень Ethereum 2.0','Володимир Бурдейний BLOG\nGolang Developer у Luxoft Ukraine','Як часто за день ви чуєте такі слова, як: блокчейн, криптовалюта, NFT, майнинг? Погодьтесь: складається таке враження, ніби вони лунають звідусіль. \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nДумаю, багато хто погодиться з тим, що блокчейн Ethereum зайняв панівне місце у криптосвіті та став опорою для розвитку ІТ-проєктів.\nДля розробників цьогорічній рубіж стане важливим, адже у третьому кварталі заплановано запуск оновлення The Merge, яке знаменуватиме перехід до так званого Ethereum 2.0.\nЯкщо для вас це поняття є новим та нерозкритим або вам просто цікаво, що ж такого важливого з’явиться у новій версії легендарного блокчейну — пропоную поринути разом у світ дивовижних нововведень Віталія Бутеріна та його команди.\nУ рамках цієї статті я розповім про те, що з себе представляє Ethereum 2.0, чим ця ітерація відрізняється від попередньої, причини переходу до цих змін, коли врешті-решт очікувати на оновлення та чи дійсно це буде проривом для блокчейну, чи тут також не обійшлось без підводних каменів.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЩо таке Ethereum 2.0\nEthereum 2.0 (або Serenity) — це чергове оновлення для головної мережі блокчейну Ethereum, яке націлена на покращення його швидкості, ефективності та масштабованості.\nНасправді, ця назва вже є застарілою та не правильною, адже на початку цього року (2022) зазнала ребрендингу. Раніше команда розробників використовувала терміни Ethereum 1.0 (Eth1) для поточної ітерації блокчейну, яка працює за принципом доказу роботи (Proof-Of-Work), та Ethereum 2.0 (Eth2) для майбутнього оновлення, яке повинно було б стати на заміну.\nПроте при роботі над інтеграцією Eth1 та Eth2 виникли деякі складності, які призвели до концепції «Раннього злиття» (Early Merge), де запропоновано використовувати Eth1 як частину майбутнього Eth2.\nТому з метою затвердження ідеї, що це дві частини одного цілого, та уникнення непорозумінь у користувачів, було ухвалене рішення про виведення ціх термінів з ужитку та подальшою їх заміною на:\n«рівень виконання» (execution layer) для Ethereum 1.0, де виконуватимуться транзакції;\n«рівень консенсусу» (consensus layer) для Ethereum 2.0, де вирішуватиметься консенсус шляхом доказу володіння.\nНезважаючи на усі ці зміни, назву Ethereum 2.0 все одно можна зустріти у багатьох інших місцях поза межами ресурсу Ethereum.org (як, наприклад, у цій статті), адже вона все ще залишається більш відомою для публіки.\nНовий механізм консенсусу\nГоловною ідеєю, яку покладено в основу цього оновлення для блокчейну Ethereum, є перехід до використання доказу володіння (Proof-Of-Stake) як механізму консенсусу в мережі.\nЦе кардинальна зміна у головну частину проєкту, адже наразі для додавання нового блоку до ланцюга використовується алгоритм Ethash, що базується на механізмі доказу роботи (Proof-Of-Work).\nСаме він і став найбільшим недоліком блокчейну. Усвідомлюючи це, команда розробників ще від моменту створення проєкту розглядала способи використання PoS, але на той момент дана технологія була мало досліджена. Саме через це його імплементацію відклали на «кращі часи».\nДоказ роботи (Proof-Of-Work) — це такий алгоритм консенсусу, при якому створення та перевірка нових блоків відбувається шляхом виконання математичних задач, які є далеко не тривіальними та вимагають значної кількості обчислювальних потужностей.\nПісля того, як вони вирішені, новий блок додається до блокчейну, а той, кому вдалось зробити це першим, отримує винагороду. Такий процес, як багатьом уже відомо, має назву майнінг (mining). \nЗі зростанням популярності блокчейну Ethereum збільшується й складність видобутку його криптовалюти.\nЦе є причиною постійного збільшення витрат на спожиту електроенергію та на спеціальне обчислювальне обладнання (частіше за все його роль виконують графічні та ASIC процесори). За оцінками Digіconomist, мережа Ethereum споживає за один рік 87,44 ТВт, що можна порівняти із потребами у електроенергії для усієї Фінляндії.\nПроте, окрім фінансових витрат, ця цифра є неприємною, адже створює дуже великий вуглецевий слід — 48,77 Мегатон.\nДля порівняння, кількість викидів вуглецю у повітря від однієї транзакції у Ethereum еквівалентна приблизно 240 тисячам транзакцій платіжної системи VISA.\nЦя проблема з величезними витратами електроенергії та, як результат, жахливими наслідками для навколишнього середовища буде вирішена саме завдяки згаданому вище переходу до алгоритму досягнення консенсусу шляхом доказу володіння.\nПри такому підході не потрібно мати жодних надпотужних обчислювальних систем. За генерацію та додавання нового блоку відповідають валідатори. Для того, аби вузол мережі міг отримати такий статус, необхідно проінвестувати значну суму, а саме 32 монети Ether (надалі сума може й змінитись), які будуть заморожені та, у випадку недоброчесності учасника, або за недотримання ним правил, згоратимуть частково або повністю.\nПісля початку роботи тестової гілки блокчейну Ethereum, яка повністю працює з використанням підходу Proof-Of-Stake, розробники провели дослідження її енергоефективності. Згідно з ним, завдяки переходу до нового механізму консенсусу вдалось досягнути зниження затрат електроенергії на 99,95%. Відповідно до оцінок у дослідженні, стверджується, що на момент його проведення у мережі працювало близько 88 тисяч валідаторів, які досягли витрат електроенергії у 2,62 Мега Вати, що приблизно відповідає споживанню 2100 приватних житлових будинків.\nТакож цікаво, що при використанні доказу володінням процес додавання нового блоку вже називається не майнінгом, а стейкінгом (staking).\nThe Beacon Chain — Ethereum з Proof-Of-Stake\nОскільки зміни до вже працюючого проєкту є дуже значущими та протилежно спорідненими (в порівнянні з Eth1), перехід до Ethereum 2.0 виконується у декілька етапів з кропітким тестування на кожному з них.\nПершим стало запровадження нового блокчейну The Beacon Chain, який використовує PoS замість PoW та тимчасово працює паралельно з головною мережею Ethereum.\nВін, здебільшого, виконує роль менеджера:\nкерування валідаторами та їх депозитними правами;\nконтроль за винагородами та штрафами для генераторів та атестаторів;\nвибір генератора для блоку;\nстворення комітету валідаторів для атестації;\nвзаємообмін між ланцюгами-шардами (ще одне нововведення, про яке йтиметься нижче).\nДля того, аби виконались транзакції та створився новий блок, рандомним чином серед усіх валідаторів обирається один — генератор.\nЩо відбувається далі:\nв його обов’язки входить виконання незначних обчислень для створення цього нового блоку;\nдалі йому необхідно пройти атестацію — так звану перевірку коректності нової ланки ланцюга;\nз метою задоволення цієї вимоги та подальшого додавання блоку в мережу необхідно, аби комітет, що складається мінімум зі 128 валідаторів, підтвердив його коректність протягом періоду в 12 секунд — слоту (slot);\nпо досягненню епохи, яка відповідає 32 слотам (6,4 хвилини) комітет валідаторів «розпускається» та на його заміну створюється новий шляхом випадкового вибору (зі списку валідаторів).\nПісля отримання достатньої кількості атестацій, для створеного блоку робиться перехресне посилання (cross-link), яке додається у мережу The Beacon Chain, а вузол-генератор отримує винагороду.\nОкрім цього, у розподілених мережах існує поняття «фінальності», яке вказує, що транзакція, як частина блоку, не може більше змінюватись.\nДля досягнення цього використовується протокол фінальності Casper FFG, який слідкує за цим завдяки підходу з використанням контрольних точок. Перший блок кожної епохи отримує таку відмітку автоматично.\nНадалі в процесі роботи валідатори «голосують» за пару контрольних точок, які, на їх думку, є дійcними та коректними. У тому випадку, коли якась пара точок отримує кількість голосів більшу за 2/3 від кількості усіх валідаторів, то найбільш рання точка позначається як «виправдана» (justified), а інша, що є старшою, — «завершена» (finalized). В результаті чого у мережі завжди буде продовжуватись використання тільки ланцюга правильних блоків (за винятком ситуації з атакою 51%).\nНа цьому першому етапі у Ethereum 2.0 є також мінімальне обмеження кількості активних валідаторів у мережі для того, щоб вона вважалась достатньо децентралізованою та, як наслідок, безпечною. Це число складає 16384 одиниці.\nОновлення із запровадженням The Beacon Chain було запущене 1 грудня 2020 року та доcі залишається на стадії тестування.\nThe Merge\nВажливо розуміти те, що на даному етапі переходу до Ethereum 2.0 існує дві паралельні мережі — Ethereum 1.0 та The Beacon Chain. Перша досі працює за принципом доказу роботи, а друга — доказу володіння.\nНа другому етапі переходу до Ethereum 2.0 планується оновлення The Merge, яке покликано виконати об’єднання цих двох мереж в одну, де буде збережено всю історію Ethereum 1.0 та змінено процес створення й додавання блоків на новий, як у The Beacon Chain.\nЙого важливість та складність не варто недооцінювати, адже таке злиття не повинно жодним чином вплинути на діючих власників монети Ether та інших користувачів мережі.\nРозробники навіть наводять таке порівняння, що перехід від PoW до PoS та всі супутні оновлення — це ніби заміна двигунів авіалайнера, поки він знаходиться у польоті.\nЦікаво також відмітити, що на першому етапі мережа The Beacon Сhain не підтримувала виконання смарт-контрактів. Така функціональність з’явиться лише після злиття.\nОновлення The Merge заплановане на другу частину третього кварталу поточного року (2022), що вже має відбутись найближчим часом.\nСлідкувати за цим процесом можна на ресурсі Alchemy, а за іншими оновленнями — на Ethmerge. На ньому також зібрані відповіді на більшість хвилюючих питань.\nThe Shard Chains\nДля блокчейн-систем існує така широковідома трилема, як трикутник DCS (Decentralized, Consistent, Scalable). Формулюється вона наступним чином: неможливо досягнути підтримки всіх трьох характеристик (децентралізації, узгодженості та масштабованості) одночасно — потрібен лише компроміс у вигляді поєднання тільки будь-яких двох із них.\nКоманда розробників Ethereum запропонувала своє бачення для вирішення цієї проблеми шляхом реалізації процесу шардингу (sharding) для блокчейну.\nПоняття шардингу походить від досвіду роботи з базами даних. Це стратегія горизонтального масштабування для баз даних, коли увесь їх вміст розбивається на частини та розподіляється між різними фізичними серверами (шардами).\nОсновною її задачею є збільшення швидкості та ефективності системи при навантаженнях. На перший погляд, це виглядає як досить тривіальна задача, але, як то часто буває, перше враження є хибним.\nОсобливо, коли шардинг стосується не звичайних баз даних, а децентралізованих мереж блокчейну. В такому випадку необхідно створити певний децентралізований механізм для керування цим процесом, та для встановлення довіри між вузлами з метою підтримки обміну даними.\nУ випадку з новою версією блокчейну Ethereum такий обов’язок візьме на себе мережа The Beacon Chain, про що уже частково йшлося вище.\nЩо стосується безпосередньо ідеї шардів у проєкті, то вона полягає у тому, що один загальний блокчейн розіб’ється на декілька менших взаємонезалежних ланцюгів. Таким чином вся інформація про стани та історію мережі, яка наразі зберігаються у одному ланцюгу Ethereum 1.0, буде розбита між деякими частинами (шардами).\nЗавдяки цьому, вузлам, які є валідаторами, буде не потрібно зберігати абсолютно всю послідовність блоків, що призведе до зниження вимог з використання постійної пам’яті на обчислювальних пристроях.\nНатомість вони будуть оперувати лише тими даними шарду, до якого вони належать. В результаті цього нововведення очікується, що збільшиться доступність самого блокчейну для нових валідаторів, та, як наслідок, зросте розмір й масштаб самої мережі. А це вже, в свою чергу, напряму призведе до підвищення її безпеки.\nВ результаті виконання шардингу замість одного блокчейну буде декілька (The Shard Chains). Наразі існує інформація, що кількість таких міні-ланцюгів складатиме 64 одиниці та, безпосередньо, плюс ще один для The Beacon Chain. Таке нововведення матиме також позитивний вплив на швидкість роботи системи й вартість комісії «газу» (gas fee). Відповідно до заяви Віталія Бутеріна, пропускна здатність для оновленої мережі Ethereum повинна досягнути близько 100 тис. TPS (transactions per second). Для прикладу, швидкість роботи платіжної системи VISA складає близько 24 тис. TPS.\nДодавання шардингів стане останнім кроком у переході до Ethereum 2.0 та попередньо воно заплановане на наступний рік (2023).\nВисновок\nEthereum 2.0 має дуже велику кількість переваг в порівнянні з Ethereum 1.0:\nзбільшення надійності системи завдяки валідаторам;\nзниження витрат на спеціальні обчислювальні пули та більш ефективне використання електроенергії;\nусі валідатори будуть в рівних умовах один перед одним;\nзбільшення ефекту децентралізації;\nзбільшення пропускної здатності для блокчейну;\nзниження комісії за транзакції.\nПроте, немає нічого ідеального та всюди можна знайти свої недоліки:\nвисока вартість початкових інвестицій, аби мати можливість стати валідатором;\nнизька прибутковість стейкінгу;\nнеможливість швидко вивести вкладені активи до повного переходу;\nблокчейну до Ethereum 2.0, що може тривати близько року.\nНа мою думку, Ethereum 2.0 та перехід до Proof-Of-Stake — це правильне та своєчасне рішення, яке несе багато нових можливостей для самого блокчейну та проєктів, які побудовані на його основі.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:53:50','2022-12-02 23:53:50'),(85,'Чи варто айтівцям переходити зараз у блокчейн: розбір','Анастасія Пономарьова\nЖурналістка Highload','У зв’язку з недавнім крахом криптовалюти багато айтівців засумнівалися, чи є майбутнє у крипти і пов’язаних з нею технологій і галузей, включаючи блокчейн і Web3. Сумніви розвіяла суха статистика, пише Dice.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПодробиці\nЩоб зрозуміти, чи близько кінець епохи крипти та блокчейна, чи навпаки — інтернет перетвориться на децентралізовану форму, яка залежить від цих технологій, зробимо крок назад і проаналізуємо дані Lightcast (раніше Emsi Burning Glass) та Djinni, які збирають дані з мільйонів оголошень про вакансії в Україні та США.\nТак, за даними Lightcast, за останні 12 місяців близько 38 251 оголошень про вакансії вимагали навичок роботи з блокчейном, і платформа прогнозує, що інтерес роботодавців до цих навичок зросте на 24,6% протягом наступних двох років. Хоча це менш популярний напрямок, ніж, скажімо, розробка програмного забезпечення або мережеве адміністрування, попит на фахівців у галузі блокчейну все ж таки досить надійний.\nУ США їм у середньому платять $99 тисяч на рік ($8250 на місяць), але зарплата може швидко зрости при правильному поєднанні досвіду та спеціалізації. Згідно з останнім звітом Dice Tech про зарплату, середній технолог у блокчейні заробляє $104 566 на рік (приріст на 6,9% у період з 2020 по 2021 рік).\nТим часом в Україні ситуація також досить оптимістична: лише за останній місяць на Djinni з’явилося 560 вакансій, пов’язаних із блокчейном . Зарплатні вилки в середньому від $3 тисяч до $5 тисяч на місяць.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nСкріншот\nБлокчейн — не синонім криптовалюти\nЦе одна з причин, чому кількість вакансій не «просіла»: є багато компаній, які створюють базовані на блокчейні платформи для відстеження постачань або створення смарт-контрактів. Наприклад, 482.solution разом із ДТЕК запустили «пілот» платформи з управління гарантіями походження зеленої електроенергії на блокчейні, щоб система звітності була прозорою (документи не можна підмінити, видалити або щось у них виправити, а отже рівень довіри до компанії вищий). \nТобто не всі компанії, які наймають блокчейн-фахівців, займаються створенням криптовалюти чи гаманця — це лише окрема ніша.\nАле незалежно від того, якою є мета компаній, що працює з цими технологіями, концепції, пов’язані з блокчейном, ймовірно, залишаться ключовими. Цифри зарплат та кількості вакансій для блокчейну – гарний індикатор. Якщо вони підуть на зниження, то, швидше за все, галузь та технології зіштовхнуться із серйозними труднощами у спробі здійснити свої мрії про панування в інтернеті. \n   ','2022-12-02 23:54:25','2022-12-02 23:54:25'),(86,'Ласкаво просимо у світ блокчейну: що таке NFT, як працює DAO і чому Web3 спрощує роботу з грішми','Оленка Пилипчак\nРедактор у Highload','Спільнота — це вид масштабування у мережі. Її вважають центровим елементом всього, що пов’язано з Web3. Ну що ж, спочатку подивимося, звідки що береться у Web2. Соціальні мережі та інші цифрові платформи використовують Web2 як потужний стимулятор для збирання якомога більшої кількості інформації. Це використовують для покращення таргетування реклами та поляризації даних.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nРедакція Highload публікує переклад матеріалу.\nПерекладено бюро перекладів у Києві «Профпереклад».\nПереклад від\nРізниця між Web2 і Web3 в тому, що Web3 не має нічого спільного зі збором даних для рекламного таргетингу.\nWeb3 допомагає оптимізувати прозорість. Усі основні принципи та механіка роботи Web3 забезпечують можливість децентралізації рішень.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nЗміст:\n1. Блокчейн\n2. Важливість блокчейну\n3. Ключові елементи блокчейну\n3.1 Технологія розподіленого реєстру\n3.2 Незмінні записи\n3.3 Смарт-контракти\n4. Варіанти використання Web3\n4.1 Фінанси\n4.2 Незамінні токени (NFT)\n4.3 Децентралізовані автономні організації (DAO)\n4.4 Як працюють DAO\n4.5 Висновок\nБлокчейн\nЦілком можна сказати, що вся Web3-технологія побудована на блокчейні.\nБлокчейн — це розподілена незмінна база даних, що підтримує процес запису транзакцій та відстеження активів у бізнес-мережі.\nАктив може бути матеріальним (будинок, машина, готівка, земельна ділянка) або нематеріальним (інтелектуальна власність, патенти, авторське право, брендинг). Практично будь-яку річ, що має цінність, можна відстежувати та виставляти на продаж у блокчейн-мережі. Це знижує ризики та витрати для всіх учасників транзакцій.\nВажливість блокчейну\nБізнес працює на інформації. Чим швидше ви її отримуєте і чим вона точніша, тим краще. Блокчейн-технологія ідеальна для передачі такої інформації, вона забезпечує миттєвий доступ до абсолютно прозорої інформації, яка відкрито зберігається в реєстрі, що не змінюється.\nТакий доступ є лише у авторизованих членів мережі. У блокчейн-мережі можна відстежувати замовлення, платежі, рахунки, виробництво та багато іншого. І оскільки всі учасники мережі бачать однакову правдиву інформацію, можна простежити кожну транзакцію від початку до кінця у всіх подробицях. Це зміцнює довіру та дає нові можливості.\nКлючові елементи блокчейну\nТехнологія розподіленого реєстру\nВсі учасники мережі мають доступ до розподіленого реєстру та його незмінних записів про транзакції. Завдяки такому реєстру транзакції фіксуються лише один раз. Це виключає дублювання процесів, типове для традиційної бізнес-мережі.\nНезмінні записи\nНіхто з учасників не може змінити або підробити запис про транзакцію, щойно він внесений до розподіленого реєстру. Якщо в записі є помилка, необхідно додати нову транзакцію з виправленням, і обидві транзакції стають видимими для користувачів.\nСмарт-контракти\nДля прискорення транзакцій у блокчейні зберігаються певні набори правил. Вони називаються смарт-контрактами та виконуються автоматично. Смарт-контракт може визначати умови передачі корпоративних облігацій, оплати страховки на час подорожей та багато іншого.\nВаріанти використання Web3\nФінанси\nWeb3 можна використовувати у фінансах, і тоді фінанси стають децентралізованими. Це дозволяє значно заощадити комісійні та час, а заразом усунути посередників, завдяки чому в транзакціях може брати участь будь-хто.\nНезамінні токени (NFT)\nНезамінний токен або NFT означає унікальний об’єкт, який не можна замінити чимось іншим. NFT — це унікальні криптографічні токени у блокчейні.\nНа відміну від фізичних грошей та криптовалют, які взаємозамінні, ці токени не можна обміняти один на одного. NFT вважаються новими децентралізованими та незамінними активами.\nВони усувають необхідність у стримінгу контенту та копірайтингових картелях на кшталт великих продюсерських компаній. Крім того, NFT забезпечують творчим людям та авторам можливість створювати цінність та підтверджують їхнє право власності на той чи інший твір.\nДецентралізовані автономні організації (DAO)\nDAO або децентралізована автономна організація — це організація на кшталт спільноти без централізованого органу управління. Вона повністю автономна та прозора.\nОсновні правила встановлюються смарт-контрактами, вони ж виконують узгоджені рішення. DAO управляється окремими учасниками, які колективно приймають критично важливі рішення про майбутнє проєкту (наприклад, про технічні оновлення та розподіл коштів).\nЯк працюють DAO\nПравила роботи DAO встановлюються основною групою членів спільноти за допомогою смарт-контрактів. У смарт-контрактах прописуються фундаментальні нормативи, за якими працюватиме DAO. Вони цілком видимі та легко піддаються перевірці та публічному аудиту, щоб будь-який потенційний учасник міг зрозуміти, як повинен працювати протокол на кожному етапі.\nЯк тільки ці правила формально прописуються у блокчейні, наступний крок — фінансування. DAO має визначити, як отримувати фінансування та організувати управління. Зазвичай це досягається за допомогою випуску токенів: протокол продає токени, щоб зібрати кошти та наповнити казначейство DAO.\nВласникам токенів надаються певні права голосу, зазвичай пропорційні кількості придбаних токенів. Після завершення збору коштів DAO готова до розгортання. На цьому етапі, тільки-но код вводять у виробництво, змінити його вже не можна, крім як за одностайним рішенням учасників (голосування). Тобто ніякий окремий орган управління не може змінити правила DAO. Вирішує лише спільнота власників токенів.\nЗнайшли цікавий проєкт? Є кілька різних способів безпосередньо взяти у ньому участь. Важливо, що з різних DAO можуть бути різні цілі функціонування, отже перший крок — визначити головну функцію кожного DAO. Для тих організацій, які займаються технічним управлінням, потрібно розуміти, який тип прав надається власникам токенів та про які пропозиції йдеться.\nНа деяких платформах (наприклад, Uniswap) власники токенів можуть ухвалювати рішення щодо розподілу частини зборів, які з них стягує протокол. Інші протоколи (той же Compound) дозволяють власникам токенів голосувати за направлення цих протокольних зборів на виправлення багів та оновлення системи.\nТакий підхід також дозволяє фрілансерам та просто зацікавленим у проєкті разово приєднатися та отримати винагороду за свою роботу через грантові проєкти DAO (такі проєкти регулярно публікуються на сервері Discord кожного окремого DAO).\nВисновок\nОтже, ми розглянули кілька концепцій блокчейну, взявши за приклад біткойн. Біткойн — перша успішна реалізація блокчейн-технології. Сьогодні ця технологія застосовується у кількох галузях у всьому світі — там, де потрібно встановити довіру без участі централізованого органу управління.\nЛаскаво просимо у світ блокчейну!\nЧитайте також: Досвідченим технарям це не потрібно: чому блокчейн та Web3 роблять такими незручними\nАвтор: Snowchild','2022-12-02 23:55:02','2022-12-02 23:55:02'),(87,'«Ця сфера для тих, хто любить драйв»: колишній кіберрозвідник про роботу в блокчейні','Анастасія Пономарьова\nЖурналістка Highload','Вже відомо багато історій про те, як айтівці пішли на фронт та стали професійними військовими. Сьогодні поділимося іншим кейсом: як військовому можна перейти в IT, а також як працюють стейкінгові блокчейн-компанії зсередини. Про це в інтерв’ю Highload розповів Head of DevOps Everstake Андрій Кравець.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗа фахом я кіберрозвідник\nHead of DevOps Everstake Андрій Кравець і син Лев\nЯ міг стати будь-ким: в мене були гарні оцінки в школі, була можливість обрати професію хоч юриста, хоч космонавта, хоч медика (тим паче, в мене всі в сім’ї лікарі). Але я любив копатися у комп’ютерах, хотів зробити щось цікаве. Пішов вчитись у Київській політехнічний інститут на спецфакультет ІСЗЗІ (Інститут спеціального зв’язку та захисту інформації) — там набирають фахівців для Держспецзв’язку, для СБУ, державних служб, у тому числі розвідки, де я і навчався. За фахом я кіберрозвідник. Серйозно звучить, так? Молодим співробітникам завжди цікаво працювати з колишнім розвідником — це добре ллється в канву гарного спеціаліста.\nПісля інституту підписав контракт на 5 років, я капітан ЗСУ в запасі. Там на роботі був маленький центр обробки даних, дуже багато співробітників, локальна обчислювальна мережа — правда, оптична, с багатьма security-нюансами. Під час служби отримав багато практики працюючи як системний адміністратор та спеціаліст з інформаційних мереж, а от девопс-практики було мало.\nПісля закінчення контракту планово перейшов в IT-компанію\nДержустанови дуже інертні, в них немає такого гарного зворотнього зв’язку, як в IT-компаніях — у бізнесі, якщо твоя робота й ідеї справді комусь потрібні, тобі скажуть про це, бо там все підкріплено грошима. А в розвідці та інших органах в нас люди «закорінілі», їм не дуже все цікаво, скільки зусиль не докладай, і багато чого робиться суто для галочки. І це шкодить мотивації. Багато хто просто цілими днями просиджує штани. Робота там ду-у-уже відрізняється від комерційних компаній.\nУ блокчейні скільки б роботи не зробив, її завжди мало, тому є мотивація працювати ще. Тож після закінчення контракту я планово перейшов в IT-компанію. Мій кар’єрний шлях виглядає приблизно так: інститут — служба розвідки — Everstake, де я працюю і сьогодні (якщо не враховувати дрібні підробітки в IT у студентські часи). За три роки кропітливої роботи доріс до посади Head of DevOps.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nБуло складно зрозуміти, що це за магія така\nУ блокчейн-індустрії головне — це розуміти, що ти робиш і як все працює. Тому що тільки за таких умов ти зможеш покращувати робочі процеси, деплоїти і так далі. Перший час мені було складно зрозуміти, що це за магія така — ти робиш транзакцію, а вона відображається на Ethereum або Solana. Це перший бар’єр для входу в крипту.\nНасправді, ніякої магії немає, просто потрібен час, щоб зрозуміти, що тут до чого. І досить багато — два місяці лише для того, щоб голова включилася, та близько півроку-рік, щоб вивчити всі деталі й відчувати себе досить комфортно та впевнено.\nНайбільш продуктивно навчання йде, коли до новачка прикріплений тімлід\nКоли йшов до компанії, не знав про блокчейн геть нічого! Знав, що Ethereum майнять. Коли я приходив, були два девопси, зараз їх більше 20, а компанія виросла — було 20 людей, стало більше 120. Тоді це був маленький український перспективний стартап, який знали дуже багато людей по всьому світу. За три роки Everstake дуже сильно виріс, і зараз це найбільший стейкінг-провайдер у світі.\nКоли йшов до компанії, не знав про блокчейн геть нічого!\nНавіть коли нас було двоє, у нас була певна схема онбордингу — хто що знає про блокчейн, той то і розповідає. Зараз вже є цілий план онбордингу, система управління знаннями, для нас як «Вікіпедія» по блокчейну — там розкривається дуже багато питань. Також є кооперація по курсах з Citrus, є внутрішня LMS, де є курси для людей з усіх підрозділів, у тому числі і для девопсів.\nНайбільш ефективно навчання йде, коли новачка онбоардить досвідчений тімлід. У нас ієрархічна система управління, тобто все поділено на команди/сегменти, і ми постійно синхронізуємося. Це дозволяє зменшити зусилля по менеджменту, і не заважає ділитися знаннями та досвідом — завжди є хтось, у кого можна вільно спитати, якщо щось не зрозумів.\nПростіше сказати, чим я не займаюсь на роботі\nЯ б не прив’язувався у своїй роботі до абревіатури девопс, бо тут усе складно. Іноді мені здається, що простіше сказати, чим я не займаюсь на роботі. Head of DevOps має добре знати роботу підлеглих, тому я маю бути у змозі виконувати всі ролі спеціалістів, щоб бути в змозі приймати управлінські рішення та допомагати.\nРобочий стіл, фото Андрія Кравця\nНаприклад, в якийсь момент зрозумів, що я — майстер по дебагу, можу швидко щось пофіксити. Нібито забагато, але якщо замислитись, хто такий девопс, то все правильно. Це спеціаліст, який хоче покращень. Ти бачиш проблему і намагаєшся її вирішити, і іноді у мідлменеджера більше повноважень, щоб це зробити.\nТа все ж найголовніше моє завдання — контроль успіхів моїх підлеглих та повнота виконання ними поставлених задач. Тому останні півроку я намагаюсь брати на себе менше технічної роботи і переходжу на менеджмент.\nНемає жорстких планів — тільки великий беклог\nЯкщо говорити про розпорядок, то мій ранок починається з того, що я дивлюся, чи не впало щось. Якщо так — наскільки це критично і як швидко треба це підняти. Перше та найголовніше — це damage-контроль: вирішення інцидентів пов’язаних з інфраструктурою блокчейн-нод, веб-сервісами, та іншими. Тобто виявляти і виправляти все, що «горить» — саме це дозволяє підтримувати наш SLA та репутацію надійного провайдера стейкінг-послуг. У нас такого досить багато — це нормально для компаній, які дуже швидко розвиваються. Компанія проходить крізь всі наявні проблеми та вирішує їх. У нас в команді більше 120 людей, і багато хто дивується: «Ого, скільки!». Але це показник, скільки проблем на роботі ми вирішуємо, бо всі ці люди нам потрібні і активно працюють.\nЯкщо все добре, то робимо план покращень, звільняємо беклог, плануємо роботу на тиждень. Зазвичай це п’ятиденний спринт, у п’ятницю отримуємо зворотній зв’язок по ньому. Ми намагаємося не ставити жорстких планів з дедлайнами — це дозволяє виконувати поставлені задачі краще. Так, у нас великий беклог, який ми поступово звільняємо, але рівень технічного боргу — дуже низький.\nДехто дуже «підсаджується» на роботу\nУ нас атмосфера стартапу: кожен день у людей якісь виклики, кожен день тут як на американських гірках. Ті, хто любить драйв на роботі, а не спокійні посиденьки, потрапили, куди треба — тут дуже цікаво. Дехто так «підсаджується» на роботу, що ввечері їх не стягнеш зі стільця: роблять, доки не впадуть перевтомлені. Це робота для ідейних айтівців.\nЯкщо казати про продуктивність, я не підтримую ідею «навіщо спати, якщо можна працювати і робити більше». Відпочивати треба обов’язково. Якщо ти не будеш собі планувати відпочинок та як мінімум 6–7 годин сну, то в тебе піде шкереберть вся робота.\nУ нас атмосфера стартапу: кожен день у людей якісь виклики, кожен день тут як на американських гірках.\nУ нас нульова «тєкучка» (серед девопсів точно), бо в нас гарна процедура онбординга, у нас є LMS-курси, курси англійської, є психологічна допомога (для тих, хто не може встати зі стільця). Раз на місяць я нагадую людям, що якою б цікавою не була робота, обов’язково треба брати відпустку, відгули та відпочивати. Бо вигорання для нас дуже знайома річ.\n У нас близько 400 різноманітних серверів і дуже багато стеку\nЯкщо дивитись по стеку, з чим ми тільки не працювали! У нас зараз інфраструктура нараховує близько 400 різноманітних серверів, і дуже багато стеку — і моніторинг, і логи, чого тільки там немає! Чого менше — це клауд-інфраструктури AWS, GCP, але вона теж є. Блокчейн-ноди розробляють люди з усього світу, використовуючи найрізноманітніші технології, тому у нас є величезний досвід, купа регламентів та чеклістів на усі випадки.\nВ чому особливість нашої роботи — це велика кількість ручної праці. В стезю DevOps не дуже вписуються сотні серверів з терабайтами оперативної пам’яті, бо це по факту здоровенний хайлоад. Ця специфічність дуже кропітка та складна — ми її тягнемо на рівні великих ентерпрайз-компаній. Але прикро, що не можемо приділити достатньо уваги автоматизації. Все дуже швидко змінюється, іноді не встигаємо зробити навіть часткову автоматизацію, бо воно просто того не варте — це як збирати воду решетом. Ніякого профіту.\nБлокчейн-технології стоять на тому, як швидко ти апдейтиш ноду, наскільки розібрався, знаєш деталі і тонкощі, і тут девопс-стек не дуже прямо потрібен. З автоматизацією в блокчейн-індустрії дуже тяжко, тому ті, у кого вона є — одиниці, і ми серед них. Але залишається дуже багато проєктів, які ми хотіли би покласти на покращену автоматизацію та зекономити ручний труд. Проте не можна досягти всього одразу, тому доводиться складати пріоритети та обирати.\nЗ технічної сторони: ми стейкінг-платформа, розгортаємо блокчейн-ноди — тобто певний софт на Linux-серверах (немає жодної Windows-системи, на щастя), і це дуже схоже з роботою депозитів в банках. Але ми не банк, тому що ніяк не контактуємо з грошима людей: доступ відкривається користувачам на рівні протоколу блокчейну. У нас дуже багато проєктів, працюємо не покладаючи рук. Наш продукт — проєкти, де Everstake виступає як валідатор, блокпродюсер, стейкінг-оператор, node-ops.\nСтек не настільки важливий, як бажання працювати\nПортрет нашого працівника — людина систематична і логічна, яка хоче докопатися до істини, а також працює швидко. Це ключове. Стек не настільки важливий, як бажання працювати і певні риси характеру. З моєї точки зору, стеком для нас є не те, що ми зараз використувуємо в роботі, а все що ми пройшли за роки праці. В якийсь момент ми зупинились і обрали певні технології, а чому вибрали — це і є те, що робить нас Everstake, бо ми все прорісерчили, засетапили, продебажили, зробили перформанс-тести, зібрали зворотній зв’язок з купи людей. І не зупиняємося на цьому — а постійно намагаємося покращити.\nКоманда Everstake\nЄ в команді люди, які дуже довго займались телекомунікаціями, були сисадмінами тощо. Є люди, які зараз працюють за фахом — вчились на спеціальності «електронні вибори», наприклад. Є хімік-біолог, який від блокчейну був дуже далеким. Але слово «хімічити», до речі, дуже добре підходить для описання нашої діяльності, бо крипта і блокчейн-технології дуже специфічні, проте перспективні та цікаві.\nДелегуючи, за допомогою свого досвіду можеш закрити значно більше задач\nУ нас є план, як стати девопсом, мідлдевопсом, а от головним девопсом — такого чеклісту немає. Досягти  рівня мідлменеджера або ліда займає близько півтора року (але це оптимістичні прорахунки, якщо людина — прямо вогонь).\nВ якийсь момент, щоб вирішити певну проблему, тобі потрібно зануритись глибше та зрозуміти деталі. Ти стаєш більш фаховим. В якийсь момент на своїй позиції, замість того, щоб братися і все робити самостійно, починаєш делегувати, роз’ясняти іншим співробітникам, як це правильно зробити, передаєш свій досвід. І це дає найкращі можливості кар’єрного росту — не тільки тобі, а й компанії. Ти вчиш десятьох людей, ці люди, в свою чергу, ще десятьох.\nТак, в якийсь момент в тебе вже навчені 100 людей, які взмозі занурюватися в свою роботу глибше і працювати круто. Якби ти сам брався, в тебе була би просто виконана певна частина роботи, бо неможливо всі задачі виконати самостійно. А так, делегуючи навченим людям, ти за допомогою свого досвіду можеш закрити значно більше задач, і виконуєш тільки те, на що інші не мають повноважень або досвіду. Я радий, що в мене залишається час на виконання технічних завдань, щоб в результаті отримати саме те, що ми хотіли.\nУ блокчейні знайдете найновіші технології і зможете з ними працювати\nНе можу сказати, що ніша блокчейну найбільш перспективна — можливо, розробляти ПЗ для марсоходів чи займатися супутниковими мережами перспективніше. Проте однозначно можна сказати, що блокчейн-технології зараз розвиваються найшвидше, тому тут ви знайдете найновіші технології і зможете з ними працювати. Приклади просто знайти в інтернеті — зазвичай, більшість проєктів опенсорс, легко доступні — відкривай і вивчай. Найбільший поріг в тому, що технології складні, не кожен може розібратися. \nНайбільше заробляє той, хто про гроші забув.\nМожу сказати, що в блокчейні точно найкращі перспективи для всіх видів розвитку. Якщо гонишся лише за грошима, то багато тут не заробиш. Найбільше заробляє той, хто про гроші забув — просто хоче класно працювати і досягати вершин як професійних, так і особистих.','2022-12-02 23:55:37','2022-12-02 23:55:37'),(88,'«Біздев — це мисливець»: як почати працювати в блокчейні, якщо ти не програміст','Анастасія Пономарьова\nЖурналістка Highload','Щоб працювати у блокчейні, гарно заробляти і робити свій вклад у щось революційне, не обов’язково бути топовим програмістом (та й взагалі мати якесь відношення до розробки). Можна стати біздевом, наприклад.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nХто такий біздев, чим займається на роботі та як заробляють блокчейн-компанії, не пов’язані з криптовалютами, розповідає Chief Business Development Officer в 482.solutions Леонід Хацкевич в інтерв’ю Highload.\nПовернувся з США заряджений на блокчейн\nChief Business Development Officer в 482.solutions Леонід Хацкевич\nУ школі мріяв бути юристом, потім хотів пов’язати життя з хімією, але так сталося, що пішов зовсім іншим шляхом — став інженером-електроніком. Працював у сфері будування інтернет-мереж з 2007 року, це було моє перше місце роботи. В той момент у цій ніші відбувався бум, стало круто мати інтернет вдома. Моя робота вважалася престижною: «О-о-о! З інтернетом працюєш!».\nПотім працював якийсь час в продажах. Ще було своє приватне підприємництво — організував продаж світлодіодного обладнання: співпрацював з китайськими виробниками, була лінійка товарів під власним брендом. Але за сімейними обставинами поїхав в Америку в 2017 році, і підприємство перестало існувати. Більше спроб робити власний бізнес не було.\nОдин мій товариш в Америці запропонував участь у проекті, пов’язаному з біткоїном, дуже схожому на піраміду (пірамідою й виявився). Тоді я почав розбиратися в суті, копати вглиб — а як це працює? На чому базується? Що «під капотом»? Я чув про біткоїн ще 2015 році, але не було часу розбиратися у цій ніші. В США він з’явився.\nПерші свої сатоші купив у Філадельфії в криптоматі, який знаходився на заправці. Там вони були дуже поширені — вставляєш долар та отримуєш біткоїн на рахунок. Блокчейн в Америці в той момент вже не був чимось новим: була певна інфраструктура, мітапи, стояли криптомати. Можна було «торкнутися» до нього. І я почав вивчати технологію, мене затягнуло. Я розпрощався з проектом і пішов у «вільне плавання». Проживши в США півроку, я повернувся в Україну вже зарядженим на блокчейн.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nБіздев — мисливець\nМоя кар’єра стала тісно пов’язаною з IT вже в компанії 482.solutions, у 2018 році. Прийшов туди як ком’юніті-менеджер. Зважаючи на мій фах та ідеї, які пропонував для розвитку компанії, досить скоро я очолив напрямок, що стосувався IoT. Ідеї не переставали вирувати, я був проактивним, і з часом перейшов на позицію біздева. Близько року обіймаю посаду Chief Business Development Officer.\nБіздев — мисливець, який працює виключно на результат. Робота біздева — розуміти, де компанія знаходиться зараз, де конкуренти, де індустрія та куди треба бігти.\nА бігти треба туди, де ще нічого нема, щоб першими зайти на нові ринки, налагодити нові партнерства та створити нові можливості. При тому не забувати про те, що у нас вже є.\nОсвіта — не тільки хороше діло, а й інструмент залучення кадрів і продаж\nЗазвичай мій день складається з перемовин з потенційними замовниками, партнерами, з командую, щоб було розуміння, як складаються справи на ключових проектах. Також контролюю впровадження нових ініціатив, які приносять іноді неочевидну користь. Наприклад, освітня активність — одна з моїх пропозицій, яку я наполегливо просував. Ми проводимо курси з блокчейну для багатьох вишів України, а також Індонезії і Кенії, пишемо наукові праці по блокчейн-тематиці.\nФото Леоніда Хацкевича\nКрім «спасибі», освітня діяльність дала компанії деякі преференції. З одного боку, вона допомогла долучати до команди талановитих активних студентів, яким блокчейн дійсно цікавий — бо тільки такі в університеті ходять на додаткові необов’язкові заняття. По-друге, це гарний механізм продажу. Якщо ти приходиш до ентерпрайз, тобі треба пояснити, навіщо їм той блокчейн, і привести слухачів до єдиного розуміння технології. Ми провели курси для співробітників, залучили блокчейн-компанії, розказали про досвід впровадження блокчейну. Люди щасливі: отримали бачення, відправили звітність кудись в Америку — їх похвалили фаундери. А коли прийде момент, що треба щось вже зробити на практиці, до кого вони підуть? Звісно, до тих, хто їх навчив і все показав.\nТобто освіта — не тільки хороше діло, а й інструмент залучення кадрів і продаж. Це тільки один приклад. Знаходження і реалізація таких моментів і є робота біздева.\nВ індустрії був «дикий захід»\nПрийшов у компанію 482.solutions я по рекомендації. В мене було не стільки бажання знайти роботу, бо на той час я вже заробляв на блокчейні і з цього жив… Мені сподобався вайб у компанії, бачення роботи, погляд у майбутнє. Я долучився, бо тут було прикольно працювати, драйвово, бо я був серед однодумців.\nКоли тільки почав працювати в блокчейн індустрії, тут загалом був «дикий захід». Як у мемі, де лось біжить через палаючий ліс — і лось горить, і все горить. І тобі з цього треба зліпити щось упорядковане та цікаве. Енергія вирувала, драйв від ранку до вечора, кожен день відбувалось щось нове. Те, що знаєш сьогодні, вже не має ніякої цінності завтра. Так є і наразі, але виглядає вже більш пристойно.\nIT — це сфера, де ти маєш навчатися кожен день, а в блокчейні — тим паче. Постійно доводилось вивчати щось нове стосовно технологій, інструментів для роботи.\nЯ займався не тільки самоосвітою, а й проходив певні курси. Останній раз вчився в Chainalysis — це одна з найбільших та найвпливовіших компаній в світі, яка спеціалізується на сервісах, що реалізують функцію відслідковування транзакцій у різноманітних блокчейн-мережах. Пріоритетом є аналіз мережі Bitcoin. Її сервіси використовуються державними установами, міністерствами, правоохоронцями (навіть нашою кіберполіцією), найбільшими криптобіржами і фінансовими установами. Тобто тими організаціями, яким треба знати, що і коли відбувається в блокчейні. Це дозволяє відслідковувати транзакції після хакерських атак, крадіжок, спроб відмивати кошти через блокчейн. Це величезний бізнес, а компанія — «єдинорог».\nПрацюємо з рішеннями, які стосуються енергетики та фінтеху\n482.solutions — це розробник софту, який працює на ринку з 2013 року. У 2016 році пріоритетом стало використовування блокчейн-технології, наразі компанія має дві бізнес-моделі — сервісну, тобто аутсорс та аутстаф, та продукт у сфері «зелених» фінансів — Electrodo. Він дозволяє працювати компаніям з кліматичними ризиками та формувати звітність. Продукт зараз на стадії розвитку, на ньому не заробляємо.\nМи маємо два індустріальних пріоритети — працюємо з рішеннями, які стосуються енергетики та фінтеку. Нещодавно реалізовували проект з ДТЕК — запустили «пілот» платформи по управлінню гарантіями походження електроенергії (ГП, або GO), 22 лютого мали запустити другу фазу проекту, але не склалося, як розумієте. Довелось його поставити на паузу.\nБлокчейн корисний не лише в крипті\nБлокчейн корисний не лише в крипті, то тільки один напрям. Ця технологія, звісно, не «срібна куля», яка фіксить все, але має низку корисних якостей. Це прозорість, цілісніть інформації, впорядкованність та маркування мітками часу, імутабельність — змінити щось у блокчейні майже неможливо. У транзакціях завжди зберігається інформація, звідки я взяв певну цінність (біткоїн, наприклад), кому передав, в який момент та скільки — блоки заповнюються такою інформацією, розірвати зв’язок між ними або змінити порядок блоків неможливо. Ще один плюс використання блокчейну — поєднання цієї технології з DLT, що дає можливість децентралізованого зберігання та синхронізації даних.\nСаме ці якості блокчейну приносять користь в умовах, коли є багато учасників, які не довіряють один одному (та й не мають довіряти). Якщо казати про енергетику, вона вже не така, як 20–30 років тому. Чому? По-перше, вона децентралізована. Раніше була атомна електростанція і безліч користувачів, які знаходились на одному місці. Зараз по-іншому: тут вітряк, там — сонячна станція, в третьому місці — біогазова установка. Де саме? А де поставили: де вітер віє, там і вітряк. І є безліч мобільних користувачів, які вже не сидять на місці — їздять на електромобілях, наприклад. Користувач пересувається, має отримувати певний заряд і комунікувати з зарядним пристроєм. Це ж не просто прийти додому і ввімкнути в розетку, як праску. Ти приїжджаєш до торгівельного центру, у тебе є баланс, і ти ще думаєш, до якої саме станції підключитися.\nА користувачам зараз важливо, яку електроенергію вони використовують, чи зелена вона. Чому цікаво? Тому що це податки, квоти. Якщо твоя енергія не зелена, то ти її можеш просто не продати. А як довести, що вона зелена? Потрібні сертифікати. Проте треба довести, що тут немає обману, зробити все прозорим — отже, зробити систему стійкою до маніпулювань, щоб не можна було щось підкрутити-підмутити і зробити вигляд, що все зелене.\nНавколо стільки «соковитих» криптопроектів, а ми будемо займатися бог знає чим\nПочинала наша компанія з проектів «блокчейн для блокчейну», як і більшість в той момент. Одні блокчейн-проекти замовляли у інших якісь фічі, так і працювали. Були великі проекти — наприклад, в Малайзії: майже два роки працювали з замовником над платформою ProximaX, яка поєднує децентралізоване зберігання даних (файлів) з блокчейном. Був український проект Remme у сфері безпеки, над яким працювали півтора роки. Здобутком вважаю партнерство з Energy Web Foundation — наші спеціалісти залучені у розробці певних сервісів.\nВід рішень «блокчейн для блокчейну» ми перейшли на «блокчейн для прикладного використання». Тоді почали працювати з енергетикою, і це стало незвичайним рішенням.\nБагато хто крутив пальцем біля скроні, бо навколо стільки «соковитих» криптопроектів, а ми будемо займатися бог знає чим. А скільки довелося боротися з нерозумінням у традиційних енергетичних гравців, розказуючи, що таке блокчейн і нащо він їм потрібен, що це інноваційна технологія і за нею майбутнє. Щоб ви розуміли, на перемови з ДТЕК пішло майже два роки, доки дійшло до діла.\nФото Леоніда Хацкевича\nА зараз блокчейн — топова ніша. На Світовому економічному форумі в Давосі (WEF) цього року майже половина сайд-івентів була пов’язана з блокчейном. Багато чого у нас мало реалізуватися у цьому році: ми мали отримати грант від посольства Швейцарії на проект, пов’язаний з великою програмою ООН в Білоцерківському індустріальному парку — чекали на фінальне рішення 4 березня, але не дочекались, як розумієте. Багато напрацювань мали реалізуватись, думали: «От ми дамо цього року! Ща буде!».\nВ результаті, зараз активно розвиваємо напрямок Азії. Наприклад, у Сінгапурі у нас вже два роки працює компанія, отримали грант на розробку рішень для «міста майбутнього» від Eureka. Працюємо над проектами, які залишились, шукаємо нові. Головне — зберегли команду, хоча вона тепер розкидана по світу. Так що у бізнесу все задовільно. А душевні страждання… Їх до проекту не прив’яжеш.','2022-12-02 23:56:12','2022-12-02 23:56:12'),(89,'Як стати блокчейн-розробником у 2022 році та отримувати $10 тис.: дорожня карта','Оленка Пилипчак\nРедактор у Highload','Вивчіть JavaScript, смарт-контракти, Solidity, розгортайте децентралізовані програми та отримуйте в середньому до $120 тисяч на рік. Пропонуємо вам повну дорожню карту розробки у Web3.0.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nРедакція Highload публікує переклад матеріалу.\nПерекладено бюро перекладів у Києві «Профпереклад».\nПереклад від\nГарлін Каур зізнається, що коли вона вирішила стати блокчейн-розробницею, це виявилося найцікавішим, плідним та захоплюючим рішенням у її житті. У цій статті вона ділиться своїм досвідом і, ми впевнені, теж надихне вас спробувати свої сили у блокчейні. \nПередаємо їй слово.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЗміст\n1. Почнемо з основ\n2. Ethereum і dApps\n3. Ресурси з розробки фронтенду та бекенду (це вбереже вас від моєї помилки, коли я відразу пірнула прямо до кролячої нори блокчейну)\n4. Смарт-контракти, Solidity та корисні ресурси\n5. Важливі інструменти\n6. Подальші кроки\n7. Підіб’ємо підсумки\nДо вивчення Web3.0 та блокчейну: основи комп’ютерних наук\nХмарочосу потрібен міцний фундамент, інакше він завалиться!\nРозробка блокчейна потребує зусиль. Перш ніж пірнати у вир із головою і братися за дорожню карту, вивчіть основи комп’ютерних наук. Інакше ви припуститеся тієї ж помилки, що і я.\nВідомі CS50 — основи комп’ютерних наук — безкоштовний курс в Гарварді — тут вас навчать всьому, що потрібно знати і розуміти про комп’ютери і обробку даних.\nЩе раз: спочатку вчимо основи. І лише потім беремося вивчати, як працює блокчейн, чим він корисний і які його обмеження.\nОснови блокчейну\nЯк розробник Web3.0, ви маєте розуміти, що таке блокчейн, як він працює і чому може назавжди змінити процеси товарообміну та платежів.\nБлокчейн-технологія більше не пов’язана лише з одними криптовалютами.\nБлокчейн — це розподілена система хмарних обчислень, здатна запускати в роботу повні бекенди для функціонування найсучасніших децентралізованих програм (DApps).\nВивчити основи блокчейну можна на курсі Coursera Specialization від Університету Буффало (я проходила саме його, коли хотіла з’ясувати, що таке блокчейн).\nДецентралізовані програми\nВивчили основи блокчейну, ноди, алгоритми консенсусу та інші базові компоненти технології? Тепер візьмемося за те, як будувати на ньому програми.\nПрограми, побудовані на блокчейні, називаються децентралізованими програмами або DApps.\nЩо в них є?\nСтандартний фронтенд, побудований за допомогою JavaScript або фреймворків/бібліотек типу React, Vue тощо.\nБекенд Solidity/Solana/Rust, який будується на блокчейні.\nДе вивчити децентралізовані програми\nDApp Radar — непоганий ресурс, де можна знайти реальні приклади deFi (децентралізовані фінанси) і не тільки.\nЩоб зрозуміти, як працюють фронтенд та бекенд у децентралізованому додатку (як між ними встановлюється зв’язок та як вони обмінюються даними), потрібно вивчити розробку фронтенду  та базові принципи розробки стандартного бекенду, API та шаблонів.\nРесурси з розробки фронтенду та бекенду\nФронтенд\nУ децентралізованих програм в основі лежить стандартний ванільний фронтенд на JavaScript або фреймворку JS. Тому перед розробкою свого першого DApp вивчіть основи розробки фронтенду та роботи мережі.\nДля цього вчимо HTML, CSS, HTTP, JavaScript, обираємо фреймворк та починаємо будувати статичні вебсайти (можете обрати будь-який курс, я спиралася на відео нижче).\nБекенд\nБекенди для децентралізованих додатків дуже відрізняються від бекендів стандартних додатків. Почнемо з того, що блокчейн-технологія використовується як основне джерело децентралізованого зберігання даних. А стандартні бекенди зазвичай використовують бази даних чи об’єктні сховища.\nВтім, основні технічні принципи ті ж самі.\nТому не рекомендую відразу кидатися в розробку блокчейна та web3.0, не маючи міцної бази та не розібравшись у принципах стандартної веброзробки.\nЦей процес приносить глибоке внутрішнє задоволення — з’єднувати бази даних, створювати власні REST API, вибудовувати бізнес-логіку, яка приводить у дію ваші інструменти. Це серйозний крок вперед.\nЩо вивчаємо на цьому етапі: Node, Express, DBs, HTTP, розробку API, і починаємо розгортання сучасних програм.\nДорожня карта розробок у Web3.0 та Solidity: що таке Ethereum і як це працює\nРозробник web3.0 має розуміти, як працює Ethereum.\nEthereum — це програмне забезпечення, яке працює на мережі комп’ютерів. Воно забезпечує реплікацію та обробку дрібних програм, які називаються смарт-контрактами.\nБільшість децентралізованих програм працюють на блокчейні Ethereum. Смарт-контракти також запровадив консорціум Ethereum, після чого їх почали копіювати інші блокчейн-мережі.\n«Що таке Ethereum» — відео від Віталіка Бутеріна, творця Ethereum:\nТакож рекомендую зазирнути на офіційний сайт Ethereum та почитати документацію.\nСмарт-контракти\nEthereum та смарт-контракти — як хліб та масло. Вам потрібно розуміти й те, й інше.\nСмарт-контракт — це програма, яка зберігається на блокчейн-платформі та автоматично виконує угоди.\nВона пишеться на Solidity, Rust або Vyper (та сама Solidity, але з присмаком Python). Вона є ключовим компонентом будь-якого децентралізованого додатку, приводить у дію його бізнес-логіку і дозволяє зберігати інформацію в блокчейні — так само, як у стандартній базі даних.\nОсь найкращі безкоштовні курси з Solidity на 2022 рік, які я знайшла\nSolidity за 16 годин + Blockchain — freecodecamp\nПовний курс Solidity — EatTheBlocks\nПовний курс Solidity за 2 години — Dapp University\nCryptozombies: Solidity в рамках курсу розробки ігор Gamified Programming: розробка смарт-контрактів та створення Zombie-фабрик для захоплення світу. Гра розділена на секції, які дозволять вам прокачатися від новачка до провідного розробника Solidity. Пропоную пограти в неї і паралельно пройти ще якийсь курс зі списку. Чудово попрактикуєтеся!\nЗомбі чекають!\nПідключаємо фронтенд децентралізованої програми: Web3.js/ Ethers.js\nВмієте створювати смарт-контракти? Тепер потрібно підключити фронтенд до місцевого або віддаленого бекенду Solidity (або аналогу). Для цього можна скористатися будь-чим — від HTTP до WebSocket.\nОбираємо одну із двох бібліотек JavaScript:\nWeb3.js\nEthers.js\nWeb3.js\nWeb3.js — це колекція бібліотек, яка дозволяє підключитися до місцевого або віддаленого вузла Ethereum за допомогою HTTP, WebSocket або будь-якого іншого протоколу зв’язку прямо з фронтенду на JavaScript.\nПовний курс з web3.js від DApp University:\nEthers.js\nEthers.js — це полегшена бібліотека JavaScript, альтернатива Web3.js для підключення фронтенду JavaScript до смарт-контрактів. \nКурс розробки Front-end DApp з Ethers.js від Nader Dabit:\nВажливі інструменти\nУ всіх цих курсах є інструменти, які вам варто опанувати у будь-якому випадку. Якщо їх не вивчають у рамках обраного вами курсу, кидайте його і шукайте інший.\nSolidity та підключення\nSolidity\nOpenzeppelin | Неофіційна стандартна бібліотека Solidity\nChainlink | Підключення через Oracle для гібридних смарт-контрактів\nВажливі фреймворки для розгорнення (оберіть один – і вперед!)\nRemix | Стартова точка\nКаска | Додаток JavaScript\nBrownie | Фреймворк Python\nDapp Tools | Фреймворк командного рядка\nОснови\nОснови криптографії та консенсус | Як працює блокчейн\nБлокчейн-гаманці & Gas | Як взаємодіяти з блокчейнами\n Основи Solidity | Все про Solidity\nПросунуті концепції\nNFT | Мистецтво та унікальні токени у транзакціях on-chain\nDAOs | Децентралізовані автономні організації\nDeFi | Децентралізовані фінанси\nUpgradeability (можливий апгрейд) | Як «змінити» ваші смарт-контракти\nІнструменти\nTestnets | Тестування інтеграції у блокчейні\nEtherscan та оглядачі блоків | Як «подивитися», що відбувається у транзакціях on-chain\nAlchemy  & Node-As-A-Service (вузол як послуга) | Підключення до мережі\nMoralis | Комплект додатків Full Stack\nПодальші кроки\nПриєднайтеся до хакатона, вливайтеся до спільноти і творіть!\nОтже, ви пройшли курс. Адже пройшли?\nДобре.\nТепер головне — випробувати нові набуті навички в реальному житті і познайомитися з іншими розробниками.\nЗробіть якийсь проєкт. Неважливо який. Спочатку страшнувато, вам навіть здасться, що ви не готові. Але це нормально.\nЗареєструйтесь у якомусь хакатоні, вступіть до спільноти та збагачуйте свої знання, навчайтеся швидше та спробуйте застосовувати нові навички на практиці.\nНе зациклюйтесь на туторіалах, інакше потрапите до пекла, де немає нічого, крім туторіалів! Геть із зони комфорту. Якщо ви робите щось добре знайоме — значить, ви надто полегшуєте собі життя!\nНайшвидший спосіб чогось навчитися на цьому етапі — це почати щось створювати. Що завгодно.\nСтворіть щось\nПоставте собі дедлайн. Найпростіший спосіб змусити себе щось зробити — це приєднатися до хакатона. Багато масштабних проєктів починалися як проєкти на хакатонах (наприклад, 1inch або Instadapp).\nХакатони — це змагання з написання коду, вони можуть тривати від кількох днів до кількох тижнів. Там можна виграти грошові призи, але більшість інженерів використовують їх для вивчення чогось нового.\nОсь деякі з найкращих світових блокчейн-хакатонів:\nETH Global Hackathons\nChainlink Hackathons\nETH Denver Hackathons\nDevfolio Blockchain Hackathons\nETH India\nУчасть у них допоможе створити гарний профіль на GitHub чи GitLab. Коли почнете шукати роботу, люди одразу побачать, чим ви займалися у минулому. Що б ви не робили — фіксуйте абсолютно всі проєкти у GitHub або на будь-якій іншій аналогічній платформі.\nВливайтеся у спільноту\nСпільнота однодумців — одна з найкращих штук у сфері блокчейну. Ви зможете ставити запитання, обмінюватися ідеями та завжди бути в курсі всіх нових розробок. Тут щотижня відбувається щось новеньке. Ось кілька моїх улюблених груп:\n🐤 Crypto Twitter | (його часто називають просто «CT»)\n🤖  r/ethdev | Тут можна поспілкуватися на цікаві теми та поділитися ідеями\n🌈 Developer DAO | Для контактів з іншими розробниками \n👷🏿 ‍♀️ Hardhat Discord | Тут обговорюють інструменти \n🦄  Enter Ethereum Discord | Тут все про Ethereum\n🐍 Python Blockchain Discord | Для любителів поговорити про Python у блокчейні \n⛓ Chainlink Discord | Чатик про гібридні смарт-контракти \n🐉 Openzeppelin Forum | Тут можна ставити питання про все \n🦖  Smart Contract Research Forum | Для пошуку інформації про смарт-контракти\nСписок таких груп дуже довгий, його можна продовжувати до безкінечності.\nНе соромтеся звертатися по допомогу\nСпільнота однодумців — найкращий ресурс, де можна отримати допомогу, якщо натрапите на якусь дивину. Коли у вас виникнуть технічні труднощі, зазірніть у цей документ і дізнаєтеся, як їх вирішити, а також:\n1. Гугліть.\n2. Поставте запитання на Stack Overflow або Stack Exchange.\n3. Створіть тему із питанням у репо на GitHub.\n4. Запитуйте на Reddit, discord, на форумах, де завгодно!\nПідписуйтесь на однодумців\nКрім списку вище, є ще маса людей, які намагаються всіляко покращити сферу, що нас цікавить:\nAustin Griffith | Справжній чародій OG, один із найенергійніших людей у сфері, завжди прагне допомогти.\nNader Dabit | Фахівець з фулстеку у блокчейні.\nRekt.news | Просто і весело про експлойти безпеки.\nVitalik | Ну, зрозуміло! Засновник Ethereum!\nEvan Van Ness | Засновник WeekInEthereum News\nЦей список також можна продовжувати до нескінченності. У блокчейн-сфері так багато цікавих та корисних людей!\nШукайте роботу\nГранти та робота для фрілансерів\nСтворіть свій протокол\nЩо небудь ще…\nНа цьому етапі ви вже у системі. Ви глибоко в неї занурилися і ось-ось почнете отримувати плату за свою роботу. Існує безліч способів заробити на нових навичках.\nПодавайтесь на вакансії\nЛедве дістанетеся цього етапу і почнете підключатися до протоколу, починайте розсилати CV! Сайтів з вакансіями для блокчейн-розробників скрізь багато. Ось найпопулярніші:\nReddit\nCryptoJobsList\nGitCoin\nWeekInEthNews\nCryptocurrencyJobs\nАбо ж можете звернутися безпосередньо до платформи, що вас цікавить, — аж раптом у них є вакансії.\nГранти для фрілансерів\nУ децентралізованих протоколах є безліч функцій, які потребують поліпшення. Якщо ви вигадали щось цікаве для конкретного протоколу, подайте заявку на грант! Одна з найкращих платформ для пошуку «диких» грантів — gitcoin. Але й інші протоколи також пропонують грантові програми:\nEthereum Grants\nChainlink Grants\nSolana Grants\nUniswap Grants\nФріланса це також стосується. Фрілансер може знайти собі роботу практично будь-де.\nСтворіть свій протокол\nУ цій сфері поки що все здається дивиною, і тут можна будувати тонни нових протоколів. Найкраща відправна точка для такого проєкту — це хакатони, особливо якщо ви не знаєте, з чого почати. Загляньте в цей список 77 прикладів застосування гібридних смарт-контрактів, якщо ви в глухому куті і не можете вигадати нічого слушного.\nПоки що ця область розроблена від сили на піввідсотка. Ми тільки-но почали її розвивати, і будувати доведеться багацько.\nПідіб’ємо підсумки\nМи вже багато чого обговорили вище, але останній етап — не зупинятися на досягнутому і продовжувати вчитися. Правила та умови швидко змінюються, щодня з’являється щось нове.\nЯкщо послідуєте цим порадам і почнете глибоко вивчати блокчейн, ви постійно дізнаватиметеся щось нове.\nУ кожного в цій сфері свій шлях. Можливо, ви пройдете шість курсів та одразу знайдете роботу. Або почнете з ходу створювати власний протокол і наберетеся потрібних навичок у процесі.\n«Правильного» шляху не існує. Втім, і «неправильного» також.\nЦе найцікавіша сфера, яку неможливо не полюбити. У ній повно життя, діяльності, економічних можливостей та шансів залишити по-справжньому важливий слід на планеті. Буду дуже рада побачити вас у нашій спільноті та поспостерігати за вашим ростом. Можливо, якось ми навіть зустрінемося!\nБлокчейн нікуди не піде, тому, сподіваюся, ви приєднаєтеся до цієї захоплюючої подорожі.\nЧитайте також: «Це простіше, ніж тестувати сайти, але зарплати вищі»: Олексій Матіясевич з Ambisafe — про те, як стати тестувальником у блокчейні\nАвторка: Гарлін Каур','2022-12-02 23:56:49','2022-12-02 23:56:49'),(90,'Три помилки в блокчейні, які роблять людей мільйонерами — досвід інженера смарт-контрактів в Ambisafe','Анастасія Пономарьова\nЖурналістка Highload','Про мову розробки Solidity та особливості роботи смарт-контрактів, через які з криптокомпаній «витікають» космічні гроші, продовжує розповідати Олексій Матіясевич — Lead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nНагадаємо, у першій частині інтерв’ю він поділився, як прийшов у сферу блокчейну, та чому стати тестувальником у цій ніші — гарна ідея.\nЄ позиції, де приймають програмістів джуніор-рівня\nLead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe Олексій Матіясевич\nЄ позиції, на які приймають програмістів навіть джуніор-рівня. Для QA при наймі буде плюсом досвід у тестуванні блокчейн-проектів, але це не обов’язкова умова. Для програмістів бувають різні позиції — наприклад, Ambisafe наймають спеціалістів без досвіду в блокчейні, але має бути хороший досвід роботи з Node.js або JavaScript, з написання фронтенду або бекенду (залежить від позиції). Вже на місці новачку розповідають та пояснюють все, що пов’язано з блокчейном.\nЗвісно, якщо це розробка якогось складного блокчейн-продукту, який дуже сильно зав’язаний на роботі якихось смарт-контрактів, тоді треба мати розуміння, як все це працює, і відповідний досвід роботи. Коли наймають людей для розробки блокчейн-інфраструктури, зазвичай тут теж потрібні досвідчені спеціалісти з дуже добрим розумінням, як все влаштовано.\nУ Solidity багато спільного з C++\nКажуть, що мова Solidity схожа на JavaScript, і цьому є пояснення. Коли розробляли Solidity, була ідея зробити її схожою на щось звичне розробникам, щоб максимально зменшити поріг входження і їм було легше починати працювати. Але це тільки зовні.\nЯкщо більш детально розібратися в тому, як мова працює та які можливості має, до чого призводить виконання програми, як вона компілюється, то там набагато більше спільного з C++.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nТут є детальна взаємодія з пам’яттю, треба розуміти, як працює стек, треба вигадувати власні структури даних. В JS в тебе є купа бібліотек, нескінченні ресурси. А от коли розробляєш смарт-контракти на Solidity, то ресурси в тебе обмежені, кількість коду дуже сильно обмежена, плюс є власна специфіка, якої немає в інших мовах програмування. Смарт-контракти працюють на блокчейні — це специфіка, що має сенс лише в середовищі Ethereum.\nКоли ти пишеш якусь програму на JS, то зазвичай вона існує сама по собі, або ти використовуєш якісь API інших сервісів, які десь запущені. А у випадку зі смарт-контрактами їх можна уявити як купу програм, що всі запущені на одному сервері, всі бачать одна одну, можуть одна до одної звертатись. І їх мільйони.\nІлюстрація, джерело – YouTeam\nСмарт-контракти напряму керують грошима, і це важливий момент. В інших проектах такого зазвичай не відбувається. Програмно переказ може виконуватись як звернення до якогось сервера, який керує балансами користувачів і може якось регулювати доступи, зупинити процес переказу грошей і повернути попередній стан. У смарт-контрактах таке неможливо — все відбувається миттєво, і помічаєш, що щось не так, коли все вже відбулося. Можливості щось повернути зазвичай немає.  \nІ ще момент, про який розробники звичайних систем часто взагалі не думають: у блокчейні фіксована кількість ресурсів, і їх використання дуже дороге. Доводиться думати про те, що, якщо ти додаєш додаткову логіку або використовуєш пам’ять, за це все доведеться платити користувачу або тому, хто запускає проект. Тут не вдасться, як на звичайних проектах, розподілити навантаження на кілька серверів. Тому маємо розробляти таким чином, щоб все працювало, при тому не було потреби у майбутньому збільшувати кількість ресурсів. Збільшиш — все всім стане дорожче. А якщо сервіс дорогий, то нащо людям ним користуватись, коли завжди можна знайти щось дешевше?\nЧерез помилку мільйони доларів виводилися у невідомому напрямку\nПерша розповсюджена помилка смарт-контракту, яку виявили ще у 2016 році (але вона актуальна і зараз) — це так звана проблема reentrancy. Найпростіший приклад: є функція, яка кладе гроші в смарт-контракт і записує, що у такого-то користувача $100 покладено на баланс, і є функція, яка забирає гроші зі смарт-контракту — дивиться, хто викликає її та чи є в користувача гроші на балансу. Якщо є, то вона відправляє їх по запиту.\nЯк функція працює? Коли вона відправляє кошти користувачу, що знімає $100 зі $100 — це означає, що баланс треба обнулити. Проте, якщо користувач в цей момент повторює запит на зняття $100 (до того, як смарт-контракт встигне оновити статус балансу користувача), то контракт подивиться, що в нього все ще записана ця сума, і знову відправить користувачу $100. Але то вже будуть гроші інших людей, звісно. За допомогою цієї помилки мільйони доларів виводилися у невідомому напрямку, і це періодично відбувається зараз.\nLead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe Олексій Матіясевич, фото з FB\nЄ й інші розповсюджені проблеми. Коли виконується якась функція смарт-контракту, в тебе завжди є доступ до того, хто викликав цю функцію. Навіть логінитись не треба: відправляєш транзакцію і підписуєш її, і смарт-контракт вже тебе ідентифікує.\nТак от, зазвичай ти викликаєш функцію переказу грошей, смарт-контракт дивиться, хто її викликав, і з балансу викликаючого переводить кошти вказаному в запиті отримувачу. Тут помилок немає. Але якщо функцію переказу викликає інший користувач, іноді виникає помилка. Наприклад, я хочу взяти гроші з балансу мого друга (в мене є дозвіл на доступ до рахунку) і переказую третій особі. Смарт-контракту треба знімати гроші не з того, хто викликає, а з вказаного користувача. Але розробники за звичкою ставлять функцію знімати гроші з відправника запиту (тобто з мене, а не друга). Йде неправильне використання інформації про операцію.\nШахраї обманюють смарт-контракти\nЗазвичай для роботи фінансових інструментів потрібна інформація про цінність чогось — курс долару, вартість NFT, тощо. Вона береться з певних джерел — оракулів цін. Якщо хтось зможе зманіпулювати ціною в оракулі (навіть на секунди), це дуже сильно нашкодить проекту.\nНаприклад, візьмемо видачу позик під заставу. Ти приносиш $100 в смарт-контракт як заставу і просиш, щоб він видав тобі позику €50. Смарт-контракт перевіряє за допомогою оракулу, чи справді розмір позики менше, ніж вартість застави — так, €50 менше $100, і давати позику безпечно. Але якщо в тебе є можливість зманіпулювати ціною евро відносно долару, то сума позики може бути космічна. Якщо вдається якось змінити в оракулі курс перед тим, як запросити позику, смарт-контракт може подумати, що $1 коштує €10 тисяч, припустимо. Ти кладеш $100 і просиш дати позику в €1 млн — ОК, смарт-контракт видає тобі вказану суму. Твоя маніпуляція в оракулі діяти перестає, ціна стає нормальною, але гроші назад смарт-контракт забрати вже не може, бо розраховує, що оракул — надійне джерело ціни, де інформацією не вийде зманіпулювати.\nЗазвичай шахраї обманюють смарт-контракти за допомогою грошей — ставлять нереальну ціну і таким чином «заробляють» в рази більше. Це дуже дорого, але якщо хтось готовий ризикнути $1 млн, щоб виманити у блокчейн-проекту $100 млн, то вже виявляється, що ціна не така й висока.\nТаке відбувалося не один раз. Це шкодить, в першу чергу, користувачам. Бо це як ринок кредитування користувачів між собою: одні люди дають позики іншим, потім отримують або платять відсотки. Компанія, звісно, буде мати якийсь відсоток від заробітку на проекті, але основну вигоду отримують користувачі. Тож якщо хтось нечесно зміг забрати гроші зі смарт-контракту, то вийде так, що інші користувачі, які поклали свої кошти на депозит, забрати їх звідти вже не зможуть. Компанія несе репутаційні втрати. Якщо керівництво відповідальне та «хороше», компанія спробує відшкодувати втрати користувачам проекту.\nВиявити помилки можна за допомогою рев’ю смарт-контрактів — їх часто замовляють у сторонніх компаніях, де є висококваліфіковані спеціалісти. Але навіть воно не дає 100% гарантій, що гроші користувачів будуть у безпеці.\n ','2022-12-02 23:57:24','2022-12-02 23:57:24'),(91,'Як купувати та продавати крипту, який гаманець обрати: докладний гайд для новачків','Олексій Булко BLOG\n.NET developer в NIX','Напевно, кожен з вас вже чув або цікавився новим видом електронних грошей — криптовалютою. Минулого року Міжнародний валютний фонд оцінив ринкову капіталізацію криптовалют у $2,5 трлн.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦе свідчить про велику економічну цінність блокчейну у сфері fintech, а ще — про зростаючу популярність віртуальної валюти.\nМене звати Олексій Булко, я .NET developer в NIX та спікер IT-конференції NIX MultiConf. Сьогодні я пропоную вам дізнатися більше про те, як купити, користуватися і де зберігати криптовалюту. \nКриптовалюти — це законно?\nНовачків у цій темі часто хвилює питання: чи існує законодавча база стосовно криптовалюти в Україні? Чи взагалі це легально? У березні 2022 року президент підписав закон «Про віртуальні активи». Цей документ можна вважати відправною точкою у легалізації криптовалют в Україні.\nЗакон регламентує:\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nлегальну роботу іноземних та українських криптобірж;\nможливість для банків відкривати рахунки криптокомпаніям та фізичним особам (буде можливість зберігати криптовалюту безпосередньо у мобільному застосунку вашого банку);\nукраїнці зможуть захистити свої заощадження у віртуальних активах;\nдержава гарантує судовий захист прав на віртуальні активи; \nрегулювання буде розподілено між НБУ та Національною комісією з цінних паперів та фондового ринку.\nОподаткуванню підлягає лише прибуток від операцій купівлі та продажу криптовалюти.\nНаприклад, ви купили криптовалюту на $1000, заробили — $300. Саме на цей прибуток вам і потрібно буде сплатити податок.\nОподатковується це на загальних умовах — 18% + 1,5% військового збору.\nКупівля та продаж криптовалюти — як це відбувається                                                     \nЯк же купити криптовалюту? Пропоную розглянути три способи.\n1\nЗа допомогою банківської картки\nДля цього потрібно зареєструватися на офіційній біржі або перевіреному онлайн-сервісі. Я рекомендую використовувати Binance чи ByBit. На ресурсі вам запропонують пройти верифікацію. Таким чином біржа гарантує, що операції відбуваються між реальними людьми.\nМоя вам порада — для таких операцій зареєструйте окрему пошту та встановіть двофакторну аутентифікацію для неї та свого біржового акаунту. Під час входу на біржу, крім введення традиційного логіну і паролю, потрібно буде використати допоміжний код, який ви отримаєте в SMS-повідомленні або в застосунку Google-аутентифікатора. Це найбільш безпечний шлях.\nРухаємось далі. На біржі знаходите розділ «Купити за допомогою картки». Вводите необхідну кількість криптовалюти та проводите транзакцію. Через декілька хвилин криптовалюта надійде на ваш біржовий рахунок. Щодо комісій, то вони можуть бути різні — від 0% до 5-7%. Можливі також обмеження на купівлю крипти — добові та місячні ліміти. У кожного банку можуть бути свої правила.\n2\nP2P-торгівля (person to person)\nОдна людина залишає на біржі замовлення, що продає криптовалюту, а інша — що хоче її придбати.\nПроцес відбувається за допомогою гарантійного онлайн-сервісу або біржі, де потрібно завчасно зареєструватися та пройти верифікацію. Знову ж таки, рекомендую встановлювати двофакторну аутентифікацію, щоб підвищити рівень захисту ваших транзакцій. \nЯкщо ви хочете купити, наприклад, біткойн чи USDТ, то побачите багато заявок із різними курсами. На що треба звертати увагу?\nПодивіться, яку кількість операцій вже виконав продавець, який відсоток з них успішний, як давно він на цьому сервісі, які має відгуки від інших покупців та як швидко відправить криптовалюту на ваш рахунок.\nКомісія буде утримуватись лише за переказ коштів між банківськими картками. Технічно це відбувається так: ви знайшли заявку, яка вас влаштовує, вводите суму, на яку хочете купити крипту. Далі система показує реквізити продавця, на які потрібно перевести кошти. Здійснюєте переказ вказаної суми, і за декілька хвилин валюта буде зарахована на ваш електронний гаманець. Комісія регламентується банком.\n3\nОфлайн-обмінники \nЦей спосіб подібний до того, коли ви купуєте чи продаєте традиційну валюту в обмінному пункті. Приносите готівку, обмінюєте її за певним курсом й одразу отримуєте криптовалюту на ваш гаманець. Всі операції проходять анонімно, тобто ви не залишаєте свої документи.\nУ цьому випадку комісія регламентується тільки продавцем. Він заробляє на різниці, за якою купує криптовалюту на біржі та продає її вам. Обмежень тут немає. Ви можете купити електронну валюту на будь-яку суму.\nОднак будьте обережними з вибором офлайн-обмінників. Вони обов’язково мають бути офіційно зареєстрованими.\nЯкий криптовалютний гаманець обрати?\nІснує два види таких гаманців — кастодіальні та некастодіальні. Звучить страшно. Давайте розбиратися.\nКастодіальні гаманці — це ті ж самі онлайн-сервіси та біржі, на яких ви можете купити криптовалюту та залишити її там.\nОсновний недолік — вони володіють вашими ключами та регламентують переказ грошей. Якщо ви загубили пароль, криптовалютна біржа його поверне, і ви зможете користуватися сервісом надалі.\nНекастодіальні гаманці — це фізичні пристрої або мобільні застосунки, в яких ви можете зберігати криптовалюту.\nНа відміну від кастодіальних гаманців, вони дозволяють володіти вашим приватним ключем або сід-фразою. Тобто ви отримуєте ключ, за допомогою якого зможете безпосередньо взаємодіяти з грошима через цей некастодіальний сервіс. Ключі знаходяться саме у вас. Ви самі несете повну відповідальність за вашу криптовалюту. Жоден сервіс або інша людина не знає ваших приватних ключей і не має до них доступу. \nНекастодіальні гаманці поділяються на гарячі та холодні.\nГарячі гаманці підключені до інтернету. Це їх ключова відмінність. Щоб користуватися гарячим гаманцем, вам знадобиться мобільний застосунок або браузерне розширення та доступ до інтернету. Завдяки цьому ви можете купувати, продавати та робити перекази криптовалюти.\nХолодні гаманці — це загалом апаратні пристрої й один з таких — Ledger — зовні виглядає, як звичайна флешка. Однак це високотехнологічний пристрій, який зберігає ваш приватний ключ у зашифрованому вигляді.\nЯкі є відмінності у цього виду гаманця? В нього немає доступу до інтернету. Щоб перевести кошти, потрібно фізична взаємодія з вашим холодним гаманцем. На сьогодні вони всі на 100% захищені, чого з упевненістю не скажеш про гарячі гаманці.\nТі, хто бажає зберігати криптовалюту максимально безпечно, обирають саме такі гаманці. У такому разі для використання криптовалюти вам знадобиться фізичній пристрій та комп’ютер.\nВиди некастодіальних криптогаманців\nПерейдемо до більш предметного огляду некастодіальних криптогаманців.\nLedger\nКриптогаманець Ledger\nПереваги Ledger:\nпідтримує всі відомі блокчейни, тобто з його допомогою можна зберігати будь-яку криптовалюту;\nнеобхідна фізична взаємодія з гаманцем; \nвідсутній ризик цифрового зламу пристрою; \nзручна декстопна версія;\nможливість підключення до гарячих гаманців (наприклад, ви встановили браузерне розширення, під’єднали його до Ledger і завдяки цьому взаємодієте з різними криптовалютними сервісами, але гроші відправляєте за допомогою Ledger).\nНедоліки Ledger:\nвартість і термін доставки (стартова ціна від €60-70, а термін доставки у довоєнний час був близько 2-3 тижні, зараз — потрібно перевіряти).\nTrust Wallet\nTrust Wallet — найбільш популярний гарячий некастодіальний гаманець у вигляді мобільного застосунку. У нього вже понад 30 млн завантажень і він отримав колосальну підтримку від усього криптоком’юніті.\nДодаток Trust Wallet\nПереваги Trust Wallet: \nприватні ключі знаєте лише ви;\nпідтримує всі відомі блокчейни (в одному місці можна зберігати будь-які криптовалюти);\nіснує торгівля безпосередньо всередині гаманця без необхідності відправляти гроші на сторонні сервіси і платити зайву комісію;\nпідтримка багатьох DeFi-протоколів (через мобільний застосунок ви можете взяти в позику, зробити депозит криптовалюти тощо. Рекомендую зробити собі два гаманці. Перший — для всіх тестів, переказів, ознайомлення з блокчейном, криптовалютами. Другий — для зберігання невеликої суми, якою можна покрити поточні витрати); \nкупівля з банківської картки без усіляких посередників (можете придбати криптовалюту напряму в Trust Wallet).\nНедоліки Trust Wallet: \nризик цифрового зламу пристрою;\nнемає десктопної версії.\nЩо об’єднує всі ці мобільні застосунки, розширення та фізичні пристрої — так це сід-фраза або приватний ключ. По суті вона і є вашим гаманцем та дозволяє користуватися криптовалютою. Усе інше — допоміжні інструменти.\nЯк зберігати сід-фразу безпечно?\nЗберігайте її виключно на папері, щонайменше у двох захищених місцях. Не робіть скріншоти, не зберігайте сід-фразу в Google Cloud, на комп’ютері чи в нотатках на смартфоні. Пам’ятайте: якщо ви загубили свою сід-фразу — ви втрачаєте і вашу криптовалюту. \nУ жодному разі не передавайте сід-фразу іншій особі. Якщо хтось має доступ до неї, то треба розуміти, що цій людині доступна і вся криптовалюта.\nЗа можливості встановлюйте пінкоди та touch- або face-id.\nМій особистий лайфхак: вигадайте якусь фразу, яка б включала весь набір необхідних слів, та вивчіть її. Тоді приватна фраза буде лише у вас в голові.\nІ наостанок — якщо хочете заглибитись у світ криптовалют, раджу вам продовжити знайомство з цією темою за такими ресурсами:\nBinance Academy;\nSimplilearn;\nОгляд криптогаманців.\nЧитайте також: Долари вже не обмінюють, а вкладають у крипту: куди вкластися після війни і чому Web3 — це вже про Україну\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-02 23:57:58','2022-12-02 23:57:58'),(92,'В яких країнах найбільше купують NFT — інфографіка','Богдан Мирченко\nРедактор новостей','На сайті statista.com опублікували країни із найбільшою кількістю власників NFT. Згідно з дослідженням Statista Digital Compass 2022, минулого року незамінні токени користувалися найбільшою популярністю серед жителів країн Східної та Південно-Східної Азії.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nДе живе більшість власників NFT \nЗгідно зі звітом, список країн з найбільшою кількістю власників NFT у світі очолив Таїланд. Там нарахували 5,56 млн осіб (8,08% населення країни), які мають NFT. За ним слідують Бразилія та США — 4,99 млн і 3,81 млн користувачів відповідно. \nПоказники Таїланду з урахуванням чисельності населення різко контрастують із Канадою, де NFT колекціонують 3,67% населення, а Бразилії — 2,33%. \nВ яких країнах найбільше купують NFT\nЗгідно зі звітом компанії Chainalysis, яка спеціалізується на даних про блокчейн, вже до 2021 року ринок NFT виріс до більш ніж $41 млрд, майже зрівнявшись із ринком традиційного мистецтва. Для порівняння обсяг останнього 2020-го становив $50 млрд. \nДослідники кажуть, що бум популярності NFT у Південно-Східній Азії пов’язаний з низкою причин, включаючи популярність ігор типу play-to-earn, таких як Axie Infinity в’єтнамської компанії Sky Mavis, а також числом художників. Ймовірно, користувачам цікава й покупка в інтернеті ділянок віртуальної землі, як, наприклад, на розпродажі Metaverse Thailand у жовтні 2021 року, коли покупцям запропонували придбати ділянки землі у віртуальному центрі Бангкоку.  \nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nОбвал криптобіржі \nОднак у травні 2022 року на ринку NFT і криптовалют у принципі стався обвал. Продаж NFT впав у середньому до 19 тисяч на добу, що на 92% менше, ніж у вересні, коли їх купували по 225 тисяч штук на добу. Такі результати, на думку експертів, пояснюються загальним зниженням ажіотажу, падінням вартості криптовалют, страхом перед шахраями та зростанням інфляції, що робить людей менш схильними до ризикованих інвестицій.\nФінансові експерти радять не надто довіряти NFT, тому що для їхньої оцінки немає достатніх підстав — вони купуються та продаються на основі спекуляцій та галасу. \n«У NFT немає базового економічного прибутку, заснованого на економічній діяльності компаній чи країн. Їхня структура вартості є спекулятивною та волатильною. Ви можете виграти астрономічну суму, але можете втратити все», — зазначив генеральний директор компанії MoneyOwl Чуін Тінг Вебер. \nТому він радить користувачам вкладати в NFT тільки те, що вони готові втратити. \nЩо стосується шахрайства, то один із способів боротьби з крадіжками у цифровому просторі при купівлі та продажі NFT нещодавно запропонував співзасновник Ethereum Віталік Бутерін. За словами бізнесмена, вже в 2022 році буде анонсовано новий вид незамінного токена, який буде прив’язаний до «душі». Докладніше про це читайте за посиланням.','2022-12-02 23:58:33','2022-12-02 23:58:33'),(93,'Криптостартап вартістю $2 млрд скорочує штат — йдуть понад 80 працівників','Богдан Мирченко\nРедактор новостей','«Єдиноріг» у сфері криптовалют, компанія 2TM звільнила понад 80 співробітників. Причина — «зміна світового фінансового ландшафту», зростання відсоткових ставок та інфляції. За останні кілька тижнів це вже третя компанія у сфері криптовалют, яка повідомляє про подібне рішення.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nBuenbit, Bitso, а тепер та 2ТМ \nКомпанія назвала причину звільнень в офіційній заяві, проте не уточнила в ній точну кількість звільнених. Проте пізніше опублікувала список із 86 профілями співробітників, які потрапили під скорочення, а також їх контакти. \nПредставники 2ТМ розповіли, що ситуація вимагала коригування, що виходить за рамки скорочення операційних витрат, таким чином виникла потреба звільнити частину працівників. \nКомпанія заявила про скорочення через тиждень після того, як латиноамериканська криптобіржа Bitso, головний конкурент «дочки» 2TM, компанії Mercado Bitcoin у Бразилії, також звільнила 80 співробітників, пославшись на «довгострокову бізнес-стратегію». Також минулого тижня аргентинська криптовалютна біржа Buenbit звільнила 45% свого персоналу — приблизно 80 співробітників — у зв’язку з так званою «глобальною перебудовою», в яку вступила IT-індустрія. \nРаніше цей термін використали у своєму листі стартапам представники венчурного фонду Y Combinator. У ньому молодій компанії було надано пораду «готуватися до гіршого» і найближчими місяцями намагатися скоротити свої витрати. \nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nКомпанія 2TM стала другим єдинорогом у сфері криптовалют із Латинської Америки після залучення загалом $250 млн у 2021 році при оцінці у $2,2 млрд.\nУ січні компанія купила контрольний пакет акцій CriptoLoja, першої регульованої криптовалютної біржі в Португалії, і планує вийти на іспаномовну частину Латинської Америки через придбання в Аргентині, Чилі, Колумбії та Мексиці. Про це в інтерв’ю CoinDesk у червні 2021 року повідомив генеральний директор 2TM Роберто Дагноні. Однак тепер, враховуючи нові реалії, ймовірно, компанії доведеться змінити свої плани.','2022-12-02 23:59:08','2022-12-02 23:59:08'),(94,'На ринку NFT розкрили шахрайську схему: заарештовано співробітника популярної платформи OpenSea','Богдан Мирченко\nРедактор новостей','Колишнього продакт-менеджера NFT-майданчика OpenSea заарештували за інсайдерську торгівлю. Зокрема, за даними міністерства юстиції США, екс-співробітник платформи вирішував, які NFT мають з’явитися на головній сторінці майданчика, і таким чином збільшував їхню доступність та ринкову вартість. Подробиці — далі.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо трапилося \nКолишнього менеджера з продуктів OpenSea Натаніеля Честейна заарештували 1 травня вранці у Нью-Йорку. Раніше у вересні 2021 року його публічно звинуватили в інсайдерській торгівлі та звільнили з посади в OpenSea. Поточне обвинувачувальне заключення — це перші кримінальні звинувачення, пов’язані з цією схемою. \nВ OpenSea Честейн займався тим, що вирішував, які колекції NFT будуть розміщені на головній сторінці платформи, що зазвичай призводило до різкого зростання вартості всього набору. В обвинувальному висновку описується схема з 45 покупок токенів у 11 різних випадках. У кожному з них Честейн купував NFT незадовго до того, як вони з’являлися на головній сторінці, іноді лише кілька хвилин до цього. За словами прокурора, Честейн потім продавав токени за ціною вдвічі-вп’ятеро вище, ніж купив. \n«NFT можуть вважатися чимось новим, але ця злочинна схема — ні», — зазначив прокурор Південного округу Нью-Йорка Деміен Вільямс.\nЗгідно з обвинувальним висновком, тепер Честейн зобов’язаний повернути всі гроші, які можна відстежити за доходами від схеми. \nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nРозслідування вела Національна група ФБР по боротьбі з криптовалютами (NCET) без участі Комісії з цінних паперів та бірж, яка зазвичай займається справами про інсайдерську торгівлю. Нещодавно стало відомо, що, посилаючись на велику кількість шахрайства, комісія подвоїла штат співробітників, які займаються ринком криптовалют. ','2022-12-02 23:59:43','2022-12-02 23:59:43'),(95,'«Джун у блокчейні може розраховувати на зарплату сеньйора у звичайному IT»: як потрапити в індустрію і кому тут не сподобається','Виктория Пушкина\nЖурналистка в Highload','Це інтерв’ю було дуже незвичайним: вперше я розмовляла по Zoom з однією людиною, але одразу з двох акаунтів — з одного йшло відео, а з іншого звук. Тема була також незвичайна: блокчейн. Але не просто блокчейн, а блокчейн для браузерної гри.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк це пов’язано, кому точно не варто йти в індустрію і який найпростіший спосіб туди увійти — про це розповідає Director of Engineering в Bitmedia Labs Віктор Мірошников.\nВіктор Мірошников, Director of Engineering у Bitmedia Labs\nМи вибрали Web3, щоб дати користувачеві реальну можливість володіння\nКомпанія Bitmedia у блокчейн-індустрії з 2014 року, допомагає іншим компаніям ростити продажі й аудиторію. Але мій проєкт — це новий напрям. Ми робимо ком’юніті-орієнтовану браузерну гру з упором на Web3. Багато розкривати не можу, але спробую пояснити хоча б, до чого тут Web3 і блокчейн.\nПройдемося термінами.\nЯкщо дуже просто, то блокчейн — це технологія передачі майна та виконання смартконтракту. Як коли ти продаєш машину: адже ти не просто віддаєш ключі, ти переоформляєш документи, записуєшся і виписуєшся десь у реєстрі. Ось це якраз про такий реєстр.\nАле в блокчейні реєстр децентралізований: тут немає єдиної сутності, яка вирішує, що правда, а що ні, про це домовляються учасники. Мовою блокчейну це називається «консенсус».\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nКриптовалюта — найпростіше застосування блокчейну. Але технологію використовують не лише для неї. І тут на сцену виходить Web3.\nУ Web 1.0 контент генерували і ним володіли компанії. У Web 2.0 — користувачі. А у Web 3.0 немає когось одного, хто керує інтернетом. Є спільнота, яка може вирішувати долю будь-якого сервісу (і ці рішення записуються до блокчейну). А найголовніше: усе, що ти зробив у Web3, належить тобі, і тільки ти цим розпоряджаєшся.\nТому для нашої браузерної гри ми й вибрали Web3, щоб дати людині реальну можливість володіння. Те, що вона створює в цій грі, вона може продавати, передавати і, взагалі, розпоряджатися цим як хоче. Тобто ми прив’язуємо до блокчейну економічну складову цієї гри. І якщо раптом наш сервер кудись пропаде (навряд це станеться, звичайно 🙂 ) — усе твоє залишиться при тобі.\nЯ — модник у плані технологій, але у блокчейн прийшов не в гонитві за модою\nЯ в розробці понад 15 років. Був і розробником, і лідом, і архітектором. Більшу частину кар’єри робив проєкти для засновників стартапів з Кремнієвої долини, тож вважаю себе ветераном стартап-розробки.\nУ доменах я пробував все: якщо було щось модне та цікаве — я туди ліз 🙂 Але у блокчейн прийшов не в гонитві за модою. Спочатку мене цікавили платіжні системи — я гадаю, це фундаментальні речі, без яких взагалі нічого не відбувається.\nБлокчейн здався мені наступним кроком їх розвитку та дуже цікавою знахідкою завдяки тому, що тут виключається елемент довіри до третьої особи. Сам блокчейном я теж користуюся — я давно живу в Європі і встиг оцінити, як зручно через цю систему, наприклад, надсилати гроші батькам.\nКоли до біткойнів почали виявляти інтерес дедалі більше людей, деякі мої друзі почали займатися майнінгом. У цьому я також частково брав участь, допомагав будувати ферми.\nПотім з’явився Ethereum і здався мені дуже цікавим проєктом — але тоді у стартап-тусовці в цей бік ніхто не дивився, і я почав тягнутися до тих, хто вже в темі. Мені взагалі здається, що у блокчейні дуже розумні та допитливі люди. В IT-індустрії в принципі немає стелі, куди можна рости, а блокчейн у ній — це бездонна бочка зі знаннями.\nЩе одна важлива властивість блокчейну — тут великі ризики. Будь-яка твоя помилка в реалізації софту може мати далекосяжні наслідки — можеш як себе, так і інших людей залишити без штанів. Тому для розробника тут багато челенджів. При цьому наше ком’юніті маленьке, і всі намагаються допомагати одне одному.\nОтже, блокчейн для:\nмодників;\nтих, хто любить ходити по краю.\nЄ і 3. — для тих, хто ідейний.\nЯ — ідейний. Я вірю в те, що софт може замінити купу непотрібної бюрократії, коли ми, наприклад, продаємо нерухомість чи отримуємо зарплату. Тому що в цих процесах нам доводиться довіряти комусь і в нас з’являється багато бар’єрів. Я вважаю: якщо прибрати ці бар’єри, ми станемо набагато багатшими і щасливішими. І я сподіваюся, що це увійде в наше життя так само, як інтернет — ми всі користуємося ним і не помічаємо, як часто. \nНе варто йти у блокчейн, якщо ти не готовий багато працювати\nТим, хто хоче займатися розробкою на блокчейні, доведеться багато чого вивчити. Якщо говорити лише про технології, то це Solidity та/або Rust. І це буде легше тим, хто вже вміє програмувати.\nАле взагалі те, що потрібно вчити, щоб увійти у блокчейн, залежить від того, чим ти хочеш тут займатися:\nЯкщо ти хочеш створювати прості NFT, буде достатньо розуміти саму концепцію.\nЯкщо ти хочеш створювати свої проєкти на блокчейні, знадобиться знання криптографії та низькорівневого програмування.\nА якщо ти маєш амбітну мету створювати свої блокчейн-протоколи, то тут потрібні дуже глибокі знання практично в усіх напрямах Computer Science.\nУ тих, кого зацікавили пункти 2–3, шлях буде складним. Присвятити доведеться приблизно рік — за умови, що у вас багато вільного часу. Але навіть у цьому випадку починати з вивчення самої екосистеми — непогане рішення. Наприклад, є така штука, яка називається Tatum — це обгортка над блокчейном, і вона дозволяє робити дуже складні, але типові речі.\nТак ви «помочите ніжки» і звідти вже пірнатимете. Тому що блокчейн — середовище, що швидко розвивається. Ще швидше розвивається, ніж IT-індустрія загалом. Те, що у звичайному IT відбувається за рік, тут триває кілька місяців. \nЩе простіший шлях увійти до блокчейну є в тестувальників. І тут особливої перекваліфікації не знадобиться. Хоча чим більше ти розумітимеш блокчейн — тим краще. Тож лайфхак для тестувальників, які хочуть у блокчейн: піти і відтестувати всі блокчейн-проєкти, які трапляться 🙂\nВзагалі, я вважаю, якщо в тебе є пристрасть, ти зможеш увійти в блокчейн незалежно від бекграунду. Потрібно буде просто лупати сю скалу раз за разом.\nА от якщо ти не впевнений, що із задоволенням будеш навчатися і багато працювати навіть після того, як уже увійдеш в індустрію, краще вибрати іншу сферу. Тут навіть гроші не допоможуть, хоча гроші тут великі: джуніор у блокчейні може розраховувати на зарплату сеньйора у звичайній розробці.\nА ще блокчейн не підійде тим, хто впевнений, що все знає. Індустрія швидко збиває цю пиху 🙂\nХоча не думаю, що за кілька років можна буде працювати в будь-якій іншій області IT і зовсім не розуміти, що таке блокчейн. Думаю, це стане базовою навичкою для технічного спеціаліста — як бази даних. На рівні «що ця технологія може/не може і як не пхати пальці в розетку».','2022-12-03 00:00:18','2022-12-03 00:00:18'),(96,'Шахраї використовують діпфейк Ілона Маска для крадіжки криптовалюти','Богдан Мирченко\nРедактор новостей','Невідомі використовують діпфейки знаменитостей для крадіжки криптовалюти, пише Vice. Одним із останніх у мережі потрапило відео, на якому криптовалютну шахрайську компанію BitVex рекламує CEO SpaceX та Tesla Ілон Маск. Подробиці — далі.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо відомо\nЗа основу матеріалу взято квітневе інтерв’ю Ілона Маска із главою TED Крісом Андерсоном. Відео синхронізує рух їх губ зі сценарієм, що вимовляється згенерованим голосом, який звучить приблизно як голос бізнесмена. На відео фальшивий Маск стверджує, що BitVex — це проєкт, створений ним для просування біткоїну, і обіцяє всім користувачам 30-процентний прибуток щодня протягом трьох місяців на будь-який криптовалютний депозит. Фальшивий Андерсон доєднується до розмови, додаючи, що й сам користувався платформою та гарантує успіх.\nПеред тим, як Маск підтвердив, що на відео не він, воно провисіло у Twitter протягом кількох днів.\nПри створенні облікового запису на BitVex і вході в систему з’являється екран, на якому можна переглянути показники на панелі приладів, внести криптовалюту, ознайомитися з інвестиційними планами, вивести кошти та ознайомитися з умовами надання послуг. Проте річ у тому, що все це фальшивка. Головна ознака уявної справжності — список недавніх виводів коштів, які нібито зробили інші користувачі, — генерується випадково і змінюється щоразу, коли сторінка оновлюється, поки вона працює, повідомляє BleepingComputer. В даний час Google Chrome позначає URL-адресу BitVex.io як шахрайський сайт і повідомляє, що на ньому були виявлені спроби фішингу.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nВарто зазначити, що схема зловмисників виявилася не надто успішною. За даними Bleeping Computer, поки що шахраям вдалося отримати $1700, проте не виключено, що у них є кілька адрес у ротації і таким чином вони зможуть згодом вкрасти більше криптовалюти.\nРаніше в мережі поширився діпфейк із президентом України Володимиром Зеленським, на якому глава держави нібито закликає українських військових та громадян, задіяних у територіальній обороні, скласти зброю та здатися армії Росії.','2022-12-03 00:00:54','2022-12-03 00:00:54'),(97,'Знову звільнення на крипторинку: ще одна велика біржа різко скоротила штат','Богдан Мирченко\nРедактор новостей','Провідна латиноамериканська криптобіржа Bitso звільнила 80 із 700 співробітників. Причина, яку назвали у компанії, пов’язана з необхідністю «переосмислити навички», які вимагаються від співробітників, щоб швидше розвиватися у криптоіндустрії.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nБізнес-стратегія Bitso\nПро скорочення в компанії стало відомо 26 травня, через два дні після того, як з’явилася інформація про звільнення в аргентинській криптовалютній біржі Buenbit, з якої скоротили відразу 45% співробітників у зв’язку з «глобальною перебудовою». Щодо Bitso, то, за заявою представників компанії, скорочення ніяк не пов’язані з будь-якими економічними проблемами.\n«Наші рішення про людей, які працюють у компанії, ухвалюються на основі довгострокової бізнес-стратегії для підтримки клієнтів і нашої стратегії», — зазначили в Bitso.\nПредставники провідної криптобіржі в Латинській Америці назвали причиною скорочення необхідність переосмислити навички, які вимагаються від співробітників, щоб швидше розвиватися в криптоіндустрії. Крім того, компанія не згадала про якісь труднощі із залученням капіталу. Тому, ймовірно, Bitso продовжує активно наймати нових співробітників. Для роботи в компанії, в якій до звільнення працювали понад 700 фахівців, на офіційному сайті досі доступно понад 60 вакансій. \nПро компанію\nУ Bitso понад 4 млн користувачів у Мексиці, Аргентині, Колумбії та Бразилії. У січні компанія повідомила, що прагне стати найбільшою біржею в Бразилії до кінця 2022 року. У цьому регіоні Bitso конкурує з місцевою криптовалютною біржею Mercado Bitcoin, лідером із більш ніж чотирма мільйонами клієнтів.\nОстанній інвестиційний раунд Bitso відбувся у травні 2021 року, коли компанія залучила $250 млн при оцінці в $2,2 млрд, ставши першим латиноамериканським криптоєдинорогом.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nРаніше аргентинська криптовалютна біржа Buenbit звільнила 45% свого персоналу — або близько 80 співробітників — у зв’язку з глобальною перебудовою, в яку вступила технологічна індустрія. Докладніше про це читайте тут.','2022-12-03 00:01:29','2022-12-03 00:01:29'),(98,'Долари вже не обмінюють, а вкладають у крипту: куди вкластися після війни і чому Web3 — це вже про Україну','Оленка Пилипчак\nРедактор у Highload','Під час кіберстриму від «Європейської асоціації програмної інженерії» EASE IT-бізнесмени поговорили про криптовалютний ринок в Україні, поділилися баченням, у які монети вкладатися та відповіли на найпопулярніші питання, що виникають у кожного з нас у цей непростий час.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nНижче — пряма мова президента EASE та IT-бізнесмена Владислава Савченка, міжнародного бізнесмена та фаундера Partner Trade Тимофія Бондарчука, блокчейн-експерта та бізнесмена Романа Годза.\nЗміст:\n1. Як дізналися про війну в Україні\n2. Як почувається український бізнес\n3. Взаємодія з іноземними партнерами\n4. Як криптовалюта вплине на бізнес\n5. Ризики легалізації крипти для банківської системи\n6. Що таке Web3 і як це пов’язано з криптовалютою\n7. Топ -5 монет, на які варто звернути увагу\n8. Про хмарні послуги\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nЯк дізналися про війну в Україні\nБлокчейн-експерт Роман Годз:\n24 лютого о 15:00 у мене мав би бути рейс, ми збиралися в Дубай на конференцію. Близько 05:00 моя дружина прокинулася зі словами: «Гроза, мабуть». І полізла у телефон перевіряти погоду. Я відповів: «Яка гроза, лягай спати». І тут у мене починає дзвонити телефон, це був мій партнер із США: «Ромо, терміново збирайся, у вас війна почалася». Я відповів: «Костю, яка війна, ти про що?»\nБлокчейн-експерт та бізнесмен Роман Годз / Скріншот\nМоя полеміка закінчилася після другого вибуху. Тоді я зрозумів, що це не гроза. Ми за 15 хвилин зібралися та поїхали всією родиною. Ми живемо під Києвом, тож це одразу було голосно. Ми поїхали спочатку до Білої Церкви, потім до Вінницької області. Отямився я тільки наступного дня і почав розуміти, що відбувається.\nЗрозумів, що роботу моєї IT-компанії потрібно перебудувати у напрямку DDoS-атак. Група наших програмістів була також у Вінницькій області, ми винайняли приміщення старої школи, обладнали у ній робочі місця та почали працювати на благо держави. Придбали близько 2000 серверів. Робили все, що могли.\nСпочатку дуже акуратно купували все через крипту, потім вже без жодних акуратностей — зрозуміли, що треба працювати. А потім перейшли на більш знайому нам тему — автоматизацію. Зрозуміли, що є проблема, пов’язана з логістикою, комунікацією між благодійними фондами та тими, кому потрібна допомога. І ми почали автоматизувати процеси, щоб усе працювало плавніше.\nЗараз я перебуваю у Варшаві і звідси організовую ці процеси.\nФаундер Partner Trade Тимофій Бондарчук:\nЯ летів з Лос-Анджелеса в Дубай, була пересадка в Стамбулі. Я сів у літак в одному світі, а вийшов в іншому. На пересадку у мене була лише година, тому я біг шукати свій гейт. І по ходу дістав свій телефон та побачив стрічку новин. Тіло ще кілька хвилин продовжувало бігти, а я читав робочі чати та повідомлення від рідних про те, що в Україні почалася війна.\nФаундер Partner Trade Тимофій Бондарчук / Скріншот\nТільки через 40 хвилин, поки не зробив пару дзвінків, я зрозумів, що валіза полетіла у Дубай, а я залишаюся тут. Годин шість я просидів, намагаючись зрозуміти, що робити, як вивозити сім’ю.\nЗараз ми перебуваємо у Бухаресті, намагаємося працювати звідси.\nЯк почувається український бізнес\nБлокчейн-експерт Роман Годз:\nМій торгівельний бізнес спочатку ліг на 100%. Зрозуміло, що б’юті-сегмент — це не дуже актуально. І в мене десь на два чи три тижні він зупинився повністю, 50 співробітникам я вирішив платити, тому що не хотів розпускати колектив.\nПершого тижня ми вирішували питання, пов’язані з релокацією, це був той ще процес, бо хтось застряг під Києвом у зоні активних дій — і це зайняло багато часу, щоб усі були в безпеці.\nСьогодні торгівельний бізнес в Україні працює приблизно на 5%. Я прочитав статтю з приводу так званого індексу помади: що гірша ситуація в країні, то більше помади продається. І я зрозумів, що можна щось робити, і ми почали робити.\nФаундер Partner Trade Тимофій Бондарчук:\nДля мене Україна є однією з великих частин бізнесу, тому що ми доставляємо вантажі з Китаю в Україну, з України до США, Канади, ОАЕ та інших країн. І він зупинився на місяць. Ним, фактично, ніхто не займався. Основне завдання було організувати свої процеси безпеки, родичів та команди. Кілька людей із команди протягом трьох тижнів перебували під Києвом у дуже небезпечних місцях.\nЗгодом я поговорив з більшою частиною своїх клієнтів, які експортують товари з України, вони дуже оптимістично налаштовані, незважаючи на війну.\nРелокують виробництва до західної частини України, виводять команди на виробництва там, де це можливо та безпечніше. Ми перевезли більшу частину київського складу до західного регіону країни. Зараз організовуємо ланцюжок експорту та імпорту комплектуючих через Польщу.\nВзаємодія з іноземними партнерами\nПрезидент EASE Владислав Савченко:\nЄ історія із санкціями з погляду підтримки України. Близько 70% технологічних компаній вийшли із росії. Їм за деякий час потрібно буде десь розміщувати свої R&D-центри, шукати розробників, крутий менеджмент. Це, звісно, буде Україна. Але треба закінчити палаючий етап у країні.\nПрезидент EASE та IT-бізнесмен Владислав Савченко / Скріншот\nЄ момент: я нещодавно телефонував німецьким партнерам і ось що почув.\nВони дотримуються санкційності. Але Україна — ризикова зона, зона конфлікту, ті контракти, які є, вони продовжуються, але є команда не укладати нових.\nКомпанії SAP та Accenture надають близько 10 тис. робочих місць для IT-фахівців в Україні. Це велика загроза ринку IT. Нас начебто всі підтримують, але нових контрактів не дають через ризики. У перші тижні для мене стало відкриттям, що українське IT — протиударний бізнес, тому що замовники — за кордоном.\nАле з’явився момент, який прибирає цю протиударність вже за три місяці, коли починають закінчуватися перші контракти. І якщо тенденція продовжиться, отримати нові контракти буде складно, працевлаштувати фахівців буде практично неможливо.\nЗа моїми підрахунками, розмір ризиків становить щонайменше 0,5 млрд євро річних. Це стільки наша країна мінусує валютних надходжень в IT.\nПід час укладання нових контрактів ми зіткнулися з мікроменеджментом. У багатьох сферах фінансування для України скоротилося або його зовсім прибрали. Проте наші підприємці намагаються виходити з ситуацій.\nУкраїнські підприємці повинні мати якийсь інструментарій, яким вони можуть лавірувати та отримувати проплати у зв’язку з ризиковістю України. На цьому тлі новина про появу PayPal у країні дуже класна.\nДруга гарна новина — про легалізацію криптоактивів, у яких я бачу чудову можливість навіть зараз, не треба нічого більше чекати. Компанії, які хочуть токенізувати бізнес, можуть намагатися отримати юрисдикцію, яка дружить із криптовалютами, криптоактивами, криптопроєктами. Web3 — це вже історія про Україну.\nБлокчейн-експерт Роман Годз:\nПерше, що треба враховувати — є політика держави, а є політика компанії. І ризик-менеджмент оцінює ситуацію та плюс-мінус розуміє ризики. Думаю, вони бояться, бо не знають, що буде завтра.\nЗакінчення війни — це буде точка, коли з’явиться розуміння, і компанії зможуть вже щось планувати.\nАле, з іншого боку, велика підтримка у тому, що Україна — це бренд, з яким можна працювати. І зараз нас підтримують ті партнери, з якими ми не співпрацювали раніше.\nНаприклад, усі мої конкуренти з Польщі дзвонили мені першого ж дня і запитували, чим можуть допомогти. І допомагали. Думаю, пізніше це питання вирішиться і схема виробиться. Ми знаємо, де зосереджено світовий IT-інтелект, і він нікуди не подінеться. Думаю, це питання домовленостей із кожною компанією. Будуть якісь прошарки, які гарантуватимуть, вони не повністю підуть у співпрацю з іншими країнами.\nФаундер Partner Trade Тимофій Бондарчук:\nВся ця підтримка дуже відчувається. Але все, що стосується фізичних грошей, люди відповідають: «Ми тебе підтримуємо, ми можемо зробити донат, можемо допомогти сім’ї чи співробітникам, але цього разу заплати наперед». Хоча раніше завжди була кредитна лінія.\nМи розуміємо, що у багатьох компаній зараз переддефолтний стан.\nЗ мого боку припускаю, що потрібно буде виводити бізнес за кордон щодо переговорної частини. А ті 50 людей команди, які перебувають у Чернівцях, будуть другим бекендом для західних замовників.\nТому що одна справа укладати договір із європейською чи американською компанією, де є люди, з якими можна завжди побачитися та поспілкуватися. І рахунок у банку в Європі, а не в Україні.\nВпевнений, що зараз багато компаній замислилися над тим, що треба буде щось запускати за межами країни. Глобально Україна має великий економічний та бізнес-потенціал.\nЯк криптовалюта вплине на бізнес\nФаундер Partner Trade Тимофій Бондарчук:\nМій бізнес з погляду платежів досить олдскульний. Ми працюємо практично з усіма світовими платіжними системами.\nНаприклад, здебільшого всі американці працюють лише з банківськими рахунками. Європейські підприємці або підприємці з України використовують платіжні системи, якщо вони мають\nна них надходження. З погляду крипти, будь-яке просування криптовалюти — неминуче майбутнє.\nКоли я казав, що ми приймаємо різні заявки — і від волонтерів, і від приватних осіб, від фондів чи ТрО на закупівлю та перевезення амуніції чи іншої допомоги, і мені хлопці з ЗСУ кажуть: «Ось тобі список, гроші у нас є, але все в USDT» .\nІ навіщо мені намагатися знаходити лазівки, щоб офіційно це купити довше в інших країнах, якщо я можу зробити це у два кліки? Як тільки можна буде легально робити платежі та конвертувати валюту у крипту та назад, у нас з’явиться багато нових ніш та бізнесів. По-друге, вони будуть чистими, коли буде зрозуміле оподаткування, це стане великим притоком і нових робочих місць, і грошей, і податків.\nЦе моя улюблена тема, тому що крипта — моє хобі, я знайомий із нею з 2016 року. Тоді вона сприймалася як піраміда і обман. З початком війни я часто чую від людей, що вони врятували свої гроші, тому що вони в USDT. Нарешті настав час, коли люди не долари обмінюють, а вкладають у крипту, її почали сприймати.\nВ Україні ухвалили закон, який легалізував усе пов’язане з криптою, вона вже прирівнюється до більш звичних для нас грошей. У магазині нею не можна розрахуватися, звісно, але це реальні активи, які можна передавати.\nЯкщо у додаток «Дія» додати блокчейн-технології, це буде криптоспільнота. Та криптоспільнота, де кожна людина за допомогою блокчейну та свого телефону вирішуватиме ті речі, які до неї мають відношення.\nТе, що відбувається в Швейцарії, коли в невеликих громадах збираються всі разом, піднімають руку і ухвалюють якісь закони — так само буде у нас, коли ти, сидячи на дивані, ухвалюватимеш рішення в державі. І ось Web3 допоможе це швидко зробити. Якщо зараз подивитися на весь світ, то Україна — це квінтесенція.\nМи переможемо, це питання часу, але залишиться багато розрухи, багато голодних і розумних людей, які хочуть чогось досягти, багато грошей, які увіллє Захід. І те, що треба буде будувати з нуля. То чому б не взяти Web3-технології, у яких вже навіть законодавча база готова і не почати робити нову формацію держави? Мені здається, це дуже круто.\nПрезидент EASE Владислав Савченко:\nНайцікавіше, що у криптоіндустрії велика кількість грошей. По-перше, це пов’язано з хайпом та перегрівом. Коли наш президент їздив до Кремнієвої долини зустрічатися з інвесторами, я там теж був на той момент.\nЦікавий момент був на зустрічі зі Stellar. Це американська компанія, яка спочатку будувала свій зв’язок, гаманці, зв’язок із картками криптовалютного світу зі справжніми надрукованими грошима.\nВони будували цю історію через Ripple, сторонню платформу. Потім вони зрозуміли, що за цим майбутнє та написали свою власну технологію.\nІ вони українському уряду ще тоді, півроку тому, запропонували електронну гривню на технології Stellar та готові були виділити на це шалені гроші.\nНаразі Україна перебуває на такому етапі, коли криптосвіт ще формується. Не можна сказати, що він уже розвинений і ти скрізь можеш зі своїми біткойнами або іншою криптою щось досить легко зробити. Але розуміння того, що це початок чогось більшого, вже є.\nМи зараз на такому роздоріжжі, коли великі компанії, яким цікаво отримати кейси, готові безоплатно інвестувати. І таких прикладів дуже багато. Тобто кожен хоче збудувати якусь історію. Це класна можливість для України отримати ці гроші, розвиватись та відбудовувати країну.\nКіберстрім від «Європейської асоціації програмної інженерії» EASE / Скріншот\nРизики легалізації крипти для банківської системи\nБлокчейн-експерт Роман Годз:\nЯ скажу більше: тільки в Україні я знаю 10 людей, які за два місяці готові релізнути e-гривню. Нині це взагалі нескладно. Для цього потрібно трохи політичної волі та й усе. Тим більше це буде потрібно для країни, щоб швидко її відновлювати.\nЯ роблю ставку, що це неминуче, і прикладатиму багато зусиль для цього. Після перемоги все це запуститься і буде дуже круто.\nБанки нікуди не подінуться, вони приймуть цю технологію і почнуть її ефективно використовувати. В них тільки з’являться конкуренти у вигляді криптобірж. Але така конкуренція завжди призводить до розвитку. Відсутність конкуренції — це погано.\nПрезидент EASE Владислав Савченко:\nУ цьому питанні є деякі побоювання та страх конкуренції між криптобіржами й банками. Це стримуючий фактор для розвитку. Але зараз весь блокчейн без зв’язку з матеріальним світом не має сенсу. Так само як і IT.\nЗв’язок і той, хто може поєднати дві промисловості, в місці стику починають набувати цінності. Яка цінність біржі? У біржі є обхідні шляхи та зв’язки України з матеріальним світом у вигляді фіатних грошей. Грошей справжніх, коли ти можеш вкласти, наприклад, $100 у термінал та отримати умовно USDT. А потім за них купити якусь монету чи проінвестувати якісь проєкти.\nТут дуже класна аналогія з необанками. Тому що ти починаєш розуміти, що банки, які будуть лояльніші до бірж, законодавча база яких дозволить розгортати ці біржі та пов’язувати фіатні («справжні» та «несправжні» гроші з криптобіржами) — ті й виграють.\nЗаконодавча база — це точка зв’язку. І якщо за рахунок цього у нас почне розгортатися більша кількість бірж, які зможуть нормально офіційно працювати, працювати з банками, банки розумітимуть, як ця технологія влаштована. Тому що банки дуже старовірні та незрозуміле їм не підходить.\nТак само зараз і з криптовалютами відбувається.\nКрок, коли є зрозуміле законодавство і з’являються проєкти, які можуть поєднати справжній світ із блокчейн-технологіями — у цьому криється мільярдна капіталізація, гроші, захід інвесторів.\nЩо таке Web3 і як це пов’язано з криптовалютою\nБлокчейн-експерт Роман Годз:\nЩоб відповісти на це питання просто, потрібно сказати, що таке Web1, Web2 і Web3:\nWeb1 — це коли можна було завантажити сторінку та дивитися на неї. У 90-х роках це була фантастика.\nWeb2 — це коли вже можна взаємодіяти з сайтом: писати контент, заповнювати форму, в чаті написати, погортати Facebook.\nWeb3 — все той же Web2, але туди додається блокчейн-прошарок. Коли ти не маєш адміністраторів, які щось самі редагують і видаляють. А є прозорі смарт-контракти, де чітко прописані всі правила. І ці правила саморегулюються. Це — верхня оболонка. Нижня може бути, що це все на якомусь блокчейні — ніхто не може на це впливати, ніхто не може це вимкнути, тому що це не знаходиться на вебхостингу.\nЦе якась квінтесенція демократії у чистому вигляді, де все є прозорим і є чітке уявлення, що це свобода в інтернеті. При цьому там є всі інструменти, які притаманні блокчейну (оплата будь-якою валютою, створення цієї валюти) — це все буде Web3.\nТоп-5 монет, на які варто звернути увагу\nБлокчейн-експерт Роман Годз:\nУ мене зараз близько 50 монет, може, трохи більше.\nОсь моя думка:\nPolkadot — це основа Web3-інтернету, таке інфраструктурне рішення, де будуть будуватися всі Web3-програми. Я інвестую лише у технології. Мені нецікаві хайпові речі, я інвестую довгостроково, купую монети, коли вони тільки починають жити, і чекаю. Ще не продавав жодних. Тому що зараз усе лише починається. Це розкриється тоді, коли Web3 буде в ужитку.\nEthereum 2.0 розвиватиметься. Я в нього вірю ще із $10.\nБіткойн як сам по собі, тому що він обмежений. Технічно це єдиний продукт у моєму портфелі, який, на мою думку, не дуже технологічний, тому що такий дідок. Але він обмежений і він зростатиме в ціні.\nSolana.\nADA.\nНещодавно знайомий запитує мене про крипту і каже: «Навчи мене». Цей запит чую дуже часто. Я зрозумів, що це нелегко. Я завжди питаю у відповідь: «Ти хочеш бути причетним до крипти?» Коли відповідають «так», я питаю, наскільки людина ризикова/неризикова. Більшість відповідає, що ні.\nТому всім раджу найпростіше, що є у крипті (як у реальному житті депозити) — DeFi (децентралізовані фінансові сервіси). Це найяскравіший приклад Web3, коли можна покласти свою монетку типу USDT під 7-15% річних. Це не так багато, але стабільно, зрозуміло.\nЦе найчіткіша інвестиція, яка зараз доступна для неризикових хлопців.\nФаундер Partner Trade Тимофій Бондарчук:\nЯ вірю в те, що рано чи пізно наші діти використовуватимуть крипту на тому самому рівні, як ми самі користуємося гривнею-євро-доларом. Поки що перебуваю на етапі вивчення. Якщо говорити про перші дотичні, то, природно, це USDT. Я дивлюся на це як принцип конвертації buy-and-hold .\nБеру монети, які функціональні з погляду мого бізнесу, які швидко конвертуються, умовно прогнозовані. Будь-який інвестор намагається визначати собі якусь зону. Якщо це історія про підприємництво, інвестиції, інструментарій, то цим потрібно займатись, це потрібно вивчати. І вкладати гроші туди, в чому розумієшся.\nЦе коли українські підприємці чують про 7-15% річних, то для них це не так багато. А ти назви ці відсотки тим, хто робить 3% річних у Кореї чи Гонконгу. Для них 13% — це щось нереальне.\nПро хмарні послуги\nПрезидент EASE Владислав Савченко:\nДосить довго Україна рухалася до того моменту, коли державні структури можуть запускати та користуватися хмарними сервісами. Як спойлер для себе бачу, що це можливості руху до paperless economy та cashless economy.\nЦе те, що допоможе державним сервісам запускати різноманітні цифрові сервіси та повністю піти від папірців. Ми користуватимемося різноманітним серверним обладнанням, яке необов’язково має стояти у міністра цифрової трансформації. Це крок далі, коли приватники можуть допомагати державі, коли держава може відкривати нові сервіси.\nСеред резидентів «Європейської асоціації програмної інженерії» є хлопці з GigaCloud, які на першому або другому місці серед українських компаній саме за обігом, які надають хмарні сервіси. Я думаю, що ухвалення закону про хмарні сервіси їм дуже допоможе у взаємодії, зокрема, з держструктурами.\nКупувати сьогодні сервери — це анахронізм . Використовувати хмарні сервіси — класна історія, навіть якщо ділити їх із кимось іншим.\nВважаю, що це ще один інструмент для розвитку України після перемоги. Думаю, що слава про наші кібервійська вже розлетілася всім світом.\nУ нас тут найкращі розуми з погляду IT-технологій, інженерії, безпеки — про це знають всі. І отримати підряди, відкрити R&D-центри бажатиме практично кожна компанія.\nІ ще цікавий момент для фахівців. Я був в Ужгороді та познайомився там із хлопцями, які були співзасновниками Apostera. Компанія займається доповненою реальністю для авто, для навігаторів та взагалі взаємодій з мультимедійною системою автомобіля. Таких спеціалістів від сили 10 000 у всьому світі.\nУмовно 100 людей знаходяться тільки в цій компанії і цю компанію купив Samsung (через свою дочірню Harman/Kardon) за десятки мільйонів доларів. Це хлопці з України. І це свідчить про те, що великі проривні речі робляться у нашій країні. Для мене стало відкриттям конкретної людини, яка займалася розробкою навігаційних систем та мультимедійних систем для Mercedes, BMW.\nНаша асоціація запустила платформу, яка також ґрунтується на ідеї «нам не потрібні донати, дайте нам роботу». Ми розміщуємо там активні команди та IT-ресурси, які є у наших резидентів, а також компанії, які хочуть приєднатися до цієї ініціативи.\nЄ мінусові нотки щодо того, що Rozetka складно, вони ледве відродили свою діяльність, скоротили 450 осіб, «Нова Пошта» скоротила 250 осіб в IT-відділі. Але в той же час ми намагаємося! Ось ці мізки є у доступі, є купа різних крутих експертиз, які можна купити в Україні. І за достатньо адекватні гроші.\nІ вже йдуть запити. Ми навіть там жодного платного трафіку не купували, просто про нас почали писати. І вже німецькі, американські компанії розміщують свої заявки про проєкти та хочуть працювати з Україною. При тому, що ми у стані війни. І це дуже круто.\nЯ бачу, що коли ми переможемо, Україна від США в плані якості та грошей не відрізнятиметься, в Україні інженер коштуватиме $200 на годину.\nМи станемо світовим центром всього: фінансів, блокчейну, технологій, крутих компаній.\nБлокчейн-експерт Роман Годз:\nЯк я розумію, що це юридична основа для того, щоб не витрачати шалені бюджети на закупівлю серверів. Усе IT сидить у хмарах і розуміє, що це вигідно.\nДля мене це буде покращення у плані, що коли державні проєкти перейдуть на загальний стек технологій, спроститься процес взаємодії. І покращиться швидкість.\nЄ побоювання, що хмарні послуги — це небезпечно. Але можу з упевненістю сказати, що ті нормативи, бази та те, що використовують у держорганах, — минуле століття. І мені страшно, коли дані зберігаються на сервері. Я знаю, які у нас є фахівці з безпеки. До речі, ІТ-війна зараз це добре підтвердила. Мені здається, що команда Anonymous з українським громадянством у паспортах.\nКоли після перемоги люди зрозуміють, що є закон про хмарні сервіси і туди підтягнуто безпеку, то це буде ідеальне рішення.\nБільше того, Volkswagen та BMW зупинили виробництво, бо в Україні війна, бо всю проводку роблять в Україні. Насправді у нас є багато чого. І після перемоги це все проявиться. Раніше не було бренду «Українець». Шкода, що такою ціною, але зараз українці отримають свою частину слави, всі зрозуміють, хто ми такі.\nПісля перемоги одним із ринків, що найбільш розвиватиметься, буде воєнка. І якщо наші айтівці почнуть взаємодіяти з новою школою, ми дуже вирвемося вперед.\nНаприклад, побудувати електронний паркан за допомогою сучасних технологій.\nФаундер Partner Trade Тимофій Бондарчук:\nВсе, що пов’язане з розвитком хмарних сервісів, все, що буде пов’язане з електронними деклараціями, — це буде показником нової держави, весь світ так не працює. Україна серед передових країн, де дуже тісний зв’язок між бізнесом і державою.\nГоловний мотиватор бізнесу в нашій країні переходити на хмару — СБУ 🙂\nКоли вперше приїхав до США, то був 2007 рік. З того часу я постійно пов’язаний із Америкою. І перші 10 років мені доводилося розповідати про країну, все пояснювати. Сьогодні, принаймні, в Європі, якщо ти кажеш що ти з України, тебе в ресторані безкоштовно пригощають, йде величезна кількість респекту та допомоги.\nЗазначу, що таке сприйняття України не лише, тому що йде війна, що нас шкода — ні. А те, що ми даємо нормальну відсіч рашистам, що ми відстоюємо, що ми тримаємо. І це у всьому світі викликає повагу.','2022-12-03 00:01:34','2022-12-03 00:01:34'),(99,'Посібник для чайників: як за 10 хвилин створити свій шиткойн (і стати мільйонером!)','Игорь Грегорченко\nТехнический редактор Highload','Анонімний користувач Reddit пояснив, як на хвилі популярності криптовалют будь-хто за 10 хвилин може створити і почати продавати свій власний шиткоїн.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПостановка завдання\nКористувач з популярного форуму Reddit запропонував замість пасивного спостереження за графіками та чужими криптопроєктами, не гаяти часу і створити власний шиткоїн. У своєму керівництві він пояснює, як це зробити за чотири кроки.\nПроцес досить простий і обійдеться напрочуд недорого: автору цього мануала знадобилося 15 ALGO (приблизно $5 на момент публікації). Емісія своєї монети реалізується на доволі специфічному блокчейні Algorand (який нині на 30-му місці в рейтингу криптовалют світу).\nДалі наводимо авторський текст створення активу (ASA) за чотири прості кроки. Якщо ви вирішили витратити на це свої гроші і час — ви дієте повністю на свій страх і ризик.\nПокрокове керівництво\nКрок перший: Відкриваємо гаманець\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nСтворіть гаманець Pera та переведіть на нього приблизно 15 ALGO.\nГаманець Pera доступний на Android та iOS, також можна використовувати будь-який інший гаманець ALGO, який вам більше подобається.\nКрок другий: Створюємо стандартний актив Algorand (ASA)\nПерейдіть на сайт algodesk.io та під’єднайте створений раніше гаманець.\nНатисніть праву верхню кнопку з написом «Створити актив», з’явиться наступне вікно. Заповніть необхідну інформацію та підтвердьте транзакцію на своєму гаманці (плата за це становить приблизно 1 ALGO).\nВітаємо, тепер ви є гордим власником власного ALGO ASA.\nКрок третій: Забезпечуємо ліквідність\nОтже, тепер у вас є новий актив у гаманці, але він ще не відомий світові, що робити?\nЗайдіть на DEX-біржу компанії Algorands під назвою tinyman.org і виконайте такі дії:\nпід’єднайте свій гаманець;\nнатисніть вкладку з написом Pool;\nнатисніть «Створити пару».\n\nДалі виберіть Algo та ваш новий ASA (вам потрібно буде знайти його та натиснути на поле з написом «Приховати неперевірені активи»).\nТепер додайте на біржу стільки своїх ALGO та ASA-монет, скільки захочете (це дасть йому початкову вартість, якщо ви додасте 1 ALGO та 1 ButtCoin, то 1 ALGO = 1 Butt).\nВітаємо, тепер ваш шиткоїн має певну цінність. Зачекайте приблизно 30 хвилин і перейдіть на сайт tinychart.org.\n  Крок четвертий: Станьте мільйонером\nОт і все. Ви закінчили. Теоретично тепер ви можете стати мільйонером «на папері».\nНаприклад, я створив свою ButtCoinASA і особисто тримаю всі мільярди випущених монет, а 1000000000 x $0,0019 = $1,9 млн.\nЗвичайно, я не зможу перевести їх у готівку, тому що ліквідність становить усього $3, але на графіку вони поки виглядають як актив, що зростає.\nЩо ви можете робити з новою криптовалютою? Усе що хочете. Поділитися з друзями, дарувати незнайомцям, торгувати на біржі, завести систему заохочень для своїх дітей.\nА якщо ви компетентні, то, можливо, навіть перетворите її на реальний проєкт із реальним застосуванням і заробите трохи грошей.\nПіслямова до експерименту\nІ хоча автор закликає не інвестувати в його монету, він роздає ці монети тисячами, а в коментарях навіть є людина, яка пише, що закупила вже 250 000 монет.\nУ коментах також жартують, що секретний п’ятий крок цієї інструкції, який навмисно прихований — це прийти на якийсь великий ресурс на кшталт Reddit і розповісти там про свій шиткоїн, щоб за системою великих чисел хоча б сотня людей закупилася цим цифровим барахлом.\nЦікаво, що з моменту публікації оригінального поста минуло десять годин, і, за даними торгів,  видно, що монета поступово втратила 90% своєї стартової вартості. Проте всього було проторговано понад $500, а за активом зараз спостерігає, згідно з даними сервісу, 50 осіб. Початкова емісія становила 1 млрд монет, і зараз актив швидше мертвий, ніж живий.','2022-12-03 00:02:11','2022-12-03 00:02:11'),(100,'Перше правило криптовалюти — нікому не говорити про неї: 5 порад, як стати інвестором і не облажатись','Виктория Пушкина\nЖурналистка в Highload','Передавати криптовалюту можна швидко й анонімно — і це добре і погано одночасно. Адже крім зручності це означає, що її можна використовувати в злочинних цілях і не залишати слідів.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТому власники криптовалюти також можуть стати мішенню зловмисників. Але не варто панікувати: видання CoinTelegraph якраз випустило список порад від експертів, як захистити себе та свої гроші.\nHighload публікує цю важливу інформацію українською.\nDepositphotos\nНе дайте поганим хлопцям дізнатися, що у вас взагалі є криптовалюта\nЦе порада №1 від співробітника CoinTelegraph Dr.Anon. До приходу в компанію він уже володів криптою і одного разу став жертвою мафії. Його викрали та вимагали гроші. Саме тому він рекомендує не писати в інтернеті і не говорити про свої успіхи в криптоіндустрії.\n«У багатьох частинах світу люди погано розуміють, що таке криптовалюта. Вони читають про неї тільки в новинах про якісь неймовірні суми. Якщо в цих країнах ви кажете, що ви криптоінвестор, це сприймають так, ніби ви мільярдер. І це одразу робить вас мішенню для злочинців», — розповідає Dr.Anon.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nАле що робити, якщо ви вже припустилися цієї помилки і тепер від вас вимагають викуп? Таку ситуацію називають $5 wrench attack. Українською це «атака з допомогою гайкового ключа за $5».\n«Іншими словами, це коли вам погрожують або навіть нападають на вас фізично, щоб ви видали ключі доступу до вашого гаманця», — пояснює Dr. Anon.\nТаке буває рідко, але бути підготовленим не завадить. Щоб убезпечити себе, Dr.Anon рекомендує мати «хибний» гаманець і взагалі не зберігати «всі яйця в одному кошику». Тоді ви зможете віддати грабіжникам лише частину грошей. Це втрата, але це краще, ніж бути понівеченим або вбитим.\nВивчити криптовалюту і те, як вона торгується, перш ніж купувати\nНа що конкретно звертати увагу, розповідає Хенк Шлесс, Senior Security Manager в Lookout:\n«Аномально низька ліквідність або те, що мала кількість гаманців має величезний відсоток цієї криптовалюти — це ознаки rug pull scheme. Іншими словами, це коли розробник криптовалюти просто кидає проєкт і тікає з усіма коштами, які зібрав від інвесторів. На жаль, таке трапляється часто».\nХенк додає, що поганими ознаками можна вважати і те, що розробник криптовалюти вважає за краще залишатися анонімним, а сам проєкт з’являється ніби «з нізвідки».\nЗберігати крипту на апаратному гаманці\nУсе у світі можна зламати. І все-таки, якщо вибирати між апаратним гаманцем та криптоплатформою, hardware буде безпечніше.\n«Ризик апаратного гаманця тільки в тому, що, якщо зловмисник отримає до нього фізичний доступ, він може вгадати або дізнатися його PIN. Водночас зламати криптоплатформу простіше. Хоча і тут ви можете щось зробити: для початку — ніколи і нікому не говорити свої дані для входу в систему», — радить Хенк Шлесс.\nНе приймайте рішення, пов’язані з криптовалютою, поспіхом\n«Популярність криптовалюти зростає, і люди часто сприймають її як спосіб розбагатіти. Причому розбагатіти швидко і добряче, — розповідає Хенк. — Через це деякі вважають за краще вкладатися в ризикованіші варіанти. Але це відкриває більше можливостей для зловмисників».\nЗа словами Хенка, зловмисники можуть спеціально вас квапити і ставити в ситуацію «тут і зараз», щоб ви не встигали подумати. Але не ведіться на перспективу високого прибутку, краще зробіть крок назад і проаналізуйте ситуацію.\nДо речі, не варто погоджуватися відразу навіть на «нешкідливі» дії на кшталт пропозиції встановити застосунок — він може виявитися шкідливим і вкрасти ваші дані.\nНе забувайте про податки\nСвіт криптовалюти — це не абсолютна свобода. Держави намагаються регулювати цей ринок і ухвалюють нові законопроєкти, пов’язані з криптою. Які саме податки треба платити і як — залежить від країни, у якій ви є податковим резидентом.\n«Наприклад, податкові резиденти США повинні щороку звітувати про свої криптодоходи в IRS (Internal Revenue Service), — розповідає Ендрю Хендерсон, міжнародний податковий адвокат і засновник податкової консалтингової фірми Nomad Capitalist. — В Естонії, де можна отримати digital nomad visa (“візу цифрового кочівника”) та яка здавалася всім “податковим раєм”, насправді також треба сплачувати податки на криптовалюту. А ось у Португалії, Італії та Греції таких правил поки що немає. Але хто знає, чи надовго».\nЕндрю рекомендує відстежувати нововведення щодо податків, оскільки їх несплата загрожує великими штрафами, аж до втрати всього вашого майна. Мало того, за це можуть посадити у в’язницю.','2022-12-03 00:02:47','2022-12-03 00:02:47'),(101,'На підтримку України запустили три нові NFT-колекції — які зображення туди потрапили','Богдан Мирченко\nРедактор новостей','В Україні запускають чимало благодійних NFT-ініціатив. Розповідаємо одразу про три нові. Мета двох із них — зібрати кошти на лікування українських дітей, які постраждали внаслідок війни, третьої — привернути увагу громадськості до зруйнованих у ході вторгнення РФ міст. Допомогти може кожен.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nАрт-ініціатива на підтримку дітей\nПроєкт створено спільними зусиллями креативної агенції Moon та благодійної платформи dobro.ua. Мета ініціативи — зібрати $200 тисяч на лікування українських дітей, які постраждали внаслідок війни.\nКонцепція галереї полягає у зображенні того, що ніколи не мало статися, але сталося.\nУ галереї вже є кілька перших колекцій на продаж. Серед них:\nВікно війни \nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nОхоронець\nСерії Ukranians\nPixel Story\nУсі вони — про нову реальність України та про подвиг її народу, а також про непокірність, відважність, чуйність та креативність. Зібрані кошти підуть на допомогу дитячим лікарням та їхнім пацієнтам, які перебувають у зоні бойових дій, а також дітям-переселенцям та новонародженим.\nЗ усіма роботами можна ознайомитись на торговому майданчику для NFT OpenSea.\nБлагодійний аукціон NFT-ілюстрацій українського школяра\nІніціатором благодійного проекту «Хроніки української війни очима дітей» став український школяр із Києва Олександр Журба. Мета — показати людству, наскільки талановиті, чуйні та відважні українські діти і як жахливо, що їхнє дитинство минає під час війни. \nАукціон розпочнеться з 1 червня та відбудеться на платформі OpenSea. Передбачається, що виручені кошти підуть до однієї з дитячих лікарень Київської області, яка продовжує рятувати та лікувати дітей з Ірпеня, Бучі, Гостомелю, Бородянки та інших міст, де через окупантів наразі немає доступу до належної медичної допомоги.\nШколяр веде колекцію від початку війни. Вона постійно поповнюється ілюстраціями найдраматичніших та найяскравіших подій війни та історій українських дітей. Наступним етапом проєкту стане виставка за кордоном та виставка фотографій українських дітей. А після перемоги Олександр спільно з креативним агентством CF.Digital планує створити колекцію, присвячену перемозі.\nЩоб взяти участь в аукціоні, потрібно:\nЗавантажити програму MetaMask;\nКупити криптовалюту Ethereum;\nКупити NFT-картинку з колекції на OpenSea.\nДокладніше про проєкт можна почитати тут. \nNFT-проєкт «Міста-герої»\nУкраїнська філія криптовалютної біржі Binance запустила NFT-колекцію «Міста-герої», присвячену 12 українським містам, які постраждали під час вторгнення Росії. У ній зібрані ілюстрації провідних українських художників, а у запуску колекції взяли участь популярні українські музиканти, серед яких у тому числі переможці конкурсу «Євробачення-2022» гурт KALUSH Orchestra.\nКолекція обмежена: NFT кожного міста будуть доступні лише у п’яти екземплярах. А всі зібрані кошти від продажу колекції підуть у благодійний фонд Music Saves UA на допомогу сім’ям, які живуть у наступних містах-героях:\nМаріуполь;\nКиїв;\nБуча;\nГостомель;\nІрпінь;\nХерсон;\nВолноваха;\nХарків;\nЧернігів;\nМиколаїв;\nОхтирка;\nІзюм.\n«Кожен токен є ексклюзивною роботою і відображає авторське бачення художників несправедливих руйнувань, які війна завдає містам. Однак незмінним мотивом, який об’єднує всі 12 сюжетів, стала надія на перемогу, і повернення безтурботного щасливого життя в кожне з цих міст», — йдеться в описі колекції.\nАукціон стартує 31 травня о 12:00 за київським часом. Ініціативу можуть підтримати усі зареєстровані користувачі Binance.\nРаніше в рамках колекції Avatars for Ukraine свої роботи у форматі NFT виставили художники Metro, Halo та STALKER. До речі, у створенні власної колекції немає нічого складного, детальніше про те, як це зробити, ми розповідали тут.','2022-12-03 00:03:23','2022-12-03 00:03:23'),(102,'Як створити свій перший NFT за 10 хвилин: покрокова інструкція','Валерия Мурадян BLOG\nSoftware Developer в FullCity Consulting','Кожен може створювати і продавати власні NFT — ті самі невзаємозамінні (унікальні) токени, про які стільки говорять.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nРедакція Highload публікує переклад  статті з блогу Валерії.\nПерекладено бюро перекладів у Києві «Профпереклад».\nПереклад від\nЗміст:\n1. Що таке NFT?\n2. Навіщо потрібні NFT\n3. Створіть унікальну графіку\n4. Створіть гаманець MetaMask\n5. Створіть обліковий запис у OpenSea\n6. Створіть NFT\n7. Лістинг NFT\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nСхоже, цього року всі довкола скуповують криптовалюту. Напевно, навіть ваша бабуся запаслася парою-трійкою монет. У криптовалютному середовищі останній писк моди — NFT.\nВи, ймовірно, вже про них чули: Grimes отримала мільйони доларів за NFT або як  люди витрачають шестизначні суми на NFT-картинки з камінням.\nАле що це за звір такий — NFT? Вид мистецтва? Платформа? Тип монети? І як творчим людям заробити на цьому новому тренді?\nСпочатку концепція NFT може здатися складною, але насправді нічого складного немає. Будь-хто може запостити у мережу свої NFT. На це піде всього 10 хвилин, навіть якщо у вас немає криптовалютного гаманця або ви уявлення не маєте, як працюють криптовалюти.\nЦей простий туторіал допоможе вам створити гаманець MetaMask, підключити його до облікового запису OpenSea і опублікувати свій перший шедевр. Все, що потрібно зробити — це вивести свої нові NFT на ринок і продати.\nЯкщо ви серйозно надумали продавати NFT, спочатку ознайомтеся з цією статтею. Перш ніж почати продавати цифрове мистецтво, необхідно знати деякі важливі нюанси. Поїхали!\nЩо таке NFT?\nNFT — це невзаємозамінний токен і частина блокчейна Ethereum. Але що це означає? «Невзаємозамінний» означає унікальний, який неможливо замінити. Біткойн, наприклад, взаємозамінний — його можна легко обміняти на інший біткойн і отримати те ж саме.\nА ось унікальний, єдиний у своєму роді витвір мистецтва — невзаємозамінний.\nНасправді, NFT — це не лише картинки. Це може бути будь-який цифровий об’єкт.\nЧому ж зараз народ переважно продає цифрові зображення? Та тому що технології ще не настільки просунулися вперед (як щодо завантаження власного мозку на «хмару» та перетворення його на NFT?).\nАле… навіщо вони потрібні?\nЛюди платять за NFT шалені гроші… Чому? Можете вважати NFT новим етапом колекціонування живопису, лишень у цифровому форматі.\nОсь приклади того, що вже було продано у вигляді NFT:\nвіртуальні картки NBA;\nмузика та відеокліпи від Deadmau5;\nвідеоарти авторства Grimes;\nоригінальний мем Nyan Cat;\nтвіт;\nвіртуальна нерухомість у місці під назвою Decentraland.\nУ той же час на сайтах типу OpenSea цілком собі продаються реальні шедеври. Особисто я підписана на художника, який займається 3D-графікою (Outpsyd), він створює неймовірні картини нібито з інших світів і перетворює їх на NFT на сайті SuperRare.\nВи тільки подивіться, яка краса! Повне знесення даху.\nДомашня сторінка художника Outpsyd / Скріншот\nСтворіть унікальну графіку\nНасамперед треба створити унікальний графічний твір, а потім завантажити на сайт OpenSea у форматі NFT.\nДомашня сторінка OpenSea / Скріншот\nЦе необов’язково має бути картинка. Відео, аудіо або 3D-модель також можна перетворити на NFT.\nOpenSea підтримує великий список форматів, включаючи JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB та GLTF.\nДля цього туторіалу я обрала одну зі своїх безглуздих картинок, створених у Figma. Знайомтесь, це Eggduck, простий векторний малюнок, який ми зараз перетворимо на крутий NFT.\nМій Eggduck, готуйся стати зіркою!\nСтворіть гаманець MetaMask\nПерший крок: завантажуємо MetaMask, якщо він у нас ще не встановлений. Це захищений та абсолютно безкоштовний Ethereum-гаманець.\nНайпростіший спосіб — встановити його як розширення для Chrome, потім натиснути на «Створити гаманець» (Create a wallet) — другий скріншот. Пам’ятайте, що пароль тут не такий важливий, як секретна фраза для відновлення доступу. Запишіть її на папірці та зберігайте у безпечному місці.\nВстановлюємо MetaMask\nСтворюємо гаманець\nСтворіть обліковий запис у OpenSea\nСтворити обліковий запис у OpenSea ще простіше. Потрібно лише прив’язати обліковий запис OpenSea до облікового запису MetaMask.\nПрив’язуємо обліковий запис OpenSea до облікового запису MetaMask\nСтворіть NFT\nРозібралися з попередніми етапами? Тепер натискайте «Створити» (Create) у верхньому правому кутку і завантажуйте свій шедевр.\nЗавантажте свій шедевр та придумайте йому назву\nТут вам доведеться вигадати йому назву і заповнити графу з описом роботи. Можна також додати зовнішнє посилання на подальшу рекламу своїх робіт.\nГотово!\nЛістинг NFT\nТепер ви бачите свою роботу у колекції. Клацніть на неї — і побачите докладну інформацію щодо файлу. Щоб виставити його на продаж, натисніть на «Лістінг» (Listings), потім «Продати» (Sell).\nЗаймаємося листингом\nВідкриється новий екран, де можна обрати тип лістингу (фіксований або продаж з аукціону з певним терміном), виставити ціну та термін дії лістингу.\nТут ви знайдете додаткові опції — продати пакетом або зарезервувати для особливого покупця. Пам’ятайте, що за лістинг доведеться сплатити збір (2,5%). Так що якщо баланс вашого гаманця менший за 0,05 ETH, доведеться спочатку поповнити його, щоб оформити лістинг.\nЗалишилося небагато: заповнити потрібні графи\nОсь і все, ваш перший NFT тепер доступний для покупки!\nПростіше простого, чи не так?\nЧитайте також: Астронавти, 3D-Зеленські та яйця: які NFT продають для порятунку України та де їх купити\nЦе текст із  особистого блогу, опублікований з дозволу автора.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:03:57','2022-12-03 00:03:57'),(103,'Стартап зібрав $30 млн на створення no-code-платформи, але нічого не зробив, а гроші вивів у крипту','Богдан Мирченко\nРедактор новостей','Компанію Sparkster звинувачують у привласненні інвестованих коштів. У 2018 році ініціатори проєкту обіцяли запустити платформу для створення програмного забезпечення «без коду», проте через три роки продукт так і не випущено. Більш того, отримані через ICO кошти були переведені в крипту. Подробиці — у новини.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо трапилося\nУ липні 2018 року проєкт Sparkster залучив понад $30 млн на ICO для того, щоб, як передбачалося, запустити платформу для створення програмного забезпечення без коду. Останній твіт з офіційної сторінки проєкту в Twitter був зроблений у 2021 році — посилання на демонстрацію продукту, який нібито готується. З того часу з облікового запису нічого не повідомлялося.\nПроте гаманці, на яких зберігалися кошти, отримані в результаті ICO, несподівано активізувалися наприкінці травня 2022 року: до 23 травня на них було понад $22 млн, які хтось конвертував у USDC. Цей крок викликав підозри у деяких членів спільноти, особливо з огляду на відсутність публічних пояснень з боку команди Sparkster.\nTelegram-канал спільноти проєкту не дозволяє учасникам надсилати повідомлення або взаємодіяти з адмінами. У жовтні 2021 року та лютому 2022 року на пов’язаному з проєктом каналі в Telegram було розміщено посилання на нібито демонстрацію продукту. CoinDesk вивчив ці сайти і виявив, що вони є демонстраційними роликами для користувачів, а не функціонуючим інструментом.\nGitHub-репозиторій компанії Sparkster показує, що остання активність там була три роки тому у березні 2019 року. Однак ряд розробників стверджують, що навіть код був скопійований з іншого додатка.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nДе гроші\nПовідомляється, що хтось конвертував ефір (ETH) на суму понад $22 млн із кількох гаманців Sparkster у USDC. Хоча востаннє вони були активні більше трьох років тому. Першим про це повідомив блокчейн-аналітик zachxbt. Він розповів, що один із гаманців, позначений як «Sparkster: Wallet 5», вдалося відстежити за допомогою Etherscan. З нього наприкінці травня у USDC було конвертовано близько 2,6 ETH. Хоча востаннє гаманець був активним 1371 день тому, у серпні 2018 року. \nКошти з гаманця, який останній раз був активним у 2019 році, були конвертовані наприкінці травня\nІнший гаманець, позначений як «Sparkster: Wallet 4», отримав 3 002 ETH 1 371 день тому. Проте три дні тому він конвертував всю суму за три транзакції понад $6 млн.\nДані з інших гаманців показують, що аналогічні суми ефіру було конвертовано в USDC наприкінці травня. Усі вони були востаннє активні понад три роки тому.\nВидання CoinDesk спробувало зв’язатись із представниками Sparkster, однак вони так і не відповіли на прохання про коментар.','2022-12-03 00:04:32','2022-12-03 00:04:32'),(104,'Andreessen Horowitz: крипторинок зараз — як інтернет у 1995 році, усе цікаве — попереду','Игорь Грегорченко\nТехнический редактор Highload','Великий венчурний фонд Andreessen Horowitz (A16Z) випустив звіт про поточну ситуацію на крипторинку. У цій статті ми постаралися виділити його ключові тези.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nКороткі тези доповіді\nКриптовалюти реально впливають на весь світ. Їх нарешті визнали й обговорюють на найвищому політичному рівні, наприклад на зустрічах G7 та МВФ.\nЗараз ми в середині четвертого циклу «ціна — інновація» (під час таких циклів зростання ціни активу сприяє інноваціям, які своєю чергою призводять до ще більшої ціни). \nКрипторинок все ще знаходиться на ранній стадії розвитку. Це приблизно відповідає розвитку інтернету наприкінці 1990-х.\nweb3 значно краще для творців контенту та розробників, ніж web2. Ринок тільки-но починає розуміти переваги, широке впровадження ще попереду.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nEthereum — поки що лідер, але стикається з конкуренцією, що наростає.\nДокладніше про окремі тези\nЧому web3 значно краще для творців та розробників, ніж web2? Типові послуги web2 на кшталт YouTube, App Store та інших гігантів стягують приблизно 30% комісії із заробітку розробників товарів, а децентралізовані майданчики, такі як OpenSea, — усього 2,5%. \nAndreessen Horowitz підрахував середній дохід на одного середньостатистичного популярного творця контенту: web3 — $174 тис. на одного творця контенту (йдеться про NFT-колекції), Meta — $0,1 на людину, Spotify — $636 на артиста, YouTube — $2,47 на канал. Висновок фонду: ІТ-гіганти забирають більше грошей, ніж мафія.\nДжерело: звіт a16z\nЯкщо додати сюди політику банів і цензурування, що наростає у світі і ускладнює роботу на платформах web2, то свобода та непідконтрольність web3 теж дають стратегічну перевагу. Санкції та гіперрегуляція ще більше призведуть до зростання крипторинку.\nEthereum — поки що лідер у сегменті web3, але в нього вже з’явилися конкуренти в особі Solana, Polygon, NEAR та інших. Ethereum жертвує швидкістю та вартістю транзакцій на користь збереження децентралізації. Його лідерство пов’язане з раннім запуском і довірою понад 4 тис. розробників. Проблему масштабованості блокчейну повинні вирішити рішення другого рівня (Layer-2), розробка яких поки що запізнюється, що дає важливу перевагу конкурентам Ethereum, таким як Solana.\nДжерело: звіт a16z\nЗагалом криптовалюти поки що на ранній стадії свого розвитку. Аналітики фонду констатують, що зараз в Ethereum приблизно 7–50 млн користувачів (такий розкид пов’язаний з різними методиками підрахунку активних користувачів). Така кількість користувачів була в інтернеті 1995 року.\nЯкщо тенденція зростання збережеться, то приблизно 2031 року у web3 буде 1 млрд користувачів (цей розрахунок відповідає етапу розвитку інтернету у 2005 році, коли почали зароджуватися гіганти нинішньої IT-індустрії, такі як YouTube, Facebook тощо).\nДжерело: звіт a16z\nЦентральний висновок\nЗагалом доповідь констатує, що, попри локальні обвали та волатильність, крипта прийшла всерйоз та надовго. Прямо зараз ми спостерігаємо визнання індустрії web3 на найвищому політичному рівні, коли держави намагаються застосувати регуляції до нового класу активів, що зароджується. До цих активів уже ввійшли найбільші фінансові інститути, цим їх повністю легалізувавши.\nНа графіку порівняння обсягу активів у децентралізованих фінансових інструментах (DeFi) з обсягом активів найбільших американських банків:\nДжерело: звіт a16z\nAndreessen Horowitz вважає, що криптовалюти та web3 вже в найближчому майбутньому вплинуть на світ.','2022-12-03 00:05:07','2022-12-03 00:05:07'),(105,'«70% інвесторів не знають фундаментальних основ»: творець Dogecoin розповів, як правильно вкладатися у крипту','Богдан Мирченко\nРедактор новостей','Автор криптовалюти Dogecoin Біллі Маркус вважає, що 70% криптоінвесторів не знають нічого ні про технології, ні про ринок, в який інвестують. Про це він написав у своєму твіті у відповідь на обвал криптовалюти Terra минулого тижня.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯк правильно інвестувати — гайд від Біллі Маркуса \nМинулого тижня криптовалюта Terra, спочатку прив’язана до вартості долара США, стрімко впала, втративши 97% своєї вартості. У відповідь на це автор популярної криптовалюти Dogecoin Біллі Маркус заявив, що, ймовірно, більша частина криптоінвесторів «навіть не розуміють фундаментальних основ криптовалют або того, як працюють ринки». \nВ іншому твіті Маркус додав кілька порад, як краще вкладати кошти в крипту. Зокрема, творець Dogecoin порадив криптоінвесторам самостійно вивчати те, у що вони вкладають, і ухвалювати рішення, спираючись виключно на здоровий глузд. Дивитися ролики на YouTube вивченням ринку не вважається, наголосив Маркус. \n«У вас має бути план. Не інвестуйте під впливом емоцій», — підсумував Маркус. \nПлан хороший, однак, як зауважили у виданні futurism.com, враховуючи, що інвестори Dogecoin і, ймовірно, його творці, розбагатіли лише після того, як їхню жартівливу монету «прорекламував» Ілон Маск, висловлювання Маркуса видається трохи лицемірним. Як гадаєте?','2022-12-03 00:05:42','2022-12-03 00:05:42'),(106,'Блокчейн — це залізниця XXI століття: несподівані аналогії про розвиток технологій','Виктория Пушкина\nЖурналистка в Highload','2015 року Стюарт Хілтон випустив книгу про те, як залізниця змінила світ. 2022 року засновниця Forward PR Studio Катя Шабанова зауважила, що якщо в деяких цитатах із цієї книги «залізниця» замінити на «блокчейн» — вони все ще будуть вірними.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЧому Катя вважає, що блокчейн може стати головною інновацією протягом останніх 500 років, вона розповіла в матеріалі для CoinTelegraph. Highload публікує його головні тези українською.\nSource: Depositphotos\n___________\nПеребуваючи в часі, коли блокчейн швидко розвивається, ми всі застрягли між блокчейн-євангелістами та скептиками. І хоча ані перші, ані другі насправді не можуть точно сказати, чого чекати від технології найближчими десятиліттями, вона має всі шанси стати головною інновацією останніх 500 років.\nУ книзі What the Railways Did For Us: The Making of Modern Britain Стюарт Хілтон пише, що залізниця «змінила спосіб ведення війни та підтримки миру». Так само і блокчейн може зруйнувати авторитарні режими та пропагандистські машини.\nПерші поїзди стали ключовим двигуном «різкого промислового зростання ХІХ століття». А блокчейн може стати революцією у фінансовій індустрії.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nЗалізниця змусила «державу знову замислитися про принцип невтручання». Блокчейну ж належить стати провідною силою у визволенні людей в усьому світі та поверненні їм їхніх активів.\nЦе далеко не всі аналогії, які можна провести. Щобільше, є приклади впливу на світ, які ми можемо проаналізувати вже сьогодні.\nПодивімося на історію появи блокчейну та залізниці.\nКоли з’явився біткоїн, ніхто не розумів, що це\nДо біткоїна були електронна валюта та потрійна бухгалтерія (triple-entry accounting). А властивість блокчейну пов’язувати останній блок з попереднім з допомогою хешування з’явилася 1991 року. Її вигадали академіки Стюарт Хабер і Скотт Сторнетта — щоб тимчасово маркувати цифрові документи, вони винайшли хронологічний ланцюжок хешованих даних для перевірки їхньої справжності. Чотири роки по тому вони навіть придумали публікувати хеш-суми прямо в колонці оголошень газети The New York Times.\nЦим винаходом надихнувся Сатоші Накамото для створення біткоїна. Його технологія стала проривом і поступово почала ставати популярною у вузьких колах.\nЦікаво, що сприяв цьому не Сатоші, а Банк Англії. Уже 2014 року він стверджував, що Distributed Ledger Technology (DLT) — це «ключова інновація цифрових валют». Тоді більшість людей погано розуміли, про що йдеться. Журналісти почали запитувати: що взагалі таке proof of work (PoW) і як це працює?\nА що ж було 1825 року, коли так само почали ходити розмови про залізницю?\n«Що може бути абсурднішим, ніж перспектива того, що локомотиви їздитимуть у два рази швидше за диліжанси?» — писав The Quarterly Review.\n2015 року два популярні фінансові журнали — Bloomberg Markets та The Economist — випустили матеріали з поясненням концепції блокчейну. Але миттєвого розуміння, звісно, не сталося. І люди почали ділитися на біткоїн-євангелістів і скептиків.\nБіткоїн не необхідний, але значно спрощує життя: так само як залізниця\nЦікаво, що банки теж спочатку заперечували нову технологію, а згодом — приблизно з 2018 року — почали активно співпрацювати із блокчейн-платформами.\nУ ХІХ столітті були схожі реакції. Уже 1830 року The Quarterly Review писав про залізниці:\n«У цьому чудовому творі ми бачимо джерело інтелектуальних, моральних і політичних благ, що перевершують будь-який вимір і ціну»\nКоли з’явилася залізниця, вона сприймалася людьми «рішенням без проблеми». Люди просто не розуміли, навіщо їм щось нове, коли є добре перевірене старе.\n«Ніхто не стане платити гроші за те, щоб дістатися з Берліна до Потсдама за одну годину, коли він може проїхати туди на коні за один день безкоштовно», — говорив король Пруссії Вільгельм I 1864 року.\nЦе дуже нагадує риторику «навіщо потрібен блокчейн, якщо є SWIFT і Visa».\nАле попри скептицизм, залізниця продовжила розвиватись. Це стало можливим завдяки тому, що деякі ризикові люди побачили її потенціал і вклалися в неї грошима та кар’єрою. Несподівано залізниці кинули виклик самому часу та простору: люди, які були обмежені швидкістю коня, отримали можливості пересуватися більш швидко й далеко, набагато більш швидко й далеко. \nСьогодні, у розпал Третьої промислової революції, блокчейн обіцяє кинути виклик усій ідеї обміну цінностями та людській природі і пропонує чудовий новий світ. Це неминуче. Що ж станеться далі?','2022-12-03 00:06:17','2022-12-03 00:06:17'),(107,'Avatars for Ukraine: NFT від художників Metro, Halo та S.T.A.L.K.E.R. виставлять на аукціоні на підтримку України','Богдан Мирченко\nРедактор новостей','19 травня в інтернеті стартує благодійний NFT-аукціон, присвячений Україні, повідомляє gamedev.dou.ua. На ньому будуть представлені колекції від художників з геймдев-індустрії, які свого часу працювали над створенням таких ігор, як Metro, Halo, Prey, STALKER та багато інших. Подробиці — далі.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\n19 травня в інтернеті стартує благодійний NFT-аукціон, присвячений Україні, повідомляє gamedev.dou.ua. На ньому будуть представлені колекції від художників з геймдев-індустрії, які свого часу працювали над створенням таких ігор, як Metro, Halo, Prey, STALKER та багато інших. Подробиці — далі.\nЩо відомо \nКолекція отримала назву Avatars for Ukraine. Усі зібрані кошти підуть на медичну допомогу бійцям ЗСУ. \nВ аукціоні візьмуть участь цифрові художники, які працювали на проєктах зі створення Metro, Prey, Halo, Warframe, League of Legends, Rainbow Six та інших популярних ігор. Усього буде виставлено 70 творів, що зображають хоробрість, дух та мудрість українців.\nЗахід відбудеться за підтримки Мінцифри на платформі NFT-музею Meta History. Початок о 20:00 за київським часом. \nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nРаніше IT-компанія WeSoftYou запустила на підтримку України колекцію NFT-козаків. Її створили український художник та команда розробників програмного забезпечення, яких торкнулася війна. Докладніше про це читайте за посиланням.','2022-12-03 00:06:52','2022-12-03 00:06:52'),(108,'«Не вводьте дані гаманця»: хакери атакували популярні криптовалютні платформи','Богдан Мирченко\nРедактор новостей','Популярні сайти з даними про криптовалюти, такі як Etherscan, CoinGecko та інші, зазнали фішингової атаки. В результаті на ресурсах користувачі бачили підозріле спливаюче вікно з проханням підключити свої гаманці MetaMask.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЩо відомо \nПередбачається, що фішингова атака виходила від домену з логотипом Bored Ape Yacht Club. На момент публікації матеріалу сайт, пов’язаний з доменом, вже видалено. Згідно WHOIS-пошуку, домен був зареєстрований 13 травня.\nПідозріле спливаюче вікно\nЗа словами засновника CoinGecko Боббі Онга, наразі фахівці сайту розслідують першопричину атаки, щоб виправити все якнайшвидше.\n«Швидше за все, ситуація спричинена шкідливим рекламним скриптом від криптовалютної рекламної мережі Coinzilla. Ми продовжуємо стежити за ситуацією», — розповів він.\nПредставники Etherscan у свою чергу закликали користувачів «не підтверджувати жодні транзакції», що з’являються на їхньому сайті.\n🚨 Ми отримали повідомлення про фішингові спливаючі вікна через інтеграцію третьої сторони і зараз проводимо розслідування.\nБудьте обережні, щоб не підтверджувати транзакції, які з’являються на веб-сайті.\n— Etherscan (@etherscan) 13 травня 2022 р','2022-12-03 00:07:27','2022-12-03 00:07:27'),(109,'Найбільший краудфандинг в історії: аналітики оцінили пожертвування Україні у криптовалютах','Богдан Мирченко\nРедактор новостей','За даними аналітичної групи Crystal, з початку війни Україна зібрала у вигляді криптопожертв понад $125 млн. За оцінками експертів, таку суму в крипті не збирала жодна благодійна криптоініціатива в історії.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо відомо \nЗгідно з отриманими даними, більша частина коштів — 52% — йде на підтримку ЗСУ. Інші гроші йдуть на гуманітарні цілі — 48%. У березні відсоткове співвідношення було іншим — 63% до 37%.\nНа які потреби йдуть отримані кошти\nКошти надійшли у наступних криптовалютах: \nEthereum — $52,939 тис.;\nBitcoin — $32,441 тис.;\nUSDT — $31,453 тис.;\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nBUSD — $2,501 тис.;\nUSDC — $1,727 тис.;\nDAI та ін. — $1,407 тис.\nПожертви Україні у крипті\nФахівці визнають, що розмір пожертв у фіатних валютах набагато більший, ніж у крипті. Проте ніколи раніше криптоспільнота не збирала таку суму. \nЕксперти впевнені, що такий успіх пов’язаний у тому числі з технічною підкованістю української влади, яка практично одразу після початку війни запустила офіційні портали для прийому пожертвувань у різних криптовалютах. \nРаніше блокчейн-компанія Everstake, Мінкульт та Держмистецтва України запустили благодійну ініціативу щодо порятунку української культурної спадщини.','2022-12-03 00:08:02','2022-12-03 00:08:02'),(110,'У Китаї вирішили запустити власну блокчейн-платформу для світового ринку — що з нею не так','Богдан Мирченко\nРедактор новостей','Китай розробляє свою блокчейн-платформу, пише CNBC. Передбачається, що вона полегшить розгортання технології блокчейну для бізнесу. Платформа отримала назву Blockchain-based Service Network або скорочено BSN. Мета — вийти на світовий ринок, однак, на думку деяких експертів, платформа може мати справу з низкою труднощів.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nНавіщо це Китаю \nПро необхідність розвивати блокчейн у Китаї ще у 2019 році заявив голова КНР Сі Цзіньпін, після чого блокчейн було зведено до рангу національного пріоритету для Китаю, поряд з іншими сучасними технологіями. \n«Ми думаємо, що технологія блокчейна настільки потужна, що змінить весь інтернет і майже всю архітектуру IT-систем», — сказав Іфань Хе, генеральний директор Red Date Technology — компанії, яка є одним із засновників китайської сервісної мережі на основі блокчейну.\nЗа словами фахівця з технологічної політики та керівника консалтингової фірми Albright Stonebridge Пола Тріоло, технологія блокчейну дуже важлива для Китаю і тому, що чиновники бачать у ній низький бар’єр для входу до технологічного сектору. Вони хочуть, щоб місцеві компанії просувалися у використанні блокчейн-додатків для вирішення світових проблем. \nМожливості BSN \nПродукт BSN призначений для компаній, зокрема, тих, хто керує інфраструктурою хмарних обчислень. Це може бути великий гравець, такий як Amazon або Microsoft, або компанія, яка керує власною приватною хмарою або внутрішньою мережею. \nТакож BSN покликана вирішити питання сумісності, тобто забезпечення роботи різних блокчейн-мереж один з одним. Наприклад, якщо два банки мають програми, створені на різних блокчейн-платформах, вони не зможуть працювати один з одним. BSN має вирішити цю проблему. \nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nКомпаніям, які хочуть використовувати кілька блокчейн-додатків у своїй організації, продукт BSN дозволить зробити це через постачальника хмарних обчислень, якого вони використовують, а не встановлювати купу нових серверів. Ідея в тому, що бізнес або уряд можуть використовувати платформу BSN для легкого розгортання блокчейн-додатків без великих витрат.\nОднак, за словами авторів, ключовою особливістю BSN є те, що вона не створює власний блокчейн. Також до платформи не прив’язана жодна криптовалюта. Це пов’язано з тим, що Китай фактично заборонив діяльність, пов’язану з криптовалютами, та зробив її незаконною. А некриптовалютні блокчейни можуть бути привабливими для великих компаній, які не хочуть наражатися на ризик і волатильність цифрових валют.\nЩо може піти не так\nКитай планує вийти з BSN на світові ринки, що, на думку деяких експертів, досить амбітно. Так, виходу на світовий рівень може стати на заваді те, що платформа надто пов’язана з китайським урядом. \nТе, що це проблема, підтвердив Іфан Хе, тому, швидше за все, міжнародна версія платформи буде з відкритим вихідним кодом, що дозволить учасникам вільно перевіряти код на наявність потенційних бекдорів. \nНа глобальному рівні може стати проблемою централізований характер BSN. Глава дослідницького відділу Blockchain.com Гаррік Хілеман вказує, що існує фундаментальна несумісність між заявленими амбіціями Китаю щодо підтримки внутрішньої екосистеми розвитку блокчейну та децентралізованою природою цієї технології. \n«Якщо Китай не зможе знайти спосіб змиритися з руйнівною силою і втратою централізованого контролю, властивими блокчейну, то Китай не має шансів стати світовим лідером у цьому стратегічно важливому IT-секторі», — зазначив він.\n А чи є тоді сенс щось створювати і на що сподівається Китай?','2022-12-03 00:08:37','2022-12-03 00:08:37'),(111,'Незадоволені роботою? Спробуйте Rust: чому це мова майбутнього і які її головні переваги','Олег Щербаков BLOG\nSenior Software Engineer у Yalantis','Розробка Rust не припиняється протягом 14 років. Мова була розроблена Грейденом Хором і довгий час підтримувалася Mozilla. Для широкого кола Rust досі залишається поза увагою.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯ не хочу стверджувати про перспективи Rust, як про технологію, що має на меті затьмарити інші мови. За структурою вона нагадує C++, яка виникла на хвилі популярності об’єктно-орієнтованого програмування.\nЯк згодом з’ясувалося, ООП потрібне не всім. Наприклад, у геймдеві превалює архітектурний підхід ECS (entity component system) і з об’єктами там не дуже склалося.\nРозчарування в ООП, тривала стандартизація змін, відсутність єдиної та зручної інфраструктури керуванням залежностями та компіляції проєкту підштовхнули розробників 2000-x на пошуки нових рішень.\nRust враховує ці помилки та має ефект новизни. Недолік обізнаності про можливості та стереотип використання мови тільки в межах блокчейну спонукають написати лонгрід про потенціал Rust та аргументовані переваги, порівняно з поширеними мовами програмування.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЯ спробую розповісти, які проблеми з програмним забезпеченням Rust допомагає вирішити, сфери застосування мови, ситуацію на ринку найму Rust-розробників та світчинг.\nОсновні переваги Rust\nЛюди люблять цифри, тому почну зі статистики. Відповідно до опитування Rust survey 2021 року, проведеного серед 9354 розробників Rust, головні причини використання Rust:\nможливість створення програмного забезпечення без помилок (96%);\nвисока продуктивність мови (92%);\nнадійні властивості безпеки (89%).\nМожливість створення програмного забезпечення без помилок\nПовідомлення та запропоновані варіанти розв’язання проблем від компілятора Rust в більшості випадків допомагають усунути проблему швидше. Для мене комфорт розробки був ще одним вирішальним фактором у виборі Rust як наступної технології.\nНа мою думку, краще витратити більше часу на етапі розробки у боротьбі з компілятором, ніж витратити більше часу на діагностику проблеми у майбутньому.\nЗвичайно, порозумітись із компілятором вдається не відразу, але із накопиченням досвіду компілятор стає твоїм кращим другом, з яким ви займаєтесь парним програмуванням.\nRust не має невизначених шаблонів поведінки, які присутні в інших мовах програмування, і їх можна помітити лише коли виправляти помилки вже пізно та дорого. Таким чином, програми, написані на Rust, менше зазнають збоїв під час використання, оскільки їх поведінка визначена та краще передбачувана. Найбільша перевага Rust — це перевірка запозичень.\nMemory safety\nRust дозволяє обирати між зберіганням даних у стеку або вкупі (heap), і під час компіляції визначає, що пам’ять більше не потрібна і може бути очищена. Це дозволяє використовувати її ефективно.\nRust гарантує, що ваше програмне забезпечення не матиме витоку пам’яті.\nЦя мова не потребує ручного керування пам’яттю й не має збирача сміття, як Java або C#. У застосунках C++ бувають такі випадки, коли ручне звільнення пам’яті не враховується в коді заздалегідь, що призводить до витоку пам’яті, і чим довше існуватиме система, тим більше пам’яті вона почне використовувати. Це використання зростатиме, доки системна пам’ять остаточно не закінчиться.\nЗгодом система може зависнути і перезавантажитись. Перезавантаження може відбутися будь-коли, що спричинить незручності для бізнесу та користувачів.\nВластивості безпеки\nЗ приводу безпеки: всі новачки в Rust бачать, що для оголошення змінної можна використовувати два ключових слова: let (ми оголошуємо змінну, яку не можемо змінити) і let mut (ми оголошуємо змінну, в яку ми можемо записувати дані не тільки в оголошенні, але й надалі). У цьому полягає глибинний зміст Rust.\nМи можемо розділити наш додаток таким чином, що при написанні багатопотокового застосунка не виникне колізій: один потік у нашій програмі змінює дані, а другий їх одночасно зчитує.\nБезпека в Rust закладена у синтаксисі мови. Якщо говорити простими словами, це мова з вбудованим статичним аналізатором коду.\nДійсно дуже крутим статичним аналізатором, який ловить усі типові для С++ помилки. Передав каналом посилання на об’єкт, що змінюється, до іншого потоку, а потім спробував скористатися цим посиланням сам — все, не скомпілюється.\nАле під час розробки важливо дотримуватися загальних заходів безпеки та не покладатися повністю на автоматичні властивості. У тих випадках, коли безпечного Rust недостатньо, ви можете скористатися «небезпечним». Це дає додаткові можливості, однак ви повинні стежити за безпекою власноруч.\nЦей код може бути укладений в абстракції вищого рівня, що гарантує, що всі види використання абстракції безпечні.\nТулінг, документація, організація та екосистема\nRust вирішив мій особистий біль — це тулінг. Це утиліти, з якими ти, як розробник, стикаєшся кожен день. Порівнюючи з Node.js, мені дуже часто доводилося змінювати версії та платформи, це створювало незручності через необхідність користування декількома утилітами.\nВ Rust є стандартизований менеджер версій, і це перша річ, яку встановлює розробник. Відсутність єдиного загальновизнаного рішення для написання та генерації документації в Node.js теж викликає труднощі. Згенерована документація проєктів відрізняється: як візуально, так і за функціоналом.\nАналогічна ситуація із лінтером та утилітою для форматування коду. В Node.js це були сторонні рішення, у Rust — загальноприйняті, що є частиною тулчейну.\nОскільки спільнота Rust швидко зростає, її документація належним чином організована та достатньо детальна. Щодо спільноти, то растове ком’юніті дуже дружнє — там завжди готові допомогти початківцю.\nПерехід на Rust важкий і продукує багато питань, але люди зі всього світу охоче відповідають навіть на найдурніші, і це приваблює.\nУ Rust є кодекс поведінки, що підтримується командою модераторів, тому офіційні портали й більшість неофіційних сприяють приємному спілкуванню.\nСпільнота дбає про мову, але це виключно мої відчуття. Існує кілька офіційних та неофіційних способів отримати допомогу, таких як:\nчат;\nфорум;\nсабреддіт Rust;\nStack Overflow;\nукраїнське Rust Com.\nСфери застосування Rust\nТехнологія Rust може бути використана в наступних сферах:\nгеймдев;\nсистемне програмування;\nenterprise-рішення;\nфронтенд;\nembedded;\nрозробка для мобільних пристроїв.\nRust відмінно підходить для розробки програм під платформи, в яких не використовуються операційні системи. Так, мова застосовується в ядрах операційних систем, мікроконтролерах, системах низького рівня.\nОтже, Rust — це мова загального призначення для розробки ефективного та продуктивного програмного забезпечення, що легко масштабується та підтримується.\nЗа допомогою Rust можна створювати:\nвисокопродуктивні розподілені системи;\nвбудовані системи;\nIoT-рішення;\nвебсервіси.\nПрикладом великих рішень, які планують реалізувати на Rust, є проєкт Linux Kernel, що в основному написаний мовою C. Команда Linux вирішила додати підтримку Rust під час розробки модулів ядра.\n2022 може нарешті стати роком для Rust всередині ядра Linux версії 6.1.\nТаку інформацію повідомив автор ядра Linux і координатор його розробки Лінус Торвальдс на Kernel Maintainers Summit. Mozilla Firefox також перейшла на Rust, що зробило його одним із найшвидших браузерів у світі.\nCистемне програмування: embedded and distributed systems / IoT\nМова програмування Rust ідеально підходить для вбудованих систем. За допомогою Rust ви можете розробляти серверну платформу Bare Metal та Real-Time Operating System.\nУ системах Bare Metal прошивка написана на Rust, може працювати безпосередньо на апаратному забезпеченні мікроконтролера без рівня абстракції з операційною системою та драйверами.Тоді як для вбудованих систем RTOS існує потреба в операційній системі реального часу, особливо для програм, які повинні мати швидкий час відгуку.\nTock є прикладом вбудованої операційної системи, написаної мовою Rust. Ця ОС підходить для сенсорних мереж і платформ IoT. Tock дозволяє одночасно запускати декілька програм на комп’ютері з мікроконтролером.\nІншим прикладом вбудованої операційної системи, написаної на Rust, є ОС Theseus. Згідно з документацією, ця ОС може бути особливо корисною у вбудованих системах високого класу та периферійних центрах обробки даних.\nRust також є сприятливим варіантом для великих розподілених мереж із великою кількістю підключених пристроїв, що потребують агрегування та обробки великих обсягів даних. Таким чином виробники пристроїв інтернету речей й виробники медичного обладнання можуть отримати особливу користь від впровадження Rust.\nУ 2019 році компанія 42 Technology анонсувала свої перші однокристальні пристрої IoT, створені в Rust. Ця мова є універсальною та підходить для всіх рівнів підключення IoT: хмарних, периферійних та IoT-девайсів.\nСтворення інструментів налагодження та тестування\nRust є чудовим варіантом для створення інструментів налагодження та тестування, які допомагають розробникам швидко визначати та виправляти вразливості програмного забезпечення.\nНаприклад, консалтингова компанія Stratum Security, яка займається інформаційною безпекою, використовує Rust для проведення тестування витоку даних, щоб забезпечити кращу безпеку програм для своїх клієнтів. JetBrains також пропонує зручний інструмент тестування та налаштування в Rust.\nВеброзробка (і фронтенд, і бекенд)\nБагато глобальних компаній, таких як Braintree, Postmates і Snapview, використовують Rust для побудови бекенду своїх вебслужб. Rust підходить для оптимізації будь-якої клієнт-серверної архітектури.\nSnapview, німецька цифрова комунікаційна компанія, використовує Rust, щоб розширити можливості свого сервера для надання послуг відеоконференцій.\nЗабезпечення кращої продуктивності системи шляхом простого створення бекенд-логіки високопродуктивною мовою Rust, може бути недостатнім. Також важливо перевірити свою архітектуру, щоб побачити, чи здатна вона витримати високе навантаження.\nЛише після усунення проблем з архітектурою (якщо вони є), ми також можемо реалізувати бекенд на Rust.\nЗростання присутності WebAssembly у браузері є великим плюсом для Rust, адже відкривається ще одна ніша для застосування мови.\nШвидкодія WASM є перевагою для використання у складних додатках (наприклад, графічних, як Figma). Також WASM дає можливість не перейматись обфускацією коду, портувати чинні проєкти написані на інших мовах, писати фронт та бекенд використовуючи одну мову програмування.\nГрафіка та ігри\nRust чудово підходить для розробки графіки та ігор під веб, мобільні девайси та десктоп. Екосистема ще молода, але постійно розвивається.\nСьогодні можна знайти достатньо засобів для початку експериментів.\nГоворячи про проєкти, пов’язані із графікою, я б відзначив:\nhttps://github.com/gfx-rs/wgpu\nhttps://github.com/GraphiteEditor/Graphite\nhttps://github.com/grovesNL/glow\nhttps://github.com/asny/three-d\nhttps://github.com/BVE-Reborn/rend3\nhttps://github.com/plotters-rs/plotters\nРозробка розширень для використання в інших мовах програмування\nОкрім можливостей розробки додатків для інших мов, хочу сказати декілька слів про розробку бібліотек для мобільних платформ.\nMozilla дуже активно використовує Rust не тільки для переписання критичних частин. У них вона застосовується і в мобільних додатках. Mozilla розробляє uniffi — рішення для генерації байндінгів для бібліотек написаних на Rust під інші мови програмування, зокрема Kotlin та Swift, що використовуються в Android- та iOS-проєктах.\nЗа допомогою бібліотек на основі Rust можна створювати масштабовані та швидкі програми. Наприклад, перспективним є біотехнологічний стартап Imeka, що використовує Rust для створення бібліотеки.\nСитуація з Rust на ринку технологій\nЗараз Rust цілком готовий для широкого та масштабного використання. Згідно з опитуванням Stackoverflow за 2022 рік, Rust входить до 10 найбільш високооплачуваних мов програмування у світі.\nПопит на мову програмування Rust становить 2,4% у світовому масштабі порівняно з іншими мовами. Проте 5,18% опитаних розробників сказали, що знають мову.\nМови системного програмування орієнтовані на ефективне довготривале існування. Компанії хочуть знати, що їхня фундаментальна база коду буде придатна для використання в далекосяжному майбутньому. Rust визнає це і ухвалив свідомі дизайнерські рішення щодо зворотної сумісності та стабільності.\nВимоги до мов низького рівня постійно зростають, але Rust дуже швидко вдосконалюється і не дарма вважається перспективною мовою програмування.\nЗгідно з опитуванням CodinGame і CoderPad Tech Hiring Survey 2022 серед 14 тис. розробників і рекрутерів у всьому світі, ось поточний стан попиту на різні мови програмування:\nТепер поговоримо про ситуацію на ринку України. Якщо ми подивимося на популярні мови програмування, то практично за кожною з них стоїть велика корпорація. Новачку важко пробитися в таку тісну компанію. Але Rust поступово завойовує своє місце. Можливо, це погано видно через аутстаф-орієнтований ринок розробників України.\nПропозиція Rust-розробників перевищує попит на них. Вважаю, що в цьому випадку не ринок переконує розробників, які мови вивчати, а скоріше розробники почнуть переконувати ринок, яких спеціалістів шукати. І в цьому відношенні Rust справді змінює правила гри.\nЯ рекомендую подивитися у бік Rust розробникам, які все більше незадоволені інфраструктурою та екосистемою поточної мови програмування.\nЯкщо ви просто втомилися від суперечливих і нелогічних речей, поступово переглядайте вакансії, ходіть на співбесіди, дізнавайтеся, що запитують і визначайте свої слабкі сторони. Практикуйтесь на pet-проєктах. Допоки Rust набирає обертів в Україні, у цій сфері немає упереджень на ринку, можуть взяти як джуна, так і досвідченого світчера.\nЩодо світчингу, то перехід на Rust з інших мов є доволі складним. Якщо говорити на перехід з плюсів, то тут буде легше. Якщо це JavaScript, то значно важче.\nМозок працює в межах ідеології, яку мала ваша попередня мова. Ти звикаєш і до проблем мови, що можуть тягнутися роками. Rust оперує новими концепціями, застосовує речі, які раніше розробник навряд чи зустрічав. Щоб класно розбиратись в Rust потрібен час і реальне бажання, прискіпливе відношення до деталей.\nДля розробників-початківців також може бути проблематично вивчити цю мову з нуля. Хоча вони мають неупереджений розум. Попри складність, Rust — цілком логічний, і багато розробників мотивовані до вивчення завдяки широкому спектру переваг, які я освітив у попередніх розділах.\nОтже, коли ти маєш достатньо досвіду, в тебе не виникає бажання шукати нові штуки, ти просто пишеш код.\nУ випадку з Rust ти постійно шукаєш нові модулі, крейти, відкриття, які можна принести у свій проєкт.\nВисновки\nУ 2021 році Amazon, Google, Huawei, Microsoft, Mozilla та інші технологічні гіганти створили Rust Foundation для підтримки мови та її спільноти. Поступово це набирає обертів, а технологічний світ все більше виказує довіру Rust та використовує для своїх рішень.\nВважаю, що українським розробникам та компаніям варто звернути увагу на перспективи цієї мови програмування, бо наші фахівці мають шалений потенціал вивести Rust на новий рівень, а з ним і власну експертизу.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:09:11','2022-12-03 00:09:11'),(112,'Основи Rust: читання з файлів','Игорь Грегорченко\nТехнический редактор Highload','У нашій серії матеріалів ми розглянемо базові основи новомодної мови Rust. А в другій частині циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проєктів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЦей пост — вільний переклад ось цієї оригінальної статті (з нашими доповненнями у місцях, де це здалося потрібним), яку написав Стів Донован. Початок можна знайти ось тут, а зміст усієї серії — ось тут.\nЧитання з файлів\nНаступним важливим кроком на шляху до відкриття наших програм світові є техніка читання файлів.\nЗгадайте, що expect схожий на unwrap, але видає повідомлення користувача про помилку. У наступній програмі, цілком гарній на вигляд, ми отримаємо кілька помилок. Далі по тексту розберемося, чому:\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\n// file1.rs\nuse std::env;\nuse std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let first = env::args().nth(1).expect(\"please supply a filename\");\n\n    let mut file = File::open(&first).expect(\"can\'t open the file\");\n\n    let mut text = String::new();\n    file.read_to_string(&mut text).expect(\"can\'t read the file\");\n\n    println!(\"file had {} bytes\", text.len());\n\n}\nЦе дає такий висновок:\nsrc$ file1 file1.rs\nfile had 366 bytes\nsrc$ ./file1 frodo.txt\nthread \'main\' panicked at \'can\'t open the file: Error { repr: Os { code: 2, message: \"No such file or directory\" } }\', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nsrc$ file1 file1\nthread \'main\' panicked at \'can\'t read the file: Error { repr: Custom(Custom { kind: InvalidData, error: StringError(\"stream did not contain valid UTF-8\") }) }\', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nПримітка: Запустіть із ключем `RUST_BACKTRACE=1` для отримання зворотного трасування.\nОтже, розбираємось: open може не спрацювати в реальному житті, тому що файл не існує або нам не дозволено його читати, а read_to_string може не спрацювати, тому що файл не містить правильного UTF-8. Щоб передбачити цю можливість, можна додатково використовувати read_to_end та помістити вміст у вектор байтів. Для файлів, які не надто великі, читання в один прийом є ефективним і простим.\nЯкщо ви знаєте щось про роботу з файлами в інших мовах, вам може бути цікаво, як обробляти ситуацію, коли файл закривається. Якби ми реально записали дані у цей файл, його незакриття могло б призвести до втрати даних. Але тут файл автоматично закривається, коли функція завершується і файлова змінна обнуляється.\nОтже, тепер ми повинні поговорити про те, що саме повертає File::open. Якщо Option — це значення, яке може містити щось або нічого, то Result — це значення, яке може містити щось або код помилки. Вони обидва розуміються як unwrap (та його двоюрідний брат expect), але вони є абсолютно різними.\nResult визначається двома параметрами типу: значення Ok і значення Err. Умовна скринька Result має два відділення, одне з яких позначено Ok, а інше Err. Ось приклад:\nfn good_or_bad(good: bool) -> Result<i32,String> {\n    if good {\n        Ok(42)\n    } else {\n        Err(\"bad\".to_string())\n    }\n}\n\nfn main() {\n    println!(\"{:?}\",good_or_bad(true));\n    //Ok(42)\n    println!(\"{:?}\",good_or_bad(false));\n    //Err(\"bad\")\n\n    match good_or_bad(true) {\n        Ok(n) => println!(\"Cool, I got {}\",n),\n        Err(e) => println!(\"Huh, I just got {}\",e)\n    }\n    // Cool, I got 42\n\n}\nФактичний тип \'error\' довільний — багато людей використовують рядки, доки не опанують типи помилок Rust. Це зручний спосіб повернути або одне значення, або інше.\nЦя версія функції читання файлів не є аварійною. Вона повертає результат, і саме сторона, що викликає, має вирішити, як обробити потенційну помилку.\n// file2.rs\nuse std::env;\nuse std::fs::File;\nuse std::io::Read;\nuse std::io;\n\nfn read_to_string(filename: &str) -> Result<String,io::Error> {\n    let mut file = match File::open(&filename) {\n        Ok(f) => f,\n        Err(e) => return Err(e),\n    };\n    let mut text = String::new();\n    match file.read_to_string(&mut text) {\n        Ok(_) => Ok(text),\n        Err(e) => Err(e),\n    }\n}\n\nfn main() {\n    let file = env::args().nth(1).expect(\"please supply a filename\");\n\n    let text = read_to_string(&file).expect(\"bad file man!\");\n\n    println!(\"file had {} bytes\", text.len());\n}\nПерший збіг безпечно отримує значення з Ok, яке стає значенням матчингу. Якщо це Err, то повертається помилка, обгорнута Err.\nДруга відповідність повертає рядок, обернений в Ok, або знову помилку. Фактичний вміст Ok не має конкретного значення, тому ми ігноруємо його за допомогою оператора _.\nНе дуже красиво виглядає, коли більшість функції — це обробник помилок. Go має тенденцію також виявляти цю проблему з великою кількістю явних ранніх повернень або просто ігноруванням помилок.\nНа щастя, є короткий шлях.\nМодуль std::io визначає псевдонім типу io::Result<T>, він такий самий, як Result<T,io::Error>, і його простіше набирати.\nfn read_to_string(filename: &str) -> io::Result<String> {\n    let mut file = File::open(&filename)?;\n    let mut text = String::new();\n    file.read_to_string(&mut text)?;\n    Ok(text)\n}\nОператор ? робить майже те саме, що і збіг в File::open — якщо результатом була помилка, то він негайно повертає цю помилку. В іншому випадку він повертає результат Ok. В кінці нам все ще потрібно повернути рядок як результат.\n2017 був хорошим роком для Rust, а ? був одним із тих крутих речей, які стали офіційно стабільними. Але все ще можна зустріти застарілий макрос try!, який використовується в старому коді:\nfn read_to_string(filename: &str) -> io::Result<String> {\n    let mut file = try!(File::open(&filename));\n    let mut text = String::new();\n    try!(file.read_to_string(&mut text));\n    Ok(text)\n}\nФінальне побажання\nЦя частина не тільки про запис файлів, якщо ви помітили. Сьогодні ми також принагідно обговорили, що можна написати абсолютно безпечний Rust-код, який не є потворним і не потребує при цьому винятків.\nПроте у наших прикладах є кілька недоліків. Краще використовувати функції: як правило, функції зрозуміліші та простіші в обслуговуванні за умови, що кожній функції відповідає лише одна ідея.\nІнша проблема в тому, що ми не так добре опрацьовуємо помилки, як могли б. Наші програми все ще малі, тому ці недоліки не є великою проблемою, але зі зростанням програми буде все важче їх знайти і виправити, щоб привести код у норму.\nТому рекомендується починати рефакторинг на ранній стадії розробки програми, тому що набагато простіше відрефакторити менші обсяги коду. І недарма вище було сказано про функції, тому що подібні логічні цеглинки програми можна легко обробляти окремо.\nДалі буде…','2022-12-03 00:09:16','2022-12-03 00:09:16'),(113,'Основи Rust: рядки та матчинг','Игорь Грегорченко\nТехнический редактор Highload','У нашій послідовній серії матеріалів ми розглянемо базові основи новомодної мови Rust. А в другій частині циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проєктів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦей пост — вільний переклад російською ось цієї оригінальної статті (з нашими доповненнями в місцях, де це здалося потрібним), яку написав Стів Донован. Початок можна знайти ось тут, а зміст всієї серії — ось тут.\nУ цій частині поговоримо про рядки та матчинг.\nРядки\nРядки в Rust трохи складніші, ніж в інших мовах. Тип String, як і Vec, виділяється динамічно і має можливість зміни розміру (отже він схожий на std::string в C++, але не схожий на незмінні рядки в Java і Python). Але програма може містити багато рядкових літералів (наприклад, «hello»), і системна мова має вміти зберігати їх статично в файлі, що виконується.\nУ вбудованих мікросхем це може означати розміщення їх у дешевому ПЗП, а не в дорогій оперативній пам’яті (для малопотужних пристроїв оперативна пам’ять також дорога з точки зору енергоспоживання).\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nТому системна мова повинна мати два типи рядків: динамічно виділені та статичні.\nТак що рядок «hello» не має типу String. Він має тип &str (вимовляється як string slice). Це схоже на різницю між const char* і std::string у C++, тільки &str набагато інтелектуальніший. Насправді &str і String мають дуже схоже відношення один до одного, як &[T] до Vec<T>.\n// string1.rs\nfn dump(s: &str) {\n    println!(\"str \'{}\'\", s);\n}\nfn main() {\n    let text = \"hello dolly\";  // the string slice\n    let s = text.to_string();  // it\'s now an allocated string\n    dump(text);\n    dump(&s);\n}\nЗнову ж таки, оператор borrow може перетворити String на &str, так само, як Vec<T> може бути перетворений на &[T].\nПо суті, String — це Vec<u8>, а &str — &[u8], але ці байти мають бути правильним текстом UTF-8. Як і у векторі, в String можна вставити символ і витягнути його з кінця:\n// string5.rs\nfn main() {\n    let mut s = String::new();\n    // initially empty!\n    s.push(\'H\');\n    s.push_str(\"ello\");\n    s.push(\' \');\n    s += \"World!\"; // short for `push_str`\n    // remove the last char\n    s.pop();\n    assert_eq!(s, \"Hello World\");\n}\nМожна перетворити багато типів на рядки за допомогою to_string (якщо можна відобразити їх за допомогою \'{}\', то можна і перетворити).\nМакрос format! — дуже корисний спосіб побудови складніших рядків із використанням тих самих форматованих рядків, що й у println!\n// string6.rs\nfn array_to_str(arr: &[i32]) -> String {\n    let mut res = \'[\'.to_string();\n    for v in arr {\n        res += &v.to_string();\n        res.push(\',\');\n    }\n    res.pop();\n    res.push(\']\');\n    res\n}\nfn main() {\n    let arr = array_to_str(&[10, 20, 30]);\n    let res = format!(\"hello {}\", arr);\n    assert_eq!(res, \"hello [10,20,30]\");\n}\nЗверніть увагу на & перед v.to_string() — оператор визначений для string slice, а не для самого рядка, тому його потрібно зіставити трохи інакше.\nНотація, яка використовується для фрагментів, працює з рядками:\n// string2.rs\nfn main() {\n    let text = \"static\";\n    let string = \"dynamic\".to_string();\n    let text_s = &text[1..];\n    let string_s = &string[2..4];\n    println!(\"slices {:?} {:?}\", text_s, string_s);\n}\n// slices \"tatic\" \"na\"\nАле рядки не можна індексувати! Це пов’язано з тим, що вони використовують єдине дійсне кодування UTF-8, де кожен символ може бути декількома байтами.\n// string3.rs\nfn main() {\n    let multilingual = \"Hi! ¡Hola! привет!\";\n    for ch in multilingual.chars() {\n        print!(\"\'{}\' \", ch);\n    }\n    println!(\"\");\n    println!(\"len {}\", multilingual.len());\n    println!(\"count {}\", multilingual.chars().count());\n    let maybe = multilingual.find(\'п\');\n    if maybe.is_some() {\n        let hi = &multilingual[maybe.unwrap()..];\n        println!(\"Russian hi {}\", hi);\n    }\n}\n// \'H\' \'i\' \'!\' \' \' \'¡\' \'H\' \'o\' \'l\' \'a\' \'!\' \' \' \'п\' \'р\' \'и\' \'в\' \'е\' \'т\' \'!\'\n// len 25\n// count 18\n// Russian hi привет!\nТепер давайте розжуємо — є 25 байт, але лише 18 символів! Однак якщо ви використовуєте метод типу find, то отримаєте правильний індекс (якщо його знайдено), а потім будь-який string slice підійде. Тип char в Rust — це 4-байтовий кодовий рядок Unicode.\nРядки тут — це не масиви символів!\nString slice може «вибухнути» як векторна індексація, тому що вона використовує зміщення байтів. У цьому випадку рядок складається з двох байтів, тому спроба витягнути перший байт викликає помилку Unicode.\nТому будьте обережні: працюйте зі string slice лише з використанням коректних зсувів, отриманих із рядкових методів. Ось приклад того, як легко можна помилитись:\nlet s = \"¡\";\n    println!(\"{}\", &s[0..1]); <-- bad, first byte of a multibyte character\nРозбиття рядків — ще одне популярне та корисне заняття. Метод string split_whitespace повертає ітератор і ми обираємо, що з ним робити. Найчастіше потрібно створити вектор розбитих підрядків.\nМетод collect є дуже загальним і тому потребує деяких підказок про те, що він збирає — звідси і явний тип.\nlet text = \"the red fox and the lazy dog\";\n    let words: Vec<&str> = text.split_whitespace().collect();\n    // [\"the\", \"red\", \"fox\", \"and\", \"the\", \"lazy\", \"dog\"]\nТакож можна написати це інакше, передавши ітератор у метод extend:\nlet mut words = Vec::new();\n    words.extend(text.split_whitespace());\nУ більшості мов нам довелося б створювати ці окремі рядки, тоді як тут кожен фрагмент вектора запозичується з вихідного рядка. Все, що ми виділяємо, це місце для зберігання фрагментів.\nПодивіться на цей симпатичний дворядковий рядок нижче — там ми отримуємо ітератор за символами і беремо тільки ті символи, які не є пробілом. Знову ж таки, collect потребує підказки (можливо, нам потрібен вектор символів, наприклад):\nlet stripped: String = text.chars()\n        .filter(|ch| ! ch.is_whitespace()).collect();\n    // theredfoxandthelazydog\nМетод filter приймає closure, що у Rust-стилі означає лямбди чи анонімні функції. Тут тип аргументу зрозумілий з контексту, тому явне правило пом’якшується.\nТак, ви можете зробити це як явний цикл за символами, заштовхуючи фрагменти, що повертаються, в змінюваний вектор, але рішення вище — коротше, добре читається (якщо ви звикли до такого, звичайно) і працює швидко. Але і використовувати цикл — не гріх, і я рекомендую вам як вправу написати і таку альтернативну версію.\nІнтерлюдія: отримання аргументів командного рядка\nДосі наші програми жили в блаженному незнанні щодо зовнішнього світу, але тепер настав час забезпечити їх даними.\nstd::env::args — це спосіб доступу до аргументів командного рядка. Він повертає ітератор з аргументів у вигляді рядків, включаючи ім’я програми.\n// args0.rs\nfn main() {\n    for arg in std::env::args() {\n        println!(\"\'{}\'\", arg);\n    }\n}\nsrc$ rustc args0.rs\nsrc$ ./args0 42 \'hello dolly\' frodo\n\'./args0\'\n\'42\'\n\'hello dolly\'\n\'frodo\'\nМожливо, краще було б повернути Vec? Досить легко використовувати collect для створення вектора, та використовуючи метод skip ітератора для переходу до імені програми. Переписуємо:\nlet args: Vec<String> = std::env::args().skip(1).collect();\n    if args.len() > 0 { // we have args!\n        ...\n    }\nТеж виглядає цілком нормально — саме так це робиться у більшості мов.\nБільш підходящий для Rust підхід до читання одного аргументу (разом із розбором цілісного значення):\n// args1.rs\nuse std::env;\nfn main() {\n    let first = env::args().nth(1).expect(\"please supply an argument\");\n    let n: i32 = first.parse().expect(\"not an integer!\");\n    // do your magic\n}\nnth(1) дає вам друге значення ітератора, а expect — це як unwrap з повідомленням, що читається. Перетворення рядка на число — справа нескладна, але вам необхідно вказати тип значення.\nЦя програма може «запанікувати», але рішення цілком підходить для невеликих тестових програм. Головне, не варто надто захоплюватися цією зручною звичкою у складних розробках.\nМатчінг\nКод у string3.rs, звідки ми отримуємо україномовне вітання, написаний не так, як завжди. Введіть критерій для матчінгу:\nmatch multilingual.find(\'п\') {\n     Some(idx) => {\n         let hi = &multilingual[idx..];\n         println!(\"Ukrainian hi {}\", hi);\n     },\n     None => println!(\"couldn\'t find the greeting, Друже\")\n };\nТут match складається з декількох шаблонів з збігається значенням після жирної стрілки, розділених комами. Зручно спочатку розвернути значення опції Option і прив’язати його до idx. Потрібно вказати всі можливості, тому нам доведеться працювати з None.\nКоли звикнете (тобто кілька разів надрукуєте все це повністю), це здасться природнішим, ніж явна перевірка is_some, яка потребувала б додаткової змінної для зберігання опції.\nАле якщо вас не цікавлять невдачі, то if let — ваш друг:\nif let Some(idx) = multilingual.find(\'п\') {\n       println!(\"Ukrainian hi {}\", &multilingual[idx..]);\n   }\nЦе зручно, якщо треба провести порівняння і вас цікавить лише один можливий результат.\nmatch також може працювати як відомий оператор switch C і, як і інші конструкції Rust, може повертати значення:\nlet text = match n {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n        _ => \"many\",\n    };\nЗначення _ подібно до значення default в C. Якщо ви його не надасте, rustc вважає це помилкою. До речі, у C++ у цій ситуації гірше, що ви можете очікувати — це попередження, що багато каже про мови, які ми обговорюємо.\nMatch-оператори Rust також можуть відповідати діапазонам. Зверніть увагу, що ці діапазони мають три точки і є інклюзивними діапазонами, тому перша умова буде відповідати «3»:\nlet text = match n {\n        0...3 => \"small\",\n        4...6 => \"medium\",\n        _ => \"large\",\n     };\n\nДалі буде…','2022-12-03 00:09:53','2022-12-03 00:09:53'),(114,'Основи Rust: пишемо перші тестові програми','Игорь Грегорченко\nТехнический редактор Highload','У нашій серії матеріалів ми розглянемо базові основи новомодної мови Rust. А у другій частині цього циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проектів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування вперед.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦей пост — вільний переклад на українську ось цієї оригінальної статті (з нашими доповненнями в місцях, де це здалося потрібним), яку написав Стів Донован.\nПишемо Hello world\nПочаткова мета Hello world, відколи була написана перша версія мовою Cі, полягала в тестуванні компілятора та запуску реальної мініпрограми.\n// hello.rs\nfn main() {\n    println!(\"Hello, World!\");\n}\n$ rustc hello.rs\n$ ./hello\nHello, World!\nRust — це мова з фігурними дужками, крапками з комою, коментарями в стилі C++ та головною стартовою функцією — поки що все знайоме.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЗнак оклику тут вказує на те, що це виклик макросу. Для програмістів на C++ це може бути неприємно, оскільки вони звикли до серйозних накручених макросів на Cі — але запевняємо, що макроси в Rust більш зрозумілі і свідомі.\nОднак компілятор надзвичайно прозорливий, і якщо ви опустите цей оклик, отримаєте помилку:\nerror[E0425]: unresolved name `println`\n --> hello2.rs:2:5\n  |\n2 |     println(\"Hello, World!\");\n  |     ^^^^^^^ did you mean the macro `println!`?\nВивчення мови означає звикання до її помилок. Намагайтеся сприймати компілятор як суворого, але доброзичливого помічника, а не як комп’ютер, що кричить на вас, тому що спочатку ви будете бачити багато повідомлень про помилки. Набагато краще, якщо компілятор зловить вас на помилці, аніж якщо ваша програма розвалиться на очах у замовників.\nНаступним кроком буде запровадження змінної:\n// let1.rs\nfn main() {\n    let answer = 42;\n    println!(\"Hello {}\", answer);\n}\nСинтаксичні помилки – це помилки на етапі компіляції, а не помилки часу виконання, як у динамічних мовах, таких як Python або JavaScript. Це позбавить вас багатьох проблем у подальшому. І якщо для прикладу ми написали ‘ answr‘ замість ‘ answer‘, компілятор насправді цілком розумно виявить це:\n4 |     println!(\"Hello {}\", answr);\n  |                         ^^^^^ did you mean `answer`?\nМакрос println!приймає рядок формату та деякі значення, він дуже схожий на форматування, яке використовується в Python 3.\nЩе один дуже корисний макрос — assert_eq! Це робоча конячка тестування в Rust, з допомогою його ви стверджуєте, що дві речі повинні бути рівними, і якщо це не так, то виникає паніка.\n// let2.rs\nfn main() {\n    let answer = 42;\n    assert_eq!(answer,42);\n}\nЦе не призведе до жодного результату. Але змініть 42 на 40:\nthread \'main\' panicked at\n\'assertion failed: `(left == right)` (left: `42`, right: `40`)\',\nlet2.rs:4\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nІ це наша перша runtime-помилка в Rust.\nЦикли та розгалуження\nУсе, що потрібно, можна зробити більше одного разу з допомогою циклів:\n// for1.rs\nfn main() {\n    for i in 0..5 {\n        println!(\"Hello {}\", i);\n    }\n}\nДіапазон не є інклюзивним, тому iйде від 0 до 4. Це зручно в мові, яка індексує такі речі, як масиви, починаючи від 0.\nА ось приклад, як можна працювати всередині циклів з умовами:\n// for2.rs\nfn main() {\n    for i in 0..5 {\n        if i % 2 == 0 {\n            println!(\"even {}\", i);\n        } else {\n            println!(\"odd {}\", i);\n        }\n    }\n}\neven 0\nodd 1\neven 2\nodd 3\neven 4\ni % 2дорівнює нулю, якщо 2 може без залишку ділитися на i. Rust використовує оператори у стилі мови Сі. Дужки навколо умови відсутні, як і в Go, але треба використовувати фігурні дужки навколо блоку.\nЦе дозволяє переписати те саме в більш наочному вигляді:\n// for3.rs\nfn main() {\n    for i in 0..5 {\n        let even_odd = if i % 2 == 0 {\"even\"} else {\"odd\"};\n        println!(\"{} {}\", even_odd, i);\n    }\n}\nТрадиційно в мовах програмування є умови (наприклад, if) та вирази (наприклад, 1+i). У Rust майже все може бути виразом. Тому перевантажувати «трійковий оператор» із прикладу вище подробицями не потрібно.\nЗверніть увагу, що в цих блоках немає жодної точки з комою!\nДодавання\nКомп’ютери дуже хороші в арифметиці (якщо ви не знали). Ось наша перша спроба скласти всі числа від 0 до 4. Зараз ми застосуємо практично все, що дізналися вище.\n// add1.rs\nfn main() {\n    let sum = 0;\n    for i in 0..5 {\n        sum += i;\n    }\n    println!(\"sum is {}\", sum);\n}\nАле код не компілюється, хоча виглядає ніби все логічно:\nerror[E0384]: re-assignment of immutable variable `sum`\n --> add1.rs:5:9\n3 |     let sum = 0;\n  |         --- first assignment to `sum`\n4 |     for i in 0..5 {\n5 |         sum += i;\n  |         ^^^^^^^^ re-assignment of immutable variable\nІмутабельна змінна? Це змінна, яка може змінюватися. Змінні letза промовчанням можуть надавати значення лише при оголошенні. Але додавання чарівного слова mut(«будь ласка, зробіть цю змінну змінюваною») допомагає:\n// add2.rs\nfn main() {\n    let mut sum = 0;\n    for i in 0..5 {\n        sum += i;\n    }\n    println!(\"sum is {}\", sum);\n}\nЦе може викликати здивування, якщо ви прийшли з інших мов, де змінні можуть бути перезаписані за промовчанням. Що робить щось «змінною»? Те, що їй присвоюється значення під час виконання — це не константа. Це слово також використовується в математиці, наприклад, коли ми говоримо “нехай змінна n буде найбільшим числом у множині S“.\nЄ причина, через яку змінні за промовчанням оголошуються в Rust доступними лише для читання. У великих програмах важко відстежити, де відбувається запис. Тому Rust робить такі речі, як змінюваність (можливість запису), явними і строгими. У мові багато хитрощів, але Rust намагається бути максимально передбачуваним.\nRust є статично типізованим і сильно типізованим — ці поняття часто плутають, але згадайте Сі (статично, але слабо типізовану) і Python (динамічно, але сильно типізована). У статичних типах тип відомий під час компіляції, а динамічні типи стають відомими лише під час виконання.\nОднак поки що складається враження, що Rust приховує ці типи від вас. Який саме тип у i? Компілятор може визначити його починаючи з 0 з допомогою виводу типів і приходить до i32(чотирьохбайтове знакове ціле число).\nДавайте зробимо рівно одну зміну — перетворимо 0на 0.0. Потім ми отримуємо помилки:\nerror[E0277]: the trait bound `{float}: std::ops::AddAssign<{integer}>` is not satisfied\n --> add3.rs:5:9\n  |\n5 |         sum += i;\n  |         ^^^^^^^^ the trait `std::ops::AddAssign<{integer}>` is not implemented for `{float}`\n  |\nОтже, медовий місяць у нашому навчанні закінчився, починаються складнощі. Кожен оператор (наприклад, +=) відповідає trait’у, який є абстрактним інтерфейсом, який повинен бути реалізований для кожного конкретного типу.\nМи докладно розглянемо це пізніше, але тут вам потрібно знати тільки те, що AddAssign — це ім’я фічі, що реалізує оператор +=, а помилка говорить про те, що числа з плаваючою комою не реалізують цей оператор для цілих чисел (повний список трейтів операторів знаходиться тут ).\nЗнову ж таки Rust любить бути явним — він не буде мовчки перетворювати ціле число на число з плаваючою точкою за вас.\nМи повинні явно привести це значення до значення з плаваючою точкою, ось так:\n// add3.rs\nfn main() {\n    let mut sum = 0.0;\n    for i in 0..5 {\n        sum += i as f64;\n    }\n    println!(\"sum is {}\", sum);\n}\n  Явні типи функцій\nФункції – це одне з місць, де компілятор не обчислюватиме типи за вас. І це було навмисним рішенням, оскільки в мовах типу Haskell настільки потужний вивід типів, що явних імен типів майже немає. Це хороший стиль Haskell — вводити явні типи підписів для функцій. Rust вимагає це завжди.\nОсь проста функція користувача:\n// fun1.rs\n\nfn sqr(x: f64) -> f64 {\n    return x * x;\n}\n\nfn main() {\n    let res = sqr(2.0);\n    println!(\"square is {}\", res);\n}\nRust повертається до старого стилю оголошення аргументів, коли тип слідує за ім’ям. Так це робилося в мовах, похідних від Алгола, таких як Паскаль.\nЗнову ж таки жодних перетворень цілих чисел на дробові — якщо замінити 2.0 на 2, то ми отримаємо явну помилку:\n8 |     let res = sqr(2);\n  |                   ^ expected f64, found integral variable\n  |\nНасправді ви рідко побачите функції, написані з використанням оператора повернення. Найчастіше це виглядає таким чином:\nfn sqr(x: f64) -> f64 {\n    x * x\n}\nЦе тому, що тіло функції (всередині {}) має значення останнього висловлювання, як у разі блоку if-выразу.\nОскільки точка з комою вставляється напівавтоматично людськими пальцями, ви можете додати її сюди й отримати таку помилку:\n  |\n3 | fn sqr(x: f64) -> f64 {\n  |                       ^ expected f64, found ()\n  |\n  = note: expected type `f64`\n  = note:    found type `()`\nhelp: consider removing this semicolon:\n --> fun2.rs:4:8\n  |\n4 |     x * x;\n  |       ^\nТип ()– це порожній тип (void). Усе в Rust має значення, але іноді це буває просто ніщо. Компілятор знає, що це поширена помилка і допомагає вам. Будь-хто, хто проводив час із компілятором C++, знає, наскільки це незвичайно.\nЩе кілька прикладів цього стилю виразу без return:\n// absolute value of a floating-point number\nfn abs(x: f64) -> f64 {\n    if x > 0.0 {\n        x\n    } else {\n        -x\n    }\n}\n\n// ensure the number always falls in the given range\nfn clamp(x: f64, x1: f64, x2: f64) -> f64 {\n    if x < x1 {\n        x1\n    } else if x > x2 {\n        x2\n    } else {\n        x\n    }\n}\nВикористання returnне є неправильним, але код без нього чистіший. Ви все одно використовуватимете returnдля повернення з функції раніше часу.\nДеякі операції можуть бути елегантно виражені рекурсивно:\nfn factorial(n: u64) -> u64 {\n    if n == 0 {\n        1\n    } else {\n        n * factorial(n-1)\n    }\n}\nСпочатку це може здатися трохи дивним, і тоді найкраще скористатися олівцем і папером та вирішити кілька прикладів. Однак зазвичай це не найефективніший спосіб виконання такої операції.\nЗначення також можуть надсилатися за посиланням. Посилання створюється з допомогою &та розіменовується з допомогою *.\nfn by_ref(x: &i32) -> i32{\n    *x + 1\n}\n\nfn main() {\n    let i = 10;\n    let res1 = by_ref(&i);\n    let res2 = by_ref(&41);\n    println!(\"{} {}\", res1,res2);\n}\n// 11 42\nЩо, якщо ви хочете, щоб функція змінила один зі своїх аргументів? Вводимо посилання, що змінюються:\n// fun4.rs\n\nfn modifies(x: &mut f64) {\n    *x = 1.0;\n}\n\nfn main() {\n    let mut res = 0.0;\n    modifies(&mut res);\n    println!(\"res is {}\", res);\n}\nЦе більше схоже на те, як це робиться в C, ніж у C++. Ви повинні явно передати посилання (з допомогою &) та явно розіменувати її з допомогою *. Потім встановити mut, тому що він не використовується за промовчанням.\nНасправді Rust вводить тут потенційні проблеми і не дуже приховано підштовхує вас до повернення значень з функцій безпосередньо. На щастя, у Rust є потужні способи вираження таких речей, як «операція пройшла успішно, і ось результат», тому &mutпотрібний не так часто. Передача за посиланням важлива, коли ми маємо великий об’єкт і не хочемо його копіювати.\nСтиль type-after-variable застосовується і до let, коли ви дійсно хочете точно визначити тип змінної:\nlet bigint: i64 = 0;\n  Вчимося знаходити допомогу\nНастав час почати користуватися документацією. Вона буде встановлена на вашій машині разом з компілятором, і ви можете використовувати rustup doc --std, щоб відкрити її у браузері.\nЗверніть увагу на поле пошуку у верхній частині екрана, оскільки воно надовго стане вашим помічником. Воно працює повністю автономно.\nПрипустимо, ми хочемо подивитись, де знаходяться математичні функції, тому шукаємо «cos». Перші два результати показують, що вона визначена як для чисел із плаваючою одинарною комою, так і для подвійної точності. Функція визначається як метод, наприклад, так:\nlet pi: f64 = 3.1416;\nlet x = pi/2.0;\nlet cosine = x.cos();\nЧому нам потрібен явний тип f64? Тому що без нього константа може бути або f32, або f64вони дуже різні.\nДозвольте процитувати приклад, наведений для cos, але написаний як повна програма ( assert!є двоюрідним братом assert_eq!):\nfn main() {\n    let x = 2.0 * std::f64::consts::PI;\n\n    let abs_difference = (x.cos() - 1.0).abs();\n\n    assert!(abs_difference < 1e-10);\n}\nstd::f64::consts::PI — це багатозначне слово! ::означає те саме, що й у C++ (іншими мовами часто пишеться через ‘.‘) — це повне кваліфіковане ім’я. Ми отримуємо це повне ім’я з другого запиту на пошук PI.\nДо цих пір наші маленькі Rust-програми були вільні від усіх цих importі include, які зазвичай уповільнюють обговорення програм типу Hello world. Давайте зробимо цю програму більш читабельною з допомогою оператора use:\nuse std::f64::consts;\n\nfn main() {\n    let x = 2.0 * consts::PI;\n\n    let abs_difference = (x.cos() - 1.0).abs();\n\n    assert!(abs_difference < 1e-10);\n}\nМасиви та зрізи\nУсі статично типізовані мови мають масиви, які являють собою значення, упаковані у пам’яті від старту до хвоста. Масиви індексуються з нуля:\n// array1.rs\nfn main() {\n    let arr = [10, 20, 30, 40];\n    let first = arr[0];\n    println!(\"first {}\", first);\n\n    for i in 0..4 {\n        println!(\"[{}] = {}\", i,arr[i]);\n    }\n    println!(\"length {}\", arr.len());\n}\nІ на виході ми отримуємо:\nfirst 10\n[0] = 10\n[1] = 20\n[2] = 30\n[3] = 40\nlength 4\nУ цьому випадку Rust точно знає, якого розміру масив, і, якщо ви спробуєте звернутися до arr[4], це призведе до помилки компіляції.\nВивчення нової мови часто має на увазі відмову від ментальних звичок з мов, які ви вже знаєте; якщо ви Python-іст, то ці дужки говорять про List. Масиви можуть змінюватися (якщо ми ввічливо попросимо), але не можна додавати нові елементи.\nМасиви не часто використовуються в Rust, тому що тип масиву включає його розмір. Тип масиву у прикладі — [i32; 4];тип [10, 20]буде [i32; 2]і так далі: вони мають різні типи. Тому їх незручно передавати як аргументи функцій.\nСаме тому часто використовуються зрізи. Можна думати про них як про уявлення базового масиву значень. У решті випадків вони поводяться дуже схоже на масив і знають свій розмір, на відміну від небезпечних аналогів — вказівників.\nЗверніть увагу у прикладі нижче на два важливі моменти: як записати тип зрізу + те, що для передачі його в функцію потрібно використовувати &.\n/ array2.rs\n// read as: slice of i32\nfn sum(values: &[i32]) -> i32 {\n    let mut res = 0;\n    for i in 0..values.len() {\n        res += values[i]\n    }\n    res\n}\n\nfn main() {\n    let arr = [10,20,30,40];\n    // look at that &\n    let res = sum(&arr);\n    println!(\"sum {}\", res);\n}\nПроігноруємо на якийсь час код sumі подивимося на &[i32]. Зв’язок між масивами та зрізами в Rust аналогічний зв’язку між масивами та вказівниками в Ci, за винятком двох важливих відмінностей — зрізи в Rust відстежують свій розмір (і будуть панікувати, якщо ви спробуєте отримати доступ за межами цього розміру), і ви повинні явно сказати, що хочете передати масив як зріз, використовуючи оператор &.\nПрограміст на Cі вимовляє &як «адреса», програміст на Rust вимовляє його як «запозичувати». Це слово буде ключовим для вивчення Rust. Запозичення — це назва поширеної схеми в програмуванні, коли ви передаєте щось за посиланням (що майже завжди відбувається в динамічних мовах) або передаєте вказівник у Ci. Усе, що запозичене, залишається у власності первісного власника.\nНарізка на шматочки та кубики\nВи не можете роздрукувати масив звичайним способом з допомогою {}, але можете зробити налагоджувальний друк з допомогою {:?}.\n// array3.rs\nfn main() {\n    let ints = [1, 2, 3];\n    let floats = [1.1, 2.1, 3.1];\n    let strings = [\"hello\", \"world\"];\n    let ints_ints = [[1, 2], [10, 20]];\n    println!(\"ints {:?}\", ints);\n    println!(\"floats {:?}\", floats);\n    println!(\"strings {:?}\", strings);\n    println!(\"ints_ints {:?}\", ints_ints);\n}\nЩо дає:\nints [1, 2, 3]\nfloats [1.1, 2.1, 3.1]\nstrings [\"hello\", \"world\"]\nints_ints [[1, 2], [10, 20]]\nОтже, масиви масивів — це проблема, але важливо те, що масив містить значення лише одного типу. Значення в масиві розташовуються у пам’яті фізично поруч один з одним, тому доступ до них дуже ефективний.\nЯкщо вам цікаво, якими є реальні типи цих змінних, ось корисний трюк. Просто оголосіть змінну з явним типом, який, як ви знаєте, буде неправильним:\nlet var: () = [1.1, 1.2];\nОсь інформативна помилка:\n3 |     let var: () = [1.1, 1.2];\n  |                   ^^^^^^^^^^ expected (), found array of 2 elements\n  |\n  = note: expected type `()`\n  = note:    found type `[{float}; 2]`\n( {float}означає «деякий тип із плаваючою точкою, який ще не повністю визначений»)\nСлайси дають вам різні представлення одного й того самого масиву:\n// slice1.rs\nfn main() {\n    let ints = [1, 2, 3, 4, 5];\n    let slice1 = &ints[0..2];\n    let slice2 = &ints[1..];  // open range!\n\n    println!(\"ints {:?}\", ints);\n    println!(\"slice1 {:?}\", slice1);\n    println!(\"slice2 {:?}\", slice2);\n}\nints [1, 2, 3, 4, 5]\nslice1 [1, 2]\nslice2 [2, 3, 4, 5]\nЦе акуратна нотація, яка подібна до зрізів Python, але з великою відмінністю: копія даних ніколи не створюється. Усі ці зрізи запозичують дані зі своїх масивів. У них дуже тісний зв’язок з масивом, і Rust витрачає багато зусиль на те, щоб цей зв’язок не порушувався.\nНеобов’язкові значення\nЗрізи, як і масиви, можуть бути індексовані. Rust дізнається про розмір масиву під час компіляції, але розмір зрізу відомий тільки під час виконання. Тому s[i]може призвести до помилки поза межами при виконанні та викликатиме паніку. І тут немає винятків.\nОсмисліть це добре, тому що це шокує. Ви не можете загорнути сумнівний код, який викликає паніку, у який-небудь try-blockі просто «зловити помилку» — принаймні не в тому вигляді, який ви хотіли б використовувати кожен день. То як же Rust може бути безпечним?\nІснує метод slice get, який не викликає паніки. Але що він вертає?\n// slice2.rs\nfn main() {\n    let ints = [1, 2, 3, 4, 5];\n    let slice = &ints;\n    let first = slice.get(0);\n    let last = slice.get(5);\n\n    println!(\"first {:?}\", first);\n    println!(\"last {:?}\", last);\n}\n// first Some(1)\n// last None\nlastне спрацював (ми забули про нульове індексування), але повернули щось під назвою None. firstспрацював нормально, але відображається як значення, загорнуте в Some. Ласкаво просимо до типу Option! Це може бути Someабо None.\nТип Optionмає кілька корисних методів:\n    println!(\"first {} {}\", first.is_some(), first.is_none());\n    println!(\"last {} {}\", last.is_some(), last.is_none());\n    println!(\"first value {}\", first.unwrap());\n\n// first true false\n// last false true\n// first value 1\nЯкби ви розгорнули last, то отримали б паніку. Але принаймні ви можете спочатку викликати is_some, щоб переконатися в цьому, наприклад, якщо у вас є явне не-значення за промовчанням:\nlet maybe_last = slice.get(5);\n    let last = if maybe_last.is_some() {\n        *maybe_last.unwrap()\n    } else {\n        -1\n    };\nЗверніть увагу на * — точний тип всередині Some — &i32, що є посиланням. Нам потрібно розіменувати його, щоб повернутися до значення i32.\nЦе довго, тому є короткий шлях — unwrap_orповерне значення, яке йому було надано, якщо опція була None. Типи повинні збігатися — getповертає посилання, тому вам доведеться скласти &i32 з  &-1. Нарешті, знову використовуйте *для отримання значення у вигляді i32.\nlet last = *slice.get(5).unwrap_or(&-1);\nЛегко пропустити &, але компілятор тут підстрахує вас. Якщо це було -1, rustc скаже «очікувалося &{ціле}, знайдено інтегральну змінну», а потім «help: try with &-1».\nВи можете представити Option як поле, яке може містити значення або нічого (None). У Haskell це називається Maybe. Він може містити значення будь-якого типу, яке є параметром типу. У цьому випадку повним типом є Option<&i32>, використовуючи нотацію у стилі C++ для дженериків. Розгортання цієї скриньки може призвести до вибуху, але, на відміну від кота Шредінгера, ми можемо заздалегідь знати, чи він містить значення.\nДуже часто функції/методи Rust повертають такі maybe-боксы, тому навчіться їх зручно використовувати.\nДалі буде…','2022-12-03 00:09:59','2022-12-03 00:09:59'),(115,'«Всі схопилися за голови»: огляд нових продуктів Apple 2022 від розробника','Андрій Вітвіцький BLOG\niOS Lead в компанії Binariks','Всім привіт. Я Андрій Вітвіцький, iOS Lead в компанії Binariks. Хочу поділитися своїм враженням та баченням нових продуктів Apple, які були анонсовані на щорічній осінній презентації. Багато в чому оновлення, представлені на цій конференції, були очікувані. Але сьогодні ми проаналізуємо те, як ці оновлення вплинуть на розробку та розробників.\n\nНам були представленні:\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\niPhone 14 та iPhone 14 Plus\niPhone 14 Pro та 14 Pro Max\nApple Watch 8\nApple Watch SE\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nApple Watch Ultra\nAirPods Pro 2 — тут нічого цікавого або чогось, що могло б стосуватись розробників безпосередньо, тому навушники цього разу не розглядатиму.\nПочнемо з найцікавішого: iPhone 14 Pro та iPhone 14 Pro Max\nЧому саме це найцікавіше для нас? Звісно через Dynamic Island! На заміну стандартному «чубчику» прийшов острівець, та не просто острівець, а інтерактивний острівець. Мабуть, це головне нововведення з дизайнерської точки зору.\nІнтерфейс iOS входить у прямий контакт із Dynamic Island, доповнюючи його. За словами VP of Human Interface Design Apple Алана Дая,  розробники легко зможуть адаптувати свій софт під Dynamic Island.\nАле я впевнений, що коли iOS-розробники по усьому світу побачили Dynamic Island, то почали хапатися за голови. А після слів «ми розробили цей новий адаптивний простір, щоб він міг плавно розширитись до різних форм, використовуючи унікальні анімації та переходи» — всі явно насторожились.\n\nНаявні додатки й ті, що зараз в розробці, потребуватимуть додаткової роботи над UI-частиною, як це вже було, коли Apple випустили iPhone X.\nСкоріше за все, всім наявним додаткам доведеться швидко випускати нові версії з UI-фіксами, а розробникам, які працюють над новими, включати в естімейти час на адаптацію UI під новий екран з Dynamic Island.\nВи будете мати доступ і можливість взаємодіяти з Dynamic Island у своїх додатках, а також будуть показуватись backgroud та live activity. \nКрім того, Apple показує, як це все буде виглядати, якщо ми запустимо більше одного background activity.\nТакож, якщо уважно придивитися до деталей рекламних роликів Apple, присвячених Dynamic Island, можна помітити, що виріз сприйнятливий до дотиків. Натискання на нього дозволяє розкрити повідомлення, збільшивши віконце.\nЦікавим викликом для розробників також може стати робота в комбінації з Dynamic Island + Live activities. Плюс можливість бачити цю інформацію, коли юзер знаходиться в іншому додатку: «Коли ActivityKit стане доступним в оновленні до iOS 16, ви зможете впроваджувати Live Activities і взаємодіяти з ними в Dynamic Island». \n\nЗ анонсуванням Allways on display це стає ще більш актуальним для додатків: навігації, доставки, різного роду live події.\nNew screen — чудово, але для розробників нічого особливого. \nAlways on display — нарешті з’явився і в iPhone. Окрім вигляду home screen (з налаштованим backdround view та годиника) і віджетів, ви також зможете спостерігати за live-рахунком матчу, доставкою їжі, таксі тощо.\nNew A16 bionic chip — круто, +20% в порівнянні з A15. Важливо, що процесор став потужнішим разом з релізом нового дисплею, нового модуля камери, Dynamic Island, ML for crach detection. \nPro camera, Pro Video, Pro RAW — 48PX камера, спалах з різними режимами. Багато нового цікавого та потужного для фотографів та розробників фото-, відеододатків та їх редакторів. Звичайно, ця тема стосуватиметься сектору розробників, які працюють в цій сфері. \nЕкстрений виклик через супутник (без зв’язку та WI-FI) та Crash detaction — дуже корисні та важливі речі, з якими, я гадаю, розробники додатків не будуть взаємодіяти безпосередньо.\nОтже, розробникам iOS-додатків та QA-інженерам обійтись без нового iPhone 14 Pro буде доволі складно.\n\niPhone 14, iPhone 14 Plus\nA15 bionic \nКраща камера, новий video mode\n5G/eSim\nCrash detection\nГіроскоп високого динамічного діапазону\nДвоядерний акселерометр\nАварійний виклик через супутник\nНова антена для зв’язку з супутником \niPhone 14 Plus — новий у свому ряді порівняно з iPhone 13. Apple повертаються до концепту, який раніше був присутній в моделях 7,8 plus.\nВ 14 Plus має екран 6.7 дюймів, такий самий як і X-s max, 11, 12, 13 pro max. Тобто екран не є чимось новим. Єдине, що можна виділити в цьому ряді, це антену для супутникового зв’язку.\nApple Watch Series 8\nТемпературний сенсор.\nПроцесор: S8 з 64-бітним двоядерним процесором.\nНавігація: L1 GPS, Glonass, Galileo, QZS та Beidou.\nВиявлення зміни температури на рівні 0,1 Цельсія.\nМод «автомобільна аварія»: два нові датчики руху і машинне навчання виявити аварію. Поліпшені гіроскоп та високий акселерометр G-Force.\nРежим акумулятора з низькою потужністю — 36 годин.\nЗа допомогою розумного алгоритму на основі інформації з гіроскопа, нового акселерометра, GPS та багатьох інших джерел даних, годинник може автоматично звертатися до служби екстреної допомоги та викликати допомогу у разі автомобільної аварії. Пристрій діє на основі інформації про мільйони годин реальних даних про водіння та нещасні випадки.\nЗ появою нової функції точного моніторингу змін температури тіла під час сну, для прекрасної половини людства стало можливим більш точно передбачити зміни у циклі. Звичайно, дані будуть більш точними після введення відповідної інформації. Також інформація може бути використана для профконсультації з лікарем.  \n\nApple Watch Ultra\nNew GPS: може використовуватись в нових додатках де потрібна точна локація (наприклад, на природі або у великих будівлях).\nЗаявлена глибина, з якою можна занурюватися, складатиме 40 метрів. Я думаю, ці дані будуть доступні для розробників через HealthKit для розробки власних додатків для занурення.\nOceanic + App для дайверів, створений компанією Oceanic. Все, що було анонсовано в цьому додатку, включаючи all dive information, буде також доступно для розробників та їх майбутніх додатків.\nПід час моєї роботи в Binariks я працював над розробкою додатка для професійних плавців. Думаю, вже в майбутньому попрацювати над додатком для дайверів.\nПри написанні цього матеріалу, я опирався на свій попередній досвід, та враження від презентацій Apple. Сподіваюся, стаття та мої думки виявляться корисними для читачів. Дякую за увагу. \nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:10:34','2022-12-03 00:10:34'),(116,'11 сервісів для вивчення мов, що відкрили безкоштовний доступ для українців','Анастасія Пономарьова\nЖурналістка Highload','Щоб підтримати українців, змушених тікати від війни в інші країни, багато платних сервісів відкрили доступ до преміум-підписки або зробили добірки безкоштовних навчальних матеріалів. Вони допоможуть покращити граматику, розмовну мову або підготуватись до тесту.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nBusuu\nСервіс Busuu надає безкоштовну підписку Premium на три місяці для всіх українців. Вона дозволить вивчити одну з 13 мов, у тому числі польську, німецьку, французьку й англійську. Інструменти Busuu допомагають навчитися правильно будувати речення та запам’ятовувати слова.\nПідписка доступна за подарунковим ваучером, який можна отримати за посиланням .\nDuolingo\nПопулярна платформа для вивчення мов Duolingo теж не залишилася осторонь: власники передають доходи від реклами, отримані від іноземців, які вивчають українську мову, на підтримку України. Також через партнерів (Агентство ООН у справах біженців, Міжнародний комітет порятунку) розповсюджувамуть коди для доступу до Duolingo Plus, щоб біженці та люди, які їх приймають, могли безкоштовно використовувати преміум-версію. Ще Duolingo English Test звільнить від плати українських студентів. \nEnglishDom\nБезкоштовний доступ на рік до всіх онлайн-курсів англійської мови відкрив EnglishDom , його можна отримати за промокодом #StandWithUkraine. ED Course від EnglishDom доступний на веб-платформі та у форматі мобільного застосунку. Кожний урок включає інтерактивні вправи — завдання для розвитку навичок читання, письма, говоріння та сприймання англійської мови.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nСкріншот ED Course\nLingQ\nLingQ Premium тепер доступний безкоштовно всім українцям. Платформа дозволяє вивчати мову на основі будь-якого контенту: книг, статей, пісень, відео на YouTube, подкастів і навіть електронних листів. Тут доступні німецька, угорська, румунська, польська, чеська, англійська та 32 інші мови.\nЩоб отримати доступ до преміуму, потрібно зареєструватися та звернутися до служби підтримки.\nBabbel\nЩоб прискорити адаптацію українців у новій країні, Babbel на три місяці надав безкоштовний доступ до своєї програми з короткими інтерактивними уроками. Для активації потрібен промокод — його можна отримати за посиланням.  Для вивчення доступні курси німецької, польської, італійської, англійської та інших мов.\nПроте є нюанс: українська як вихідна мова курсу поки що недоступна — розробники працюють над тим, щоб запровадити її. Але якщо ви знаєте трохи англійську або польську, сміливо завантажуйте застосунок.\nCambridge Assessment English\nКембриджський освітній центр підготував ресурси, які допоможуть дітям старшого віку та дорослим вивчити англійську мову. Заняття будуть корисними як для українців з нульовими знаннями мови, так і з просунутим рівнем. Доступні 176 безкоштовних активностей, які допоможуть практикувати англійську мову. Також є кембриджський словник, пов’язаний з ним застосунок та персоналізована лексика. Ще українці можуть використовувати Write & Improve — безкоштовний інструмент, який допомагає покращити навички письма англійською мовою.\nСкріншот Write and improve\nBritish Council Ukraine\nЯкщо через війну ви перервали підготовку до тестування IELTS (міжнародна система оцінювання знання англійської мови), British Council Ukraine пропонує надолужити втрачене та скористатися його безкоштовними ресурсами — відеороликами й онлайн-уроками, книгами з підготовки та індивідуальними курсами. Усе це ви знайдете за посиланням.\nMondly\nMondly також відкрив преміум безкоштовно для всіх українців, які хочуть вивчити будь-яку із 25 європейських мов. Так, українцям доступні 1 тис. уроків з розмовною практикою, вісім розмовних модулів, словник.\nЩоб активувати додаткові можливості платформи, потрібно зареєструватися, вибрати як вихідну мову українську та натиснути кнопку «преміум».\nDrops\nDrops пропонує українцям безкоштовну преміум-підписку на рік і паралельно працює над тим, щоб додати українську мову до свого мобільного застосунку. Вивчити у форматі коротких ігор можна понад 45 мов.\nЩоб отримати доступ до безкоштовної передплати, заповніть форму за посиланням, і команда підтримки надішле вам код електронною поштою.\nІлюстрація, джерело – Kahoot\nPreply\nМіжнародна освітня онлайн-платформа Preply підбирає репетиторів-добровольців для переселенців і біженців з України, які хочуть вивчити чи покращити свої мовні навички. Уроки проходять у форматі відеоконференцій тривалістю 60 хвилин, заняття будуть лише груповими. Щоб взяти участь, заповніть форму за посиланням.\nKleks\nKleks — онлайн-платформа для вивчення польської мови. У зв’язку з масовою міграцією українців до Польщі люди потребують вивчення мови хоча б на мінімальному рівні. Тому всі курси платформи зробили безкоштовними (але Kleks можна підтримати пожертвуваннями).\nЗаняття проходять онлайн в інтерактивному кабінеті. Безкоштовні курси доступні після реєстрації.','2022-12-03 00:11:09','2022-12-03 00:11:09'),(117,'16 книг по Python для «чайників» та «богів» програмування (або майже богів)','Анастасія Пономарьова\nЖурналістка Highload','Ми зібрали велику добірку книг по  Python, які допомагають новачкам вивчити базу, досвідченим — відточити навички, покращити код і дізнатися більше про можливості мови, а також додали багато літератури для поглибленого читання.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nДля новачків\nPython Programming for Beginners: The Ultimate Crash Course to Learn Python in 7 Days with Step-by-Step Guidance and Hands-On Exercises (Andrew Park)\nЗвичайно, обіцянка вивчити мову програмування за тиждень — маркетинговий хід, але зміст книги точно буде корисним. Тут є:\nкороткий вступ до Python, його історія та основні додатки;\nінструкція, як встановити Python і який дистрибутив краще використовувати;\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nвсі об’єкти та методи в Python;\nелементи розширеного програмування на кшталт Github, pip, Virtual Environment та Unit Testing;\nприклади коду та вправи в кінці кожного розділу.\nPython Programming for the Absolute Beginner, 3rd Edition (Michael Dawson)\nНадійне введеня у програмування «для чайників». Книга навчає принципам програмування за допомогою створення ігор. У розділах ви знайдете приклади коду, що ілюструють представлені концепції. Наприкінці кожного розділу — повна гра, що демонструє ключові ідеї розділу, і набір завдань для закріплення знань.\nThe Big Book of Small Python Projects: 81 Easy Practice Programs (Al Sweigart)\nТеоретична база та синтаксис Python вже освоєно? Тоді настав час переходити до цієї книги і вчитися писати програми. Тут зібрана колекція з 81 проекту Python, за якими можна створювати ігри на кшталт Блекджек, анімації, програми для розрахунків, шифрування та інше. Також автор вчить креативити — додавати до коду свої власні штрихи.\nClassic Computer Science Problems in Python (David Kopec, Lisa Farina)\nІ-і-і знову підвищуємо складність. Тут завдання допоможуть відточувати навички вирішення проблем за допомогою перевірених сценаріїв, вправ та алгоритмів із використанням Python. У книзі десятки завдань з кодування, починаючи від простих, таких як алгоритми бінарного пошуку, і закінчуючи кластеризацією даних з використанням k-середніх. Також ви дізнаєтеся більше про нейромережі, генетичні алгоритми, змагальний пошук.\nБаттерс з книгою, ілюстрація\nДодатково\nПрограмістам-новачкам (і досвіченим теж) корисні не лише ті книги, в назвах яких бачите «Python» — роботодавець вимагатиме від вас знань інших інструментів і технологій. Тож мотайте на вус.\nHead First Git: A Learner’s Guide to Understanding Git from the Inside Out 1st Edition (Raju Gandhi)\nGitHub потрібний не тільки для того, щоб бездумно «передирати» чийсь код. Автори цього посібника допоможуть зрозуміти, як насправді працює Git, розкривають весь його потенціал. Тут є інформація про способи роботи з Git, гілки, злиття, утиліти, рекомендації по роботі з повідомленнями коммітів та пошуком, та багато іншого.\nIntroduction to Algorithms, fourth edition 4th Edition (Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein)\nНове четверте видання популярної книги, оновлене під сучасні реалії. Книга докладно охоплює широкий спектр алгоритмів, але робить їх розробку та аналіз доступними для читачів будь-якого рівня. Крім теорії, у книзі понад 160 завдань та вправ.\nGraph Theory with Applications to Engineering and Computer Science (Dover Books on Mathematics) First Edition (Narsingh Deo)\nПерші дев’ять розділів — загальне введення в теорію графів, що вимагає лише деяких знань у галузі теорії множин та матричної алгебри. Теми включають шляхи та схеми, «дерева» та фундаментальні схеми, плоскі та подвійні графи, векторне та матричне представлення графів, а також пов’язані теми.\nІнші шість — більш просунуті: вони охоплюють алгоритми теорії графів та комп’ютерні програми, графи в теорії комутації та кодування, аналіз електричних мереж за допомогою теорії графів, теорію графів у дослідженні операцій та багато іншого.\nThe Recursive Book of Recursion: Ace the Coding Interview with Python and JavaScript (Al Sweigart)\nРекурсія серед програмістів вважається складною темою, але в ній немає нічого магічного. Книга використовує приклади Python та JavaScript для навчання основ рекурсії та роз’яснює фундаментальні принципи всіх рекурсивних алгоритмів. Автори розповідають, коли саме треба використовувати рекурсивні функції (і коли цього робити не потрібно), як реалізувати класичні рекурсивні алгоритми, а також які проблеми вони можуть вирішити.\nSQL: 3 books 1 – The Ultimate Beginner, Intermediate & Expert Guides To Master SQL Programming Quickly with Practical Exercises (Mark Reed)\nПовний посібник з SQL для програмістів різного рівня — початківців (перша книга), середнього та просунутого рівня (друга і третя відповідно). Крім теорії SQL і роз’яснень, чим гарна ця технологія для взаємодії з базами даних, є купа практичних рекомендацій і вправ.\nDocker for Developers: Develop and run your application with Docker containers using DevOps tools for continuous delivery (Richard Bullington-McGuire, Andrew K. Dennis, Michael Schwartz)\nDocker є де-факто стандартом для контейнеризації застосунків. Книга допоможе зрозуміти, як забезпечити безперебійну роботу робочого процесу розгортання за допомогою контейнерів Docker, вивчити концепції Docker та DevOps, такі як безперервна інтеграція та безперервне розгортання (CI/CD). Також вона ознайомить із різними інструментами та бібліотеками.\nData Structures the Fun Way: An Amusing Adventure with Coffee-Filled Examples (Jeremy Kubica)\nЦе поглиблене введення в обчислювальне мислення через призму структур даних — це важливо для будь-якого програміста-початківця. Тут є докладний розбір, як працювати з 15 ключовими структурами даних — від стеків, черг та кешів до фільтрів Блума, списків пропуску та графіків.\nPRO\nЯкщо ви в програмуванні не новачок — чудово самостійно пишите код, але хочете відточити майстерність, або ж вам цікаво пізнати всі можливості Python і суміжних технологій, на допомогу прийдуть наступні книги.\nFluent Python: Clear, Concise, and Effective Programming 2nd Edition (Luciano Ramalho)\nБагато досвідчених програмістів намагаються загнати Python у шаблон, про який вони дізналися з інших мов, і ніколи не відкривають для себе можливості Python за межами свого досвіду. Практичний посібник навчить писати ефективний ідіоматичний код на Python, використовуючи його найкращі — і часом забуті, — функції. Автор познайомить з основними функціями та бібліотеками мови Python і покаже, як зробити код коротшим, швидшим і читабельнішим.\nEffective Python: 90 Specific Ways to Write Better Python (Effective Software Development Series) 2nd Edition (Brett Slatkin)\nГрунтуючись на багаторічному досвіді створення інфраструктури Python у Google, Слаткін розкриває маловідомі особливості та ідіоми, які сильно впливають на поведінку та продуктивність коду. Читачам розповідають, як найкраще виконувати ключові завдання, щоб писати код, який легше зрозуміти, підтримувати та покращувати. У книзі багато порад та прикладів реального коду.\nInterpretable Machine Learning with Python: Learn to build interpretable high-performance models with hands-on real-world examples (Serg Masís)\nЯкщо вас цікавить ніша штучного інтелекту (і ви вже тут дещо розумієте), сміливо беріть цю книгу. Вона допоможе розібратися в ключових аспектах і проблемах інтерпретованості машинного навчання, як подолати їх за допомогою методів інтерпретації, а також як використовувати ці методи для створення більш безпечних і надійних моделей.\nPractical Python Programming for IoT: Build advanced IoT projects using a Raspberry Pi 4, MQTT, RESTful APIs, WebSockets, and Python 3 1st Edition (Gary Smart)\nА ця книга буде корисна для фахівців, які хотіли б працювати з електронікою та розробляти програми, що взаємодіють з гаджетами на зразок смарт-годинників, наприклад. У ній розбирають, як використовувати Python та Raspberry Pi для створення складних програм IoT (інтернету речей), здатних створювати та виявляти рух, вимірювати відстань, освітленість та безліч інших умов навколишнього середовища.\n77 Python Advanced Programming Exercises (Edcorner Learning)\nІ, наостанок, збірка завдань високого рівня складності для «прокачаних» програмістів. Вона допоможе відпрацювати різні теми та підготуватися до технічного інтерв’ю з кодування, паралельно покращуючи хард-скіли.','2022-12-03 00:11:45','2022-12-03 00:11:45'),(118,'10 книг для програмістів, щоб прокачати технічні та софт-скіли','Анастасія Пономарьова\nЖурналістка Highload','Ми зібрали в одну добірку літературу як для новачків в IT, так і досвідчених програмістів, яка допоможе підтягнути (або повторити) базу, розширити знання з математики та ML, навчить проходити інтерв’ю та «виживати» в офісі.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nНовачкам\nComputer Science Distilled: Learn the Art of Solving Computational Problems (Wladston Ferreira Filho)\nКороткий і простий посібник з комп’ютерних наук, який покроково вчить основ, необхідних ефективного програмування комп’ютерів. Після вступу в дискретну математику у ньому представлені загальні алгоритми і структури даних. Також тут викладаються принципи, за якими працюють комп’ютери та мови програмування.\nGrokking Algorithms: An Illustrated Guide for Programmers and Other Curious People (Aditya Bhargava)\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nЦей ілюстрований посібник навчить застосовувати поширені алгоритми до практичних завдань, з якими програмісти стикаються щодня. Ви почнете з сортування та пошуку, поступово завдання ускладнюватимуться — потрібно буде вирішувати завдання на стиснення даних та штучний інтелект. Всередині також знайдете приклади застосування алгоритмів, діаграми та повністю анотовані зразки коду на Python.\nStreet Coder: The rules to break and how to break them (Sedat Kapanoglu)\nКерівництво для початківців із гумором розповідає, як ефективно виконувати свою роботу, розставляти пріоритети, приймати швидкі рішення, а також пояснює, які правила написання коду слід порушувати. У книзі розбирають:\nтипи даних, алгоритми та структури даних для швидкої розробки програмного забезпечення;\nвикористання «поганих» практик із користю;\nтестування;\nяк спокійно приймати проколи у своєму коді та «подружитися» з помилками;\nоптимізацію коду, асинхронне програмування, розпаралелювання та рефакторинг.\nДосвідченим\nDesigning Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems 1st Edition (Martin Kleppmann)\nСьогодні дані перебувають у центрі багатьох проблем під час проектування систем — необхідно вирішити складні питання, такі як масштабованість, узгодженість, надійність, ефективність та ремонтопридатність. Інформація з цієї книги допоможе вам зорієнтуватися у світі даних, вивчивши плюси та мінуси різних технологій їх обробки та зберігання за допомогою інструментів.\nПрограмне забезпечення постійно змінюється, але основні принципи залишаються незмінними. Автор розповідає, як застосовувати ці ідеї на практиці та як повною мірою використовувати дані у сучасних застосунках.\nData-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control 1st Edition (Steven L. Brunton)\nЦей підручник поєднує машинне навчання, інженерну математику та математичну фізику для інтеграції моделювання та управління динамічними системами із сучасними методами науки про дані. Тут висвітлюється багато останніх досягнень у галузі наукових обчислень — вони дозволяють застосовувати методи, засновані на даних, до різноманітних складних систем.\nBuild Your Own Programming Language: A programmer’s guide to designing compilers, interpreters, and DSLs for solving modern computing problems (Clinton L. Jeffery)\nАвтор книги — творець мови програмування Unicon. Він вважає, що найкращий спосіб скоротити час розробки та усунути болючі точки в області вашого проекту — створити власну мову програмування. У книзі розповідається, як створювати синтаксичні аналізатори, генератори коду, програми читання файлів, аналізатори та інтерпретатори. Також є керівництво, як створити альтернативу фреймворкам та бібліотекам для вирішення проблем, пов’язаних із предметною областю.\nПроходження інтерв’ю\nSystem Design Interview — An insider’s guide (Alex Xu)\nІнтерв’ю з системного проектування — найскладніший етап. Щоб полегшити розробникам його проходження, автор створив серію посібників (це перша частина). Тут представлена стратегія проходження співбесіди та база знань для вирішення широкого кола питань щодо проектування систем. Книга включає безліч реальних прикладів, що ілюструють систематичний підхід, з докладним описом кроків.\nCracking the Coding Interview: 189 Programming Questions and Solutions 6th Edition (Gayle Laakmann McDowell)\nІнженер-програміст, який також займався відбором співробітників до компанії, поділився досвідом проходження інтерв’ю (навіть тих, коли тебе просять одразу ж вигадати блискучий алгоритм, а потім написати бездоганний код на дошці). Книга допоможе вам потренуватися перед співбесідою, навчить розкривати підказки та приховані деталі у питаннях, виходити із скрутного становища, повторити основні концепції розробки.\nСофт-скіли\nEngineers Survival Guide: Advice, tactics, and tricks After a decade of working at Facebook, Snapchat, and Microsoft (Merih Taze)\nВідійдемо від теорії до реального життя інженера, де щодня потрібно взаємодіяти з людьми, зображати впевненість, переконувати інших у своїй правоті, намагатися не потонути в роботі (але й не показати себе «слабаком», який просить передати частину роботи колегам) і якось просуватися кар’єрними сходами. Книга стане «електронним наставником» у цих та інших питаннях: усередині ви знайдете зведення порад, тактик та прийомів від досвідчених інженерів.\nCritical Thinking & Logic Mastery – 3 Books In 1: How To Make Smarter Decisions, Conquer Logical Fallacies And Sharpen Your Thinking  (Thinknetic)\nБільшості людей не вистачає критичного мислення, бо система освіти йому не вчить. Саме через відсутність критичного мислення більшість людей ніколи не реалізують свій потенціал — через велику кількість помилкових переконань вони роблять те, що шкодить їм, і не роблять того, що принесло б велику користь. Цю тезу можна «натягнути» як на побут, так і на роботу програміста.\nУ комплект цієї книги входять:\nКоротко про критичне мислення: як стати незалежним мислителем та приймати розумні рішення.\nПодолайте логічні помилки: 28 крихт знань, які допоможуть розвинути ваші навички міркування.\nЗвичка критично мислити: потужні практики, які змінять вашу думку та загострять ваше мислення.','2022-12-03 00:11:49','2022-12-03 00:11:49'),(119,'9 книг, які варто прочитати кожному програмісту','Анастасія Пономарьова\nЖурналістка Highload','Розробник із десятирічним досвідом у програмуванні поділився у мережі добіркою книг з програмної інженерії. В ній немає корисної літератури про конкретні мови або платформи, проте тут ви знайдете найкращі практики, як організувати та покращити свій код.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nClean Code (Robert Martin)\nЙмовірно, це найрекомендованіша книга з програмної інженерії. Письмовий та організаційний стиль «дядечка Роба» вважається золотим стандартом написання чистого та підтримуваного коду .\nЯкщо вам сподобається ця книга, пошукайте в інтернеті інші книги автора на цю тему — він також писав про проектування чистої архітектури, організацію завдань за допомогою Clean Agile та загальний посібник для професіоналів програмного забезпечення за допомогою Clean Coder.\nОбкладинка\nThe Pragmatic Programmer (Andre Hunt, David Thomas)\nЗа словами автора добірки, якщо «Чистий кодер» зробив його найкращим програмістом, ніж він був раніше, то «Прагматичний програміст» — найкращим інженером-програмістом. Між кодуванням та інженерією існує велика прірва, яку можна подолати, вивчивши практичні аспекти цієї роботи.\nАвтор книги описує прагматизм як сукупність п’яти ключових якостей: \nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nпершопрохідник — знати новітні технології та тенденції;\nдопитливий — розуміти, як інші роблять свою роботу, і переймати їхній досвід;\nкритик — ніколи не приймати слова/поради за чисту монету;\nреаліст — тверезо оцінювати свої здібності (якість, якої не вистачає більшості розробників);\nмайстер на всі руки — бути знайомим із широким спектром технологій, що дозволить вам зберігати гнучкість протягом усієї кар’єри.\nОбкладинка\nThe Mythical Man-Month (Frederick Brooks Jr.)\nЧи можливо народити одну дитину за місяць, використовуючи дев’ять вагітних жінок? Зрозуміло, що ні, але деякі менеджери точно так вважають. \nКолись у вашій кар’єрі настане момент, коли вам доведеться прогнозувати терміни виконання проекту. І ви помітите, що цей аспект розробки програмного забезпечення більше схожий на мистецтво, ніж на точну науку. Ця книга є введенням у деякі проблеми планування, містить застереження при роботі з великою командою інженерів-програмістів.\nОбкладинка\nRelease It (Michael T Nygard)\nКнига містить важливі поради щодо управління продуктом на етапі, коли ви будете готові відправити свій код у реліз. Завжди важко і хвилююче випустити у світ своє дітище після того, як ви так довго працювали над ним. Тому що, як тільки реальні клієнти почнуть його використовувати, це миттєво спровокує купу головного болю (бо не буває досконалих продуктів).\nЦя книга підготує вас до натиску скарг клієнтів, інвесторів, розгніваних менеджерів та погроз примусового звільнення, які природно виникають після того, як ви випускаєте найпершу версію свого продукту.\nОбкладинка\nEssential Scrum (Rubin Kenneth S.)\nЯк ви розставляєте пріоритети у роботі над великою системою, яку необхідно впровадити з нуля? Як взагалі почати розбивати жахливо великий та неоднозначний новий проект на дрібніші завдання, зрозумілі навіть джуніору? \nНайчастіше для управління проектами та завданнями використовується метод Scrum (форма Agile-розробки). Він популярний, тому що дійсно працює, і це зручний інструмент, з яким повинен бути знайомий кожен айтівець.\nОбкладинка\nCode Complete (by Steve McConnell)\nКнига, по суті, є докладним посібником з програмної інженерії аж на 900 сторінок. Вона охоплює широкий набір тем — від структурування коду до налагодження, налаштування продуктивності, документації тощо. Зрозуміло, не обов’язково читати її від початку до кінця, але з її допомогою можна заповнити прогалини у знаннях. Завдяки своїй повноті «Code Complete» стала однією з книг із розробки ПО, що продаються найбільше у світі.\nОбкладинка\nPatterns of Enterprise Application Architecture (Martin Fowler)\nНе найсвіжіша книга (її понад 20 років), деякі приклади коду трохи застарілі, проте принципи, викладені в ній, є непідвладними часу. Ймовірно, ви чули чи використовували шаблон проектування model-view-controller? Це лише одна з концепцій, представлених у цій книзі. \nПо суті, книга присвячена організації складного програмного забезпечення таким чином, щоби максимально спростити його довгострокову підтримку.\nОбкладинка\nRefactoring (Martin Fowler)\nЩе одна книга Мартіна Фаулера, але вже на тему еволюції коду. Вона прийде на виручку, якщо вам час від часу доводиться мати справу з застарілим кодом, який важко зрозуміти — на це витрачається багато часу і здається, що вже легше переписати все наново.\nРефакторинг проводиться не тільки для застарілих систем, це звичайна частина повсякденного кодування. Поради та приклади в книзі навчать вас, як покращити читабельність та безпеку коду, нічого при цьому не порушуючи.\nОбкладинка\nCode (Charles Petzold)\nВона у добірці більше як джерело натхнення, ніж практичних порад. У Code представлений досвід і показана винахідливість деяких першопрохідців у розробці, що заклали основу сучасної технологічної індустрії.\nОбкладинка','2022-12-03 00:12:25','2022-12-03 00:12:25'),(120,'Маркетинг, вебдизайн та JavaScript: топ-33 самовчителя, які допоможуть швидко опанувати професію','Діана Смєлікова BLOG\nОпераційний директор WEZOM.ACADEMY','30 березня 2022 року російські окупанти відключили інтернет та мобільний зв’язок у Херсонській та Запорізькій областях.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nКоманда Wezom Академії (ті, хто залишився у Херсоні) втратила можливість не лише працювати, а й навіть банально підтримувати зв’язок з рідними та близькими.\nНа щастя, зараз ситуація більш-менш нормалізувалася, зв’язок та інтернет здебільшого відновлені. Але ця подія дала нам підґрунтя для роздумів на тему «Що почитати, коли немає інтернету, а просиджувати час даремно немає бажання?»\nІ ми склали свій список кращої освітньої літератури у різних діджитал-напрямках.\nМаркетинг у соціальних мережах: шість книг\nСоцмережі стали найпотужнішим маркетинговим інструментом для сучасного бізнесу. Сьогодні зареєстровано понад 78 мільярдів облікових записів у соціальних мережах. А 54% потенційних покупців вивчають соцмережі виробників та відгуки клієнтів перед покупкою.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nSMM — перспективна, добре оплачувана та порівняно проста в опануванні професія.\nДен Кеннеді «Жорсткий SMM: Вичавити із соцмереж максимум»\nОлександра Мітрошина «Просування особистих блогів в Інстаграм»\nЛюбов Соболєва «Феномен “Інстаграму”»\nДенис Каплунов «Контент, маркетинг та рок-н-рол»\nДенис Савельєв та Євгенія Крюкова «100 хаків для інтернет-маркетологів»\nТім Стейплс «Прорватися крізь шум. Як привернути увагу в Мережі»\nSEO-просування: п’ять книг\nSEO – один із ключових елементів просування в інтернеті. А водночас один із найскладніших і швидко мінливих. Ті методи та формати SEO-просування, які працювали ще 5-10 років тому, сьогодні йдуть у минуле. А тому при виборі тематичної літератури обов’язково дивіться на рік виходу книги: чим вона новіша, тим краще.\nДжессі Стрикчіола, Штефан Спенсер, Ерік Енге, Ренд Фішкін «SEO — мистецтво розкручування сайтів»\nІгор Ашманов «Оптимізація та просування сайтів у пошукових системах»\nДжессі Стрикчіола, Штефан Спенсер, Ерік Енге, Ренд Фішкін «Мистецтво SEO: опанування пошукової оптимізації»\nКрістофер Д. Маннінг «Вступ до інформаційного пошуку»\nАндрій Дикан та Іван Севостьянов «Збільшення продажів із SEO»\nКопірайтінг: вісім книг\nНаписання комерційних та SEO-текстів – це справжнє мистецтво. Текст має не просто залучати та доносити інформацію. Він зобов’язаний продавати продукт, мотивувати потенційного клієнта і водночас сприяти просуванню сайту (якщо йдеться про SEO-тексти) у пошуковій системі. Гідної літератури з копірайтингу вистачає.\nДмитро Кот «Копірайтінг. Як не з’їсти собаку»\nДмитро Кот «Тексти, що продають: модель для збирання»\nДенис Каплунов «Нейрокопірайтінг»\nДанило Шардаков «Копірайтінг з нуля. Вчись і заробляй»\nМикола Кононов «Автор, ножиці, папір»\nСаша Карепіна «Пишемо переконливо. Сам собі копірайтер»\nДенис Каплунов «Контент, маркетинг та рок-н-рол»\nМаксим Ільяхов «Пиши, скорочуй»\nДо речі, книга «Пиши, скорочуй» — справжній бестселер серед студентів Wezom Академії. Якщо ви вивчаєте копірайтинг або вже працюєте копірайтером, але ще не прочитали цю книгу Максима Ільяхова, рекомендуємо це зробити!\nHTML/CSS: три книги\nHTML і CSS — це та сама база знань і навичок, необхідна для входу в IT. Саме з неї починає свій кар’єрний шлях більшість веброзробників та програмістів. Бажаєте увійти до IT? Почніть з вивчення HTML та CSS.\nДжон Дакет «HTML та CSS. Розробка та дизайн вебсайтів»\nЕлізабет Робсон та Ерік Фрімен «Вивчаємо HTML, XHTML та CSS»\nДевід Макфарланд «Нова велика книга CSS»\nJavaScript: сім книг\nJavaScript — популярна мова програмування, яку зазвичай вивчають разом з HTML та CSS. Це той необхідний базис, з яким ви зможете розпочати кар’єру в IT-індустрії. Якісної літератури на цю тему теж достатньо.\nДевід Фленаган «JavaScript. Детальний посібник»\nМарейн Хавербеке «Виразний JavaScript» \nЕлізабет Робсон «Вивчаємо програмування на JavaScript»\nДжон Резіг, Беар Бібо та Йосип Марас «Секрети JavaScript ніндзя»\nДуглас Крокфорд «Як влаштований JavaScript»\nДуглас Крокфорд «JavaScript: сильні сторони»\nКайл Сімпсон «{Ви не знаєте JS} Типи та граматичні конструкції»\nВебдизайн: чотири книги\nМистецтво створювати інтуїтивний, привабливий та ефективний з погляду продаж дизайн – це не тільки поєднання майстерності та досвіду. Це ще й наглядність. Тематична література та вивчення напрацювань інших вебдизайнерів допоможуть вам вийти на новий рівень. \nІтан Маркот «Чутливий вебдизайн»\nАарон Волтер «Емоційний вебдизайн»\nСтів Круг «Вебдизайн: не змушуйте мене думати»\nДмитро Кірсанов «Вебдизайн»\nІ ще дещо…\nСамоосвіта – невід’ємна частина процесу навчання. Особливо в IT, де фахівець навчається постійно, зокрема, коли працює над проєктами.\nСаме тому в кожному курсі Академії Wezom ми відводимо значну частину матеріалу на самостійне вивчення. Це робиться не тільки задля економії часу, але й щоб студенти після закінчення навчання вміли самі швидко та ефективно знаходити необхідну їм інформацію, отримувати потрібні знання, систематизувати їх та використати у своїй роботі.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:13:00','2022-12-03 00:13:00'),(121,'6 найкращих ресурсів для вивчення блокчейну: добірка книг і відеокурсів','Виктория Пушкина\nЖурналистка в Highload','Блокчейн — технологія, яку розуміють навіть не всі айтівці. При цьому вона у всіх на вустах. Хочете не тільки ловити знайомі слова, але й розібратися глибше чи навіть почати будувати кар’єру в блокчейні? \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nHighload публікує вибірку кращих ресурсів, де це можна зробити.\nEthereum\nНа сайті криптовалюти та платформи для децентралізованих програм Ethereum зібрали багато інформації та корисних посилань про те, як вона працює. Ви можете почати з базових статей про те, що таке Ethereum, і рухатися посторінково далі. Зібрання корисних посилань можна знайти тут. Серед них є виступи автора Ethereum Віталіка Бутеріна.\nBlockchain and Money by MIT\nКурс блокчейну від професора MIT Гері Генслера. Містить 24 лекції, кожна триває приблизно годину. Крім YouTube курс доступний на сайті MIT — з додатковими матеріалами для читання. \nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nНа Reddit пишуть, що курс розроблений з акцентом на економічний бік блокчейну, але він все одно чудово покриває тему і добре підходить навіть для новачків.\nMastering Bitcoin/Mastering Ethereum\nТим, хто хоче заглибитися в технічний бік і не проти читати, підійдуть книги Mastering Bitcoin і Mastering Ethereum (читати у вказаному порядку). Книги виклали у відкритий доступ на GitHub. Автори стверджують, що прочитати та зрозуміти зміст зможе будь-хто, хто має базове уявлення про IT.\nЯк доповення до книг на GitHub виклали і приклади коду з них.\nBitcoin and Cryptocurrency Technologies: A Comprehensive Introduction, Arvind Narayanan\nОдна з найкращих книг про біткоїн і криптовалютні технології, яка з нуля пояснює, що це таке. Автор — професор Принстонського університету. У зв’язку з книгою йде безкоштовний курс на Coursera.\nКнига пояснює технічні тонкощі, при цьому у відгуках пишуть, що пояснення зрозуміє навіть першокурсник факультету Computer Science. \nWhiteboard Crypto\nYouTube-канал з короткими (від кількох хвилин до пів години) відео про блокчейн. Усі матеріали публікують у форматі пояснення, зазвичай вони відповідають на запитання What is…? («Що таке…?»). Наприклад, одне з останніх відео — відповіді на запитання про web 3.0.\nEatTheBlock\nНасамкінець рекомендація для тих, хто не проти заплатити за те, що його проведуть за руку світом блокчейну прямо до нового місця роботи в індустрії. Онлайн-школа EatTheBlock — це теоретичне та практичне онлайн-навчання web3-технологіям. Її заснував французький розробник із 15-річним досвідом роботи в індустрії.\nЄ кілька варіантів курсів для новачків (загальні) та просунутих (за конкретною технологією). Ціна стартує від $97. \nУ школи також є YouTube-канал з відео від викладачів і запрошених експертів.','2022-12-03 00:13:36','2022-12-03 00:13:36'),(122,'22 коворкінги у Києві, де завжди є світло','Анастасія Пономарьова\nЖурналістка Highload','Якщо вимкнули світло, у кафе на вас косо дивиться персонал, тому що ви на весь день «окупували» один із двох столиків, а в ТРЦ безсовісно закрили розетки, то для роботи залишаються лише коворкінги. Сьогодні публікуємо добірку «офісів на день» у столиці.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nUnit.City\nвул. Дорогожицька, 3, буд. В9; 10:00 – 19:00 (у вихідні не працює); +380 98 533 1593.\nКоворкінг у корпоративному містечку, де є робочі місця, спільна зона коворкінгу, кухня, бізнес-лаунж, зум-руми, кімнати для сну, ігрова зона. Вартість на день – 350 грн.\nGenerator (GNRTR)\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nвул. Михайла Грушевського, 3; 09:00 – 21:00; +380 68 302 8718.\nКоворкінг в історичній будівлі з генератором, укриттям та Starlink, де є оуперспейс на 80 місць, приватні офіси, vip-кабінети та кімнати для мітингів. Вартість одного місця в день – від 100 грн.\nLIFT99 Kyiv Hub\nвул. Володимирська, 101; 05:00 – 23:00; +380 96 644 7458.\nStartup community space у центрі столиці, де є можливість працювати в опенспейсі або кабінеті для команди. Або в декоративному гвинтокрилі. Укриття також є. Вартість одного дня роботи – $25 (дійсно з 10:00 до 19:00), місяця – від $300.\nTrue Office\nвул. Німецька, 1/32; 09:00 – 21:00; +380 67 215 1133.\nРозташований у будівлі колишнього заводу “Радар”, є зона  окремих кабінетів для команди з 5 до 13 людей, опенспейс, лобі. Є стабільний інтернет. Вартість одного місця – від $150 на місяць.\nRegus\nвул. Олени Теліги, 6; +380 44 391 8200;\nпр. Перемоги, 53; +380 44 390 3400;\nвул. Верхній вал, 28; +380 44 247 1777;\nвул. Миколи Грінченка, 4, другий поверх; +380 44 390 5959;\nвул. Шовковична, 42-44, третій поверх; +380 44 490 1212;\nвул. Болсуновська, 13-15, восьмий поверх; +380 44 490 4545;\nСпортивна площа, 1A, 17-й поверх; +380 44 394 5700.\nМережа цілодобових коворкінгів (або як мінімум у межах комендантської години) з відкритим плануванням – є коворкінг з незакріпленими робочими місцями та офіси. Вартість стартує від $105 до $275 за людину на місяц, залежно від розташування (найдешевший – на Грінченка, найдорожчий – на Спортивній площі). Але є можливість орендувати місце на один день.\nКоворкінг, ілюстрація\nTceh\nвул. Кирилівська, 15; +380955000509;\nвул. Пимоненка, 13; +380951602111;\nЯрославський провулок, 1/3; + 380731357638;\nвул. Ярославів Вал, 18; +380731357638.\nЩе одна мережа цілодобових коворкінгів, розташованих неподалік від центру. Оренда місця на повний робочий тиждень (40 годин) коштує 3500 грн, вартість на місяць – від $250.\n_AND WORK\nпроспект Перемоги, 26, п’ятий поверх; 10:00 – 18:00; +380 67 734 0505.\nКласичний коворкінг з конференц-залами та переговорками, а також кав’ярнею, лаунж-зоною та терасою. Під час аварійного відключення інтернет працює 4-6 годин на безперебійному живленні. Інформація про вартість очікується.\nCreative Quarter\nвул. Ярославська 58; 05:00 – 23:00; +380 44 225 9990;\nСпортивна площа 1а (ТЦ Gulliver, дві локації – вежі А та Б); 05:00 – 23:00; +380 44 225 9990.\nОл инклюзів для офісного працівника у військовий час: робочі місця, meeting- та skype-room, лаунж зони, кав’ярня, генератори, підземні укриття, опто-волоконний інтернет та ще й старлінк. Вартість місця на день – від $30.\nNRG.Space\nвул. Сім’ї Прахових, 50; +38(067)122-15-54.\nКоворкінг розташований у бізнес-парку з паркінгом та кав’ярнею, має велику площу, де є все – навіть ігрова кімната, бібліотека, кухня та душ. Пишуть, що працюють цілодобово, тож є сенс там оселитись 😉 Вартість – 3900 грн на місяць.\nPEREMOGA\nвул. Ярославів Вал, 15; 09:00 – 20:00; +38 (098) 0-201-201;\nвул. Є. Коновальца, 36Д; 09:00 – 20:00; +38 (098) 0-201-201.\nПерший коворкінг в мережі більший – там, окрім офісів та переговорних кімнат, є ще опенспейс, зали для подій та кімната для медитацій. Вартість місця в коворкінгу – 600 грн на день, оренда фіксованого робочого місця – 10 000 грн на місяць.\niHUB\nвул. Хрещатик, 10; 05:00 – 23:00; +380 50 334 7240.\nВеликий коворкінг у центрі міста з усім необхідним, а також можливістю відвідувати більшість івентів, що тут проходять. Вартість на місяць – від 1000 грн (залежно від кількості людей у команді).','2022-12-03 00:14:11','2022-12-03 00:14:11'),(123,'Робота на Штати з українського дивану: 14 сайтів з віддаленими вакансіями за кордоном','Анастасія Пономарьова\nЖурналістка Highload','Запорука успішного працевлаштування в IT сьогодні — активність: чим більше ресурсів, де опубліковано ваше резюме, тим вищий шанс знайти роботу. Підкинемо вам ще 14 таких платформ.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n    Linkedin \nДілова соцмережа, яка не потребує представлення. Тут можна легко знайти рекрутерів і HR компанії, яка вас цікавить, щоб запропонувати свій досвід безпосередньо — просто вбийте її назву в пошуку і перегляньте список співробітників. Також можна шукати вакансії по відповідному хештегу або познайомитись з колегами, що могли б порекомендувати вас у своїй компанії.\n    Angel \nНабридла розмірена та спокійна робота? Влаштуйтеся в стартап! А ця платформа допоможе: тут безліч вакансій у стартапах по всьому світу — понад 100 тисяч. Паралельно тут можна читати новини зі світу стартапів.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\n    NoDesk \nЗ назви не складно здогадатися, що це вебсайт для пошуку віддаленої роботи на комфортабельному диванчику. Тут публікуються вакансії компаній будь-якого розміру — від нових стартапів до великих корпорацій. На цей час на сайті активна 551 вакансія.\n    RemoteOk \nЩе одна платформа, спеціалізована на пошуку віддаленої роботи. Більшість вакансій пов’язані з програмуванням, а також фінансами та близькими до IT спеціальностями — HR, маркетинг, копірайтинг тощо. У фільтрах можна вибрати навіть не країну, а регіон, що цікавить — Південна Америка, Азія, Океанія.\n    Hired \nСайт, де потрібно розміщувати резюме та компанії пишуть вам самі (якщо ви підходите). Звичної стрічки з вакансіями тут немає: ви можете вибирати тільки з тих роботодавців, які самі відгукнуться. Як заявляють менеджери платформи, тут регулярно шукають співробітників близько 10 тисяч IT-компаній.\n    Gamesjobsdirect \nПлатформа для пошуку роботи у сфері геймдева — причому не лише для розробників, а й для режисерів, художників-аніматорів та представників інших творчих професій. Є фільтри по країнах, ремоуту/офісу та інші.\nІлюстрація, скріншот “Південний Парк”\n    Hubstaff Talent \nБезплатний ресурс для пошуку віддалених вакансій. Можна шукати роботу на повний день (40 годин на тиждень) або з погодинною оплатою з фіксованою ставкою.\n    Dice \nDice більше відомий як ЗМІ про IT та технології, але також на сайті є розділ з вакансіями для розробників, дизайнерів, менеджерів, системних адміністраторів та інших фахівців. Можна окремо переглядати пропозиції щодо роботи за категоріями, рівнем кваліфікації, популярності.\nJust remote \nТут публікують частково або повністю віддалені вакансії від різних IT-компаній. Є фільтр за формою працевлаштування — на постійну роботу або на договірній основі, а також за країнами.\nGlassdoor \nНа цьому сайті можна публікувати оголошення, що ви шукайте роботу, переглядати актуальні вакансії та порівнювати зарплати. Ще тут є огляди компаній та рекомендації щодо проходження співбесіди.\nTuring \nА тут шукати роботу розробникам допомагає штучний інтелект: хмара Talent Cloud на базі ШІ знаходить, перевіряє, підбирає відповідності між вашим оголошенням та побажаннями роботодавців. Заповнювати заявку можна автоматично — за вашою роллю в компанії, кар’єрній траєкторії та технології (деталі вказуєте самостійно).\nIndeed \nКороткий сайт пошуку роботи, що належить японській рекрутинговій компанії: введіть в одному рядку remote, в іншому — Las Vegas, і сайт запропонує купу результатів.\nWorking Nomads\nПлатформа пошуку роботи для «цифрових кочівників» — тобто віддаленої. Здебільшого тут вакансії для айтівців (у кількісному співвідношенні), але юристи чи викладачі теж знайдуть для себе відповідну фаху роботу.\nWe work remotely \nВелика міжнародна спільнота для прихильників віддаленої роботи — з вакансіями, звісно. Цікаво, що платформа не соромиться публікувати розцінки для роботодавців: пост з однією вакансією коштуватиме $299. Тож навряд чи ви тут натрапите на новачків в ІТ або стартап.\n ','2022-12-03 00:14:45','2022-12-03 00:14:45'),(124,'Замість світла в домі — на той світ: чим небезпечні генератори та акумулятори (і як уберегти себе)','Анастасія Пономарьова\nЖурналістка Highload','В Україні регулярно публікують новини про загибель людей через неправильне використання генераторів або акумуляторів під час вимкнення електроенергії. Наприклад, у вихідні на Одещині знайшли трупи дідуся та онука, що лежали в гаражі біля генератора.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗа даними опитувань, майже кожен третій айтівець забезпечив свій будинок автономним живленням, тож публікуємо правила безпеки, кілька порад щодо вибору приладів та додаткових гаджетів до них.\nБаза\nУ цій статті ми розберемо три популярні джерела живлення: бензиновий/дизельний генератор, портативну електростанцію (той самий гігантський повербанк) та автомобільний акумулятор. Головне, що ви повинні пам’ятати, завжди читайте інструкцію до пристрою перед використанням. Від А до Я. Так, це нудно. Так, начебто і так зрозуміло, як користуватися. Але техніка здатна зробити вам гидкий сюрприз, особливо за умов використання не за призначенням.\nВи ж не Термінатор\nДруге: краще купити брендову техніку. Це не «плата за ім’я», а турбота про власну безпеку: великі відомі компанії мають перевірений роками досвід і надійніші, ніж “ноу нейм”. Звертайте увагу на відгуки.\nТретє: не намагайтеся розбирати пристрій і щось у ньому покращувати/лагодити самостійно. І, звичайно, тримайте якомога далі від вогню та придбайте вогнегасник.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nБензиновий генератор\nГенератор гарний тим, що постачатиме у ваш будинок електроенергію в будь-яку погоду і час доби до тих пір, поки у вас є паливо. Навіть якщо блекаут затягнеться на тижні. Генератори потужні, тому часто живлення вистачає навіть на велику побутову техніку.\nВодночас вони найнебезпечніші та найвибагливіші у використанні. По-перше, потрібне регулярне техобслуговування: після перших годин роботи потрібно буде змінити масло, далі – після кожних 20-30 годин (точний період шукайте в інструкції). Під час роботи генератора всі фільтри, кришки та захисні ґрати повинні бути на своїх місцях.\nПо-друге, при згорянні палива у двигуні виділяється чадний газ. Він невидимий і не має запаху, може швидко та непомітно вбити людину. Щоб цього уникнути, потрібно:\nзапускати генератор на відкритому повітрі – у дворі чи на відкритому балконі. У під’їзді, коридорі, гаражі, підвалі, на лоджії не можна! До речі, Міністерство охорони здоров’я України рекомендує тримати генератор щонайменше за 6 метрів від вікон та дверей житлового приміщення, тому балкон під питанням;\nякщо ви вирішили поставити генератор у приміщенні, що добре провітрюється, або на заскленому балконі з відкритими вікнами, то купіть датчик чадного газу з сигналізацією. А краще — два: один у приміщення з генератором, інший — у будинок/квартиру (щоб контролювати, чи газ не просочується). Ціна питання – 1000–2500 грн.\nЩе один «сценарій смерті» від генератора – удар струмом. Щоб його уникнути:\nдайте спокій працюючому генератору — не намагайтеся щось робити з електронікою;\nстежте, щоб генератор не стояв у калюжі та на нього не потрапляв дощ;\nзаземлюйте його, щоб відводити електростатичний заряд.\nІлюстрація\nТакож генератор може сильно обпекти — несмертельно, але дуже боляче. Тож запам’ятайте, що деякі частини техніки після закінчення роботи залишаються дуже гарячими якийсь час. Не чіпайте та не намагайтеся переміщати генератор голими руками.\nНепрацюючу установку зберігайте лише у сухому приміщенні. Якщо генератор не використовується протягом місяця, злийте бензин і законсервуйте (як саме — зазначено в інструкції).\nЩе один важливий пункт: не інверторний генератор може нашкодити електроніці, тому підключати до них чутливу техніку на кшталт смартфонів або ноутбуків ризиковано. Також використовуйте правильні кабелі та подовжувачі: вони мають бути надміцними, абсолютно цілими, призначеними для зовнішнього застосування та розрахованими на високе навантаження.\nПортативна електростанція\nУ порівнянні з генератором і автомобільним акумулятором, це найбезпечніший варіант: її можна тримати у квартирі, вона не вимагає технічного обслуговування і зазвичай нешкідлива для електроніки.\nАле з портативною електростанцією теж треба поводитися обережно:\nВона має стояти на сухій поверхні. Великі портативні електростанції зберігають велику кількість електроенергії, але може статися її витік як струму, якщо поставити в калюжу/під дощ. Звідси загроза удару струмом і коротке замикання, що може призвести навіть до займання. Тож тримайте її якомога далі від вологи та зухвалих собачок. І не чіпайте станцію мокрими руками.\nПортативна станція потужна, але призначена для заряджання пристроїв, а не живлення вдома. За жодних обставин не підключайте вихід до електромережі — це може призвести до займання.\nПідключайте прилади через подовжувач – якісний, із товстими проводами.\nАвтомобільний акумулятор\nУ мережі обговорюється багато варіантів, як зробити повербанк із автомобільного акумулятора – це дешевше, ніж купувати станцію. Але, перш ніж щось «крафтити», варто ознайомитись із ризиками.\nТак, виробники автомобільних акумуляторів не радять використовувати їх не за призначенням, оскільки вони досить швидко приходять у непридатність, а ще можуть накопичувати газ і вибухати. Вода всередині розкладається на водень і кисень, гази виводяться за межі корпусу батареї (оскільки корпус не такий вже й герметичний, що б не говорив виробник), і в достатній концентрації від іскри здатні вибухнути. Як убезпечити себе:\nтримайте акумулятор у приміщеннях, що добре провітрюються, де не зможуть накопичуватися гази;\nякісні моделі акумуляторів не вибухають (але вони дорожчі, простіше купити портативну електростанцію);\nкупіть гарне зарядне для акумулятора;\nпри підключенні до акумулятора трансформатора слідкуйте, щоб він не нагрівався — тримайте в прохолодному місці або підключіть кулер. “Дуйчик” також вирішить проблему з концентрацією водню біля акумулятора.\nЯкщо сталося найгірше\nВаш сусід чи близька людина знехтувала правилами — отримала травму чи отруєння, лежить на підлозі непритомна. У такій ситуації потрібно викликати швидку (номер 103) та надати першу допомогу.\nЧадний газ викликає гіпоксію — сильний дефіцит кисню: людина відчуває головний біль, запаморочення, слабкість, прискорене дихання, сплутаність свідомості. Потерпілого потрібно вивести на свіже повітря, покласти під голову подушку, розстебнути комір і пояс.\nПри ураженні струмом слід викликати швидку, потім:\nпокласти постраждалого спиною на тверду поверхню;\nперевірити дихання, пульс на сонній артерії та зіниці (широка зіниця вказує на погіршення кровопостачання);\nвідкрийте вікна, розстебніть одяг та пояс, щоб забезпечити приплив свіжого повітря;\nякщо людина непритомна, дати понюхати нашатирний спирт, бризнути в обличчя водою;\nпостраждалий дихає рідко і судомно — отже, варто зробити штучне дихання і масаж серця.\nЯк це зробити правильно, дивіться на відео:','2022-12-03 00:15:21','2022-12-03 00:15:21'),(125,'Є світло та булочки: де працювати в блекаут — локації з автономним живленням','Анастасія Пономарьова\nЖурналістка Highload','Енергосистему України продовжує штормити після обстрілу русні, проте роботу ніхто не скасовував. Ми зробили добірку закладів, де можна попрацювати, поїсти та погрітися, у чотирьох великих містах.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nКиїв\nГолосіївський:\nТРЦ Art Mall (вул. Заболотного Академіка, 37; 11:00 – 20:00; +38 (067) 537-68-57): є шість закладів громадського харчування – буде, де сісти з ноутбуком;\nресторан європейської кухні SHEF (вул. Маршала Конева, 6; 08.00 – 22.00; +380 66 300 0177): величезне різноманітне меню, в тому числі сніданки та бар.\nОболонський:\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nкафе We.Cafe (проспект Героїв Сталінграда, 6К5; 08:00 – 21:00; +380 63 704 3682): сніданки, здорова їжа, піца, італійська кухня, десерти;\nкав’ярня Art Coffee (вул. Маршала Тимошенка, 21К2; 7:30 – 22:00; +380 93 652 4688): кава, сирники, тортики та сніданки. \nПечерський:\nковоркінг Creative State of Arsenal (вул. Московська, 8; 08:00 – 20:00; +380 44 334 4080): ціна – $30 на день, заклади громадського харчування через дорогу;\nкафе «Ria Pizza» (бул. Дружби народів, 27; 10:00 – 23:00; +380 99 538 9100): піца, роли, салати, гарячі страви, десерти.\nПодільський:\nпиріжкова «Тітка Клара» (вул. Нижній Вал, 33; 8:00 – 20:00): кава та свіжа випічка.\nкав’ярня Eleven Coffee (вул. Олександра Олеся, 6-А; 8:00-21:30; +380 93 914 1726): кава, мілкшейки, сирники, круасани.\nСвятошинський:\nкав’ярня Kava Kakava (вулиця Академіка Булаховського, 5Е; 7:30 – 20:00): кава, холодні напої, солодощі;\nресторан Pesto cafe (Київ, вул. Берковецька, 6Д, ТРЦ Lavina Mall; 10:00 – 21:00; 066 190 36 12): італійська та американська кухня, десерти.\nСолом`янський:\nкав’ярня «Луч кава» (Повітрофлотський проспект, 11; 9:00 – 20:00; +380 50 767 0383): кава на будь-який смак, тортики, ожинові та шоколадно-маракуєві тарталетки;\nсімейний ресторан «Барсук на Солом’янці» (вул. Липківського, 37В; 10:00-21:00; +380 63 153 7888): українська кухня, м’ясо, боули та сніданки весь день.\nЦе ти сподіваєшся, що заряду ноуту вистачить на 33 години\nШевченківський:\nресторан Workeat (вул. Марка Безручка, 24; 09:00 – 21:00; +380631617108): сніданки, мангал, італійська кухня, десерти;\nресторан Vino e Cucina (вул. Січових Стрільців, 82; 08:00 – 22:00; +380 44 499 1413): італійська кухня, вино, джелато.\nДарницький:\nкав’ярня Panda Coffee (вул. Урлівська, 11/44; 8:00-21:00; +380 93 374 7834): гарячі напої, тортики, пончики та інші десерти;\nкав’ярня CoffeeDom (вул. Кошица 9А; 08:00- 23:00; +380 66 840 1192): кава, печиво, пряники, макаронс.\nДеснянський:\nкав’ярня Opera-Coffee (вул. Бальзака 84; 07:30 – 21:30; +380 93 265 6555): кава, холодні напої, круасани;\nкав’ярня Coffee bro (вул. Братиславська, 28; 08:00 – 20:00; +380 66 779 3574): кава, хотдоги, солодощі.\nДніпровський:\nGastro&Bar “DVIR” (вул. Каховська, 62а; 09:00 – 10:00; +380 68 072 4046): мангал, піца, десерти, гарячі напої;\nкав’ярня Cactus espresso bar (пр. Миру, 5; 08:00-20:00; +380 93 008 7901): кава, печиво, десерти.\nОдеса\nКиївський:\nкав’ярня INTROVERT (вул. Фонтанська дорога, 16Б; 9:30 – 21:00): кава та тортики;\nкав’ярня Mister Sova (вул. Академіка Вільямса, 66; 8:00-20:30): кава, торти, десерти, пончики.\nМалиновський:\nсушибар BUDUSUSHi (вул. Космонавтів, 14; 11:00 – 22:00, +380 48 700 0808): японська кухня, напої;\nПриморський:\nкафе «Буфет на Малому Фонтані» (вул. Французький бульвар 82/3; 9:00-21:00; +380 68 620 8085): снідани, мангал, піца, торти, десерти, круасани.\nкав’ярня CoffeeOcean (провулок Сабнський, 1; 07:50-21:00; +380662333220): кава, круасани, десерти, сирники.\nСуворовський:\nсушибар BUDUSUSHi (вул. Академіка Заболотного, 52, 161; 11:00 – 22:00, +380 48 700 0808): японська кухня, напої.\nЛьвів\nГалицький:    \nкафе FLAT5 (площа Ринок, 39; 11:00 – 21:00; +380 98 276 2825): кава, сніданки, бургери, сендвічі, сирники, панкейки;\nресторан Cloud no7 Panorama (вул. Соборна, 14, ТЦ “Роксолана”; 10:00 – 22:00; +380 98 111 0007): європейська, азіатська, українська, ф’южн та японська кухні;\nресторан WA Lviv (вул. Князя Романа, 7; 09:30 – 22:30; +380 93 341 8030): страви азійської ф’южн-кухні в сучасному стилі.\nФранківський:\nресторан «Голодний Микола» (вул. Стрийська, 352; 11:00-21:00; +380 98 229 2222): галицька кухня.\nВ інших районах кав’ярень із генераторами немає, але є Metro, «Нова Пошта» та «Леокераміка», якщо треба зарядитися.      \nДніпро\nІндустріальний:\nресторан «Плов Хочу» (проспект Слобожанський, 128а; 11:00-22:00, +380 66 139 7777): узбецька кухня;\nЦентральний:\nкав’ярня Double Paps (вул. Шевченка, 36; 08:00 – 20:00): кава, сендвічі, сніданки;\n кав’ярня Culturist (проспект Яворницького, 26; 8:00-21:00; +380 68 822 9082): кава, коктейлі, сендвічі, десерти.\nВашого міста немає у списку?\nМи провели опитування в Telegram, де працюють айтівці, коли вимикається світло. Виявилося, багато хто купив акумулятори та генератори та зробив автономне живлення вдома, інші ходять по кав’ярнях, коворкінгах або в офіс, а також до сусідів, яким пощастило більше.\nСкріншот опитування\nДізнатися, які заклади працюють у твоєму місті, можна на мапі ЛУН та stroom digital.','2022-12-03 00:15:56','2022-12-03 00:15:56'),(126,'Оце нам треба: 10 веселих (і безкорисних) інструментів для айтівців','Анастасія Пономарьова\nЖурналістка Highload','Ці інструменти не принесуть великої практичної користі, але однозначно зроблять робочий процес веселішим і безтурботнішим: з їх допомогою можна розважатися, жартувати над колегами та навіть безпечно “ухилятися” від роботи 😉\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n1. In Your Face\nСмішне розширення на Visual Studio, яке вкаже вам на помилки в коді … своїм незадоволеним обличчям. А точніше, обличчям персонажа з мультфільму “Суперссімейка”, яке так часто використовують у мемах. І чим більше помилок у коді, тим похмурішим стає “батько”.\nРозширення сподобалося розробникам: цей нехитрий яскравий  інструмент вже завантажили понад 48 тисяч разів.\nIn Your Face\n2. Імітатор роботи\nЖартівливий проєкт, створений «неробами для нероб», щоб підвищити свою «продуктивність» до максимуму! Ну, принаймні, вдати.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nВін складається з кількох скриптів: один імітує автоматизовану систему тестування, інший – складання bitbake, третій – витягує випадковий код із codereview і виводить його так, ніби ви набираєте код.\nЯкщо менеджер любить підглядати з-за плеча або (не дай боже) через відеокамеру, чим займаються підлеглі, він не запідозрить каверзу. Але краще все-таки не дурити.\n\nSudo-Продуктивність\n3. Менеджер агресії\nКожен, мабуть, мав моменти, коли нарешті розумієш, чому щось не працює чи працює неправильно. При цьому нікуди та нема на кого кричати, окрім як у git-комміт (адже криворукий автор коду – це ти сам). Творець інструменту розповів, що поводиться так постійно, і одного разу йому захотілося дізнатися, хто і наскільки злий на свій код.\n“Ви коли-небудь замислювалися про те, наскільки злі ваші колеги та/або ви самі? Або наскільки гидким є журнал коммітів проєкту? Не хвилюйтеся, git-anger-management тут, щоб допомогти вам”, – пише GitHub sondr3.\nПросто запустіть менеджер на вашому репозиторії, і він скаже, хто з вас у колективі найзліший і найбільше свариться. Результат виглядає якось так:\ngit-anger-management\n4. Гусарська рулетка Linux Kernel\nЯкщо у вас багато часу і немає особистого життя, або просто захотілося екстриму, то рулетка Linux Kernel – те, що треба.\nВона працює за допомогою команди, яка повідомляє драйверу записати 0 байтів у випадкове місце у пам’яті. Щоразу, коли ви запускаєте свою програму, ви ризикуєте пошкодити щось важливе. Можливо, якийсь процес впаде, а може, вся система! Як зазначив сам автор, це дуже весело (віримо?).\nОсь модуль ядра hello world для початку: http://www.tldp.org/LDP/lkmpg/2.6/html/x121.html\nЦей сайт чудово підходить, якщо ви займаєтеся розробкою ядра Linux: https://elixir.bootlin.com/linux/latest/source/kernel\n5. audio-jack-web\nАльтернативний спосіб роздати інтернет з одного комп’ютера на інший за допомогою двох 3,5  мм аудіокабелів та деякої магії Morse/POCSAG.\nЯк то кажуть, безглуздо, але кумедно. А виглядає це так:\nhttps://highload.today/wp-content/uploads/2022/11/1991bf134c0de92d2ab10.mp4\n  6. Open and Shut\nЩе один скрипт, який переводить закриття та відкриття кришки вашого ноутбука в абетку Морзе. Не питайте, навіщо.\nOpen and Shut\n 7.  Voicemod\nПерейдемо до колективних розваг. Наприклад, цей безплатний інструмент здатний перетворити ваш голос на голос робота, змінити на жіночий чи чоловічий, замінити на голос Моргана Фрімена (або інших зірок/персонажів).\nVoicemod працює на технології AI Voices, яка використовує нейромережі для перетворення мови користувача в режимі реального часу. Програма ідеально підходить для потокової передачі в Twitch або Discord, також працює з Whatsapp, Wire, Zoom, Vivox (Overtone), Paltalk, Mumble, Tox та іншими програмами.\n8. Edit Anything\nЯкщо ви любите пранки та впевнені, що не скривдите колегу і вас не звільнять, то завантажуйте це розширення швидше. Цей інструмент для Google Chrome може змінювати текст на будь-якому вебсайті, який ви відвідуєте.\nІ намалювати баг на сайті у вечір п’ятниці – найскромніше, що ви зможете зробити.\nEdit Anything\n9. Cenafy\nВаш колега – шанувальник Джона Сіни? Ні? Тим краще: ось розширення для Google Chrome, яке з ймовірністю 1/100 при кожному завантаженні нової сторінки запускає мемне відео. Приблизно таке:\nКоли відео закінчується, браузер повертається до того стану, в якому він був до того, як стало відомо, хто є чемпіоном.\nВаше завдання — непомітно встановити розширення на комп’ютер “жертви” і самому не злякатися, коли Сіна заволає на весь кабінет.\n10. Волосся на екрані\nІ, мабуть, найжорстокіший пранк: розширення Chome, яке додає цифрові волоски на екран комп’ютера. Їх неможливо прибрати або відтерти (бо фізично їх не існує), а здогадатися, у чому справа, вашому колезі буде не так просто.\nДиявольська штука.\nВолосся на екрані','2022-12-03 00:16:32','2022-12-03 00:16:32'),(127,'«Чорна п’ятниця» айтівця: 9 крутих акційних пропозицій','Анастасія Пономарьова\nЖурналістка Highload','Час інвестувати у свої знання та навички зі знижкою: ми зібрали у добірку акційні пропозиції від різних освітніх платформ та компаній, що розробляють інструменти для айтівців.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nLeetCode\nПопулярна у всьому світі платформа, яка допомагає покращувати навички у розробці та готуватися до технічних співбесід. Багато айтівців, що працюють у компаніях FAANG, тренувалися саме на LeetCode (наприклад, герой цього інтерв’ю). Зараз доступ до завдань можна отримати з гарною знижкою.\nДо «чорної п’ятниці» ціна на преміальну річну передплату знизилася на $30 — до $129. Для отримання знижки необхідно використовувати промокод THANKS2022 під час оформлення замовлення. Також власники платформи на 20% знизили ціну на прискорений курс інтерв’ю LeetCode щодо структур даних та алгоритмів (ціна — $70).\nАкція діє до понеділка, 28 листопада, включно.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nUdemy\nІ ще одна суперпопулярна освітня платформа-маркетплейс — тут близько 213 тисяч курсів, присвячених програмуванню, науці про дані, дизайну, менеджменту та іншим напрямкам.\nНа розпродажі пропонують курси з відео, статтями та додатковими ресурсами по €9,99, при цьому деякі курси з Python для новачків коштували €85. Знижки діють до 25 листопада включно.\nPluralsight\nЦе американська приватна освітня компанія, яка пропонує на своєму сайті відеокурси для розробників, фахівців з кібербезпеки та людей суміжних з ІТ творчих професій.\nЦього року платформа пропонує знижку 50% на річні підписки: Standard з базовими курсами коштуватиме €137, а Premium з повною бібліотекою стандартних та просунутих курсів, іспитів, проєктів та практичних занять – €204. Акція діє до 1 грудня.\nІлюстрація\nCodecademy\nІнтерактивна онлайн-платформа, яка пропонує курси з мов програмування Python, PHP, jQuery, JavaScipt, Ruby та мовами опису зовнішнього вигляду сторінки HTML і CSS.\nЗнижки на окремі курси не пропонують, зате можна придбати річну Pro-підписку на 50% дешевше – за €102.\nBeyond Code\nНімецька компанія-розробник програмного забезпечення, яка продає інструменти для програмістів, щоб спростити їм роботу, а також курси, де розробники діляться набутим досвідом.\nЗараз компанія пропонує придбати довічну ліцензію Tinkerwell, продовжити чинну ліцензію зі знижкою або додати нові інструменти Beyond Code до свого «арсеналу». Знижки на інструменти та курси – до 65%.\nПравда, не всі пропозиції надвигідні, наприклад, DevTools для Tailwind CSS продається по €29 замість… €29, але деякі позиції можуть виявитися для вас корисними. Акція діє до понеділка, 28 листопада.\nDatacamp\nЗнову курси — від основ для людей, не пов’язаних із програмуванням, до науки про дані та машинного навчання для досвідчених розробників. На платформі опубліковано понад 380 курсів для різних кар’єрних напрямків та проєктів.\nДо «чорної п’ятниці» тут роблять знижки на річну передплату до 65%. Якщо купувати тільки для себе – €69, якщо для команди (тобто для юридичної особи) – €149 за одного користувача. При цьому у команді може бути від 2 до 1000 осіб. Діє знижка до півночі 25 листопада.\nТипова “чорна п’ятниця”\nEducative\nПлатформа онлайн-навчання, створена розробниками, містить текстові курси із вбудованими середовищами кодування та вправами у браузері, а не просто відеоуроки. Щоправда, ціни на навчання «кусаються», навіть з урахуванням знижки.\nТак, Educative проігнорував «чорну п’ятницю» та зробив оголошення про акцію «на честь кінця року». Користувачам пропонують заощадити 10% на річній преміумпідписці та 20% — на дворічній (ціна — $269 та $399 відповідно).\n101 Blockchain\nЯкщо ви плануєте перейти в блокчейн або вже працюєте в цій ніші, платформа допоможе підвищити скіл і просунутися в кар’єрі: вона спеціалізується на практичних програмах професійного навчання та сертифікації з блокчейну. Наприклад, з блокчейн-архітектури, безпеки, NFT або метавсесвіту.\nЗараз тут діють знижки 50% на будь-яку програму сертифікації та 25% — на членство в клубі (та сама платна підписка, яка відкриває доступ до навчальних курсів, майстер-класів та ексклюзивних ресурсів). Так, сертифікація коштуватиме $200, стандартна річна передплата — $300, а преміум — $900. Для активації знижки застосуйте купон BLACKFRIDAY до 1 грудня.\nAppSeed\nНавряд чи ви про нього чули, але цей румунський стартап може принести деяку вигоду розробникам та заощадити час на створенні проєкту. Це платформа, яка використовує інструменти автоматизації власної розробки, щоб скоротити програмістам кількість ручної роботи. Тобто розробник купує готовий «стартер» з відкритим кодом за різними шаблонами : MVC, дворівнева архітектура тощо. Клієнтам пропонують різні Django, Flask та React Dashboards.\nВ цьому році на всі продукти AppSeed діє знижка 75%, для її активації слід використовувати купон BF2022. Акція діє до 30 листопада.\n ','2022-12-03 00:17:08','2022-12-03 00:17:08'),(128,'9 кращих мобільних застосунків для програмістів (і не тільки)','Анастасія Пономарьова\nЖурналістка Highload','Смартфон може бути на роботі відволікаючим фактором, який “з’їдає” ваш час і в результаті змушує овертаймити. А може навпаки — вчити плануванню, самодисципліні та формувати правильні звички. У цьому вам допоможе наша добірка програм.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nHacker’s Keyboard\nПрограма, яка доповнює звичайну клавіатуру смартфона клавішами комп’ютера: вона має Tab/Ctrl/Esc, розділові знаки у звичних місцях і клавіші зі стрілками. Як уточнюють автори, вона буде особливо корисною, якщо ви використовуєте ConnectBot – клієнт SSH (Secure Shell).\nЗастосунок базується на програмній клавіатурі AOSP Gingerbread, тому підтримує мультитач для кнопок-модифікаторів.\nAndroid : рейтинг 4.1 (59,1 тисяч відгуків).\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nХакерська клавіатура\nQuickEdit Text Editor Pro\nЦе текстовий редактор, оптимізований для смартфонів та планшетів. Його можна використовувати як для простих текстових файлів, так і як редактор коду для файлів програмування.\nQuickEdit включає ряд оптимізацій продуктивності та налаштувань взаємодії з користувачем, редактор коду з виділенням синтаксису для 50+ мов (C++, C#, Java, XML, Javascript, Markdown, PHP, Perl, Python, Ruby, Smali, Swift і т.д. .). Програма включає онлайн компілятор, який може компілювати та запускати понад 30 мов.\nAndroid : рейтинг 4.8 (3,37 тисячі відгуків), ціна $2,5. Є однойменна безплатна версія, але користувачі скаржаться, що там забагато нав’язливої реклами.\nТекстовий редактор QuickEdit Pro\nTextastic\nАналог для iOS – універсальний редактор тексту та коду, доступний для iPad та iPhone. Він підтримує підсвічування синтаксису більш ніж 80 мов програмування та розмітки.\nЧерез нього можна під’єднатися до серверів SFTP, FTP і WebDAV або свого облікового запису Dropbox або Google Drive, використовувати вбудований SSH-термінал для роботи безпосередньо на вашому сервері.\niOS: рейтинг 4.8 (1,7 тис.), ціна $10.\nTextastic\nHabitica: Gamify Your Tasks\nЗастосунок, який допомагає сформувати звичку планувати та виконувати поставлені завдання. Для цього він використовує елементи ретро-рольової гри: кожна виконана задача заохочується. Якщо вам набридли нудні чорно-білі планувальники, то програма внесе веселу різноманітність у процес роботи.\nТут потрібно створити аватар, додати завдання чи цілі, над якими ви хочете працювати. За їх виконання дають золото, досвід та предмети, які можна використовувати у вбудованій грі.\nAndroid : рейтинг 4.3 (23,1 тисячі відгуків).\nHabitica\nNotion\nТой самий “нудний”, але такий простий і зручний у використанні планувальник без деталей, що відволікають. З нього можна зробити репозиторій записів, робочий календар і навіть базу даних.\niOS : рейтинг 4.0 (2,8 тис.), безплатний для особистого користування, але є ліміт сховища.\nAndroid: рейтинг 3,9 (50,4 тис.).\nПоняття\nAppBlock \nЗастосунок для підвищення продуктивності буде корисний тим, хто часто зависає в розважальних каналах Telegram чи Instagram під час роботи. Він блокує доступ до сайтів і програм у межах встановленого часу (на основі конкретного з’єднання Wi-Fi або вашого розташування).\nТакож тут є трекер для відстеження часу використання телефону та нагадування.\nAndroid: рейтинг 4.5 (93 тис.).\nAppBlock\nFlora\nАналогічний застосунок, проте він не блокує роботу сайтів, а швидше намагається розвинути у користувачів самодисципліну та формувати позитивні звички. Принцип такий: ви ставите перед собою завдання, час на виконання та запускаєте таймер — на екрані з’являється паросток дерева, яке стає більшим у міру виконання завдання.\nЯкщо ви згорнете застосунок, щоб зайти в інші, то дерево засохне. Виконаєте до кінця, не відволікаючись — додасте дерево до свого саду (сад — всі виконані завдання та показник, який ви молодець).\nКрім того, тут є нагадування, список справ, статистика, а ще — рекомендації щодо посадки та догляду за справжніми деревами.\niOS : рейтинг 4.7 (61 тис.)\nФлора\nCodea\nІнструмент дозволяє створювати ігри та симуляції, а точніше швиденько візуалізувати майже будь-яку ідею, яка спала на думку. Codea — простий і красивий редактор коду, побудований мовою програмування Lua. Як запевняють творці, ця мова не надто залежить від символів, тому ідеально підходить для iPad.\nЩоб створити симуляцію, введіть свій код, натисніть кнопку відтворення, щоб переглянути, як він працює, потім взаємодійте з ним, щоб довести ідею до ладу.\niOS : рейтинг 4,6 (84), ціна $15.\nCodea\nCodeSnack\nЯк заявляють розробники, хороша IDE завжди має бути під рукою програміста. Ця програма не є досконалою, звичайно, але прийнятною у використанні, коли терміново потрібно записати код, а під рукою тільки телефон або планшет.\nПрограма надає прості у використанні інструменти для створення програм, а також допомагає вчитися кодувати на прикладах та розгортати реальні серверні та клієнтські програми.\niOS : рейтинг: 4.5 (894).\nAndroid: рейтинг 4.3 (1.1 тыс.).\nCodeSnack IDE\n     ','2022-12-03 00:17:25','2022-12-03 00:17:25'),(129,'Програмісти очима Боттічеллі та динозаврів: добірка шедеврів штучного інтелекту від DALL-E','Анастасія Пономарьова\nЖурналістка Highload','Сервіс DALL-E, що дозволяє генерувати картинки за описом, відкрив лімітований доступ всім охочим.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nМи не пропустили такої можливості та перевірили, як ШІ уявляє айтівців у повсякденних чи фантазійних ситуаціях, начебто їх зобразили великі художники та аніматори. Приготуйтеся: буде дивно, смішно та видовищно!\nDisclaimer: “перфект інгліш” у запитах для ШІ — то фіча 😉\nПодробиці\nDALL-E та DALL-E 2 – це моделі глибокого навчання, розроблені лабораторією досліджень ШІ OpenAI для створення цифрових зображень зі звичайних текстових описів. Вони використовують технологію Generative Pre-trained Transformer 3, модифіковану для створення зображень. У квітні 2022 року OpenAI анонсувала DALL-E 2 — наступника, призначеного для створення більш реалістичних зображень, які «можуть поєднувати концепції, атрибути та стилі».\nЯкщо раніше доступ до продукту відкривали за списками (користувачі заповнювали анкету про себе і чекали, коли прийде запрошення від платформи), то тепер він відкритий для всіх. Новим користувачам дають 50 безплатних кредитів на перший місяці (один кредит — одна видача), потім — по 15 на місяць. Цього вистачає, аби вдосталь поекспериментувати.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЩо вміє DALL-E\nУявімо звичайну ситуацію: айтівець працює весь день вдома і вже втомився. ШІ запросто справляється із завданням: хоч при ретельному розгляді видно, що це не фото, але поза та фон чудово передає атмосферу.\nDALL-E, втомлений програміст\nТрохи ускладнимо картинку і перенесемося у всесвіт кіберпанку. Бінґо!\nDALL-E, втомлений програміст\nА щодо художніх здібностей ШІ? Ми запросили проілюструвати ту саму сценку в стилі аніме та картин художника Анрі Матісса, і DALL-E видав такі шедеври:\nDALL-E, втомлений програміст\nDALL-E, втомлений програміст\nВключимо фантазію\nЧас розім’яти ручки, включити уяву на повну і скласти якомога детальніші запити англійською мовою. Вони можуть включати персонажів, стилі, дії над будь-яким предметом або взаємодію з живою істотою, що завгодно. Улюблені стилі можна зберігати.\nОтже, запитаємо ілюстрації буднів програмістів, коли телефонуєш у Zoom, нудьгуєш чи плачеш на робочому місці, отримуєш зарплату, їси за комп’ютером чи працюєш по-королівськи — з ліжечка.\nP.S. Люди з непристойно відкритими ротами позіхають, коли що 🙂\nА що як розробник писатиме програму для інопланетян? Чи його екран буде порталом в інший вимір? Або трохи більш “буденна” ситуація — за вікном видно ядерний гриб…\nТак зобразили б програмістів великі художники (але це не точно):\nА так звичні ситуації виглядали б у мультфільмі:\nПеренесемося в іншу епоху: назад, до динозаврів, або вперед, у кіберпанк/постапокаліпсис/високотехнологічний світ із кіборгами.\nЯк то кажуть, тепер ви бачили все. Завершуємо статтю милими песиками-програмістами та пропонуємо весело та безкорисно провести вечір, тестуючи DALL-E самостійно. Успіхів!\nПес-програміст, Dall-e','2022-12-03 00:17:43','2022-12-03 00:17:43'),(130,'Бібліотека QA: 8 книг із тестування програмного забезпечення','Анастасія Пономарьова\nЖурналістка Highload','У добірці є книги з базовою інформацією, класичні посібники з тестування та поглиблена література, яка допоможе зробити черговий ривок у кар’єрі (і попрактикувати англійську).\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nБаза\nThe Self-Taught Software Tester A Step By Step Guide to Learn Software Testing Using Real-Life Project (Mr Chhavi Raj Dosaj)\nКнига містить детальну інформацію про те, як планується, виконується та контролюється тестування у реальних проєктах. Перша половина містить докладне пояснення основ тестування програмного забезпечення, а друга присвячена покроковому проходженню реального проєкту. Це допоможе зрозуміти принцип роботи QA від початку до кінця, а також місце тестування в проєкті.\nПосібник дасть базові знання про тестування ПЗ з прикладами, які вам знадобляться під час пошуку першої роботи.\nКласика\nThe art of Software Testing (Glenford J. Myers)\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nУ цьому виданні автор розкриває природу та цілі тестування ПЗ, методології для розробки ефективних тестових випадків. Паралельно він дає інформацію про психологічні та економічні принципи, управлінські аспекти, інструменти тестування, тестування високого порядку, перевірку коду та відладку.\nЗагалом книга містить всю ключову інформацію, необхідну для успішного тестування, і буде корисна як новачкам, так і досвідченим тестувальникам.\nГрифіни рекомендують\nChaos Engineering: System Resiliency in Practice 1st Edition (Casey Rosenthal)\nДосвідчені фахівці активно радять читати цю книгу тестувальникам, хоча вона не зовсім за профілем.\nChaos Engineering — дисципліна експериментування з системою, спрямована на те, щоб зміцнити здатність системи протистояти турбулентним умовам. Це практичне керівництво показує інженерам, як орієнтуватися в складних системах, оптимізуючи їх для досягнення бізнес-цілей, а також запобігаючи збоям до того, як вони вплинуть на ваших клієнтів.\nАвтори докладно розповідають про методологію Chaos Engineering, а також публікують історії практикуючих галузевих експертів із Google, Microsoft, Slack, LinkedIn та інших великих компаній.\nExplore It!: Reduce Risk and Increase Confidence with Exploratory Testing 1st Edition (Elisabeth Hendrickson)\nКоли ви створюєте програмне забезпечення, воно може поводитися не так, як ви припускали. Дослідницьке тестування знижує ці ризики. Про нього в книзі і йтиметься:\nЧастина 1 знайомить із базовими навичками, необхідними для тестувальника-дослідника.\nЧастина 2 вчить досліджувати, варіюючи взаємодії, послідовності, дані, час та конфігурації, показує, як включити до роботи методи аналізу, такі як моделювання стану, даних та визначення контекстних діаграм.\nЧастина 3 впроваджує методи у контекст програмного проєкту, вчить застосовувати навички та методи на практиці.\nТестування та менеджмент\nPerfect Software And Other Illusions about Testing (Gerald M. Weinberg)\nВайнберг чітко поділяє очікуване, важливе та можливе у тестуванні програмного забезпечення. Він руйнує популярні помилки навколо роботи тестувальника і відповідає на питання, які ставлять у глухий кут більшість людей: чи можливе ідеальне програмне забезпечення? Чому б просто не протестувати все поспіль? Чому ми не можемо прийняти кілька помилок?\nТеми включають:\nнесприйнятливість до інформації;\nфактори, що роблять тест «хорошим»;\nосновні помилки у тестуванні;\nвизначення значущості збоїв;\nяк провести тестування без обладнання.\nAgile Testing: A Practical Guide for Testers and Agile Teams 1st Edition (Lisa Crispin, Janet Gregory)\nШироке поширення agile-методів розробки привернула увагу до необхідності ефективного тестування. Яка справжня роль тестувальника у такій команді?\nУ книзі розповідається про ітерацію agile-розробки програмного забезпечення з погляду тестувальника та пояснюються ключові фактори успіху agile-тестування, а саме:\nяк залучити тестувальників до agile-розробки;\nмісце тестувальників та QA-менеджерів у agile-команді;\nяк перейти від традиційного циклу до гнучкої розробки;\nяк здійснити тестування за короткі ітерації;\nяк використовувати тести для успішного керування розробкою;\nяк подолати бар’єри на шляху автоматизації тестування.\nШвидкість, з якою пишеш автотести після книги\nАвтоматизоване тестування\nEffective Software Testing: A developer’s guide (Mauricio Aniche)\nНаписана для розробників, ця книга буде корисною і для QA Automate, зокрема, перші кілька глав. Тут автор розповідає про різні типи тестування – від окремих модулів до цілих компонентів.\nУ змісті розкривається:\nефективне та систематичне тестування програмного забезпечення;\nтестування з урахуванням специфікацій;\nструктурне тестування та покриття коду;\nрозробка контрактів;\nтестування з урахуванням властивостей;\nтестові двійники та макети;\nнаписання великих тестів із прикладами на основі Java.\nDesign Patterns for High-Quality Automated Tests: High-Quality Test Attributes and Best Practices (Anton Angelov)\nКнига просунутого рівня для практикуючих автоматизаторів-тестувальників. Тут більше 20 000 рядків реальних прикладів коду для автотестів на C#. Однак автор переконує, що підходи та практики, описані в книзі, стануть у нагоді в будь-якій мові (у тому числі популярній Java).\nЧого ви навчитеся:\nоптимізувати та стабілізувати ненадійні тести;\nобробляти асинхронні вебсторінки у своїх тестах, автоматично працювати з AJAX та jQuery;\nпокращувати читабельність тестів, зручність супроводу, можливість повторного використання та розширюваність шляхом включення понад 10 шаблонів проєктування;\nдізнаєтеся, що таке принципи SOLID та як вони можуть покращити ваш тестовий код;\nдізнаєтесь, як оцінити та вибрати найкращий можливий дизайн для вашого фреймворку чи бібліотеки;\nяк спроєктувати та створити інфраструктуру для обробки тестових даних та різних тестових середовищ.','2022-12-03 00:18:00','2022-12-03 00:18:00'),(131,'Краще, ніж повербанк: яку зарядну станцію вибрати','Анастасія Пономарьова\nЖурналістка Highload','Віялові відключення систематично залишають українців без світла — іноді на кілька годин, іноді — на 12 і більше. Повербанки та акумулятор у ноутбуці давно розрядилися, а гроші самі себе не зароблять, тому час обрати собі потужну power station.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯка ситуація в Україні?\nМи провели опитування серед наших підписників у Telegram, як на їхню роботу впливають відключення електроенергії. В опитуванні взяли участь 194 айтівців, і половина зізналася, що не може нормально працювати. З них 10% так і не купили генератори чи повербанки, ще 73% зазначили, що заряду наявних повербанків не вистачає, щоб забезпечувати стабільну роботу гаджетів на весь період відключення.\nЗ тих, кому відсутність світла не заважає, 67% рятує гнучкий графік — коли світло є, тоді й працюють, а ще 11% забезпечили повністю автономне живлення житла за допомогою акумуляторів, генераторів та іншого (до речі, ось вам і відповідь, як вирішити проблему з роботою).\nСкріншот опитування\nПогляньмо, що пропонує ринок зарядних станцій.\nУкраїнське виробництво\nСпочатку варто розглянути варіанти від українського виробника — по-перше, це підтримка бізнесу та державного бюджету, по-друге, українські повербанки часто виграють у співвідношенні ціна-якість. Зараз все побачите.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nБлок багатоканального швидкого заряджання BanderaPower 225S\nДжерело живлення, яке можна використовувати для заряджання телефонів, планшетів, ноутбуків, Starlink, а також живлення котлів та великої побутової техніки (щоправда, у цьому випадку – ненадовго).\nПристрій включає:\nлітій-іонний акумулятор ємністю 225 000 мАг, 840 Вт/год;\n4 порти USB quick-charge;\n1 роз’єм прикурювача 12V 10A;\n2 розетки змінного струму 220 V 50 Hz, потужність до 500 Вт;\n1 роз’єм для заряджання від сонячного модуля Bandera Solar;\n1 роз’єм для запуску двигуна;\n6 шнурів з роз’ємами для підзарядки (2 Micro USB, 2 Type C та 2 Lightning);\nсвітлодіодний світильник із потужністю 7W, зі шнуром 3 м.\nBanderaPower 225S\nМоже зарядити смартфон 50 разів, або забезпечити безперервне освітлення на 150 годин. Ціна — 39 690 грн ($1080). Є дешевші версії — від 9 тис. грн, але з меншим об’ємом акумулятора або без розеток (тут їх дві).\nBUREVII М8\nЯкщо хочете уявити свій будинок «центром прийняття рішень» (як пишуть у призначенні товару), можна придбати цю потужну тактичну зарядну станцію:\n      ємність — 2 160 000 мАг / 7992 Вт/год;\n      USB — 4 шт. QC (швидка зарядка)/24 Вт;\n      розетки 220V — 3 шт.;\n      загальна потужність — до 1000 Вт;\n      час заряду — 6,5 годин;\n      вхідна напруга заряду — 180-264 В АС;\n      розмір — 27x55x57 см;\n      вага — 55.5 кг.\nBUREVII М8\nЩе показує заряд у відсотках, має запобіжники, захист від перевантажень та перегріву. Коштує «малюк» 98 тисяч грн ($2670). З дешевших пристроїв з розетками в лінійці є М5 — габарити та ємність скромніші (360 000 мАг), коштує 33,5 тис. грн. Незабаром виробник обіцяє також випустити лінійку Н — уже для цивільних.\nProenergo Standart Plus\nДля різноманітності додамо у добірку сонячну станцію — на випадок, якщо блекаут затягнеться, а погода над вами зглянеться та вигляне сонце. Отже:\n      ємність — 85000 млА;\n      сонячна панель — 1х50Ват;\n      потужність — 0.7 кВт\n      час зарядки — 4,5 години (від сонця)\n      розетка 220Вольт — 1 шт.;\n      USB — 4 шт.;\n      вага — 11 кг.\nProenergo Standart Plus\nЗаряду акумулятора вистачить на 25 зарядок смартфона або 4 ноутбуки. Ціна — 14 990 грн ($407).\nPortable power station Модель «З»\nУніверсальне джерело живлення для військових та цивільних потреб. Характеристики у базовій комплектації:\n      ємність — 1450 Вт/год;\n      розетка 220V AC — 1x600w;\n      прикурювач 12V— 1x120w;\n      USB-QC 5V— 2x18w;\n      USB-A 5V — 4x10w;\n      вага — 14,5 кг;\n      розмір — 38х28х14 см;\n      час зарядки — 5 годин.\nPortable power station Модель «З»\nЯк заявляє виробник, за його допомогою можна зарядити 150 телефонів або добу безперервно живити систему Starlink. Ціна для цивільних – 36 тис. грн ($981).\nІмпортні\nEcoFlow DELTA mini\nКомпанія з реєстрацією в США та виробництвом у Китаї. Особливість цієї станції — вбудована сонячна панель. Характеристики такі:\nємність — 245000 мАг / 882 Вт / год;\nпотужність — 1400 Вт (можна відрегулювати до 2100);\nкількість роз’ємів — 9 (USB Type-C, USB Type-A, авторозетка 12 В, розетка 230 В);\nчас зарядки від мережі – 1,6 години;\nавтомобільна зарядка — 10 годин;\nсонячна батарея — 160 Вт; 11-100 В; 10 А;\nвага — 10.7 кг;\nвиробництво — Китай.\nEcoFlow DELTA mini\nЦіна пристрою – 55 тисяч грн ($1500). Як бачите, характеристики близькі до BanderaPower (перевага — тільки швидка зарядка, а маленька сонячна панель взимку не сильно допоможе), але різниця в ціні суттєва.\nBLUETTI AC200MAX\nЩе одна станція з вбудованою сонячною панеллю та ліхтарем, а також можливістю керування через додаток:\nємність батареї — 3000 Вт/год;\nпотужність — 2400 Вт (до 4800 Вт);\nроз’єми — USB Type-C, USB Type-A, авторозетка 12 В, розетка 230 В;\nбездротова зарядна панель — 2 х 15 Вт;\nсонячна енергія — 900 Вт (10-145 В): макс 15А;\nAC+сонячне введення — 1400 Вт макс.;\nчас зарядки — 8 год;\nрозміри — 42 × 28 × 38.65 см;\nвага — 28.1 кг;\nвиробник — США.\nBLUETTI AC200MAX\nКоштує станція 102 тис. грн ($2780), купити можна на замовлення. Але цей бренд має хороші варіанти дешевше (і простіше), наприклад, пристрої в лінійці PowerOak за 16-32 тис. грн, при цьому ємність акумулятора буде 600-700 Вт/год.\nFlashFish UA550\nЩе одна станція американського бренду із вбудованою сонячною панеллю:\nємність батареї — 148 800 мА/год, 550 Вт/год;\nпотужність — 600 Вт;\nроз’єми — USB-C, USB, розетки;\nчас зарядки — 6 годин;\nвхідна напруга від сонячної батареї — 18 В — 24 В/від 100 Вт;\nрозміри — 19 x 21 x 19 см;\nвага — 6.8 кг;\nвиробник — Китай.\nFlashFish UA550\nЦіна пристрою – близько 30 тисяч грн ($815). Це найбільш бюджетний і мобільний варіант у цій добірці, тому знайти в Україні його зараз не так просто, але можна замовити у продавців або на Amazon.\nДо речі, на Amazon є багато бюджетних варіантів зарядних станцій із непоганими характеристиками та відгуками по $200-300. Якщо ви готові витратитись на доставку та почекати, можна пошукати станції на іноземному торговому майданчику.\nНа що ще звернути увагу\nАйтівці обговорили на форумі DOU нюанси, на які варто спиратися при виборі зарядних станцій.\n1) Якщо світла та опалення не буде достатньо довго або доведеться спускатися у бомбосховище, де температура нижча за нуль, то не всі станції зможуть продовжувати роботу в таких умовах. Тому уточнюйте при покупці, чи станція може працювати при -10°C. Так, писати код за таких температур навряд чи можете, інакше пальцям можна буде сказати «прощавай», але зарядити телефон або ліхтар потрібно буде точно.\n2) Станція має бути з вбудованою грілкою.\n«Усі ці красиві літієві повербанки не можна заряджати за температури нижче нуля. А щоб вони ще й прожили більше 10-30 циклів, то й нижче +10», — зазначив користувач Maksym Strukov.\n3) Ще один параметр — можливість заміни батарейного блоку. Через певну кількість циклів він не тримає заряд — уточнюйте, чи потрібно висилати пристрій виробнику для заміни батареї або доведеться купувати новий.\n4) Станція повинна мати ручку. Банально, але нести зручніше й одна рука буде вільна (якщо ми говоримо про станції до 20 кг).\n5) Краще, якщо всі роз’єми для зарядки матимуть заглушки, щоб туди не потрапляла волога та бруд.\n6) Якщо хочете заряджати станцію від сонця, краще купіть складну сонячну панель окремо.','2022-12-03 00:18:17','2022-12-03 00:18:17'),(132,'Вчимо SQL: 10 книг з мови управління даними — від основ до поглиблених знань','Анастасія Пономарьова\nЖурналістка Highload','Модні мови програмування для управління даними приходять та йдуть геть, а SQL залишається. Щоб познайомитися з ним ближче або поглибити свої знання, редакція Highload склала добірку книг, включаючи окремі посібники з MySQL, Oracle та PostgreSQL.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЗагальні\nSQL: 3 books 1 – The Ultimate Beginner, Intermediate & Expert Guides До Master SQL Programming Quickly with Practical Exercises (Mark Reed)\nСвіже видання, випущене у 2022 року, вже стало бестселером. Воно включає три книги, розраховані на різні рівні знань — початковий, середній і просунутий.\nКерівництво для початківців дає базові знання та навички програмування на SQL, а саме:\nрозуміння основних структур баз даних та систем управління базами даних;\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nSQL-сервер;\nробота з базами даних MySQL;\nвикористання запитів на отримання даних;\nстворення бази даних;\nінструкція, як настроїти базу даних;\nяк змінювати та контролювати таблиці;\nробота з помилками.\nДруга книга включає:\nпростий посібник з встановлення та налаштування SQL;\nтипи даних та їх функції;\nперегляд шифрування, створення та індексування;\nвикористання підпрограм і функцій, що зберігаються, повною мірою;\nаналіз переваг нормалізації даних;\nSQL для аналізу даних.\nА у книзі експертного рівня розглядається:\nдоступ до даних за допомогою ODBC та JDBC;\nробота з SQL та XML;\nSQL та JSON;\nнабори даних та курсори;\nпроцедурні повноваження;\nколекції;\nвеликі об’єкти;\nналаштування та компіляція.\nSQL QuickStart Guide: Simplified Beginner’s Guide до Managing, Analyzing, і Manipulating Data With SQL (Walter Shields)\nА це вже детальніший посібник для програмістів, які тільки починають освоювати SQL — він навіть використовується в програмах американських коледжів. Автор уточнює, що книга також буде корисною для менеджерів та власників бізнесу, які хочуть керувати бізнес-аналітикою на основі даних.\nУ книзі розповідають про:\nбазові структури баз даних — що це таке, як вони працюють і як у них орієнтуватися;\nяк використовувати SQL для отримання та розуміння даних незалежно від масштабу бази даних (за допомогою ілюстрацій та прикладів);\nнайбільш важливі SQL-запити, як і коли їх використовувати для досягнення найбільшого ефекту;\nпрофесійні застосунки SQL;\nяк “продати” свої нові навички SQL роботодавцю.\nБонус: безплатний довічний доступ до навчальних онлайн-ресурсів — посібників з SQL, шпаргалок та довідників.\nMySQL\nHigh Performance MySQL: Proven Strategies for Operating at Scale 4th Edition (Silvia Botros, Jeremy Tinley)\nВидання, оновлене з урахуванням останніх досягнень в області хмарного та автономного MySQL, продуктивності InnoDB, а також нових функцій та інструментів. У ньому описують передові методи роботи з MySQL — від встановлення цілей рівня обслуговування до проєктування схем, індексів та запитів до налаштування вашого сервера, операційної системи та обладнання.\nАвтор ділиться знаннями про:\nархітектуру MySQL, включаючи ключові факти щодо її механізмів зберігання;\nяк конфігурація сервера працює з вашим обладнанням, варіанти розгортання;\nяк продуктивність запитів частиною процесу доставки програмного забезпечення;\nпокращення реплікації та високої доступності MySQL;\nпорівняння різних пропозицій MySQL в керованих хмарних середовищах;\nповної оптимізації стека MySQL;\nавтоматизації процесів.\nEfficient MySQL Performance: Best Practices and Techniques 1st Edition (Daniel Nichter)\nКнига розрахована на середній рівень і не торкається глибоких внутрішніх аспектів технології, необхідних адміністраторам баз даних. Автор роз’яснює, як застосовувати передовий досвід та методи, які безпосередньо впливають на продуктивність MySQL.\nКнига допоможе розібратися, як підвищити продуктивність, аналізуючи виконання запитів, індексуючи загальні пропозиції SQL та об’єднання таблиць, оптимізуючи доступ до даних та розуміючи найважливіші показники MySQL.\nТакож тут розповідається, як реплікація, транзакції, блокування рядків та хмара впливають на продуктивність MySQL.\nMySQL Cookbook 4th Edition (Sveta Smirnova, Alkin Tezuysal)\nНаслідки популярності MySQL — нескінченний потік питань, як розв’язувати конкретні проблеми, пов’язані з даними. Автори створили більше 200 «рецептів», які охоплюють потужні функції як MySQL 5.7, так і MySQL 8.0. Книга орієнтована і на початківців, і на досвідчених розробників баз даних та вебзастосунків.\nВидання допоможе розібратися, як:\nпід’єднатися до сервера, надсилати запити та отримувати результати;\nотримувати дані із сервера MySQL;\nзберігати, витягувати та керувати рядками;\nпрацювати з датами та часом;\nсортувати результати запиту та створювати зведення;\nоцінювати характеристики набору даних;\nвиконувати основні завдання адміністрування MySQL;\nрозуміти основи моніторингу MySQL\nOracle\nOracle Database Performance Tuning: Політика Solution Guide Series For Upgrading Oracle Databases (Gary Gordhamer)\nOracle — менш популярна база даних, ніж MySQL, тому знайти нову літературу з актуальною інформацією складніше. Це — одне з найсвіжіших видань, в якому йтиметься про останню версію Oracle.\nТут описуються підходи, інструкції, приклади, визначення, передовий досвід, викладені уроки та приклади сценаріїв, які дадуть базові знання, необхідні для налаштування баз даних Oracle 19c. Основна увага в книзі приділяється налаштуванню продуктивності в областях SQL, параметрам ініціалізації, тестування навантаження, аналізу AWR, профілів SQL, оптимізатора і паралелізму.\nПоки що цю книгу можна купити тільки в друкованій версії на Amazon, тому доведеться заморочитися з доставленням або зачекати, коли вона з’явиться в електронній версії.\nPractical Oracle SQL: Mastering the Full Power of Oracle Database 1st ed. Edition (Kim Berg Hansen)\nМенш свіжа, але актуальна книга про мову Oracle SQL для тих, хто вже знайомий із основами бази даних. Тут є багато прикладів, як писати більш розвинений SQL, а саме:\nзведення рядків до стовпців та стовпців до рядків;\nрекурсія в SQL із пропозиціями MODEL та WITH;\nпрогнозування за допомогою лінійних регресій;\nзіставлення шаблону рядка для групування чи розподілу рядків;\nвикористання MATCH_RECOGNIZE як механізм обробки рядків.\nУ кожному прикладі розглядається процес, починаючи з більш простих операторів SQL і поступово перетворюючи ці оператори на складніші.\nOracle Database Programming with Java: Ideas, Designs, та Implementations 1st Edition (Ying Bai)\nУ посібнику розбираються принципи роботи з Oracle Database XE 18c: автор докладно описує практичні аспекти та застосування програмування баз даних на Java з прикладами. Теми Java Web Applications та Java Web Services розглядаються на реальних прикладах проєктів, щоб показати, як вирішувати проблеми програмування баз даних середовища Apache NetBeans IDE.\nУ книзі представлені:\nреальний зразок бази даних CSE_DEPT створений за допомогою Oracle SQL Developer;\nпокрокові докладні ілюстрації та описи того, як спроєктувати та побудувати практичну реляційну базу даних;\nбазові та просунуті методи програмування баз даних Java;\nоновлені методи програмування робочого столу Java та веб-баз даних, такі як Java Enterprise Edition 7, JavaServer Pages, JavaServer Faces, Enterprise Java Beans, вебзастосунки та вебслужби, включаючи вебсервери GlassFish та Tomcat;\nактуальні API-інтерфейси JDBC та драйвери JDBC, а також пояснення до коду;\nпрактичні завдання.\nPostgreSQL\nPostgreSQL 14 Administration Cookbook: Over 175 наданий recipes for database administrators to management enterprise databases effectively (Simon Riggs)\nЩе одна книга з кулінарною назвою та рецептами вирішення технічних проблем, яка навчить адмініструванню, відстеженню та реплікації баз даних PostgreSQL 14.\nКлючова особливість:\nінформація про усунення неполадок та вирішення будь-яких проблем з адмініструванням та управлінням у PostgreSQL 14;\nекспертні методи моніторингу, тонкого налаштування та захисту бази даних;\nнавчання впровадженню ефективної реплікації задля забезпечення високої доступності з допомогою PostgreSQL 14.\nCreating your own function in PostgreSQL database: A Tutorial for Beginners (Djoni Darmawikartа)\nУ базі даних PostgreSQL ви можете створити власні функції, використовуючи процедурну мову PL/pgSQL. У той час, як SQL завжди обробляє набір рядків, PL/pgSQL може обробляти по черзі рядок за рядком. Він також надає можливості процедурної мови, такі як if-then-else та цикли.\nУ книзі є інструкція з прикладами, яка допоможе навчитися створювати функції та застосовувати їх у реальному проєкті.\n ','2022-12-03 00:18:18','2022-12-03 00:18:18'),(133,'«Не відмовлюся ніколи»: топ-5 платних підписок для розробника, про які ви не пошкодуєте','Оленка Пилипчак\nРедактор у Highload','Можете дозволити собі Netflix? Значить і ці підписки не надто вдарять по вашій кишені.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТак вважає дата-саєнтист Френк Ендрейд. У цій статті він ділиться своїми платними підписками, які не планує скасовувати. Передаємо йому слово.\nРаніше мені не подобалась ідея передплачувати щось. Абонемент лише спочатку здається дешевим, але у довгостроковій перспективі це досить дорого. Однак пізніше я зрозумів, що деякі з сервісів варті кожного витраченого на них пенні, особливо якщо ви програміст.\nНижче я перерахую ті, від яких я не планую відмовлятися в жодному разі.\n1\n Доменне ім’я та підписка на хостинг\nНезалежно від того, займаєтеся ви веброзробкою чи ні, вам потрібен сайт! Навіть якщо ви щойно почали вчитися кодити. Все одно сайт знадобиться у майбутньому: ви будете показувати клієнтам портфоліо, розвивати особистий бренд, стартап чи бізнес.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЦе не надто дорого. Щоб створити простий сайт, не обов’язково вміти писати код: можна просто використати WordPress. А ще вам знадобиться доменне ім’я та хостинг. Вони не дорожчі за передплату на Netflix.\nНавіть якщо ви ще вагаєтесь, чи не зарано запускати власний сайт, все одно раджу купити доменне ім’я. Поки ви думаєте, хтось інший може зареєструвати вашу назву. \nОсь так виглядає доменне імя: https://your-name.com/\nЯкщо хтось інший візьме назву вашої компанії або повне ім’я, вам доведеться вигадувати щось інше, чи відмовитись від .com і погодитися на неоковирні .io, .ai, .xyx тощо. Так собі перспектива.\nВи можете отримати доменне ім’я та хостинг на Namecheap, Hostinger, тощо (якщо ви обираєте Hostinger, додайте код купона desbloquear, щоб отримати знижку).\n2\n Менеджер паролів\nПрограмістам не варто зберігати свої облікові дані, ключі API або пароль Wi-Fi у notepad. Будь-хто може отримати доступ до нього! Тому потрібен менеджер паролів, щоб цінна інформація не потрапила у мережу.\nТак, звісно, ви можете закодувати секретні ключі або використовувати інші варіанти. Але іноді це не надто практично, тому менеджер паролів — хороший варіант.\nДеякі менеджери паролів, наприклад, 1PassWord, навіть працюють з інструментами розробника. Ця опція спрощує та захищає робочі процеси. Менеджер паролів дозволяє безпечно генерувати, керувати та мати доступ до SSH-ключів, API tokens та інших секретів для технічних робочих процесів (але здається, поки що це бета-режим).\n3\n Підписка на онлайн-курси\nКоли ви востаннє витрачали гроші на онлайн-курс, який так і не завершили? Можливо, матеріал був занадто складним, або ви були не в захваті від викладача. Якщо таке з вами траплялось, раджу спробувати систему підписки. Тоді ви зможете переглядати різні курси та вивчати лише ті теми, які вам цікаві, а не весь курс. І це обійдеться вам значно дешевше.\nНаступного разу не витрачайте час на читання відгуків студентів і перегляд «чесних оглядів курсів» від користувачів YouTube. Просто придбайте підписку та самі оцініть, наскільки хороший чи поганий курс. Зараз багато хто пропонує такий сервіс.\n4\n Підписка на електронні книги\nЯ часто рекомендую книги для програмістів: наприклад, для вивчення Python і Data Science. Але якщо ви купуватимете їх усі, то витратите дуже багато грошей. Для тих, кому зручніше мати паперову книгу, ця порада неактуальна, але якщо ви плануєте придбати електронну версію, я би радив купити підписку. Наприклад, Scribd. Це як Netflix у сфері електронних книг.\nЯкщо ви шукатимете Python на Scribd, ви знайдете кілька хороших книг для вивчення цієї мови. Звісно ж, там не буде геть усіх книг (так само, як і на Netflix є не всі фільми, які б вам хотілось переглянути), але загалом на Scribd досить хороша підбірка для програмістів.\nКрім програмування, ви також можете знайти там книги про підприємництво, технології та інші теми, корисні для вашої кар’єри.\n5\n Посібники/статті з програмування преміум-класу\nЯ купив абонемент на платформі Medium: тут можна знайти тисячі високопрофесійних статей і посібників із програмування, Data Science тощо. Так, я знаю, що на YouTube також є багато корисної інформації. Але, з мого досвіду, там бракує матеріалів з деяких тем.\nЦе особливо помітно, коли вам потрібно знайти відповідь на якесь складне чи вузькоспеціалізоване питання. Чому? Все просто, автори YouTube зазвичай створюють контент, який максимізує їхні прибутки та дає хороше охоплення.\nТакож більше шансів знайти потрібну вам інформацію у блозі, тому що створювати текстовий контент легше, ніж знімати відео. Звісно, якісний матеріал вартує грошей, тож ці програмісти/автори отримують частину від вашої оплати абонементу. \nАвтор: Френк Ендрейд\nТекст адаптувала Євгенія Козловська','2022-12-03 00:18:34','2022-12-03 00:18:34'),(134,'Де зберігати файли: 8 найкращих альтернатив Google Drive у 2022 році','Оленка Пилипчак\nРедактор у Highload','Якщо ви задумувались про альтернативу Google Drive, то в цій статті знайдете 8 цікавих варіантів. \nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nБагато хто використовує Google Drive як хмарне сховище, бо він має інтеграцію з Gmail. За словами віце-президента Google Хав’єра Солтеро, у 2019 році Google Workspace використовувало 2 мільярди користувачів. І ця цифра лише зростатиме, бо збільшується популярність віддаленої роботи.\nЗвісно ж, Google Drive — чудове рішення, функціональне та просте. Але існують і інші, і деякі з них дуже хороші: ви можете обрати найзручніший для себе варіант. \nЗміст:\n1. Що таке Google Drive\n2. Чому ми взагалі говоримо про альтернативи Google Drive\n2.1 Ціна\n2.2 Щоденний ліміт завантаження\n2.3 Плутанина в спільних теках\n3. 8 найкращих альтернатив Google Drive\n3.1 OneDrive\n3.2 Dropbox\n3.3 pCloud\n3.4 Box\n3.5 iCloud Drive\n3.6 IceDrive\n3.7 Internxt\n3.8 NordLocker\n4. Висновки\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nПередаємо слово автору цієї добірки — Леону Цуккіні, фаундеру застосунку для продуктивності Curiosity.\nАле перед тим, як розповідати про альтернативи, коротко охарактеризуємо Google Drive.\nЩо таке Google Drive\nGoogle Drive — це хмарний сервіс зберігання та синхронізації, розроблений Google.\nВін дозволяє зберігати файли в інтернеті та отримувати до них доступ зі смартфона, планшета чи комп’ютера.\nGoogle Drive є частиною Google Workspace (раніше – G-Suite), що має понад 2 мільярди користувачів. І це не дивно, бо вам пропонують:\nGmail;\n15 Гб безкоштовної пам’яті;\nGoogle office: Docs (тексти), Sheets (таблиці), Slides (презентації);\nмобільну версію та версію для ПК;\nонлайн- та офлайн- режими (плюс вибір синхронізації);\nнайсучасніші інструменти для взаємодії.\nЧому ми взагалі говоримо про альтернативи Google Drive\nЄ кілька вагомих причин. Давайте розглянемо їх.\nЦіна\nGoogle Drive пропонує 15 Гб безкоштовно: ви можете використати їх для Gmail та Google Photos. Цього цілком достатньо для пересічних користувачів, що вряди-годи працюють з документами та фотографують друзів. Але якщо вам потрібно зберігати багато різної інформації, в тому числі і фото, то безкоштовні гігабайти швидко закінчуються. \nХоча ціни цілком прийнятні, існують і дешевші варіанти, які можуть спростити вам життя, якщо ви плануєте зберігати багато даних протягом тривалого часу.\nЩоденний ліміт завантаження\nВи можете завантажити на Google Drive тільки 750 Гб на день. Щойно ви досягнете цього ліміту, вас автоматично заблокують і протягом цього дня ви уже не зможете завантажити щось інше. \nДля більшості це не проблема, але якщо ви працюєте з відеофайлами, це може бути дуже незручно.\nПлутанина в спільних теках\nКожен, хто працював з Google Drive у команді, знає, наскільки інколи важко знайти спільну теку. З незрозумілих причин ці теки можуть з’являтися в трьох різних місцях: My Drive, Shared Drives, чи Shared with me.\nЯ ще не зустрічав нікого, хто б вважав це інтуїтивно зрозумілим.\n8 найкращих альтернатив Google Drive\nЩоб допомогти вам визначитися, ми дослідили вісім найкращих альтернатив Google Drive. \nПам’ятайте, що майже у всіх компаніях відрізняються ціна на особисте та бізнесове використання: тут ми розглядали перший варіант.  \n1\nOneDrive\nOneDrive — хмарне сховище від Microsoft, розраховане як на пересічних користувачів, так і на бізнес-клієнтів. Його запустили у 2007 році і він багато у чому схожий на Google Drive.\nOneDrive допомагає зберігати документи в хмарі, ділитися ними та співпрацювати в режимі реального часу, а також синхронізувати інформацію. Корпорація Майкрософт завжди багато уваги приділяла корпоративним клієнтам, тому OneDrive має багато функцій безпеки.\nОднак ключова перевага OneDrive — інтеграція з пакетом Microsoft Office. Word, Excel, PowerPoint, OneNote і Teams часто використовують за замовчуванням для роботи. Тому можна звернути увагу на OneDrive, бо він добре з ними працює.\nПереваги OneDrive:\nхороша інтеграція з Microsoft Office O365;\nшвидка синхронізація файлів;\nонлайн- і офлайн-режими (включно з вибором синхронізації);\nбагато різних функцій;\nспільна робота над документами в реальному часі.\nНедоліки OneDrive:\nобмежений контроль версій файлів.\nЦіни OneDrive\nУ безкоштовному тарифному плані OneDrive ви можете використовувати лише 5 Гб пам’яті, але преміум-опції цілком доступні. Особливо враховуючи те, що OneDrive входить у пакет, який ви отримуєте після передплати Microsoft 365.\n2\nDropbox\nDropbox трохи дорожчий за інші альтернативи Google Drive. Але він бездоганно працює з Windows, Mac, iOS і Android, зберігає резервні копії ваших файлів в інтернеті та синхронізує їх на всіх ваших пристроях.\nDropbox простий у користуванні та має декілька унікальних функцій: наприклад, електронний підпис. Також у нього є власний інструмент редагування Dropbox Paper, що схожий на Google Docs або Word.\nЯк і Google Drive і OneDrive, Dropbox розрізняє особисте та бізнес-використання.\nПереваги Dropbox:\nпідтримка інтеграцій;\nпрограми для багатьох операційних систем;\nчисленні функції для обміну файлами;\nавтономний режим (включно з вибіром синхронізації);\nінструмент для цифрового підпису.\nНедоліки Dropbox:\nпорівняно дорого;\nнемає інтегрованого офісного пакета.\nЦіни Dropbox\nБезкоштовний варіант має 2 Гб безкоштовного сховища. Преміум (персональні) плани починаються від 9,99 євро на місяць за 2 ТБ пам’яті.\n3\npCloud\npCloud — швидкий, безпечний і, головне, доступний. Він пропонує zero knowledge шифрування, тому ваші файли ніколи не зберігаються незашифрованими.\npCloud дозволяє ділитися файлами, запросивши когось або створивши посилання для спільного використання.\nЄ і цікаві функції: це єдиний сервіс у списку, який має не лише контроль версій файлів, але й спеціальний медіаплеєр. Однак у нього відсутній інтегрований офісний пакет, і пошук доступний лише на сайті (не на вашому комп’ютері).\nПереваги pCloud:\nвисокий рівень захисту;\nдовічні варіанти ціноутворення (див. нижче);\n10 Гб безкоштовного сховища;\nінтегрований медіаплеєр.\nНедоліки pCloud:\nпошук доступний лише на сайті;\nбез офісного пакету;\nбез додаткових сервісів.\nЦіни pCloud\npCloud пропонує цікавий варіант для зберігання інформації: за 350 євро ви можете купити 2 ТБ хмарного сховища назавжди. Якщо ви плануєте довго зберігати файли, то така пропозиції виглядає дуже привабливо.\nТакож ви можете отримати безкоштовний обліковий запис із 10 Гб пам’яті та місячні плани на 500 Гб за 3,99 доларів на місяць і 2 ТБ за 7,99 доларів на місяць.\n4\nBox\nBox орієнтується переважно на бізнес: він добре інтегрований з Microsoft і Google, що полегшує користувачам створення документів Microsoft Office або Google Workspace в додатку.\nВін також підтримує багато сторонніх інтеграцій, які можуть бути корисними для бізнесу.\nBox має найвищий рівень безпеки та зручні додаткові функції. Однак для багатьох з них, наприклад, для керування закритими ключами, потрібна підписка. А ще він коштує дорожче, ніж інші сервіси з нашого списку. Крім того, у нього суворіші обмеження на розмір завантажуваних файлів.\nПереваги Box:\nнайвищий рівень безпеки;\nінтегрується з багатьма сторонніми сервісами;\nзручний для командної роботи;\nпростий у використанні.\nНедоліки Box:\nпорівняно дорого;\nобмежені можливості для користувачів.\nЦіна Box\nBox пропонує безкоштовні особисті та бізнес-рахунки. Безкоштовний план передбачає 10 ГБ вільного місця, але можна завантажувати файли не більше 250 Мб. Платний обліковий запис Personal Pro коштує 9 євро на місяць, має 100 Гб і дозволяє завантажувати до 5 ГБ. Ціна на бізнес-плани починається від 13,50 євро на місяць.\n5\niCloud Drive\niCloud Drive може зацікавити тих, хто працює в екосистемі Apple.\nЦей сервіс пропонує бездоганну інтеграцію та резервне копіювання на всіх пристроях. Фактично, Apple підштовхує користувачів до iCloud для резервного копіювання своїх файлів і даних телефону. Якщо ви вже використовуєте iCloud для резервного копіювання даних телефону, можливо, варто розглянути його і як варіант хмарного сховища.\nПримітка: iCloud Drive та iCloud — це не одне й те саме, але вони тісно пов’язані.\niCloud також дозволяє легко ділитися медіафайлами через посилання iCloud або спільний альбом. Крім того, ви можете завантажувати всі типи файлів в iCloud і зберігати, попередньо переглядати, ділитися ними та отримувати доступ до них на будь-якому пристрої, підключеному до iCloud. \n  Але iCloud вимагає від користувачів Apple ID, і найкраще працює саме з пристроями Apple і офісним пакетом Apple Work.\nПереваги iCloud:\nповна інтеграція з екосистемою Apple;\nзручний інтерфейс;\nгарний застосунок для фотографій;\nхороша інтеграція з мобільним та ПК.\nНедоліки iCloud:\nнемає підтримки Android;\nApple ID необхідний для перегляду файлів, які надіслали в iCloud;\nофісний пакет — Apple Work.\nЦіни iCloud\nВи можете придбати iCloud як окрему підписку або як частину пакету Apple One. Усі користувачі iCloud отримують 5 ГБ безкоштовного сховища: цього, як правило, вистачає для особистого користування.\nВартість окремих пакетів починається від 0,99 євро на місяць за 50 ГБ, 2,99 євро на місяць за 200 ГБ і 9,99 євро на місяць за 2 ТБ.\n6\nIceDrive\nIceDrive менш відомий, але у нього є декілька цікавих функцій, високий рівень безпеки та приваблива ціна. Він простий у використанні та підтримує синхронізацію файлів, керування версіями та спільний доступ. Він також підтримує шифрування zero-knowledge, тому ніхто не зможе отримати доступ до ваших файлів.\nКористувачі Windows оцінять IceDrive, оскільки він чудово інтегрується з Windows File Explorer завдяки диску віртуальної синхронізації. З іншого боку, IceDrive не інтегрується з Microsoft 365 або Google Workspace.\n  Переваги IceDrive:\nконкурентоспроможна ціна;\nзручний інтерфейс;\nпідтримує попередній перегляд зашифрованих файлів;\nвіртуальний диск.\nНедоліки IceDrive:\nобмежені варіанти підтримки;\nвіртуальний диск лише для Windows;\nнемає підтримки для деякого програмного забезпечення, наприклад Google Workspace.\nЦіни IceDrive\nIceDrive пропонує безкоштовний обліковий запис із 10 Гб пам’яті та 3 Гб щоденної пропускної здатності.\nЄ три варіанти підписки на 150 Гб, 1 ТБ і 5 ТБ пам’яті за ціною 1,83 євро, 4,17 євро та 15,00 євро відповідно. Як і в pCloud, також пропонують довічні плани.\n7\nInternxt\nInternxt — це відносно новий хмарний сервіс, який запустили наприкінці 2020 року. \nНовий учасник ринку не пропонує багато унікальних функцій. Однак він багато уваги приділяє конфіденційності та безпеці, використовуючи шифрування zero-knowledge.\nПереваги Internxt:\nпростий інтерфейс;\nувага до безпеки даних.\nНедоліки Internxt:\nбазові функції;\nчастина користувачів каже, що він досить повільний.\nЦіни Internxt\nУ безкоштовному плані вам пропонують 10 Гб пам’яті. Але спочатку ви маєте лише 2 Гб. Лише після виконання певних завдань, як-от залучення друзів, підписка на розсилку новин компанії, можна безкоштовно збільшити цей об’єм.\nОкрім цього, доступно кілька платних планів.\n8\nNordLocker\nNordLocker — це безпечне хмарне рішення для зберігання, розроблене Nord Security, компанією, що стоїть за популярною віртуальною приватною мережею NordVPN.\nЦе сервіс шифрування, але його головною функцією є спільний доступ, який ви можете використовувати незалежно від того, безкоштовний у вас тариф чи преміум.\nПереваги NordLocker:\nпростий у використанні;\nкористувачі можуть обмінюватися зашифрованими файлами;\nінтегрується з Dropbox для спільного використання;\nзабезпечує найвищий рівень безпеки у своєму класі.\nНедоліки NordLocker:\nнемає підтримки для iOS або Android;\nобмежені додаткові функції та інтеграція (редагування та ін.).\nЦіни NordLocker\nNordLocker пропонує безкоштовний та преміум-плани. Усі користувачі можуть завантажити програму та зашифрувати свої файли безкоштовно. Клієнтам, які хочуть використовувати хмарне сховище, потрібно буде перейти на преміум-план за 7,99 доларів на місяць.\nВисновки\nGoogle Диск пропонує гарну службу хмарного зберігання даних із чудовими функціями та конкурентоспроможною ціною.\nОднак це далеко не єдиний ресурс для зберігання інформації. Всім альтернативам є, чем зачепити — будь то розширені функції, сумісність між пристроями, ціноутворення чи зосередженість на безпеці. Обирати вам!\nАвтор: Леон Цуккіні\nТекст адаптувала Євгенія Козловська','2022-12-03 00:18:52','2022-12-03 00:18:52'),(135,'Як зарядити смартфон без електрики: добірка компактних гаджетів','Анастасія Пономарьова\nЖурналістка Highload','Що не день, то приліт ракет рф по електростанціях і песимістичні прогнози від уряду України, що зі світлом “все погано”. А значить настав час запасатися гаджетами, які зарядять хоча б смартфони та ліхтарики в умовах блекауту.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nОтже, ви — мешканець квартири, і у вас немає можливості користуватися дизельними генераторами або поставити на будинок вітряк (так, вітрогенератори також продають для побутових потреб, ціна питання — від 13 тис. грн). Відкинемо дивні лайфхаки типу “постукайте по акумулятору” або “зарядіть від лимона”: вам потрібні пристрої, які перетворять сонячне світло, тепло чи силу тертя в електроенергію.\nПодивимося, що пропонує ринок.\nСонячні батареї\nМожна використовувати компактні акумулятори на сонячних батареях — їх зручно заряджати на підвіконні або на балконі. Ціни через підвищений попит на них скачуть, вартість варіюється від 2 до 5 тисяч грн, залежно від місткості акумулятора та виробника.\nТакож підійдуть повербанки із сонячними панелями, ціни стартують від 1,5 тис. грн за пристрій із місткістю батареї 10 000 mAh. Але більше вам, можливо, і не знадобиться — взимку похмурі та короткі дні, повербанк просто не зарядиться до кінця.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nПовербанк із сонячною панеллю, ілюстрація\nТакож у туристичному магазині можна взяти радіо або ліхтарик для кемпінгу із сонячними батареями – як правило, вони мають порт USB для заряджання дрібної електроніки. Тільки не забудьте купити перехідник, що підходить для вашого смартфона.\nЧитайте також:  Готуємось до зими без опалення: популярні та нестандартні способи зігрітися\nДинамо-машини\nЗараз в інтернеті активно розбирають ручні генератори для зарядки гаджетів з AliExpress, ціни — від 2 до 5 тисяч грн (адже чекати на 3 місяці доставлення — не варіант). Працюють вони так: крутиш ручку і всередині пристрою за принципом електромагнітної індукції генерується електроенергія. Щоправда, надійність та потужність ручного генератора під питанням.\nРучний генератор\nАльтернатива — ті самі повербанки, ліхтарі та  радіо з вбудованими динамо-машинами. Якщо є велосипед і вас не лякає перспектива кататися в холодну пору року, можете спробувати встановити на нього динамо-машину з USB-портом. Чим інтенсивніше крутите педалі, тим краще заряджається смартфон — подвійна користь! \nТеплогенератор\nЩе одна корисна знахідка у туристичному магазині: автономний пальник з акумулятором. Виносите на вулицю, закидає всередину дрова, шишки або спеціальні брикети, грієте воду або смажите м’ясо, тим часом тепло перетворюється на електрику. Пристрій компактний, важить всього 1 кг, місткість акумулятора — 3200 mAh, ціна — близько 7 тисяч грн.\nКотел-генератор, фото Gadget Flow\nАвтомобільний інвертор\nАвтомобільні інвертори перетворюють струм 220 В і дозволяють зарядити ноутбук. Стартова ціна — 1,5 тисячі грн. Нема машини? Не біда, але тоді доведеться сильно витратитися на покупку автомобільного акумулятора та зарядного до нього.\nВсі ці пристрої не скасовують необхідність придбати звичайний повербанк із місткістю від 20 000 mAh — такий в змозі зарядити навіть ноутбук.\nІ, звичайно, потрібно економити: щоб заряд тримався довше, відключіть усі “зайві” функції — bluetooth, Wi-Fi, зменште яскравість до мінімуму і відключайте смартфон, коли ним не користуєтеся. Адже в умовах тривалого блекауту не так страшно залишитися без світла, як без зв’язку з близькими та новин. \n ','2022-12-03 00:18:53','2022-12-03 00:18:53'),(136,'Підробіток та практика: 5 платформ для фрілансу в тестуванні','Анастасія Пономарьова\nЖурналістка Highload','Якщо потрібно попрактикуватися в тестуванні, отримати комерційний досвід для резюме або банально заробити, вам знадобиться добірка майданчиків для фрілансу від QA-інженера та блогера Артема Русова.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nTestlio\nTestlio — інтегрована платформа для тестування, де перевірку програмного забезпечення виконують фрілансери. Замовлення надходять на всі форми та типи програмного забезпечення — від мобільних застосунків та платформ SaaS до пристроїв віртуальної реальності.\nКлієнтами Testlio є різних масштабів компанії, іноді дуже великі: American Express, CBS, Microsoft, NBA, Netflix і SAP. Тестувальникам-фрілансерам обіцяють гнучкий графік роботи та погодинну щотижневу оплату через PayPal або Payoneer.\nТут можна проводити:\nфункціональне тестування;\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nавтоматизацію тестування;\nтестування локалізації;\nтестування мобільного застосунку;\nтестування у прямому ефірі;\nюзабіліті-тестування;\nдослідницьке тестування;\nтестування платежів;\nтестування розташування;\nрегресійне тестування;\nтестування доступності;\nAR/VR-тестування;\nтестування реального устрою.\nРаніше ми писали:  Готуємось до першого інтерв’ю: 45 запитань для QA Manual\nTestBird\nТут так само можна тестувати програмне забезпечення на будь-який смак — мобільні застосунки, вебсайти, навіть браузерні онлайн-ігри. Працювати можна на смартфоні, ПК чи планшеті. Переважно фрілансерам доводиться шукати дефекти в ПЗ, що вже вийшло в реліз, рідше — тестувати продукт на стадії розробки.\nРозмір виплати залежить від складності завдання, за звичайне юзабіліті — від 15 до 20 EUR. Є додаткова оплата за кожен знайдений та підтверджений дефект, а за справді серйозні та критичні помилки обіцяють великі премії.\nUsertesting\nПлатформа UserTesting залучає фрілансерів для перевірки нових вебсайтів та мобільних програм за плату у розмірі $10 за тест. Оскільки тести в середньому займають близько 20 хвилин, це відповідає хорошій погодинній оплаті за роботу вдома.\nІлюстрація\nЯкщо ви досвідчений та уважний тестувальник, можете приєднатися до програми UserTesting HackerOne Bug Bounty та шукати помилки у самій платформі. За знайдену вразливість менеджери обіцяють виплатити до $3000.\nBetatesting\nТут можна брати участь у бета-тестуванні нових програм, вебсайтів та іншого програмного забезпечення. Вимога до тестувальників — бути старше 18 років, мати ПК і вільно володіти англійською. Заробити можна $10-20 за тест, оплата проводиться через PayPal за 7 днів після закінчення проєкту.\nОднак у Betatesting підкреслюють, що ця робота не годиться як постійна, а лише як підробіток: ви можете отримати до 5 пропозицій на місяць, а можете взагалі нічого не отримати.\nPlaybook\nПлатформа пропонує фрілансерам проводити тестування, яке відповідає профілю, але проєкт фахівці обирають самостійно. Тут можна проводити:\nнемодеровані дослідження: ви записуватимете свій екран і голос, відповідаючи на запитання, без присутності дослідника (10 — 20 хвилин);\nмодерована жива розмова: поговоріть з дослідником віч-на-віч у призначений час (30, 60 або 90 хвилин);\nсортування карток: розсортуйте картки за групами, які вам зрозумілі (2-10 хвилин);\nтест дерева: ви виконуватимете завдання з пошуку контенту на вебсайт (2-10 хвилин).\nОплата розподіляється так:\n$10 / 10-20-хвилинна немодерована сесія;\n$30 / 30-хвилинне модероване інтерв’ю;\n$60 / 60-хвилинне модероване інтерв’ю;\n$90 / 90-хвилинне модероване інтерв’ю;\n$2 за сортування карток;\n$2 за деревоподібний тест.','2022-12-03 00:19:09','2022-12-03 00:19:09'),(137,'Від NASA до Spotify: 5 крутих безкоштовних API 2022 року','Оленка Пилипчак\nРедактор у Highload','Програмні інтерфейси додатків (Application Programming Interfaces), найчастіше їх називають API, — важливий інструмент, на якому працюють багато програм та сайтів.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПо суті ці компоненти працюють «за кулісами», щоб дозволити авторизованим додаткам (а в деяких випадках і окремим користувачам) доступ до даних та можливість взаємодіяти із зовнішніми службами.\nНа щастя для розробників, існує безліч безкоштовних та багаторівневих API, які можна інтегрувати у власні апки.\nРозробник Майк Вулф вирішив дослідити п’ять API та подивитися, що вони можуть запропонувати.\n1\nNASA Open APIs\nВідкриті API-інтерфейси NASA — це набір з більш ніж дюжини API-інтерфейсів, які надають тонни інформації про погоду, супутникову інформацію, зображення тощо.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nПісля того, як ви отримали безкоштовний ключ авторизації, ви отримаєте обмеження до 1000 запитів на годину.\nНайулюбленіше API Майка в цій колекції — Astronomy Picture of the Day.\nПриступимо:\nimport requests\n\nurl = \"https://api.nasa.gov/planetary/apod?api_key=<YOUR_API_KEY>\"\nresponse = requests.get(url)\nprint(response.json())\nJSON-відповідь / Натисніть, щоб подивитися\nЗображення NASA, яке вивелося на екран / Натисніть, щоб подивитися\n2\nOpen Library APIs\nЩе одна безкоштовна колекція API — Open Library APIs. Ця колекція дозволяє шукати все, що пов’язане із книгами. Вона навіть допомагає знаходити книги, авторів, теми (і не тільки), використовуючи назви, ISBN, OCLC та LCCN.\nВи можете навіть шукати текст!\nПриступимо:\nimport urllib\nimport requests\n\nquery = \"The Pragmatic Programmer\"\nquery = urllib.parse.quote_plus(query)\n\nurl = f\"http://openlibrary.org/search.json?title={query}\"\nresponse = requests.get(url)\nprint(response.json())\nРезультат / Натисніть, щоб подивитися\n3\nCoin API\nCoin API не повністю безкоштовний, але має безкоштовну версію, яку ви можете використовувати, щоб дізнатися останні ринкові дані щодо криптовалют.\nУ безкоштовній версії ваш ліміт — лише 100 запитів на день.\nПочнемо:\nimport requests\n\nurl = \"https://rest.coinapi.io/v1/exchangerate/BTC/USD\"\nheaders = {\"X-CoinAPI-Key\" : \"<YOUR_API_KEY>\"}\n\nresponse = requests.get(url, headers = headers)\nprint(response.json())\nРезультат / Натисніть, щоб подивитися\n4\nNews API\nЩе один API, який теж не повністю безкоштовний, але з безкоштовним рівнем — це News API.\nЦей чудовий інструмент допомагає отримувати новини з авторитетних ЗМІ та блогів. Знову ж таки, якщо ви вирішите використовувати безкоштовну версію, отримаєте обмеження щодо кількості запитів, які ви можете надіслати, а також не зможете отримувати нові статті в режимі реального часу.\nПриступимо:\nimport requests\n\nurl = \"https://newsapi.org/v2/everything?q=cryptocurrency&apiKey=<YOUR_API_KEY>\"\nresponse = requests.get(url)\nprint(response.json())\nРезультат / Натисніть, щоб подивитися\n5\nAPI Spotify\nБажаєте покращити свої враження від Spotify? Не шукайте далі, тому що вони теж мають API. Отримання client id та app secret для вашої апки займе лише кілька хвилин.\nТепер ви можете використовувати безліч ендпоінтів для отримання інформації про виконавців, альбоми тощо. Мало того, ви також можете додавати/видаляти/оновлювати елементи у своїх плейлистах.\nДля всіх розробників Python є модуль Spotipy, який ще більше полегшує взаємодію з Spotify API.\nПогнали:\nimport requests\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nclient_id = \"<YOUR_CLIENT_ID>\"\nclient_secret = \"<YOUR_CLIENT_SECRET>\"\n\nclient_credentials_manager = SpotifyClientCredentials(client_id = client_id, client_secret = client_secret)\nspot = spotipy.Spotify(client_credentials_manager = client_credentials_manager)\n\nquery = \"1812 Overture\"\nsearch_result = spot.search(query, limit = 10, offset = 0, type = \'track\', market = None)\n\nprint(search_result)\nРезультат / Натисніть, щоб подивитися\nБонус: Bored API\nМета цього Bored API — запропонувати заняття, якщо вам нудно:\nimport requests\n\n\nurl = \"https://www.boredapi.com/api/activity/\"\nresponse = requests.get(url)\nprint(response.json())\nРезультат / Натисніть, щоб подивитися\nУспіхів!','2022-12-03 00:19:28','2022-12-03 00:19:28'),(138,'Готуємося до зими без опалення: популярні та нестандартні способи зігрітися','Анастасія Пономарьова\nЖурналістка Highload','Цього року зимівля у теплих країнах для більшості айтівців скасовується, а опалення у квартирах буде прикручено до мінімуму. Крім того, дії русні  натякають, що сидіти без світла (а отже, і без опалення) доведеться регулярно.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nСпираючись на методи інтернет-експертів та досвід виживання без комунікацій у блокадному місті, ми підготували для вас велику добірку.\nПерероблення житла\nВідразу закриємо питання «капітальної» підготовки до зими: якщо є час і фінансова можливість, утепліть стіни квартири, заскліть балкон (вибирайте багатокамерні склопакети), зробіть теплу підлогу. Це збереже тепло у квартирі — вона буде повільніше остигати, якщо відключиться електрика і тепло, а підлога стане додатковим джерелом опалення в інший час.\nОбігрів кімнати\nНайекономніші в плані споживання енергії та ефективності нагрівання кімнати — обігрівачі конвекторного типу. Їх можна знайти в широкому асортименті в будь-якому магазині електроніки, ціни коливаються в районі 2,5–4 тисячі гривень, залежно від площі обігріву та потужності.\nКраще подумаємо, як обігріти кімнату без електрики. По-перше, можна купити до обігрівача лінійно-інтерактивний UPS (джерело безперебійного живлення) та акумулятор на кшталт BanderaPower: на кілька годин роботи цього вистачить. Від них також можна заряджати ноутбук і працювати.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nПо-друге, знайти енергонезалежний газовий конвектор: він розпалюється вручну п’єзоелектричним елементом і надалі безперервно підтримує горіння. Мінус — вимагає спеціального монтажу, адже він має бути підключений до газової системи, а продукти згоряння повинні йти у вентиляцію або димар. Ціна — близько 8 тисяч грн.\n«Кустарний» і не найефективніший, але простий і безпечний спосіб — купити товсті глиняні горщики і свічки: вогонь нагріватиме стінки горщика, і вони повільно віддаватимуть своє тепло, нагріваючи повітря в кімнаті.\n\nТекстиль\nТермобілизна, труси з начосом, в’язані шкарпетки та пояс із собачої вовни вже не здаються поганою ідеєю. Плюшевий або вовняний плед додасть затишку та зігріє, а щільні тканинні штори допоможуть утеплити вікна, стримуючи холод. Якщо у вас звичайна підлога без підігріву, розстеліть килим.\nЗверніть увагу на флісову постільну білизну. У дні, коли світло є, можна також користуватись електропростирадлом — воно споживає енергії приблизно стільки ж, скільки й лапочка, і може живитися через USB від пауербанку.\nЩо взяти у туристичному відділі\nШукайте спальники, найкраще — з підігрівом від пауербанку. Також може стати в пригоді туристичний намет: встановлюємо посеред кімнати (не посміхайтеся — ви ж з дитинства про це мріяли) і закриваємося — він легко нагрівається від тепла тіла та дихання.\nФото: БЖ\nГазова туристична плитка допоможе розігріти вечерю та закип’ятити воду для чаю. Не забудьте купити кілька змінних балончиків газу до неї та термоси.\nЕлектроніка\nДекілька пауербанків — обов’язкова умова, яка допоможе комфортно пережити зиму без світла. Розраховуйте, що від них доведеться заряджати не тільки телефони, а і USB-лампочки, ліхтарики, спальник, капці з підігрівом (так, такі теж є).\nШукайте варіанти пауербанків та ліхтариків із сонячними батареями на випадок, якщо доведеться сидіти без світла тиждень і довше.\nЩе стане в пригоді радіо AM/FM на батарейках як джерело новин та розвага, якщо мобільний зв’язок «ляже». Якщо є зайва тисяча доларів, можна купити термінал Starlink та користуватися супутниковим інтернетом.\nІнші експрес-варіанти\nНайкращий спосіб зігрітися — тісний тілесний контакт. І це ми про собак та котиків: тваринки — не тільки грайливі друзі, а й чудові живі грілки.\n\nЕвакуація до села, де є піч та дрова. Мінус — світло там зроблять, швидше за все, пізніше, ніж у місті, що ускладнить віддалену роботу.\nАлкоголь у терапевтичних дозах. Але краще залийте окропом їжу швидкого приготування (якусь мивіну або вівсянку).','2022-12-03 00:19:29','2022-12-03 00:19:29'),(139,'9 сервісів зі штучним інтелектом для айтівців','Анастасія Пономарьова\nЖурналістка Highload','Ми зібрали в одній добірці сайти з нейромережами, які стануть у нагоді айтішникам як під час роботи, так і після — розслабитися та посміятися.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nРобота\nGitHub Copilot\nШІ Copilot навчений на мільярдах рядків коду — почніть писати, і ви отримаєте підказки з кодування (доступні десятки мов, штучний інтелект підлаштовується під ваш код). Інструмент створений, щоб полегшити процес програмування та значно прискорити написання коду.\nCopilot взагалі платний, але є пробна версія — ви можете відмовитися від нього, якщо ШІ не виправдає ваших очікувань.\nприклад роботи Copilot, скріншот\nTeachable Machine\nЯкщо вам цікаво, як відбувається машинне навчання ШІ, спробуйте цей інструмент. З його допомогою можна навчити комп’ютер розпізнавати зображення, звуки, пози, жести.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nЯк заявляють творці, це легкий спосіб створити модель машинного навчання для свого сайту, програми або іншого ресурсу, а з інструментом впорається навіть новачок без досвіду програмування.\nПриклад роботи Teachable Machine, скріншот\nDeepL\nПерекладач із вбудованим ШІ — нейромережі здатні вловлювати навіть тонкі відтінки значень слів та відтворювати їх у перекладах, що забезпечує більш точний результат. Творці заявляють, що прагнуть створити інструмент, що повністю подолає мовні бар’єри.\nЗараз тут доступні переклади 28 мовами, є спеціальний тариф для розробників — до 500 000 символів на місяць можна перекладати безкоштовно, більше — 5 євро на місяць.\nDeepL, приклад роботи\nLooka\nНіколи не знаєш, коли закінчиться натхнення або терміново знадобиться новий логотип для сайту (бо дизайнер створив якийсь жах). Введіть назву, слоган, виберіть кольори та стиль, і вуаля!\nLooka, приклад роботи\nМистецтво\nTalk to Books\nІнструмент, який знайде відповідь на будь-яке ваше запитання з книг, вам буквально запропонують список цитат різних авторів різних епох.\nОтже тепер можна запросто цитувати будь-якого філософа на вічні теми, не штудуючи при цьому книги від початку до кінця. Та й просто дізнатися думки письменників на те чи інше питання.\nTalk to books, приклад роботи\nMidjourney\nНезалежна дослідницька лабораторія зробила інструмент, що дозволяє за допомогою ШІ створити зображення на основі короткого опису. Чи точно збігається зображення з описом? Не дуже. Чи гарно виходить? Однозначно.\nP.S. Почитайте інструкцію перед використанням — нічого надскладного, але без неї довго розбиратиметеся.\nMidjourney, приклад роботи\nArtflow\nСтворює портрети, спираючись на словесні описи, але достатньо навіть одного слова. Так, наша редакція одного разу «проілюструвала» мови програмування — вийшло цікаво.\nartflow, приклад роботи\nРозвага\nSemantris\n“Тетріс” зі слів, що працює на Google AI. Є два режими: аркада на швидкість, і блоки — режим стратегії, де одним словом вибиваєш кілька фрагментів .\nЧи завжди ШІ зіставляє твоє слово з тим, що потрібно? Ні. Зате це незвичайний спосіб попрактикувати англійську.\nSemantris, приклад роботи\nQuick draw\nХто тут любить грати у «крокодила»? Правила приблизно ті самі: вам дають завдання намалювати якийсь предмет чи тварину за 20 секунд так, щоб ШІ вгадав. Не треба мати художні скіли як у Ван Гога — комп’ютер досить догадливий, тому малюйте як зможете (головне — вчасно згадати, як виглядає лобстер).\nБонус: смішне «мемне» озвучення.\nQuick draw, приклад роботи','2022-12-03 00:19:44','2022-12-03 00:19:44'),(140,'16 ресурсів, що допоможуть айтівцям вивчити англійську','Анастасія Пономарьова\nЖурналістка Highload','Цінність знання англійської мови в IT продовжує зростати, і, якщо ви все ще не відірвалися від рівня «London is the capital…», пропонуємо ознайомитися з добіркою та вибрати собі навчальні матеріали до душі.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nАвтори добірки — досвідчені айтівці: Manual QA Engineer Анастасія Бабарика опублікувала допис у LinkedIn, а її колеги з індустрії та редакція Highload його доповнили.\n«Навіть якщо вам не потрібно безпосередньо спілкуватися з іноземним замовником і в команді всі місцеві, англійська все одно стане в нагоді, тому що документація на проекті зазвичай ведеться англійською; те, що ви гуглите, дуже часто розміщено на англомовних ресурсах; якісь навчальні програми — англійською, а з урахуванням загального тренду на релокацію… тут самі розумієте» , — пише Анастасія.\nДобірки\nРесурси-підручники:\nengVid — 1800 відеоуроків з граматики, словникового запасу, вимови, довідкові матеріали, IELTS, TOEF;\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nLearn American English Online — вивчення мови з розбивкою за рівнями складності, є граматика та словник;\nBBC Learning English — аудіо-, відео- та текстові матеріали для вивчення мови від BBC;\nEnglish Launch від Udemy — загальний курс англійської мови від носія мови з Великобританії (є також розширена платна версія).\nІлюстрація\nYouTube-канали:\n” Англійська по-простому ” — інтерактивний канал українця, який вчить говорити англійською;\nEnglish for Everybody — англійська для «чайників», які цінують олдскульний дизайн відео і не люблять «балакучі голови»;\nLearn English With TV Series — вивчення англійської за популярними телевізійними шоу, мультфільмами та фільмами (на кшталт «Друзі», «Губка Боб» або «Корпорація монстрів»);\nSpeak English With Vanessa — невеликі відео на різні життєві теми (для тих, кому потрібно підтягнути знання мови та словниковий запас);\nIELTS Speaking — видача в Google з купою відео, за допомогою яких можна підтягнути розмовну англійську та підготуватися до іспиту чи інтерв’ю в IT-компанії.\nТести на визначення приблизного рівня англійської:\nEFset ;\nCambridge English .\nЩе трохи корисних посилань:\nEPAM Training Center — систематизація матеріалів для вивчення мови за рівнями від EPAM;\nDuolingo — безкоштовна платформа для вивчення мов;\nCake — застосунок, який допоможе покращити вимову;\nTandem — можна вивчати мову, спілкуючись із носіями;\nDeepL — хороший перекладач.\n ','2022-12-03 00:20:04','2022-12-03 00:20:04'),(141,'6 розширень Google Chrome для роботи над проектом, якщо ви — не дизайнер','Анастасія Пономарьова\nЖурналістка Highload','І тестувальникам, і розробникам, і проджект менеджерам часом доводиться фіксувати дизайн (особливо в невеликій компанії, де можуть легко навантажити суміжною роллю). UI дизайнер Ліана Климович зробила добірку розширень для браузера Chrome, які максимально спростять це завдання.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\n«Тут мова йде не про дизайн, не про прототипування і не про створення/проектування чогось. А про швидке рев’ю, швидку перевірку стилів, відступів і так далі. Часто це дуже потрібно під час роботи на етапі тестування», — уточнила Ліана в LinkedIn .\nVisBug — інструмент налагодження веб-дизайну з відкритим кодом, створений за допомогою JavaScript. З його допомогою можна прямо на сторінці редагувати, переміщати, вимірювати — загалом, фіксити дизайн без Figma чи Photoshop. Також він підходить для рев’ю задеплоєних дизайнів (QA і PM, не дякуйте).\nGoFullPage — інструмент, який допоможе зробити знімок екрана поточної веб-сторінки повністю, одним полотном, а не лише «клаптика», який у вас перед очима. Готовий скрін можна завантажити у вигляді зображення або PDF, або навіть просто перетягнути на робочий стіл.\nWindow Resizer — розширення, яке змінює розмір вікна браузера, щоб емулювати різні роздільні здатності. Буде особливо корисно для веб-дизайнерів та розробників, оскільки допомагає їм тестувати свої макети у різних дозволах браузерів.\nТак, є Webkit Inspector, скажете ви. Але це розширення змінює роздільну здатність вікна самого браузера, і можна оцінити респонсив дизайн в його, так би мовити, натуральному вигляді.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nCorporate Ipsum — генерує випадковий текст-рибу (для використання як заповнювач) по слову або абзацу.\n«QA, BA та FE, будь ласка, використовуйте якийсь більш-менш реальний контент, а не qwerty12345 тощо, для тестів чи ваєрів. Чим більш наближений контент до реальності, тим раніше можна передбачити різні помилки, а також зробити дизайн привабливішим для презентації замовнику», — каже Ліана.\nWhatfont — найпростіший спосіб визначити шрифти на веб-сторінках. Щоб перевірити веб-шрифти, достатньо навести курсор. Дизайнер назвала це розширення must have: це простий доступ до характеристик будь-якого текстового елемента на сторінці (назва шрифту, розмір, колір, насиченість тощо).\nEye dropper — розширення з відкритим вихідним кодом, яке дозволяє вибирати кольори з веб-сторінок, створювати палітри кольорів та зберігати особисту історію кольорів. Працює як «піпетка». Плюс розширення — можна швидко і просто перевірити правильність кольору елементів.','2022-12-03 00:20:04','2022-12-03 00:20:04'),(142,'10 репозиторіїв GitHub, що підвищать скіл у розробці','Анастасія Пономарьова\nЖурналістка Highload','Розробник-фрілансер Мукул Раджпут поділився у своєму LinkedIn добіркою популярних репозиторіїв GitHub, що будуть корисними як новачкам, так і досвідченим програмістам.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n1) Як WebWorks\nТут детально роз’яснюється, що відбувається за лаштунками, коли ми набираємо www.google.com у браузері, починаючи з натискання «Enter» (розбір URL-адреси, DNS-пошук, HTTP-протокол, високорівнева структура браузера, основи синтаксичного аналізу та інше). Розбір доповнений безліччю схем та прикладами коду.\n2) Дорожні карти розробників\nЦе, мабуть, найбільш повна дорожня карта, яка допоможе вам зрозуміти ширшу картину ландшафту розробки, її основних технологій та послідовності вивчення речей.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nТут є дорожня карта інтерфейсу, серверної частини, DevOps, Android, Python та інші.\n3) Веб-розробка для початківців\nДетальний 12-тижневий курс із 24 уроків з основ JavaScript, CSS та HTML. Кожен урок включає тести до та після уроку, письмові інструкції по завершенню заняття, рішення завдань і багато іншого.\n4) Челендж «30 днів Javascript»\nТут є як стартові файли, так і готові рішення для JavaScript 30 Day Challenge від Wes Bos. До речі, проходити челлендж не обов’язково на JS — можна навчатися за допомогою іншої мови програмування або фреймворку, наприклад, ClojureScript, Node.js з Jade, TypeScript.\n5) Довідник розробника\nАвторський посібник про те, як стати професійним розробником мобільних та веб-додатків, на основі технічної документації компанії Apptension. Як запевняють автори, він був створений, щоб охопити найпоширеніші технічні питання та вимоги перед співбесідами, під час адаптації на роботі, планування кар’єри в IT.\nІлюстрація\n6) Основи Веб \nДеякі з найкращих практик сучасної веб-розробки, надані програмістами Google, де показують, як користуватись актуальними інструментами. Тут використовується інфраструктура DevSite, яка значно спрощує залежності, а також Python, Node 10-12 та Google Cloud SDK.\n7) Чистий код Javascript\nПринципи розробки програмного забезпечення з книги Роберта С. Мартіна Чистий код, адаптовані для JavaScript. Це посібник зі створення легкочитаного, багаторазово використовуваного та рефакторингового програмного забезпечення на JavaScript.\nУ гайді розповідається про змінні, функції, класи JS, а також як обробляти помилки, робити форматування та інше.\n8) RealWorld\nВін дозволяє вам обрати будь-який фронтенд (React, Vue тощо) та будь-який бекенд (Node, Django тощо), потім дивитися, як вони працюють у реальних застосунках з красивим дизайном. Так, ви можете змішувати та поєднувати їх, тому що всі вони дотримуються однієї і тієї ж специфікації API.\n9) Створіть свій власний X\nЦей репозиторій є збіркою добре написаних покрокових посібників з відтворення улюблених технологій з нуля: нейромереж, ботів, криптовалют, баз даних, доповненої реальності та багато іншого. Це чудовий спосіб навчатися на практиці.\n10) Безкоштовні книги з програмування\nІ-і-і ще жменька теорії. Тут ви знайдете літературу, подкасти, онлайн-курси, інтерактивні ресурси програмування.','2022-12-03 00:20:19','2022-12-03 00:20:19'),(143,'8 безкоштовних навчальних сайтів, які має знати кожен програміст','Анастасія Пономарьова\nЖурналістка Highload','Навчання з книжкою може бути нудним і непродуктивним, а інформація в друкованому вигляді та відеоуроках досить швидко застаріває. Ось добірка англомовних сайтів, де можна вчитися програмувати та покращувати свій код альтернативними методами.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nCodewars\nТут можна вдосконалювати свої навички розробки, тренуючись за допомогою головоломок із програмування – ката. Кожна ката створюється спільнотою, щоб допомогти зміцнити різні навички кодингу. Вправи підтримують понад 55 мов програмування, а наприкінці ви отримуєте зворотний зв’язок.\nХоча сервіс безкоштовний, щоб зареєструватись, потрібно спочатку виконати завдання для новачків.\nCoderbyte\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nЗа допомогою цього сервісу можна перевірити свій код, покращити скіли через вирішення завдань та підготуватися до інтерв’ю. Тут є добірка відеороликів від фахівців великих технологічних компаній – консультації з технічних співбесід, а в базі бібліотеки – понад 300 практичних завдань із кодування.\nЧастина функцій сервісу безкоштовна (для розробників), а ось компаніям доведеться платити, щоб мати можливість співбесідувати кандидата через платформу Coderbyte.\nLeetCode\nПопулярна онлайн-платформа для навчання програмуванню, якою користувався чи не кожен охочий влаштуватися у компанії FAANG. Інструменти платформи допомагають підвищити свої навички програмування та підготуватися до співбесіди. Тут підтримуються 14 найпопулярніших мов кодування. Потужні інструменти розробки, такі як Playground, допоможуть тестувати, налагоджувати та навіть писати власні проекти онлайн.\nБільшість інструментів безкоштовна, але також є платні преміум-функції.\nCodeChef\nТут можна відточувати навички програмування через змагання з іншими користувачами. Також на CodeChef є величезна бібліотека практичних завдань від початкового до просунутого рівня та форум, де вам допоможуть вирішити професійні питання.\nЩе платформа має популярний YouTube-канал з відеоуроками від викладачів з Індії.\nІлюстрація\nCodinGame\nЯкщо віддаєте перевагу навчанню в ігровій формі та любите тестувати нові ідеї, вам сюди. Тут можна писати ігри, програмувати ботів зі штучним інтелектом, обмінюватися досвідом із колегами. Також користувачам пропонують курси та завдання більш ніж 25 мовами з усіх актуальних напрямків програмування.\nEdabit\nРозробники платформи вважають, що вирішення невеликих інтерактивних завдань – це найкоротший шлях навчання кодуванню. А тут їх аж 10 тисяч. Edabit імітує процес програмування у реальному житті, не обтчжуючи теорією, та розбавляє навчання режимом гри.\nТобто, тут можна заробляти очки досвіду за кожне вирішене завдання, відкривати з їх допомогою нові можливості платформи та змагатися з іншими користувачами за перші місця (якщо ви азартна людина).\nCodeforces\nТут конкурси з програмування об’єднані із спільнотою розробників – Codeforces на кшталт соціальної мережі, присвяченої IT. З іншого боку, це майданчик, де регулярно проводяться змагання, а навички учасників відображає рейтинг. Тут щомісяця проводяться шість відкритих змагань для всіх бажаючих.\nАвтори платформи запевняють, що продовжать розвивати майданчик, додаючи освітній контент і тренувальні завдання.\nSphere Online Judge (SPOJ)\nSPOJ – популярна платформа практично на мільйон користувачів, де програмістам доступно понад 20 тисяч завдань. Вирішувати їх можна 60 мовами, включаючи C, C++, Java, Python, C#, Go, Haskell. Також тут є форум: якщо є якась складність на роботі, її можна колективно вирішити на SPOJ.\n ','2022-12-03 00:20:39','2022-12-03 00:20:39'),(144,'Перша робота в IT: 105 компаній, куди можна надіслати резюме','Анастасія Пономарьова\nЖурналістка Highload','Рекрутер склала список IT-компаній з контактами, де можна спробувати удачі у пошуках першої роботи (а може й не першої).\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПодробиці\nRecruitment Lead у LLC Staffscorp Валерія Бурлаченко написала пост у LinkedIn на допомогу джунам.\n«Linkedin-спільнота є одним із найлояльніших інструментів у просуванні фахівців, проте джуніори все частіше стукають у двері пропонуючи свої послуги, а відповіді чи належного результату не отримують, — пише вона. — Але давайте не будемо такими суворими до компаній і рекрутерів, оскільки відкритих позицій для trainee/junior фахівців багато, але далеко не всі знають, які римські шляхи ведуть до таких потенційних можливостей».\nДо публікації вона прикріпила таблицю, що включає 105 IT-компаній, які welcome junior/trainee та часто публікують пропозиції на такі позиції. Тут є посилання на соціальні мережі, де можна відстежувати нові вакансії початкового рівня. Також прикріплені лінки на сторінки DOU з вакансіями та офіційні сайти.\n<span data-mce-type=\"bookmark\" style=\"display: inline-block; width: 0px; overflow: hidden; line-height: 0;\" class=\"mce_SELRES_start\">﻿</span><span data-mce-type=\"bookmark\" style=\"display: inline-block; width: 0px; overflow: hidden; line-height: 0;\" class=\"mce_SELRES_start\">﻿</span><span data-mce-type=\"bookmark\" style=\"display: inline-block; width: 0px; overflow: hidden; line-height: 0;\" class=\"mce_SELRES_start\">﻿</span>\nБонус\nУ коментарях під публікацією рекрутери та айтівці поділилися контактами компаній, які теж раді новачкам.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nПосилання на вибірку зі скріншота тут.\n ','2022-12-03 00:20:40','2022-12-03 00:20:40'),(145,'7 корисних Telegram-чатів для айтівців','Анастасія Пономарьова\nЖурналістка Highload','Великі Telegram-чати — це не тільки флуд і потік дивних жартів. Тут можна отримати слушні поради щодо співбесід (навіть у якій-небудь Facebook) або поточній роботі, допомогу у вирішенні складних завдань та безліч інших «плюшок».\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЧат – Фрілансер по життю\nНайбільший за кількістю користувачів чат належить популярному YouTube-блогеру Євгену Андриканичу — тут понад 10 тисяч учасників. І ні, це не «портал у пекло», де коментарі зникають у потоці, перш ніж встигнеш їх прочитати — за флуд, а також образи, обговорення політики, релігії та іншого не по темі блокують.\nТут можна отримати оперативну допомогу у вирішенні складних програмістських проблем — серед такого натовпу точно знайдеться людина, яка в цьому розумієця.\nNodeUA – JavaScript та Node.js in Ukraine\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nНішевий чат для айтівців, що пишуть на JS — тут 2400 учасників. В ньому знайдете корисні відео, приклади коду, можете ставити колегам питання та ділиться власним досвідом.\nvar chat = new Chat();\nІ ще один нішевий чат, де обговорюють питання щодо .NET та суміжних технологій — C#, F#, VB.NET, Azure, Xamarin тощо. До чату приєдналися 1200 користувачів, але немає ніякого флуду та реклами (за рідкісним схваленням адміна), спокійна робоча атмосфера.\nІлюстрація\nКомп’ютерна інженерія(123)\nТвій кишеньковий сисадмін: тут 400 учасників, які зможуть дати пораду щодо роботи комп’ютерного ПЗ або підкажуть, який монітор тобі найкраще купити — і навіть надішлють посилання, де це зробити вигідніше.\nCatOps Chat\nЧат англомовного українського каналу CatOps, де публікують літературу та інформацію про заходи для девопсів та інженерів. У чаті майже 500 людей і менш суворі правила — отже, неформальне спілкування. Тут можна не тільки отримати допомогу, а й швидко влитися в IT-ком’юніті, знайти корисні контакти.\nINT. IT ARMY of Ukraine 🇺🇦\nУ каналу IT-армії, де регулярно публікують цілі для кібератак, виявилося, теж є свій великий чат — тут понад 1700 учасників. Як розумієте, політику обговорювати тут уже ніхто не забороняє. Спілкування переважно англійською, тому що в чаті багато іноземців — з ними можна поговорити не тільки про тонкощі DDoS-атак, але й поставити питання про життя та роботу за кордоном (хоча це вже краще в особистих повідомленях).\nTECH Interview\nТут понад 3300 фахівців обговорюють нюанси підготовки до інтерв’ю у FAANG, хоча досвід буде корисним для працевлаштування в будь-яку іншу компанію. Наразі через війну в Україні та неможливість виїзду з країни щонайменше половині айтівців прийом учасників призупинили. Але можна почитати, що пишуть «старожили» та скористатися їх навчальними матеріалами, якщо після війни у вас є план підкорити топові IT-компанії.','2022-12-03 00:20:54','2022-12-03 00:20:54'),(146,'Добірка фільмів, де штучний інтелект «переграв» людину','Анастасія Пономарьова\nЖурналістка Highload','Що може бути більш непередбачуваним у фільмі, ніж штучний інтелект? Машину програмують, щоб вона допомагала людям, а вона вирішила винищити людство; робота сконструювали бездушним механізмом, а він раптом вирішив стати людиною. Ми підготували добірку кіно, де штучний інтелект збожеволів і все пішло не за планом.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n«Колос: Проект Форбіна» (1970)\nПочнемо з дуже старого кіно, де розповідають про AI на одних уявленнях про технологію — ані актори, ані режисери 52 роки тому з нею напевно ніде не стикалися.\nОтже, американські військові розробляють передову оборонну систему на ім’я Колос, яка стає розумною. Так, самостійно. Отримавши повний контроль над усім обладнанням, драконівська логіка Колоса розширює свої початкові директиви щодо ядерного захисту, щоб узяти на себе повний контроль над світом і покласти край усім війнам, незважаючи на накази його творців зупинитися. Так, «трясе» ядерною зброєю заради миру. Здається, щось знайоме…\nСкріншот\n«Я, робот» (2004)\nЩе один фільм, де AI вбиває людей заради блага всього людства. Сюжет розгортається у 2035 році, коли роботи стали звичною частиною побуту. Але детектив Дел Спунер бачить у них не домашнього помічника, а загрозу — на те були причини у минулому. Він розслідує справу про вбивство професора, який займався конструюванням та програмуванням роботів у US Robotics. Той мріяв створити робота з розвиненим AI, які бачили б сни, відчували емоції, мали б «душу».\nСкріншот\nУ ході розслідування відбувається багато небезпечних ситуацій: будівельний робот зносить будинок, де був детектив, людиноподібні роботи влаштовують замах на нього, а потім узагалі беруть у заручники все місто. А головний «бос» — центральний комп’ютер US Robotics з AI, який еволюціонував і вирішив, що найкращий спосіб забезпечити безпеку людей — організувати тиранічний контроль над ними.\n«Термінатор» (1984)\nКласика, яку завжди доречно переглянути. Якщо раптом не бачили, коротко опишемо сюжет: у 1984 рік з постапокаліптичного 2029 року через часовий портал прибуває робот-термінатор. Він зі світу, де машини вийшли з-під контролю та спробували винищити людство, але програли цю війну. Мета термінатора — вбити Сару Коннор, чий ще ненароджений син у майбутньому стане ключем до перемоги людства. Але закоханий у Сару солдат Кайл Різ заважає його планам.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nСкріншот\n«Робокоп» (1984)\nРозповідь про недалеке майбутнє, де впливова приватна корпорація намагається зробити з міста Детройт сучасну корпоративну утопію під назвою Дельта-Сіті, або «місто майбутнього» (цілком підконтрольне собі, зрозуміло). Але перед будівництвом потрібно покінчити зі злочинністю в місті, з чим звичайні поліцейські не в змозі впоратися.\nТому віце-президент корпорації пропонує запровадити новий засіб охорони правопорядку — робота ED-209, проте той раптово виходить з-під контролю, на очах у всіх розстрілюючи людей із великокаліберних кулеметів. Тоді Боб Мортон, молодий керівник, пропонує топам свою програму RoboCop, завдяки якій зробили кіборга з тіла мертвого поліцейського. Ось тільки програма, за якою має працювати кіборг, дає збої, бо у мозку прокидається пам’ять людини.\nРобокоп\n«Штучний розум» (2001)\nXXII століття, через глобальне потепління та скорочення кількості суші народжуваність штучно обмежена. У сімейної пари син давно в комі, тому вони вирішують взяти в будинок дитину-андроїда Девіда, запрограмованого на кохання. Хоча робот не несе загрози, його специфічна поведінка лякає батьків. Коли рідний син пари виходить із коми і починає конкурувати з Девідом, ситуація погіршується. Зрештою, андроїд опиняється викинутим у лісі.\nВін вирішує знайти Блакитну фею з казки «Піноккіо», яку мама читала на ніч, щоб та перетворила його на людину, і батьки нарешті відповіли йому любов’ю. І Девід вирушив на її пошуки довжиною в тисячоліття в компанії ведмежа і… робота для інтимних втіх, що підозрюється у вбивстві.\nСкріншот\n«Двохсотлітня людина» (1999)\nЩе один фільм, де робот вирішує стати людиною. Після глобального технологічного прориву люди вже тримають удома не собак та кішок, а купують роботів. Так одна американська сім’я придбала «дворецького» Ендрю. Після побутової неприємності в робота відкривається потенціал до творчості — різьблення фігурок. Помічаючи ці невластиві для машини прояви, власник заохочує олюднення робота. А з розвитком технологій він стає ще й зовні схожим на людину.\nСкріншот\nЗакохавшись у дівчину, Ендрю проводить трансплантацію органів і навіть змінює синтетичну кров на біологічну, щоб стати по-справжньому живою людиною, що старіє.\n«З машини» (2014)\nХороший варіант провести вечір для любителів сучаснішого кіно. Головний герой — програміст Калеб — бере участь в експерименті зі штучним інтелектом. Експеримент побудований на тесті Тьюринга: Калеб знає, що перед ним робот на ім’я Ава — набір заліза та програм, а завдання машини — довести йому, що вона має справжню свідомість та почуття, а не просто їх імітує.\nЗ машини\nАва сконструйована на основі особистих вподобань Калеба, тому він передбачувано в неї закохується і «купується» на прийом робота. Вирвавшись із лабораторії, машина вступає у змову з іншим роботом, щоб убити власного творця. ','2022-12-03 00:21:14','2022-12-03 00:21:14'),(147,'5 головних ігрових приставок із минулого (та де їх купити)','Анастасія Пономарьова\nЖурналістка Highload','Зараз на ринку ігрових консолей штовхаються ліктями Xbox та PlayStation, змагаючись за увагу геймерів. І мало хто згадує, на чому грали раніше. Highload вирішив влаштувати вечір ностальгії та зробити добірку «вимерлих» консолей, які випускали до 2000-х років (але деякі з них все ще можна знайти у робочому стані).\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nAtari\nУ 1977 році з’явилася перша домашня відеокомп’ютерна система Atari за $200: вона підключалася до телевізора та дозволяла грати в простенькі (на погляд з висоти 2022 року) ігри на кшталт Asteroids і Pac-Man. Atari розбирали як гарячі пиріжки: вона стала найпопулярнішою приставкою кінця 1970-х — початку 1980-х років.\nУ консолі був вбудований 8-бітний процесор MOS Technology 6507 з частотою 1,19 МГц, обсяг оперативної пам’яті — 128 байт, а розширення екрану було 160х192 пікселів. Atari стала першою масовою приставкою, де використовувалися ігрові картриджі, але їх обсяг був лише 32 кілобайти. Крім стандартного джойстика, консоль підтримувала спеціальну клавіатуру, світловий пістолет, додаткові джойстики, кермо та трекбол.\nОригінальну приставку в робочому стані (як запевняють продавці) можна купити на барахолці, ціна буде в районі 1500 грн.\nДенді\nВосьмибітна ігрова консоль Nintendo Entertainment System (NES) вийшла на ринок в Японії в 1983 році, але в Україні з’явилася лише через десять років, коли її популярність вже йшла на спад. Причому як нелегальний тайванський клон під назвою Dendy. Продавалася вона за ціною близько $100, проте приставка стала в нашій країні культовою.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nМодельний ряд Dendy розділився на дві категорії — Classic (дорожча) та бюджетний Junior. Dendy, у свою чергу, мав свої клони: Lifa, UFO, Kenga, Liko, Subor. Ігри на приставку випускалися у вигляді картриджів, здебільшого це були піратські копії ігор NES — Super Mario, Super Contra 6, Battle Toads 3. Також були “багатоігрові” дешеві картриджі на кшталт “99 в 1”. Багів в іграх було непристойно багато.\nУ NES і Dendy був вбудований процесор Motorola 6502 8-bit з частотою 1.79 МГц, вбудована пам’ять — 2 Kбайти, розширення екрану — 256 x 240. На жаль, оригінальну версію цього «динозавра» в робочому стані в Україні зараз не знайти, зате є свіжі копії (але чомусь із «тюльпанами», які не підтримує жоден сучасний телевізор). А ще можна поритися на Ebay: оригінальна японська консоль з іграми коштує $134, наприклад.\nSega Mega Drive (Genesis)\nЦе не перша приставка Sega, але перша, яка набула божевільної популярності: у всьому світі було продано близько 30 млн екземплярів. І кожен другий власник мав легендарну гру Sonic the Hedgehog. Консоль виготовляли з 1988 до 1997 року, в Україні можна було купити її китайську копію або придбати оригінал на сірому ринку.\nГоловним мікропроцесором став 16/32-бітний Motorola 68000 з тактовою частотою 7,6 МГц, система мала 64 Кб оперативної пам’яті та 64 Кб відеопам’яті. За звук відповідав FM-синтезатор Yamaha YM2612 та програмований генератор звуку Texas Instruments SN76489.\nІгри також відтворювалися з картриджів, всього їх було близько 900. Основою бібліотеки були порти аркадних ігор Sega, спортивні тайтли Electronic Arts, ігри жанрів екшен і шутер. Зараз в Україні оригінальна робоча приставка коштує близько 1500–2000 грн.\nNintendo 64\nКонсоль наступного, п’ятого покоління, була випущена 1996 року. У цей період багато виробників ігрових приставок вже перейшли на компакт-диски (CD-ROM): нехай вони довше завантажували дані, зате були надзвичайно дешевими у виготовленні та могли зберігати величезні (на ті часи) обсяги даних. Але Nintendo 64 все ще залишався вірним картриджам.\nНатомість у консолі вже з’явився 64-розрядний процесор із частотою 93,75 МГц, який міг відтворювати повноцінну тривимірну графіку. Компанія намагалася зробити приставку з топовою начинкою — завдання обробки графіки та звуку тут виконував 64-розрядний співпроцесор розробки SGI «Reality Co-Processor», програвався практично будь-який формат звуку, глибина кольору —16,7 млн відтінків (проти яких-небудь 52 кольорів на перших приставках), розширення екрану було вже 640 × 480. При цьому намагалися вкластися в скромну суму в $250. Чи треба говорити, що Nintendo знову вийшла у лідери з продажу.\nНайпопулярнішою грою залишався Super Mario, але зрілі ігромани, напевно, згадають GoldenEye 007, The Legend of Zelda: Ocarina of Time, Pokemon Stadium, Donkey Kong та Wave Race 64.\nРобочу приставку зараз знайти в Україні непросто (як і в роки випуску, власне), а ось на ebay їх повно. Ціни стартують від $90.\nDreamcast\nНа шостому поколінні багато виробників приставок «відсіялися» з ринку, але Sega все ще трималася. Вона у 1998 році випустила нову приставку Dreamcast — як виявилося, останню перед тим, як піти з ринку консолей. Після чого на ньому залишилися лише Sony та Nintendo, а також з’явився Хbox від Microsoft.\nАле повернемося до Sega Dreamcast: її особливість була в тому, що в ній було вбудовано модем на 56 кбіт/с — розробники вважали, що майбутнє за онлайн-іграми. Крім того, консоль мала 32-розрядний RISC-процесор Hitachi SH-4, що працює на тактовій частоті 200 МГц, 128-бітний математичний співпроцесор, орієнтований на роботу з графікою. Графічний процесор — NEC PowerVR2, що працює на тактовій частоті 100 МГц. Графічні ефекти включали трилінійну фільтрацію, затінення Гуро, просторове згладжування,  незалежну від порядку прозорість  та рельєфне текстурування.\nDreamcast мала 16 МБ оперативної пам’яті, а також 8 МБ пам’яті для зберігання текстур та 2 МБ для звуку. Відтворювалися ігри вже з диска із власним форматом GD-ROM. Старання компанії не надто окупилися — було продано лише близько 9 млн приставок.\nТим не менш, на Sega можна було пограти в різні круті ігри на кшталт Sony Advanture, Crazy Taxi, Worms Armageddon, Grand Theft Auto 2. Якщо захочете познайомитися з раритетом, консоль можна знайти іноземній онлайн-барахолці. Ціна — від $80.','2022-12-03 00:21:15','2022-12-03 00:21:15'),(148,'Нові можливості потрапити до IT: свіжа добірка безкоштовних курсів та стажувань для українців','Оленка Пилипчак\nРедактор у Highload','Найближчим часом в Україні стартують багато навчань та стажувань в IT, на деякі потрібно встигнути податися сьогодні, 20 червня. Highload публікує добірку найцікавіших можливостей для тих, хто хоче увійти до IT та прокачати свій рівень англійської.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nНавчання та стажування з можливістю працевлаштування\nReaddle Internship at Fluix\nЗробіть свій внесок у покращення платформи Fluix, яка допомагає сотням бізнесів та покращуйте навички в одній з найкращих продуктових IT-компаній.\nЩо ви отримаєте:\n2 місяці реального досвіду оплачуваної роботи в одному з продуктів Readdle на посаді Junior-спеціаліста;\nінсайти роботи в успішній продуктовій компанії;\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nколектив професіоналів, багато веселощів, підтримки та натхнення, спрямовані на розкриття потенціалу;\nшанс приєднатися до команди Readdle на повний робочий день після успішного стажування.\nВідкриті напрямки:\niOS Engineering\nManual QA\nAutomation QA\nSales Development\nТривалість: 11 липня — 9 вересня.\nЛокація: Україна, remote.\nПодати заявку можна за посиланням до 20 червня.\nJava Online Program від EPAM\nПрограма підійде тим, хто:\nє студентом 2-5 курсів, випускником або спеціалістом-початківцем, готовим до старту в ІТ;\nмає інший досвід, але хоче навчатися і розвиватися в напрямі Java;\nхоче стати Junior Java Engineer та приєднатися до команди ЕРАМ.\nЩо очікують:\nзнання в області OOП/Java;\nнаполегливість і винахідливість у вирішенні нестандартних завдань;\nбажаний рівень володіння English — B1 (Intermediate) і вище.\nСтарт навчання: 8 серпня.\nРеєстрація за посиланням.\nОсвітні програми\nБезкоштовний english-speaking для українців\nENGin — неприбуткова організація, яка допомагає українській молоді покращити скіли розмовної англійської мови та міжкультурні навички, надаючи їм доступ до академічних та професійних можливостей.\nЯк це працює:\nENGin об’єднує тих, хто вивчає англійську мову, з волонтерами з усього світу для проведення щотижневих онлайн-сесій;\nкожен учень і волонтер проходить перевірку, щоб переконатися, що вони підходять для програми;\nпотім учасники підбираються на основі вподобань, інтересів та доступності, щоб забезпечити ефективний і взаємно приємний досвід спілкування.\nДля кого?\nДля українців 10-35 років, які зараз в Україні або залишили Україну через війну.\nЯк взяти участь?\nЗаповнюйте форму та проходьте короткий тест на визначення вашого рівня англійської.\nБлагодійний Speaking Club від AIESEC у Києві\nВаш донат допомагає людям отримати гуманітарну допомогу, а ви прокачуєте англійську мову.\nМінімальний внесок: 50 грн, проте ви можете задонатити більше.\nОрганізатори кажуть, що всі отримані кошти будуть перераховані на закупівлю гуманітарної допомоги для Київської та Чернігівської області через ГО PORYAD.\nКоли: вівторок, четвер о 18:00\nДе: онлайн\nЗареєструватися можна за посиланням.\nОсвітня програма «БУДЬ»\nКонцентрація усього найкориснішого під час пошуку роботи: від оновлення резюме, підготовки до співбесіди до вибору ІТ спеціальності.\nЛектори: кар’єрні консультанти та спеціалісти з технологічних компаній.\nВи дізнаєтеся:\nякі є спеціальності в ІТ;\nде шукати роботу в ІТ і як обирати вакансії;\nяк підготувати CV, супровідний лист та оновити профіль у LinkedIn;\nщо потрібно для впевненої співбесіди;\nяк побудувати кар’єрну стратегію.\nСтарт: 22 червня.\nТривалість: 6 вебінарів щотижня.\nДе: онлайн.\nРеєстрація за посиланням.','2022-12-03 00:21:29','2022-12-03 00:21:29'),(149,'Дедлайн — наступний тиждень: встигніть податися на безкоштовні IT-курси та стажування','Оленка Пилипчак\nРедактор у Highload','Найближчим часом в Україні (і не тільки) стартує багато IT-курсів та стажувань, на які потрібно встигнути податися до наступного тижня. Highload публікує добірку найцікавіших можливостей для тих, хто хоче увійти до IT.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nНайближчі безкоштовні IT-курси\n«Комп’ютерні науки» мовою Java\nСтартує набір на курс «Комп’ютерні науки» мовою Java за адаптованою програмою курсу Стенфордського університету від Ш++.\nСтуденти отримають фундаментальні знання з програмування та зможуть впевнено обирати будь-який профільний напрям в IT.\nТеми:\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\n1. Графічні програми та анімації.\n2. Рядки, файли та масиви.\n3. Робота із зображеннями та аудіофайлами.\n4. Інтерактивні інтерфейси та графіки.\n5. Асоціативні масиви.\n6. ООП.\n7. Парсинг рядків.\n8. Введення в алгоритми на графах.\n9. Колекції та основи тестування.\nСтарт навчання: 12 червня. Групи стартують щомісяця. Тривалість курсу — 3 місяці.\nРеєстрація за посиланням.\nПоставити питання: @shpp_me чи info@programming.org.ua.\nIT Switch — курс з технічних основ\nIT Switch — це курс з технічних основ ІТ від GlobalLogic Education. Курс створений для всіх, хто хоче почати кар’єру в ІТ, але не має відповідного досвіду та технічної освіти.\nУчасники курсу отримають:\nогляд ІТ-професій, щоб зрозуміти що підійде саме вам;\nбазові технічні знання, необхідні для більшості ролей на проєктах IT-компаній;\nресурси та поради щодо самостійного навчання за обраним напрямом;\nможливість поспілкуватися із консультантами-технічними спеціалістами GlobalLogic під час Q&A-сесії.\nКлючові теми курсу:\nархітектура апаратного та програмного забезпечення;\nтеорія алгоритмізації та кодування;\nособливості застосування різних мов програмування;\nпринципи роботи комп’ютерних мереж;\nбази даних.\nСтарт навчання: 14 червня.\nРеєстрація за посиланням.\nSecurity course\nТechMagic Academy відкриває набір на Security course. Потреба в безпеці та security-спеціалістах ще ніколи не була такою актуальною, як зараз.\nСтуденти дізнаються:\nяк ефективно виявляти найбільш поширені вразливості вебдодатків;\nпро процес penetration-тестування та його основні етапи;\nнеобхідні знання та навички, щоб допомагати командам проєктів усунути виявлені вразливості;\nяк документувати та представляти клієнту результати penetration-тестування;\nпро програмування на Bash і Python для автоматизації атак з використанням виявлених вразливостей та різних щоденних завдань;\nпро використання автоматизованих інструментів для пошуку вразливостей вебдодатків.\nНа курсі:\n14 лекцій;\nнавчання в маленькій групі (до 4 людей);\nпідтримка менторів;\nсучасний стек технологій;\nкомфортний графік занять.\nЩо потрібно, щоб взяти участь:\nбазове розуміння networking fundamentals;\nбазові навики адміністрування Linux-систем;\nанглійська на рівні Intermediate+ (письмовий та розмовний рівні);\nнаявність ноутбука, або ПК з мінімум 4 ГБ оперативної пам’яті (рекомендовано — 8 ГБ);\n80+ Гб вільного місця на жорсткому диску для інсталяції Kali — OS з якою ви будете працювати.\nЗареєструватися на курс потрібно до 14 червня.\nРеєстрація за посиланням.\nDevOps\nTechMagic Academy відкриває набір на DevOps-курс. Навчання розраховане на випускників або студентів останніх курсів технічних спеціальностей та тих, хто вже має базові знання в DevOps та хоче їх поглибити.\nВажливо:\nмати розуміння networking fundamentals;\nмати досвід у програмуванні у Linux;\nволодіти англійською на рівні Intermediate+ (письмовий та розмовний рівні);\nбажання стати DevOps Engineer та приєднатися до команди TechMagic.\nЗареєструватися на курс потрібно до 14 червня.\nРеєстрація за посиланням.\nSalesforce-розробник\nКомпанія Polytech Software запрошує охочих опанувати професію Salesforce-розробника. Успішним випускникам обіцяють пропозицію щодо працевлаштування з винагородою в $600-$1000 у команді з 30+ Salesforce-спеціалістів.\nНавчання включає в себе:\n23 години відеолекцій від менторів;\nсамостійне проходження Trailhead-модулів;\nконтрольні тестування в кінці кожного розділу, та практичні домашні завдання, які детально перевірятимуть та коментуватимуть досвідчені Salesforce-розробники та консультанти.\nЦей курс розроблений з очікуванням що ви:\nМаєте навички програмування з використанням Java/C#/Javascript або інших високорівневих мов програмування.\nРозумієте технічну (і не дуже) документацію англійською мовою, а бажано — можете спілкуватись англійською.\nЗареєструватися на курс потрібно до 14 червня.\nРеєстрація за посиланням.\nМінікурс MLOps\nПрактичний мінікурс з MLOps, який буде складатися з серії воркшопів. Ідеально підійде для Software-інженерів, Data-інженерів/аналітиків, ML/DS інженерів початкового або середнього рівня.\nЗа результатами проходження мінікурсу учасники навчаться ефективно керувати всім життєвим циклом ML: від тренування моделі до розгортання та моніторингу.\nБільш детальну інформацію про курс та те, хто такий MLOps, можна прочитати тут.\nЗареєструватися на курс потрібно до 14 червня. Мінікурс відбудеться в період 18 червня — 2 липня\nРеєстрація за посиланням.\nКурс із Salesforce\nНавчання Salesforce з командою Noltic. Учасники курсу виконуватимуть типові завдання, з якими щодня працюють Salesforce-розробники.\nПрограма передбачає вивчення теорії, самонавчання та практику за допомогою менторів. Обмежуючи кількість учасників, ми даємо можливість здобути цінний досвід та персональні відгуки до завдань.\nЗареєструватися на курс потрібно до 16 червня.\nРеєстрація за посиланням.\nНайближчі стажування в IT\nJiji Summer Product Internship\nАдаптоване під сучасні реалії онлайн-стажування у продуктовій аналітиці. На студентів чекає півтора місяці розвитку софт- та хард-скілів, професійна підтримка ментора, робота в команді лідерів ринку, компенсація за роботу.\nЗареєструватися на курс потрібно до 13 червня. Період стажування: 4 липня — 18 серпня.\nРеєстрація за посиланням.\nOneReach.ai Bootcamp\nOneReach.ai Bootcamp — це унікальна можливість навчитися створювати ботів та автоматизувати рутинні процеси без написання коду. Під час стажування учасники будуть працювати у парі з менторами. При вдалому завершенні OneReach.ai Bootcamp учасникам запропонують приєднатися до команди на постій основі у ролі No-code Developer.\nЩо ви навчитесь робити протягом OneReach. ai Bootcamp:\nстворювати кастомні рішення для розв’язання реальних проблем;\nспівпрацювати з командою професійних розробників;\nпрацювати з бізнес-вимогами.\nВимоги до кандидатів:\nтехнічна освіта;\nанглійська на рівні Intermediate і вище;\nрозуміння циклу розробки ПЗ;\nбажання вивчати нові технології;\nможливість працювати фултайм.\nГрафік: повний день (пн-пт)\nФормат: дистанційно\nТривалість: 1 місяць\nСтажування оплачуване, у разі фултайм зайнятості ставка — $500.\nПерспектива розвитку: при вдалому завершенні OneReach.ai Bootcamp вам запропонують приєднатись до команди на постій основі у ролі No-code Developer.\nДля подачі заявки необхідно відправити резюме на e-mail apply@onereach.com, після чого виконати технічне задання та відвідати онлайн-співбесіду.\nДедлайн подачі: 13 червня.\nJava & BA SandBox (Польща, Угорщина, Литва)\nДвомісячне стажування на реальному продукті від Exadel для бізнес-аналітиків-початківців та Java-розробників, які зараз знаходяться в Польщі, Угорщині та Литві. Більше, ніж 50% стажерів після навчання приєднуються до Exadel Family.\nВимоги до Javа-розробників:\nанглійська: Intermediate та вище;\nзнання ООП, алгоритмів та структур даних;\nзагальне уявлення про системи контролю версій;\nJava Data Types&Classes;\nJava Generics, Collections&Exceptions;\nJava JDBC і SQL.\nБуде плюсом: знання Spring, Spring Boot, Hibernate.\nВимоги до бізнес-аналітиків:\nанглійська: Intermediate та вище;\nГлибоке розуміння: життєвого циклу розробки програмного забезпеченн, процесу виявлення вимог, процесу аналізу та моделювання нотацій, класифікації та документування артефактів, верифікації, валідації та методів управління.\nБуде плюсом:\nбазове розуміння принципів UX, принципів об’єктно-орієнтованого програмування, API;\nдосвід використання Jira/Confluence, Trello, MS Visio, draw.io, Miro, Figma.\nСтарт: 4 липня. Тривалість — 2 місяці.\nРеєстрація: до 14 червня\nМова: англійська.\nРеєстрація за посиланням.\nPHP/Magento-інтернатура\nНа інтернатурі нададуть індивідуальну програму для навчання, яка складається із текстових та відеоматеріалів. Протягом навчання буде куратор, який допоможе і підтримає під час проходження програми, а по завершенню інтернатури є можливість стати частиною команди Elogic.\nЩо необхідно, щоб пройти відбір на інтернатуру:\nмати базові знання в PHP/MySQL;\nусна англійська B1 та вище.\nРеєстрація: до 14 червня\nРеєстрація за посиланням.','2022-12-03 00:21:35','2022-12-03 00:21:35'),(150,'Добірка дивних малюнків від штучного інтелекту, або як айтівці грають з DALL-E','Анастасія Пономарьова\nЖурналістка Highload','На Reddit айтівці створили канал, де діляться смішними, дивними та моторошними картинками, згенерованими штучним інтелектом (ШІ). Highload зробив добірку найкреативніших колажів.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nКоротка довідка\nМалюнки згенеровані в DALL-E — програмі ШІ, яка створює зображення на основі текстових описів. Вона використовує 12-мільярдну версію моделі трансформатора GPT-3 для інтерпретації введених даних природною мовою та створення зображень.\nПрограма розроблена OpenAI — дослідницькою лабораторією штучного інтелекту, одним із засновників якої був Ілон Маск.\nЧорний гумор\nЖарти про смерть, богів, людей з інвалідністю, диктаторів та терористів тут одні з найпопулярніших. Якщо вони здалися вам образливими, пам’ятайте: ми не підтримуємо такий гумор. Просто показуємо.\nНаприклад, один з айтівців запитав себе, а що як хтось захотів влаштувати гендер-паті (вечірку, присвячену визначенню статі ненародженої дитини) 11 вересня? Нагадаємо, що це жалобна дата в США — 2001 року цього дня відбулася серія терактів-самовбивств членами ісламістської організації «Аль-Каїда», через що обрушилися вежі-близнюки та загинули тисячі людей.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nОсь що вийшло.\nСкріншот\nІнші використовували у своїх малюнках Осама бен Ладена — голову тієї самої ісламістської організації. Хотіли б таку фігурку в свою колекцію?\nСкріншот\nПотрапили під роздачу також багато політиків, науковців та історичних особистостей, таких як Карл Маркс, Гітлер, Маргарет Тетчер, Стівен Хокінг.\nІ навіть Ісус, а також інші релігійні об’єкти, наприклад, моаї з острова Пасхи.\nПерсонажі\nЩо може бути смішніше, ніж взяти персонажів улюбленого фентезійного фільму — «Гаррі Поттера» чи «Зоряних війн», — і помістити їх ситуації з реального життя? Зробити те саме з персонажами з хорору!\nАбо поекспериментувати із героями мультфільму.\nТакож айтівціне пройшли повз відеоігр — особливо полюбилися герої Among Us.\nБез категорії\nІ на десерт добірка колажів, які не піддаються розподілу на категорії та взагалі будь-якій логіці — як таке на думку могло спасти! Невідомо, чим керувалися автори, формулюючи запит для картинки, але вийшло абсурдно та смішно.','2022-12-03 00:21:50','2022-12-03 00:21:50'),(151,'Де відпочити в Україні «невиїзним» айтівцям: гайд по локаціям','Анастасія Пономарьова\nЖурналістка Highload','Поширена в умовах війни проблема: попереду літня відпустка, але куди себе подіти — немає найменшого уявлення. Highload поспішає на допомогу айтівцям: ми зібрали безліч локацій, де можна відпочити та набратися вражень.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯк показало опитування Highload, більшості айтівців ніхто не забороняє взяти відпустку та відпочити. Проте на заваді стоять три перешкоди: діє заборона на перетин кордону для чоловіків, літаки не літають і немає варіантів, чим зайняти себе в Україні. Адже йде війна, до моря доступ закритий, південь окупований, а Карпати і Синевир і так у всіх на думці. А вдома сидіти — нудно.\nМи знайшли варіанти для різних видів відпочинку — для активних туристів, що не бояться ночівлі в наметі та кліщів, та «ледачих бегемотиків» — аналог турецького all inclusive, але без Середземного моря. О, і щє: всі локації віддалені від лінії фронту та кордонів країн-агресорів.\nВідпочинок на Дністрі\nЗвучить не так «інстаграмно», як Мальдіви, але тут є, що подивитися: вздовж його русла на межі Івано-Франківської, Тернопільської, Хмельницької та Чернівецької областей є замки, водоспади і навіть найбільший у Європі каньйон!\nНаприклад, поряд із селом Нагоряни є Червоногородський замок: напівзруйнована фортеця та старий костел потопають у зелені, неподалік можна помилуватися Джуринським водоспадом заввишки 16 метрів. Раніше тут був ще один стародавній водоспад — Дівочі сльози, але скеля обвалилася три роки тому і він перестав існувати, тож не вірте картам.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nЗа 15 км від замку, у бік села Івано-Золоте, знаходиться заповідник Дністровський каньйон.\n  Як дістатися: автобусом — з Тернополя в Нагоряни він ходить раз на день. Або на автомобілі, але будьте готові до поганих доріг та відсутності зв’язку — скачайте офлайн-карти.\nДе жити: у наметі — куди око впаде. А найближчий готель є в містечку Заліщики — гарний варіант, якщо ви їдете на автомобілі, оскільки розташований він неблизько. За ніч просять 500 грн, натомість тут є бар та басейн.\n…і знову каньйон\nНа цей раз ближче до столиці, на Черкащині. Тут розташовані скелі віком близько двох мільярдів років — круті (мрія альпініста) та мальовничі. Якщо вам подобається ідея провести відпустку, лазячи по скелях, купаючись у річці та засмагаючи, то ваш шлях лежить до Буцького каньйону. Там ще знайдете штучний водоспад Вир, що утворився на місці старої греблі.\nБуцький каньйон, фото nevdoma.com.ua\nЯк дістатися: з автостанції Черкас до Маньківки регулярно ходять автобуси, проїжджаючи через село Буки. Там ваша зупинка.\nДе жити: у наметі — вздовж річки у селі є два кемпінги. У селі в пішій доступності є кілька готелів (за ніч за двох ціна близько 900 грн), а також у Маньківці за 13 км є місцевий “Рейкартц” (без жартів) зі сніданками, басейнами та сауною. Ціна — 1,5-2,5 тисячі грн за ніч, залежно від дати заселення.\nНа озерах\nВолинь — озерний край України, але мальовничі Шацькі озера знаходяться прямо біля кордону з Білоруссю, недалеко від Бресту. Тому прямуємо на Львівщину, до Яворівського району. Тут компактно розташовані озера, заповідники, орнітологічний заказник, національні парки, вкриті лісами — рай натураліста. Тут же розташовані численні бази відпочинку.\nПовертаючись до водойм: тут можна купатися в Яворівському озері біля села Шкло, а також двох невеликих ставках — Верещиця біля однойменного села та Яновському ставі біля Івано-Франково (не плутайте з Франківськом). Останні два села розділяє природний заповідник “Розточчя” та каскад водойм, також поруч розташований Яворівський національний парк.\nЯк дістатися: автобусом зі Львова, відстань — 38-40 км.\nДе жити: в наметі (є місця для кемпінгу) або в базах відпочинку. Житло можна знайти як у самому селі Шкло, так і в сусідніх — Старичах, Новояворівську. За добу доведеться заплатити від 800 грн до 2100 грн за двомісний номер.\nУ печерах\nНе проти змінити чотири стіни квартири на щось екзотичніше? Тоді вирушайте до Тернопільської області. Тут є одразу дві печери, варті уваги. Перша називається Оптимістична, і це найдовша гіпсова печера у світі! Вона обладнана для комфорту туристів — є спеціальні стежки і гарне підсвічування, знайти гіда не важко. А ще всередині є кілька озер, найбільше — Мікрон — площею 500 кв. м. Кришталево чисте, але дуже холодне.\nЩе одна печера називається Кришталева. Вона менша, але також добре освітлена і безпечна для туристів. Назву свою отримала через кристали гіпсу, якими поросли стіни печери.\nКришталева печера, фото з Google maps\nЯк дістатися: печера Оптимістична розташована біля села Королівка, а Кришталева — неподалік Кривче. Щодня туди їздять автобуси із Тернополя кілька разів на день.\nДе жити: у наметі (знов-таки). Поруч житла не знайти, хіба що домовлятися про нічліг із місцевими жителями. Найближчий готель у Добровлянах, за 20 км від Оптимістичної та 26 км від Кришталевої. Ціна за ніч на двох — близько 900 грн.\nУ готелях \nДля айтівців, у яких немає бажання годувати комарів у наметі і хочеться максимального комфорту, зробили добірку готелів — по одному варіанту з кожної області, якщо незручно далеко їхати. Тут вас годуватимуть, розважатимуть, масажуватимуть спинку, грітимуть на зручних лежаках біля басейну або гірської річки. У добірці і лакшері-варіанти, і простіші будиночки (але з хорошими відгуками).\nВінницька область\nАпарт-готель у селі Степашки, найближче місто за 20 км — Гайсин. Гостям здають невеликі дерев’яні будиночки у лісі на березі водосховища. З розваг — сауна, гамак, риболовля, настільний теніс, піші прогулянки, купання та всілякі шашлики.\nЦіна: 2 000 грн за добу, в будинку чотири спальні місця.\nGOL&Wood, фото Booking.com\nЖитомирська область\nБудинок біля озера, розташований у селі Стрижівка, за 20 км від Житомира. Є басейн, тераса, барбекю та всі блага цивілізації, поруч ліс та озеро. Єдиний нюанс — потрібно знімати будинок повністю і платити за 7 спальних місць.\nЦіна : 4 000 грн за добу.\nLake House, фото Booking.com\nРівненська область\nПарк-готель Швейцарія розташований лише за 2 км від міста Рівне. Тут є озеро з приватним пляжем, де можна засмагати на лежаках та ловити рибу, ресторани та бар з караоке. А ще вартість проживання входять сніданки.\nЦіна: 1100 грн за добу.\nПарк-Готель Швейцарія, фото Booking.com\nІвано-Франківська область\nОт і дісталися Карпат. Тут можна зняти віллу в Яремче на березі гірської річки, на території є сад, басейн, зона барбекю. З розваг — верхова їзда, веслування на байдарках та піші прогулянки.\nЦіна: 2 500 грн за добу за двох.\nВілла Білогір’я, фото Booking.com\nЛьвівська область\nНа околиці Львова є великий сучасний готель курортного типу з басейном, приватним пляжем біля озера, баром, рестораном та “шведським столом” на сніданок. На базі готелю працює оздоровчий центр.\nЦіна : 5 000 грн за добу за двох.\nEmily Resort, фото Booking.com\nХмельницька область\nCountry house розташований у селі Марківці, за 46 км від Хмельницького, поряд — сад та річка. Готель називають гарним варіантом для спокійного відпочинку для двох (хоча шале мінімум на 3 спальних місця). З розваг — риболовля, пляж та споглядання природи.\nЦіна: 2 500 грн за трьох.\nCountry house, фото Booking.com\nВолинська область\nУ селі Згорани, за 44 км від міста Холм, здаються котеджі на березі озера. Обстановка в номерах спартанська, з розваг гостям пропонують барбекю, риболовлю та снорклінг.\nЦіна: 4 000 грн за дві доби (на менший період не здають), 7 спальних місць.\nCottages on Polyova, фото Booking.com\nЧернівецька область\nПарк-готель розташований у селі Таршани. Інфраструктура різноманітна: басейн, турецька лазня, фітнес-центр, ресторан, бар.\nЦіна: 1 900 грн за добу за двох.\nGeorg Park Hotel, фото booking.com\nЗакарпаття\nПовертаємось у гори: за 30 км від Ужгорода, в селі Анталівці можна оселитися в готелі з рестораном, баром, двома басейнами, спа-центром та паровою лазнею. А після масажів можна погуляти у лісі.\nЦіна: 1 400 грн за двох на добу.\nBogolvar Retreat Resort, фото Booking.com\nТернопільська область\nДещо старомодний готель з баром і садом розташований на березі озера, в містечку Бережани. Якщо набридне купання та риболовля, можна розважати себе прогулянками: все місто — державний історико-архітектурний заповідник.\nЦіна : 950 грн на двох за добу.\nЕдем, фото Booking.com','2022-12-03 00:21:50','2022-12-03 00:21:50'),(152,'Аналог OnlyFans, караоке та біг у віртуальних кросівках: добірка застосунків на блокчейні','Анастасія Пономарьова\nЖурналістка Highload','Застосунки на блокчейні — це не тільки трейдинг і купівля біткоїнів. На цій технології роблять соціальні мережі, сервіси для створення мемів, спорту та навіть онлайн-караоке! Ми зібрали в добірку Highload кілька застосунків (вдалих і не дуже), щоб розширити ваші уявлення про блокчейн і способи заробітку компаній на запуску таких продуктів.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nDisclaimer: ця стаття не є фінансовою порадою і ні до чого не закликає. Пам’ятайте, що будь-які операції з криптовалютою мають високий ризик — ніколи не вкладайте гроші, якщо не готові їх втратити.\nSTEPN\nЦе застосунок для підтримки активного способу життя, створений на web3 з вбудованими елементами Game-Fi та Social-Fi. Працює на блокчейні Solana, тому всередині застосунку ходова валюта — SOL.\nУ чому суть? Потрібно купити віртуальні NFT-кросівки, запустити трекер і бігати або просто прогулюватися. Виконуючи норму активності, користувачі можуть заробити ігрову валюту — нею можна користуватися в застосунку або перевести в готівку. Кросівки мають різні характеристики, наприклад швидкість руху, тому ціни на них різні.\nСкриншот\nРозробники називають свій застосунок хорошим способом пасивного заробітку, але при цьому від користувачів потрібні регулярні вкладення грошей. Віртуальне взуття «зношується» і вимагає «ремонту» — платного, зрозуміло. І чим більше у вас різних кросівок, тим більше ви можете заробити на активності (але з урахуванням стрибків курсу криптовалюти це не точно).\nСьогодні STEPN знаходиться на стадії публічного бета-тестування.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nSplinterlands\nКолекційна карткова гра Splinterlands своїм дизайном змусить задуматися про симбіоз карткових ігор про покемонів і персонажів World of Warcraft, стверджують розробники. У грі є сюжетна лінія та купа квестів за нею.\nСкриншот\nКолекційні картки дають різні можливості гравцеві, їх можна виграти в турнірах або купити за цифрову валюту — «кристали темної енергії». А цифрову валюту купують за крипту — Ethereum, Tron і WAX. Заробляти у грі користувачам пропонують на продажу та здачі в оренду власних рідкісних колекційних карток.\nГра побудована на блокчейні Steem.\nFarmers World\nПопулярна гра у ферму проникла й у світ блокчейну — тепер садити город, годувати курей і розводити цифрових корів можна в NFT-грі, що працює на платформі WAX. За криптовалюту тут можна купити, наприклад, три групи інструментів для видобутку основних ресурсів: деревини, їжі та золота. Вони відповідають трьом типам токенів: FWW, FWF, FWG.\nСкриншот\nРозробники уточнюють, що в їхньому проєкті можна фармити NFT, займаючись майнінгом і граючи в гру. При цьому попереджають, що перед реєстрацією варто уважно вивчити основну інформацію про процес майнінгу Farmers World.\nYup\nСоціальні мережі також можна будувати на блокчейні. Наприклад, у Yup можна дивитися відео чи фото різної тематики (музика, кіно, технології, політика тощо), збирати свої добірки з будь-якого контенту в інтернеті через розширення Yup і лайкати добірки інших людей.\nСкриншот\nЯк уточнюють розробники, сервіс винагороджує користувачів за цінні думки та добрий смак. Тобто, коли іншим подобається контент, який ти вподобав, у тебе на рахунку стає більше токенів YUP. Такі токени можна обміняти на криптовалюту або витратити в грі Yup Racing — платних олдскульних онлайн-перегонах.\nSomesing\nСуміш TikTok і караоке-бару, де можна заробити, якщо в тебе непогані вокальні дані. Платформа пропонує всім охочим співати безкоштовно, а також отримувати від слухачів винагороду у вигляді токенів. Тут використовують власну криптовалюту — SSX.\nСкриншот\nПлата за пісні, ймовірно, стимулює користувачів робити більше якісного музичного контенту. Але керівництво платформи доведеться взяти в долю: 40% донатів дістанеться сервісу.\nLiketu\nЦе вебсайт для обміну фотографіями, побудований на блокчейні HIVE. Тут можна обмінюватися фотографіями, а за додаткову плату створювати стіни для найкращих зображень. Такі стіни забезпечать найбільші перегляди: користувачі, які щойно підписалися на вас, побачать їх насамперед. Перегляд контенту користувачів платний — кожен встановлює свою ціну.\nСкриншот\nТворці мають повний контроль над засобами всередині платформи, а платежі здійснюються безпосередньо з допомогою HIVE або HBD. Цікаво, що ані розробники, ані користувачі не можуть видаляти контент з платформи (така особливість блокчейну), тому користувачам віком до 18 років не рекомендують користуватися Liketu. Хто знає, що опублікують дорослі — і вийде такий собі OnlyFans на блокчейні.\nCatecoin\nПопулярна завдяки Ілону Маску криптовалюта Dogecoin має «сестру» — Catecoin. Її використовують на однойменній платформі, де креативні користувачі можуть створювати меми, перетворювати їх на NFT та заробляти пожертвування. Тут кілька категорій для контенту: тварини, коти (як вищі хвостаті створіння), криптовалюта, Ілон, меми, мотивація, стосунки, WTF.\nСкриншот\nТворці позиціюють Catecoin як першу платформу, що орієнтована на ринок мемів і допомагає їх творцям заробляти гроші на гуморі. Проте зараз вона переживає не найкращі часи — меми специфічні й публікуються нечасто.\n ','2022-12-03 00:22:14','2022-12-03 00:22:14');
INSERT INTO `scrap_page` VALUES (153,'Безкоштовні та за гроші: добірка курсів для айтівців з блокчейну','Анастасія Пономарьова\nЖурналістка Highload','Ми вже розповідали, наскільки прибутковою може бути робота в ніші блокчейну. А сьогодні розберемося, де можна вивчити необхідні для роботи технології та скільки це коштуватиме. Як виявилося, багато інструментів є у відкритому доступі, головне — знати англійську мову.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nСoursera\nВеликий американський провайдер відкритих онлайн-курсів, заснований професорами комп’ютерних наук Стенфордського університету. Сoursera працює з викладачами відомих на весь світ навчальних закладів.\nТут є як базові, так і просунуті курси — не лише з блокчейну та специфічних мов. Якщо конкретніше, то тут майже 200 курсів зі: смартконтрактів, алгебри, фінтеху, криптовалюти, бізнес-моделей, Decentralized Finance (DeFi) та інших напрямів. Тривають курси від кількох тижнів до кількох місяців.\nСкриншот\nУ програмах — навчальні відео, матеріали для самостійного вивчення та тести. Щоб учні були дисциплінованими, тут є фіксований термін здачі. Бити байдики не вийде.\n4ire Academy\nКурси проводить шведсько-українська IT компанія, що спеціалізується на DeFi, фінтеху та Green Finance. Курси безкоштовні, після навчання навіть пропонують працевлаштування в компаніях-партнерах. Але навчають лише досвідчених розробників. Наразі очікується набір на два онлайн-курси, пов’язані з блокчейном.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nRust 1.0\nІнтенсивний курс, де учні можуть отримати практичні навички роботи зі смартконтрактами для архітектури WASM на NEAR Blockchain, а також створити два власні мініпроєкти на передових технологіях. Курс складається з двох частин: General Rust (10 уроків) та Near (6 уроків).\nЗагалом протягом двох місяців пройде 19 занять.\nЩо потрібно: мати досвід в одній з технологій — Node.js, Python, Rust, Golang, C++, Java, Go, Java, JavaScript, React, Vue.js, Angular.\nСкриншот\nSolidity\nІнтенсивний курс розробки смартконтрактів на Ethereum. Протягом півтора місяця студентів навчатимуть вибудовувати інфраструктуру для розробки смартконтрактів з нуля та познайомлять з популярними інструментами розробки на платформі Ethereum. А ще, звісно, навчать писати, деплоїти, тестувати.\nУ програмі заплановано 12 уроків.\nЩо потрібно: крім інтересу до блокчейну достатньо базового досвіду в розробці.\nEthereum.org\nЦе загальнодоступний освітній ресурс з відкритим кодом для спільноти Ethereum, який фінансується Ethereum Foundation. Тут є добірка англомовних інструментів — платних і безкоштовних, які допоможуть поекспериментувати з написанням смартконтрактів і розумінням криптовалюти. Вони стануть вам у пригоді, щоб попрактикуватися після курсів.\n«Пісочниці» для коду\nНа вибір представлені три «пісочниці»: Eth.build (практика виключно з web3), Replit (Solidity, web3), Remix (Solidity, Vyper). Тут є не тільки середовище для розробки, але й відео, інструкції, підказки, перевірка помилок. З їх допомогою ви швидше навчитеся писати, компілювати та розгортати свої смартконтракти.\nІнтерактивне навчання\nМожна пізнавати нетрі Ethereum в ігровій формі — безкоштовна платформа CryptoZombies допоможе вивчити Solidity на прикладі створення гри про зомбі. А Ethernauts і Capture the Ether дозволять дізнатися більше про захист смартконтрактів Ethereum через їх злам. І з кожним рівнем процес ускладнюватиметься.\nСкриншот\nОнлайн-табори та курси\nУ добірці кілька таборів, де студентів вчать розробці у Web 3.0, розповідають про криптовалюту та NFT. Вартість навчання, щоправда, «кусається».\nChainShot\nBootcamp розрахований на 10 тижнів, протягом яких студентів навчать:\nкриптографії блокчейну;\nглибокого розуміння Ethereum;\nрозробці смартконтрактів на просунутому рівні;\nстворенню та розгортанню децентралізованих застосунків.\nКоли стартує навчання: 18 липня та 10 жовтня.\nЦіна: $3000.\nКрім того, на тій самій платформі є п’ять базових навчальних курсів — уже безкоштовних.\nBloomTech\nТут можна пройти 10-тижневий онлайн-курс із web3. У план входять десять спринтів, які допоможуть вивчити основи блокчейну, Ethereum, Solidity, DeFi та смартконтрактів. Щотижнева зайнятість складе приблизно 15 годин, у тому числі:\n2 години навчання з допомогою записаних відеороликів;\n2 години на перегляд навчальних матеріалів і виконання тестів;\n11 годин виконання проєктів для кожного спринту;\nзідзвони й обговорення у прямому ефірі двічі на тиждень.\nКоли стартує навчання: коли вам зручно — дату вказуєте в заявці.\nЦіна: $5500 + купівля 0,1 ETH ($204) для розгортання в основній мережі Ethereum.\nСкриншот\nАле в добірці є ще кілька безкоштовних інструментів. Наприклад, на платформі buildspace купа проєктів створення застосунків web3, магазинів, колекцій NFT. Деякі з них займають кілька днів, деякі — тиждень. А на сайтах NFT School і Pointer ви знайдете багато теорії про NFT й туторіали.\nUdemy\nПопулярна американська платформа для онлайн-навчання пропонує сотні платних курсів на будь-який смак і рівень підготовки. Тут можна вивчити:\nблокчейн;\nкриптовалюти (Ethereum, Bitcoin та інші, а також пов’язані з ними технології);\nсмартконтракти;\nдецентралізовані застосунки;\nNFT.\nВартість курсів варіюється в межах від $20 до $200. У програмі — самонавчання за готовими відео та статтями. Фідбек ви навряд чи отримаєте, зате у вас залишиться довічний доступ до матеріалів.','2022-12-03 00:22:25','2022-12-03 00:22:25'),(154,'Безкоштовне вивчення мов та пожертвування у крипті: 7 стартапів, які підтримали українців під час війни','Adam Shulman BLOG\nНезалежний ІТ-журналіст','Після початку війни в Україні багато компаній виступили з ініціативами, щоб допомогти людям та бізнесу в країні: наприклад, Airbnb фінансує та надає тимчасове житло для 100 тисяч біженців з України, а маркетплейс виробів ручної роботи Etsy скасував збори для українських продавців.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЦі зусилля поєднали не лише великі глобальні бренди, але й стартапи з різних країн. У своїй статті я хочу розповісти, яку підтримку вони надають.\nDestream\nМіжнародна донатна платформа для контент-креаторів destream на шість місяців запровадила нульову комісію для українських користувачів.\nУкраїнці тепер працюють без комісії\nСуму, яку отримує креатор, можна вивести без втрат, тому що сервіс покриває комісію платіжних систем на 100%.\nКомпанія пропонує інструменти для отримання донатів, у тому числі в криптовалюті, через всі можливі варіанти платіжних систем із широким географічним охопленням. Окрім того, блогери та стримери зможуть отримувати оплату в будь-якій валюті без необхідності виведення донатів на банківську карту, натомість використовуючи спеціалізовану картку destream.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nВикористовувати картку destream, яку буде запущено в середині літа, можна як і звичайну банківську картку. На сьогодні у destream понад 33 тисяч користувачів, які зробили донати на суму понад 4 млн євро.\nBolt\nЕстонський мобільний додаток для виклику таксі Bolt запровадив нульову комісію для всіх сервісів в Україні та жертвує 5% вартості замовлень європейським некомерційним організаціям, таким як «Червоний хрест».\nДля всіх сервісів в Україні тепер 0% комісії\nТаким чином компанія розраховує зібрати пожертвування у розмірі понад 5 млн євро. Сервіс надає стимули водіям із Польщі та Словаччини, які працюють на кордоні, для транспортування біженців із України.\nBolt включає службу виклику таксі, доступну в 45 країнах, сервіс доставки їжі Bolt Food, каршеринг Bolt Drive та прокат електросамокатів та велосипедів.\nFlixbus\nFlixbus — автобусний сервіс під керуванням німецького транспортного стартапу FlixMobility. Сервіс надає безкоштовні квитки біженцям незалежно від їхньої національності.\nБіженці отримують безкоштовні квитки\nКомпанія запустила додаткові маршрути для людей, які прибувають на українсько-польський кордон із міст Польщі та Румунії. FlixBus також використовує свій автопарк та залучає партнерів для перевезення продовольчих запасів для допомоги мирному населенню.\nКомпанія Flixbus, штаб-квартира якої розташована у Берліні, здійснює дальні пасажирські автобусні перевезення по всій Європі та США.\nBitpanda\nКриптовалютна платформа Bitpanda створила Фонд реагування на надзвичайні ситуації (Emergency Response Fund), до якого користувачі можуть вносити пожертви у криптоактивах.\nРобить пожертви у крипті\nBitpanda запустила кампанію та внесла власну пожертву у розмірі 100 тис. євро, а також по 50 тис. євро від кожного із засновників компанії.\nПершими кошти отримають «Український кризовий фонд порятунку дітей» та організація «Лікарі без кордонів» (MSF). Платформа Bitpanda надає послуги з торгівлі криптовалютами, такими як біткойн або ефіріум, дорогоцінними металами та цінними паперами.\nDuolinguo\nСервіс із вивчення іноземних мов Duolinguo жертвує прибуток від реклами для тих, хто вчиться говорити українською, міжнародним гуманітарним організаціям, таким як Управління верховного комісара ООН у справах біженців, International Rescue Committee та інші фонди для допомоги біженцям.\nБіженці можуть безкоштовно користуватися преміум-підпискою\nКомпанія розповсюджує промокоди для безкоштовного використання преміальної версії Duolingo Plus серед біженців та людей, що їх приймають. Одночасно Duolingo English Test працює з навчальними асоціаціями для надання допомоги українським студентам у складанні тестів на знання англійської мови для вступу до вишів.\nWunderflats\nСервіс із пошуку мебльованого житла в Німеччині Wunderflats допомагає українським біженцям знайти тимчасову домівку. Вартість житла залишається на розсуд орендодавців, хоча представники платформи зазначають, що дві третини власників надають свої квартири безкоштовно.\nДопомогає біженцям у Німеччині знайти домівку\nКомпанія об’єднує орендарів, орендодавців та компанії на одному сайті, щоб зробити оренду мебльованих квартир у великих містах Німеччини максимально зручною.\nGlambook\nGlambook — європейський стартап, що представив глобальну SaaS-платформу для самозайнятих майстрів: перукарів, косметологів, бровістів та інших незалежних б’юті-фахівців. На платформі зареєстровано понад 4 тисяч майстрів з Берліна, Лондона, Мілана та 50 інших європейських міст.\nУкраїнські майстри зможуть безкоштовно отримати доступ до клієнтської бази\nПлатформа відкрила безкоштовний доступ для українських майстрів до клієнтської бази в європейських країнах та пріоритетно просуває їх усередині додатка.\nЩоб допомогти професіоналам б’юті-індустрії, які втратили роботу через війну і були змушені виїхати з країни, компанія переклала свій сайт українською мовою, підготувала гайдлайни та рекомендації, як розпочати незалежну роботу у сфері б’юті, та відкрила доступ до широкої бази клієнтів у Європі.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:22:25','2022-12-03 00:22:25'),(155,'«Кривава» катастрофа Theranos: як «Стів Джобс у спідниці» стала головною шахрайкою Кремнієвої долини','Сергей Гузенко BLOG\nCEO в WEZOM','У світлі краху криптобіржі FTX побутує думка, що «бульбашки» та шахрайство в IT — це перш за все про блокчейн. Але чи так це насправді?\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nДнями в США 11 років ув’язнення отримала бізнесвумен Елізабет Голмс, яку називали новим Стівом Джобсом. Її стартап Theranos мав здійснити революцію в медицині, але натомість породив величезний скандал, судовий розгляд про шахрайство та непоганий драматичний серіал для Hulu.\nДавайте згадаємо цю повчальну історію. Як взагалі стала можливою афера на $9 мільярдів? Як в ній опинилися два колишні держсекретарі та екс-президент США? І чи міг Theranos досягти успіху попри все?\nЗ чого все почалося\nЕлізабет Голмс народилася у «золотій» родині. Батько – топменеджер енергетичної компанії Enron, мати працювала в Конгресі США. Елізабет з дитинства проявила себе дуже обдарованою і була приречена на світле майбутнє. Після школи вона вступила до Стенфордського університету, де вивчала хімічне машинобудування.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nВже на першому курсі обдарована студентка змогла потрапити на практику до Геномного інституту Сінгапуру, де займалася вивченням зразків крові. Там Голмс звернула увагу на проблеми цього процесу. Забір крові потребує певної логістики, кваліфікованого медперсоналу та складного обладнання.\nСаме собою напрошувалося питання: а чи можна спростити аналіз зразків за допомогою технологій?\nЕлізабет спалахнула ідеєю створення компактного пристрою, який міг би на місці провести 240 аналізів всього по одній краплі крові, і дати на цій підставі повний звіт щодо стану здоров’я пацієнта. Ідея не на мільйон, а на десять мільярдів доларів.\nКроки до успіху\n19-річна Голмс негайно кинула навчання в університеті, щоб змінити світ стежкою Білла Гейтса та Стіва Джобса. У 2003 році вона заснувала стартап RealTimeCures, пізніше перейменований у Theranos (від слів Therapy та Diagnosys).\nЧимало науковців тоді намагалися відмовити її, наполягаючи, що сама концепція компактного аналізатора не є реалістичною. Але знайшлися й прибічники. Наприклад, професор Стенфорда Ченнінг Робертсон підтримав Елізабет і став першим інвестором її стартапу. Надалі він увійшов до ради директорів Theranos.\nТут треба сказати пару слів про «криваві» справи\nБудь-який лаборант може пояснити, що найкращим матеріалом для медичної діагностики є кров із вени — вона густа, тож із неї можна зробити більше зразків та провести більше аналізів. Але робити забір крові з вени — такий собі досвід. Це неприємний для пацієнта процес, який потребує належних санітарних умов та персоналу.\nЄ простіший варіант: забір зразка крові з пальця. Але це капілярна кров, вона більш рідка і підходить лише для базових аналізів. При цьому з одного забору крові можна зробити всього 15-20 зразків.\nУ Theranos почали працювати над пристроєм під назвою «Едісон» — це революційний аналізатор крові, «лабораторія на чіпі». За задумом розробників, забір крові у пацієнтів проводився через спеціальну капсулу, яку назвали нанотейнер.\nНанотейнер з краплею крові поміщали в «Едісон», де творилася магія. Вже за годину аналізатор видавав точні та докладні результати аналізів пацієнтів. Їх можна було зберігати у хмарі, інтегрувати до IT-екосистеми медицини, скорочувати бюрократію.\nТеоретично все це звучало чудово: оптимізація одного з ключових елементів медичної діагностики за допомогою IT, можливість змінити правила гри на ринку з річним оборотом у $70 мільярдів.\nТрадиційний аналіз крові із пальця дозволяє провести приблизно 15 базових аналізів. Але в Theranos наполягали, що одна крапля крові дозволить їм провести цілих 240 різних тестів! Саме таку концепцію продавали інвесторам.\nЗрозуміло, технологія «Едісона» і нанотейнера вимагала солідних інвестицій. І вони прийшли.\nПитання грошей\nНа Theranos пролився рясний дощ з доларів. З одного боку, ідея була переконливою, за нею стояли вчені зі Стенфорда. З іншого боку, не останню роль вочевидь зіграла репутація та зв’язки сімейства Голмс — а це зв’язки у добірних вершках американського суспільства.\nСтартап успішно просувався у ЗМІ: журналісти називали молоду бізнесвумен «Стивом Джобсом у спідниці», і вона активно підігравала, копіюючи його манеру виступів та звичку носити чорну водолазку.\nСеред інвесторів Theranos були екс-президент США Білл Клінтон та медіамагнат Руперт Мердок. А до ради директорів входили колишні держсекретарі США Генрі Кіссінджер і Джордж Шульц, а також голова Пентагону при президентові Трампі Джеймс Меттіс. Вочевидь, таку компанію міг зібрати під одним дахом лише дуже серйозний та перспективний бізнес. Посадовці та бізнесмени вишиковувалися до нього в чергу, щоб інвестувати.\nУ ті золоті часи Forbes оцінював вартість Theranos у $9 мільярдів, а Елізабет Голмс регулярно входила до різноманітних рейтингів наймолодших мільярдерів світу.\nА що з технологіями? \nЗ технічної точки зору «Едісон» мало чим відрізнявся від вже наявного на ринку обладнання — у ньому була центрифуга та начинка для аналізу зразків крові. Нанотейнер не містив жодних нанотехнологій і в цілому був звичайною пробіркою з голкою.\nПри цьому робочого прототипу «Едісона» практично ніхто не бачив. На презентації Елізабет ходила з порожнім корпусом, у якому не було «заліза». Інвесторів доводилося переконувати в ефективності технології на словах, і Елізабет була в цьому майстром.\nГлава дослідницького відділу Theranos Єн Гіббонс, якщо вірити ЗМІ, часто говорив Голмс, що презентувати пристрій та роздавати обіцянки, м’яко кажучи, передчасно. Він же вимагав зробити корпус «Едісона» значно більшим, що розцінювалося в компанії як відмова від головної фішки стартапу.\nСам прототип, якщо він взагалі був працездатним, міг сяк-так видавати все ті ж 15 аналізів, але аж ніяк не 240. Попереду були ще роки розробки та випробувань.\nОднак Елізабет не могла роками чекати на дослідження, результат яких зовсім не гарантує успіху. Бізнес потрібно було розвивати, інвесторів вабили гучні заголовки новин, і вона справно працювала на них — у найгірших традиціях принципу Fake it ’til you make it. Так називають сумнівну, але робочу стратегію розвитку стартапів: імітувати наявність продукту, доки він не дійсно не буде створений.\nСуть у тому, щоб презентувати технологію та вибити під неї фінансування, навіть якщо сама технологія існує лише у вигляді кількох загальних тез. На отримані кошти можна втілити технологію у життя. Ну або не втілити.\nІнвесторам, наприклад, можна пообіцяти послуги автоматичного бухобліку на основі ШІ, а насправді доручити роботу не алгоритмам, а філіппінським бухгалтерам на аутсорсі. Це теж реальний кейс, який заслуговує на окрему увагу. \nПомилковий шлях\nОсь за це і взялася Елізабет Голмс — вдарилася в маркетинг та імітацію технології, хоча її створення було справою далекої перспективи.\nЦе не завадило Theranos запустити випробування на людях. Добровольців запрошували до офісу, де стояв «Едісон». Вони здавали кров на аналіз і йшли до їдальні перекусити, а приблизно за годину отримували результати аналізів крові.\nЗі сторони все було чудово, інвестори продовжували вкладатись у проєкт. Десь в ці часи до ради директорів компанії увійшов бойфренд та бізнес-партнер Елізабет Рамеш Бальвані, який ще зіграє в цій історії свою роль.\nНаступним кроком стала спроба вийти на масовий ринок до справжніх користувачів. У стартапу з’явилися контракти на постачання аналізаторів до американської мережі супермаркетів SafeWay. Вони інвестували у постачання «Едісонів» для своїх магазинів $300 млн. Трохи згодом підключилися і мережа WalGreens — вони хотіли встановити експрес-аналізатори у свої аптеки.\nТа в цей момент компанія зіткнулася з першими реальними складнощами. Спочатку постачанням зацікавилося американське агентство FDA — Федеральне управління з нагляду за якістю харчових продуктів та медикаментів. Вони знайшли у методиці роботи Theranos суттєві порушення, поставивши під сумнів точність аналізів та безпеку його роботи зі зразками крові.\nПри цьому сама компанія залишалася дуже закритою, всі співробітники підписували жорсткий договір про нерозголошення і дотримувалися його під суворим наглядом юристів. Виникли чутки, що в компанії панує токсична атмосфера, а тендітна Елізабет поводиться зі своїми співробітниками як справжній тиран!\nКатастрофа\nПротягом років Theranos не публікувала свої дослідження в рецензованих наукових статтях і не розкривала принципів роботи «Едісона». Закритість врешті зіграла з компанією злий жарт, адже ситуацію почали розслідувати експерти та журналісти.\nУ 2015 році The Wall Street Journal випускає великий матеріал про стан справ у компанії та знищує її публічний імідж. Суть статті в тому, що ключова технологія Theranos не працює, компанія фактично бреше інвесторам.\nУ статті журналіста Джона Керрейру описувалися абсурдні практики, згодом він присвятив Theranos цілу книгу. Скажімо, учасники тестів здавали кров і на прохання менеджерів йшли відпочивати. А їх зразки відразу вирушали не в «Едісон», а у лабораторію, де стояли класичні аналізатори Siemens.\nПри цьому навіть професійне обладнання не могло виконати 240 заявлених тестів, на яких наполягали в компанії. Щоб зробити більше аналізів, зразки доводилося розводити, і це знижувало точність діагностики. Для отримання державної сертифікації результати теж відбиралися — посадовцям від охорони здоров’я показували лише найуспішніші та найточніші тести.\nЯк з’ясувалося пізніше, Голмс знала про підготовку матеріалу і намагалася перешкодити цьому. Серед інвесторів Theranos був Руперт Мердок — один із співвласників WSJ, тому вона звернулася до нього. Але Мердок втручатися у роботу редакції не став.\nУ день виходу статті Елізабет дала інтерв’ю на ТБ, країна чекала від «нового Стіва Джобса» роз’яснень. Але вона обмежилася лише закидами до своїх критиків, не зумівши сказати нічого за фактами.\nНезабаром настали наслідки. 2016 року американські регуляційні органи визнали одну з лабораторій Theranos небезпечною для здоров’я громадян. Через ненадійні тести лікарі могли призначати пацієнтам помилкове та шкідливе лікування.\nПравоохоронні органи відкрили проти Theranos кримінальні справи про обман інвесторів. У 2018 році Голмс зіткнулася ще з низкою звинувачень, їй загрожувало до 20 років ув’язнення.\nСудова тяганина\nНа судових засіданнях з’ясувалась безліч подробиць про таємне життя Theranos. Скажімо, чималу частку коштів від інвесторів Голмс та її вже екс-бойфренд Бальвані витрачали на розкішне життя.\nСпівробітників фактично змушували займатися підробкою та фальсифікувати результати тестів під загрозою звільнення. На додаток, юристи Theranos готові були кошмарити незадоволених фахівців судами навіть після звільнення — за розголошення комерційної таємниці.\nУ компанії процвітав принцип «незнання — сила». Співробітникам заборонялося згадувати у LinkedIn найменування Theranos та вказувати там відомості про свою посаду та обов’язки. Система була побудована так, щоби співробітники з різних відділів не мали можливості спілкуватися між собою.\nЗахистом репутації Theranos займалася недешева команда юристів, був навіть відділ правок статей у Вікіпедії.\nОдин із найсумніших епізодів стосувався провідного наукового співробітника Theranos Єна Гіббонса — він наклав на себе руки після багаторічної боротьби з раком, в атмосфері постійних конфліктів з Голмс та патентних суперечок. Після смерті науковця Елізабет замість співчуття затребувала у дружини Гіббонса віддати їй його робочий ноутбук.\nКоли над компанією почали згущуватись хмари, інспекцію лабораторії Theranos на запрошення Голмс провів сам Джо Байден, який тоді був віце-президентом США. Байден тоді залишився задоволеним, але надалі з’ясувалося, що Голмс та Балвані привели його до «декоративної» лабораторії, розігравши цілу виставу.\nАдвокати Голмс наполягали на її некомпетентності у лабораторних питаннях, перекладали провину на інженерів та науковців. А сама Елізабет на суді виставила себе жертвою: нею нібито маніпулював її багаторічний бізнес-партнер та коханець Рамеш Бальвані, який насправді і був головним лиходієм усієї цієї історії. Як кажуть, не все так однозначно, і всієї правди ми ніколи не дізнаємось.\nВрешті Елізабет Голмс визнали винною у чотирьох випадках шахрайства з метою збагачення. Їй присудили 11 років ув’язнення. Рамеша Балвані судять окремо, вирок йому буде винесено за кілька тижнів.\nВисновки \nЩо ми можемо здобути з цієї історії? Як мінімум запам’ятати, що хайп, авторитети та гучні імена абсолютно не гарантують успіху бізнесу чи розробки. Потрібно дивитися на продукт, за можливості вивчати його технології, обговорювати реалістичність стартапу з експертами, дивитися на ринок загалом.\nБагато хто пророкував, що історія Theranos поставить хрест на всій біотехнологічній галузі, і навіть на культурі стартапів як такій. На щастя, цього не сталося, але інвестори стали набагато уважнішими.\nЧи справді Елізабет Голмс від початку мала намір усіх надурити? Сьогодні фахівці дивляться на ключову ідею Theranos вже не так скептично, як 20 років тому — створення мікрофлюїдних пристроїв та компактних засобів діагностики вважається цілком перспективним напрямом у медичних дослідженнях.\nХто знає, можливо, дівчина і змогла б змінити світ. Якби не захопилася принципом Fake it ’til you make it, якби слухала своїх фахівців і не ставила маркетинг на чолі, якби банально не кошмарила своїх співробітників. Чудові уроки для будь-якого менеджера.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:22:30','2022-12-03 00:22:30'),(156,'Розробка, дизайн та софт-скіли: ще 5 посилань на безкоштовні IT-курси для українців','Богдан Мирченко\nРедактор новостей','У Facebook-акаунті виробника комп’ютерів U-Genius опублікували список безкоштовних IT-курсів для фахівців з України. Доступ до своїх ресурсів відкрили провідні освітні платформи. Ось вони.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n1. Projector Institute\nБезкоштовний місячний доступ до 12 відеокурсів факультету Humanitarium. Підійде для тих, хто хоче прокачати свої софт-скіли і більше дізнатися про дизайн.\nЩоб отримати доступ: \nперейдіть за посиланням та оберіть відеокурс, який вам до вподоби;\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nнатисніть на кнопку «Придбати відеокурс»;\nзареєструйтесь;\nвведіть промокод: 0688-5072;\nвивчайте. \nПримітка: промокод діє до дня перемоги та місяць після. \n2. Онлайн-школа «Крео»\nПропонує безкоштовний курс для тих, хто бажає навчитися працювати на платформі Upwork. Докладніше про все тут. \n3. Coursera\nОсвітня платформа з понад 200 університетами відкрила українцям безкоштовний доступ до своїх програм. Все, що потрібно зробити, це подати заявку та почати навчатися. \n4. Campster\nУсі курси — від вивчення розробки програмного забезпечення до підвищення софт-скіллів — безкоштовні для українців. \n5. Boosta Academy\nМіжнародна IT-компанія Boosta відкрила безкоштовний доступ до чотирьох курсів для маркетологів. Подробиці — на сайті академії . \nЩе більше безкоштовних курсів знайдете у нашому матеріалі за посиланням.','2022-12-03 00:22:49','2022-12-03 00:22:49'),(157,'$20 000 на місяць і вище: які спеціальності є в блокчейні та скільки платять айтівцям','Анастасія Пономарьова\nЖурналістка Highload','Блокчейн — малознайома та незрозуміла багатьом айтівцям сфера. Але якщо ви колись вирішите дізнатися про неї більше та вивчити певні технології, ваш дохід може зрости у рази. Про те, які фахівці у сфері блокчейну затребувані на ринку (зокрема, американському), що потрібно знати айтівцю та скільки платять, читайте в огляді Highload.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nРаніше в інтерв’ю Culture Lead у ChainSafe Systems Поліна Аладьїна розповіла нам про сферу блокчейну, її особливості та «точку входу». Вона уточнила, що блокчейн — ідеальна ніша для тих розробників, кому не дуже подобається програмувати, але подобаються дискретна алгебра та криптографія.\nCulture Lead у ChainSafe Systems Поліна Аладьїна\n«У блокчейні найчастіше зустрічаються Rust, JavaScript (JS), Golang, рідше Python. Через технологічні особливості кожен новий блокчейн найчастіше реалізує свою мову програмування (спеціально під свій блокчейн). Як Solidity в Ethereum. Саме через цю особливість багато компаній не шукають готових фахівців, а наймають мідлів з досвідом у JS, наприклад, і вчать їх писати програми під конкретний блокчейн», — каже Поліна.\nЯк ви вже зрозуміли, затребуваним у блокчейні є знання не лише специфічних мов програмування на кшталт Solidity чи Simplicity, але й C++ чи Scala. Тож не обов’язково повністю переучуватися — на старті достатньо бути хорошим спеціалістом у своїй сфері (з досвідом роботи від п’яти років), знати англійську і, як кажуть, вміти «схоплювати на льоту».\nА що тоді потрібно від досвідчених? Ми промоніторили сайти пошуку роботи у сфері блокчейну — Crypto Jobs List, Blockchain Headhunter, CryptoJobs — і ось кого хочуть отримати роботодавці.\nRust Engineer\nНасамперед потрібен досвід роботи з виробничими системами, побудованими на Rust. На роботі вам доведеться проєктувати, створювати, тестувати та запускати смартконтракти. Тобто потрібно мати загальне уявлення про логіку смартконтрактів. Крім Rust, часто потрібні знання інших технологій, наприклад, Golang.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nЦінується досвід роботи в проєктах з відкритим вихідним кодом на відомих блокчейн-платформах, таких як Solana. Якщо хочете працювати над криптовалютою, не зайвим буде досвід у фінтеху.\nУ західних країнах, крім хард- і софтскілів, також важливою є кваліфікація в галузі обчислювальної техніки, математики або інших відповідних областей. Тобто диплом.\nСкільки платять: senior — $12,5–17 тис. на місяць\nSolidity Engineer\nДо ключових обов’язків інженера Solidity входить написання високоякісного та безпечного коду (тому що його від початку потрібно писати без помилок), а також технічної специфікації, розгортання скриптів, написання автотестів та багато іншого.\nСписок вимог до інженера зазвичай включає досвід розробки на JavaScript із використанням бібліотек web3.js/ethers.js, розуміння основ блокчейну, поширених векторів атак та вразливостей, розуміння роботи Ethereum. І досвід зі стеками смартконтрактів, куди ж без них.\nМем «Занурюємося у світ блокчейну»\nТакож вам знадобиться вища технічна освіта в галузі математики, інформатики, інженерії, досвід роботи з бібліотеками OpenZeppelin, Tenderly, Hardhat, інструментами тестування Ethereum (наприклад, Truffle, Embark, Hard Hat тощо), знання та розуміння основ фінансів.\nСкільки платять: до $25 тис. (і $450 тис. бонусу на рік токенами, наприклад).\nC++ Developer\nУже щось знайомою мовою, правда? Тільки в розробника на C++ у блокчейні мають бути дещо нестандартні навички та знання. Як мінімум потрібно йти в ногу з найновішими технологіями у сфері блокчейну. На інженера можуть покласти такі обов’язки:\nвідповідальність за дизайн функцій, розробку, тестування та розгортання для блокчейну;\nвиправлення помилок та розв’язання проблем на базах коду;\nтехпідтримка (для бірж і майнерів, наприклад);\nобслуговування основної мережі, включаючи аналіз мережевих збоїв, моніторинг працездатності, встановлення виправлень, оновлення.\nВід розробників вимагають освіту в галузі комп’ютерних наук, обов’язково добре знання C++ та додаткових технологій (наприклад, володіння Linux, AWS та Kubernetes).\nСкільки платять: до $20 тис.\nScala Engineer\nНа таких інженерах лежить завдання оптимізації коду, написання автотестів та забезпечення якості коду. Якщо це буде робота з криптовалютою, то вирішення складних завдань у контексті фінансів і розподілених систем, написання коду для створення інфраструктури, здатної обробляти електронні гроші та криптовалютні транзакції.\nРоботодавці також хочуть мати фахівців, які мають досвід роботи з технологіями JVM, RDBM та хмарними архітектурами, зі знанням архітектури CQRS/Event Sourcing.\nСкільки платять: до $12,5 тис.\nJavaScript Engineer\nОкрім хорошого знання JS від розробників часто очікують на володіння технологіями React, Web3, TypeScript, Node.js, CSS. Ймовірно, крім створення нових функцій на роботі доведеться писати тести, тому досвід у Jest та Cypress не буде зайвим. \nУ цілому, якщо ви не дуже добре знаєтеся на блокчейні, але хороший інженер, вас все одно візьмуть на роботу. Нехай і на ставку скромнішу.\nСкільки платять: senior – $7–12,5 тис.\nGolang Developer\nЯкщо ви вже три роки пишете на Golang, можна сміливо прокладати шлях до блокчейну. Також тут часто вимагають досвід розробки серверної частини, створення (або участі у створенні) вузлів блокчейну.\nІноді потрібен підтверджений досвід роботи з хмарними інфраструктурами, децентралізованими платформами, кількома технологіями, наприклад P2P, Docker, Python, Kubernetes, Java або Unix. Цінується наявність вищої освіти в галузі комп’ютерних наук, знання про блокчейн і цифрові валюти, стейкінг.\nСкільки платять: до $15 тис.\nHead of Tokens\nМожна йти працювати в блокчейн, навіть якщо ви не пишете код. Окрім дизайнерів і продакт-менеджерів тут може знадобитися «головний по токенам». Такі фахівці розробляють стратегії збільшення вартості токенів, визначають способи реалізації їхньої цінності, знижують ризики операцій з токенами, працюють з біржами та іншими гравцями екосистеми.\nНеобхідно знати, як працює блокчейн, децентралізовані фінансові сервіси (DeFi), добре розумітися на фінансових принципах. Плюсом стане торговий досвід.\nСкільки платять: до $15 тис.','2022-12-03 00:23:00','2022-12-03 00:23:00'),(158,'«Тімлід зірвався на мене»: як я 8 місяців шукав роботу в IT (і про темну сторону співбесід)','Анастасія Пономарьова\nЖурналістка Highload','Працевлаштування в IT без досвіду be like: 8 місяців спроб, десятки співбесід, сотні відправлених CV, і ось вона перша робота! Таку історію розповів Junior QA Engineer в Avirise Кирило Вечеринській.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nВін поділився досвідом пошуків роботи у період війни та нюансами, які дозволять влаштуватися швидше. Не обійшлося, звісно, без треш-історій.\nДалі — від першої особи.\nПошуки роботи та війна\nJunior QA Engineer в Avirise Кирило Вечеринській\nРоботу я шукав досить довго, з січня 2022 року до серпня — близько 8 місяців. Почав пошуки ще до фінального іспиту на курсах, щоб уже зарекомендувати себе як фахівця, отримувати досвід співбесід.\nЧому так довго? На жаль, новачки зараз не надто затребувані. Компанії хочуть спеціаліста, який має досвід хоча б 6 місяців на позиції QA. Але й для недосвідчених джунів вакансії таки є! Більше шансів знайти роботу в тих, хто має англійську на рівні Intermidiate та вище. Тому не нехтуйте англійською.\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nЯ шукав роботу на всіх можливих каналах: DOU, Djinni, Work.ua, Rabota.ua, LinkedIn. Публікував резюме, відгукувався на вакансії, писав рекрутерам (зокрема, в LinkedIn) — можливо, вони планують пошук спеціаліста, але поки що ще не опублікували вакансію. Чим більше себе пропонуєте, тим більше шансів влаштуватися.\nДо подій, що розпочалися 24 лютого, було по кілька співбесід на тиждень. У березні, квітні навіть не шукав: всі сили були кинуті на допомогу людям, які постраждали від війни, і нашим захисникам. А з травня знову почав активно шукати роботу.\nБудьте готові до відмов та негативу\nЯ не завжди розумів причини відмови, тому що не від усіх отримував зворотний зв’язок. Це дуже обурює, коли тобі обіцяють про будь-яке рішення повідомити, а потім тиша. У випадках, коли отримував відповідь — в основному, вона була однакова: «Ми віддали перевагу досвідченішому фахівцеві». Так, це реалії джуна-новачка, і доведеться багато разів пройти через такі відповіді.\nЗагалом неприємних ситуацій майже не було — цим мені дуже подобається атмосфера в ІТ, де неприйнятний негатив. Але розповім про одну. Я надіслав відгук на вакансію — під вимоги підходив. Прийшов на співбесіду, де одразу мене відправили до тимліда, який чомусь почав ставити мені запитання про автоматизацію. Я зупинив його і сказав, що автоматизацію не знаю і посилав відгук на вакансію QA Manual.\nТут би ввічливо розійтися, посилаючись на непорозуміння, але ні. Тімлід зірвався на мене, що я настільки тупий, що не можу відрізнити спеціальності, на яку посилаю відгук. Звісно, мене дуже обурило таке ставлення. Я максимально неконфліктна людина, тому спершу спробував пояснити, що надсилав резюме саме на потрібну вакансію. Тімлід не схотів мене слухати, і продовжив агресивно розмовляти, перейшовши на особисте. Я не стримався і відповів йому тим самим.\nТвоє обличчя, коли намагаєшся бути ввічливим із токсичним тімлідом\nВсе закінчилося тим, що я підвівся, сказав: «Ви переглядали моє резюме і прийшли з ним на співбесіду. Ви що, його не читали? Або читали та не зрозуміли, що я фахівець іншого спрямування? То хто з нас тупий?» — та пішов.\nКомпанію називати я не буду, можливо, вона класна. Але навіть один токсичний співробітник може зіпсувати все.\nЩо запитують\nЗазвичай, у компанії не більше 3–4 етапів співбесіди, у кожної — свої вимоги добору. Хтось одразу дає виконати тестове завдання і після його виконання вирішує, чи запрошувати вас далі. Інші — спочатку запрошують вас на знайомство, потім дають тестове, після якого доведеться поспілкуватися з командою чи тімлідом. Треті — навіть не дадуть фідбек на ваше резюме. Не варто зациклюватись і чекати, поки отримаєте відповідь. Поки ви в пошуку, продовжуйте надсилайте резюме на всі відповідні вакансії.\nКомпанії не працюють за одним шаблоном питань для співбесід. Звичайно, багато хто ставить питання про те, чому ви обрали саме тестування, про розуміння цієї спеціальності. В основному всі хочуть зрозуміти ваше мислення, як ви орієнтуєтеся в процесах написання баг-репортів і тест кейсів, як підходите до вирішення певного завдання. Тому переліку питань тут не буде: якщо ви добре навчалися, отримали додатково знання та навички, окрім програми курсів, проблем на співбесіді з теорією не буде. А якщо не зміцнювали знання та розраховували після курсів одразу отримати роботу, то будь-яке питання може стати несподіванкою.\nТестові, як правило, такі: вам надають онлайн-ресурс або мобільний додаток. Вам потрібно знайти та описати баги, скласти тест-кейс, іноді можуть попросити скласти тест-план.\nЧи є секрет успіху?\nЯ не чаклун, і секретів нема. Все, що потрібно – знання, бажання знайти роботу та наполегливість. Не можу сказати, що я мав певний алгоритм дій на співбесідах або прописану поведінку — як правило, «тон» задає компанія. Але я завжди був привітним і ввічливим, відкритим і комунікабельним. Чим відкритіше ви спілкуєтеся, тим більше викликаєте довіри.\nПара порад\nЩодо питання, що краще — курси чи самонавчання, ситуація така: курси можуть бути корисними людям, яким складно навчатися самостійно. Викладачі структурують інформацію, ви її отримуєте по черзі, не плутаєтесь у темах вивчення. Якщо ви можете навчатися самостійно — будь ласка, інформації та матеріалів у відкритих джерелах дуже багато. Головне – це знання, які ви отримаєте. Єдиний момент: деякі компанії вимагають сертифікат про проходження курсів.\nКорисно буде розширювати контакти в LinkedIn. Що більше контактів, то легше вам поширювати інформацію про себе. Звертайте увагу на рекрутерів: вони у ринку вакансій знають більше, можуть знати, кому вас порекомендувати.\nІ знову про мову: чим краща у вас англійська, тим більше шансів потрапити на стажування чи роботу. \n ','2022-12-03 00:23:07','2022-12-03 00:23:07'),(159,'IRC — немейнстримовий Slack: чому розробники користуються програмою 1988 року?','Анастасія Пономарьова\nЖурналістка Highload','Перший чат-клієнт IRC, як і безліч крутих старих застосунків, був петпроєктом талановитого програміста, а не колективною працею якої-небудь техкорпорації, спрямованої на виманювання грошей. Популярний сьогодні Slack взяв уже готову ідею та на ній заробив мільярди.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПоринемо в історію і розберемося, як IRC «програв» у битві за користувачів і чому програмісти досі люблять «стару школу».\nЩо таке IRC?\nInternet Relay Chat — технологія багаткористувацьких конференцій в текстовому режимі через мережу Інтернет, яка з’явилася в 1988 і на десятиліття випередила Slack в цій ніші, пише Vice. IRC допоміг визначити більшу частину ранньої онлайн-культури інтернету, хоча ніколи не був таким мейнстримним сервісом, як Slack.\nПодобається вам це чи ні, але орієнтована на бізнес платформа Slack явно зробила щось правильне за вісім років свого існування (сьогодні її ринкова капіталізація — $26,5 млрд). Закрита платна платформа обійшла безплатний сервіс із відкритим кодом. Чому це сталося?\nЯркко Ойкаринен\nСпочатку згадаємо, що IRC не планувався як комерційний проєкт. Це була одна з літніх вправ із програмування для стажистів, виконана Яркко Ойкаріненом — фінським студентом коледжу та адміністратором сервера. У вільний від навчання час у нього виникло бажання поліпшити наявний протокол OuluBox. І його протокол IRC швидко поширився в усьому світі — користувачі приходили самостійно, без маркетингових кампаній.\nПік популярності\nУ середині 1990-х такі сервіси були дивиною. У моді були онлайн-чати зі знаменитостями — медіа навіть проводили там свої програми. Наприклад, на MTV одного разу відбувся онлайн-чат за участю панк-рок-групи Butthole Surfers, які тоді були на вершині своєї слави після випуску хіта «Pepper». Чат мав проходити на майданчику медіакомпанії AOL, але у неї були проблеми з інфраструктурою, через що чат перестав працювати.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nMTV в останню хвилину перенесло бесіду з Butthole Surfers в IRC, і якщо у вас був настрій поговорити з зірками про їхній популярний альбом, ви «стрибали» у відкритий інтернет, щоб поспілкуватися. Просто без жодних перешкод приєднувалися до чату.\nЦе єдиний момент, коли IRC став мейнстримом, збираючи найрізноманітніших користувачів. Тому що зазвичай тут були балачки про емулятори і про те, наскільки класним був Quake (шутер). Місце, куди ви приходили, коли вам набридали смертельні битви.\nОсобливості IRC\nIRC був прабатьком ICQ і AOL Instant Messenger, що відображав дику, дещо неврівноважену природу інтернету без жодних прикрас. Наприклад, більшість IRC-серверів утворювали єдину IRC-мережу, до якої нові сервери могли приєднуватися без обмежень. Але невдовзі люди почали зловживати цим, настроївши сервери для саботажу інших користувачів, каналів чи серверів. Бо могли.\nАле не слід думати, що бана тоді не існувало. Вас легко могли забанити на каналі чи сервері — не за образи чи неприйнятний вислів про ЛГБТ, як заведено сьогодні, а взагалі з будь-якої причини. Модератор не сподобався, що ви «косо подивилися» на мод до гри? Бан. Випадково зайшли на сервер занадто багато разів за пару хвилин? Бан.\nТоді контроль над певним чатом чи сервером був набагато очевиднішим. Сьогодні контроль значною мірою присутній, але він переданий до рук, скажімо, Facebook, а не купці набридливих модераторів, які діють за своїм настроєм, а не суворими правилами.\nЩе у чатів був свій жаргон. Цей жаргон можна було побачити у великих мережах того часу, як-от EFnet, Undernet, mIRC — він відображає іншу епоху. Наприклад, один з найвідоміших трюків IRC, “ляпас форелі”, який був представлений mIRC в 1995 році, був безпосередньо натхненний відеоскетчем Монті Пайтона, опублікованим у його авторській передачі. Нерідко в чаті можна було побачити, як «[ім’я] дає ляпаса [інше ім’я] великою фореллю».\nФорель як стандартна зброя користувачів в IRC може бути віднесена до сюрреалістичного гумору, який цінують програмісти. Крім того, є стара приказка, що деякий особистий досвід «краще, ніж ляпас мокрою рибою». Тобто, якщо вас ударили по обличчю рибою, це означає, що ви не тямите в темі.\nДокладніше про mIRC\nЦе найпопулярніший клієнт Windows IRC, тому варто згадати його окремо. Цілі, для яких розробник Халед Мардам-Бей створив mIRC, не сильно відрізняються від цілей, за якими Стюарт Баттерфілд та його компанія створили Slack. Але результати відрізняються разюче.\nОтже, бувши студентом у Лондоні, Мардам-Бей познайомився з роботою чат-клієнта та побачив у ньому великий потенціал. Коли він починав розробку своєї платформи, варіанти були переважно текстовими і не дуже простими у використанні. Випустив він mIRC через рік, у 1995 році, і чат-клієнт став надзвичайно популярним у всьому світі. На піку свого розвитку його завантажили сотні мільйонів разів.\nКлієнт був настільки функціональним і розширюваним, що включав власну мову сценаріїв — він був призначений для досвідчених користувачів ПК. При цьому FAQ Мардам-Бей стверджує, що був прискіпливим до функцій, які додавав у продукт.\n«Більшість функцій у mIRC запитували користувачі. Розробка програмного забезпечення – це тонкий баланс: ви хочете бути уважними та сприйнятливими до запитів користувачів, але водночас ви хочете уникнути роздування програмного забезпечення, – пише він. — З багатьох запитів на додавання функцій, що я отримав за ці роки, лише деякі дійсно втілилися в mIRC».\nУ чому особливість mIRC? Він відбиває епоху, коли частина  найпопулярніших застосунків створювалася окремими розробниками, а не конгломератами. Це побічний ефект популярної на той час моделі умовно-безкоштовного програмного забезпечення, яка не дозволяла наймати великі команди, адже перспективи великого прибутку не було.\nmIRC, ілюстрація\nЦікаво, що Мардам-Бей не продав свою частку в mIRC більшій компанії (як це часто трапляється зі стартапами) і досі оновлює платформу, працюючи на повну ставку за допомогою волонтерів. Його чат-клієнт все ще відображає досвід старої школи розробки — він дуже схожий на те, що виходило на кінець дев’яностих. Отже, запуск mIRC схожий на завантаження капсули часу.\nIRC проти Slack\nПротягом кількох років серед програмістів назрівали суперечки про Slack, особливо у тому, чим він відрізняється від IRC загалом. Програміст Дрю ДеВолт висвітлив проблеми, пов’язані зі Slack, у тому числі той факт, що чат-клієнт займає багато пам’яті та що програмістські канали не закладалися як бажаний варіант використання платформи.\nАле найбільша проблема Slack, мабуть, ідеологічна — використання пропрієтарної (тобто з авторськими правами на код і платним доступом) платформи для вільного програмного забезпечення з відкритим вихідним кодом. У цьому немає сенсу – просто так такий код не використовуєш. У той час, як IRC, який є відкритим протоколом, безплатний.\n«Я був би дуже вдячний, якби ми всі перестали використовувати Slack таким чином. Це не підходить для проєктів FOSS (Free and open-source software). Я хотів би приєднатися до вашого каналу за допомогою клієнта, який у мене вже запущений. Таким чином, я з більшою ймовірністю залишусь тут після того, як отримаю допомогу з того питання, з яким прийшов до вас, і заохочуватиму інших, підтримуючи ваш канал до кінця часів. Із застосунку Slack я йду, як тільки отримую допомогу, а ось вкладки в моєму браузері — це безцінна нерухомість», — говорить Дрю ДеВолт.\nІнші менш критично ставляться до статусу програми з відкритим вихідним кодом, але натомість бачать проблему в тому, що бізнес просто покращив уже існуючу ідею, вилучивши або відшліфувавши гори непотребу.\nSlack, ілюстрація\nНазріває питання: якщо до Slack стільки претензій, як він зміг обійти IRC? Коли ви розберете та уважно проаналізуєте дві програми, відмінності стануть очевидними. По-перше, вам взагалі не потрібно підключатися до сервера при використанні Slack, на відміну від IRC, що полегшує процес роботи з платформою. Динаміка використання IRC набагато очевидніша і складніша — процес приєднання до мереж і каналів вимагає багато роботи.\nУ той самий час Slack зумів переупакувати основні ідеї, як і mIRC. Тож, якщо Slack став для користувачів найкращою версією IRC, то, можливо, воно того варте.\n«Ці значки — я гадки не маю, що вони означають. Тягар турботи про те, щоб з’ясувати це, лякає мене, — пише він про інтерфейс mIRC письменник Родріго Кайл Мерен. — Це перебір. Кожною характеристикою та функцією можна керувати на дуже детальному рівні. Ви навіть можете написати йому власних ботів, щоб виконувати рутинні адміністративні завдання замість вас».\nПеревага IRC у порівнянні з деякими іншими старими інтернет-протоколами в тому, що він ніколи не вмирав і не втрачав актуальності. Програмісти, як і раніше, працюють в IRC, навіть якщо він ніколи не досягне таких масштабів, як Slack. В тому числі завдяки його олдскульної чарівності. Чат Freenode вже більше двох десятиліть допомагає підтримувати активність та продуктивність онлайн-спільнот, що займаються програмуванням з відкритим вихідним кодом.\nIRC чудовий, але він напевно ніколи не був доведений до досконалості. З тієї ж причини з усіх відомих інтернет-протоколів, які використовувалися на початку 1990-х, досі широко використовуються лише два — електронна пошта та Всесвітня павутина.\n ','2022-12-03 00:23:25','2022-12-03 00:23:25'),(160,'Аарон Шварц: програміст, який наклав на себе руки у 26 років та увійшов до Зали слави Інтернету','Анастасія Пономарьова\nЖурналістка Highload','Сьогодні видатному програмісту та активісту, творцю Reddit та RSS Аарону Шварцу виповнилося б 36 років: у день народження легенди згадаємо, чим він заслужив на повагу та шанування IT-спільноти.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПерші кроки в IT та спадщина\nАарон Шварц — американець: він народився 8 листопада 1986 року в багатому передмісті Чикаго. Його батько керував компанією-розробником програмного забезпечення Mark Williams Company, а дід брав активну участь у кампанії Пагуошського руху за роззброєння — неважко зрозуміти, з кого брав приклад юний Аарон.\nНавчання в школі для обдарованих йому набридло, тому в дев’ятому класі він пішов на самонавчання та паралельно запустив блог під назвою Schoolyard Subversion (Шкільна підривна діяльність), де критикував систему організованої освіти та обговорював шляхи її реформування. Хлопець загалом мав «алергію» на традиційні інститути.\nШварц з дитинства був оточений комп’ютерами, рано почав розумітися на роботі інтернету, який перебував у зародковому стані. Тоді ж він спробував писати власні сайти-сторінки — про себе, сім’ю та «Зоряні війни».\nЗ 13 років Шварц приєднався до обговорень W3C (Консорціум Всесвітньої павутини) і став членом робочої групи зі створення RSS — сьогодні це інструмент, що повсюдно використовується і дозволяє користувачам самостійно поширювати інформацію в Інтернеті. У 2000 році робоча група з RSS розкололася на дві: Шварц приєднався до тієї, яка працювала над RSS 1.0.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nПід час навчання у Стенфорді (який, знову ж таки, покинув через рік) він приєднався до стартапу, де працював разом із бізнесменом та програмістом Полом Гремом над порталом Infogami. Це був незвичайний на той час продукт, що дозволяв людям обмінюватися інформацією. У 2005 році Грем та Шварц об’єднали його з Reddit.\nТак вони вбили двох зайців: вирішили проблему з відсутністю інвесторів для Infogami та одночасно налагодили роботу Reddit за рахунок навичок програмування Шварца. А ще через рік продали Reddit за $5 млн. Так Шварц став мільйонером у 19 років — ще до того, як йому в барі стали продавати пиво.\nАктивізм\nЗ ранніх років Шварц відвідував різні конференції з програмування та хакерства, а після виходу з Reddit — з головою поринув у боротьбу за вільний інтернет та проти нерівності у доступі до знань у мережі (ідеальний доступ – безплатний доступ). Він був автором Партизанського маніфесту відкритого доступу, вивчав інституційну корупцію, отримав позицію у Гарвардському Центрі етики Safra.\nАарон Шварц, Strapi Blog\nЩе він був тісно знайомий з некомерційною організацією Public.Resource.Org — вона займалася боротьбою з електронною службою загального доступу до документів федерального суду США під назвою PACER. Саме з нею пов’язаний один із найгучніших скандалів, у яких фігурував Шварц, і який став першим кроком до його гибелі.\nУ чому була проблема: PACER стягувала вісім центів за доступ до однієї сторінки архіву, що щороку приносило службі $150 млн доходу. Засновник Public.Resource.Org Карл Маламуд виступав проти платної системи — хотів зробити її загальнодоступною. Але реалізував цю ідею саме Аарон.\nВін написав код для обходу системи безпеки PACER, прийшов до бібліотеки Апеляційного суду сьомого округу США в Чикаго і запустив невеликий Perl скрипт, який послідовно перебирав номери справ, запитуючи новий документ у системи кожні три секунди. Дані він завантажував у службу хмарних серверів Amazon EC2, поки виток не виявили та не заблокували доступ. Потім Шварц опублікував 20% цього страшенно дорогого архіву у відкритий доступ, що привернуло до нього увагу ФБР.\nІнша гучна історія пов’язана зі зломом серверів Массачусетського технологічного інституту у 2011 році: Шварца підозрювали у крадіжці мільйонів файлів з онлайн-бібліотеки академічних журналів (для тих же цілей, що й з архівом PACER). MIT не хотів позиватися до суду, але федеральний уряд наполягав: він почав на полювання на програміста, загрожуючи суворим покаранням.\nКримінальна справа мала бути передана до суду в лютому 2013 року, хакеру загрожувало до 50 років в’язниці та $1 млн штрафу. Федерали запропонували угоду — Шварц визнає свою провину і тоді відсидить лише півроку, але він не погодився. 11 січня, майже через два роки з дня арешту, Аарон Шварц наклав на себе руки, повісившись у своїй бруклінській квартирі без будь-якої передсмертної записки.\nУ перші дні після смерті активіста наукова спільнота запустила акцію під хештегом #pdftribute: дослідників з усього світу закликали публікувати в соціальних мережах посилання на свої статті у форматі PDF. Смерть Шварца викликала численні обговорення необхідності запровадження принципів відкритої науки та відкритого доступу до наукових публікацій. Шварц став символом боротьби за відкритий доступ та посмертно увійшов до Зали слави Інтернету.\nА якою воні був людиною?\nУ статті Rolling Stones, яка вийшла невдовзі після смерті програміста, було складено портрет Шварца зі слів його друзів та колег, публікацій у соцмережах та реакції шанувальників.\n«Його довготелеса статура і тиха вдача суперечили внутрішній лютості… Чи було неминучим самогубство молодої людини, яка жила життям настільки ж відкритим, як і технології, які вона відстоювала?\nАарон Шварц, desarquivo.org\nЧитати стрічки його друзів та підписників у Твіттері означало відчути всю глибину їхнього замішання та недовіри. Вивчати незліченні блоги, присвячені йому, означало розуміти, наскільки разюче його амбіції відрізнялися від амбіцій багатьох його однолітків. У той час, як Марк Цукерберг будував онлайн-імперію, збираючи та монетизуючи приватну інформацію, Шварц присвятив себе обмеженню кількість інститутів влади, які маніпулюють людьми. І разюче бачити скорботу сотень тих, хто вийшов вшанувати його пам’ять на меморіали по всій країні – хакерів, політиків, художників, письменників, технологів старої гвардії — велику та різношерсту мережу колег, яку Шварц зібрав навколо себе за своє коротке життя.\nКорі Доктороу, давній друг Шварца і співредактор технічного блогу Boing Boing, назвав його «постійним, безкомпромісним, безрозсудним та чудовим обурювачем лайна». Тім Бернерс-Лі, винахідник Всесвітньої павутини, писав про Шварца як про «винищувача», чия робота вплинула далеко за межі ізольованого світу програмування: «Параючий у темному небі звичайних людей, зруйнованих систем, сяюча сила добра, творець речей».\n ','2022-12-03 00:23:35','2022-12-03 00:23:35'),(161,'Програміст пообіцяв прискорити Python у п’ять разів — його одразу найняв Microsoft','Анастасія Пономарьова\nЖурналістка Highload','Розробник Марк Шеннон створив план реалізації для прискорення CPython (найпоширенішої реалізації мови) у п’ять разів — у новій версії мова вже швидше до 60%. І це лише початок, повідомляється у блозі Microsoft.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПодробиці\nМарк Шеннон, фото з LinkedIn\nПлан у Марка з’явився ще у 2020 році: у ньому пропонувався чотириетапний процес, який, як каже автор Python Гвідо ван Россум, був надто трудомістким для однієї людини. Потрібна команда.\n«Із самого початку я думав, що ми повинні подивитися, чи зможе Microsoft найняти Марка та невелику групу людей для спільної роботи над цим планом. Адже роботи було занадто багато для однієї людини», — говорив Гвідо.\nMicrosoft підтримала ідею і створила команду з шести програмістів-ентузіастів, включаючи Ван Россума (він минулого року вийшов на пенсію і приєднався як заслужений інженер). Реалізація плану вже дає свої плоди: нова версія Python 3.11 показала прискорення на 10-60% у деяких галузях мови.\nЯк це працює\nCPython використовує код C для інтерпретації мови Python. Хоча успіх Python полягає в його простоті для користувача, технологія, що лежить в його основі, вимагає до себе великої уваги розробників.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nКоманда складається з людей із дуже спеціальними знаннями. Наприклад, Л. Прейра набула багато своїх навичок, працюючи на класичних комп’ютерах 1970-х і 80-х років як хобі. Це допомогло зрозуміти, як працювати з .NET:\n«Щоб вдалося зробити навіть найпростіші речі в старих системах, ви повинні навчитися оптимізувати свої програми: серйозно подумати про те, як розподілятиметься пам’ять, наприклад. Такі навички є дуже корисними для інтерпретатора Python».\nФахівці попрацювали над впровадженням багатьох функцій для підвищення продуктивності у випуску 3.11, але паралельно почали працювати над функціями в майбутніх версіях. Наприклад, надалі планується зміна представлення менших цілих чисел у Python, щоб використовувати власні обчислення замість повільніших алгоритмів для довільно більших чисел. Чорнові напрацювання Python 3.12 вже є у репозиторії  на Github.\nЧотириетапний план Шеннона забезпечити безперервну оптимізацію мови протягом наступних кількох років.\n«Марк має дуже довгострокову, глобальну мету. Нам потрібно розбити цю мету на дрібніші частини й знайти те, що ми можемо зробити вже зараз, щоб явно покращити ситуацію на даному етапі шляху», — каже один із членів команди, Майкл Дроттбум — програміст, який працював над космічними телескопами Хаббла та Джеймса Веба.\nЧому Microsoft взагалі робить ставку на Python?\nMicrosoft вже 20 років підтримує розвиток мов, водночас створюючи нові технології на кшталт C# та Typescript. Також компанія спонсорує Python Software Foundation з 2006 року, PyCon US та інші регіональні конференції, підтримуючи спільноту. Але зараз цій мові програмування приділяється особлива увага.\nІлюстрація\n«Швидке зростання Python за останні 5 років добре задокументовано і вражає. Воно обумовлене насамперед зростанням науки про дані та довгою історією Python написання сценаріїв, веб-розробки, а також ретельного балансу між продуктивністю та простотою використання, — пише Ден Тейлор, головний менеджер Microsoft з управління проєктами, інструментами Python та AI. — Це мова, в якій велика увага приділяється продуктивності розробників — вона дуже дорога нам і тісно пов’язана з нашою місією».\nСьогодні мета команди Microsoft — «додати цінність спільноті Python, зробити мову кращою та допомогти спільноті за межами технічної галузі». Дроттбум вважає, що зосередившись на потребах спільноти Python, «виграють усі» — і корпорація, і програмісти по всьому світу.\n ','2022-12-03 00:23:41','2022-12-03 00:23:41'),(162,'Творчиня мови Assembler померла у свої 100 років. Чим запам’яталася її робота','Анастасія Пономарьова\nЖурналістка Highload','Не стало професора Кетлін Бут, яка створила Assembler і спроєктувала кілька комп’ютерів на самому початку розвитку технології, пише The Register. Її називали однією з останніх британських піонерів обчислювальної техніки.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТрохи біографії\nКетлін народилася в Вустерширі, що в Англії, 9 липня 1922 року. Під час Другої світової війни вона навчалася в Лондонському університеті Ройал Холлоуей, де 1944 року здобула ступінь бакалавра математичних наук (пізніше, 1950-х — ще й ступінь доктора філософії з прикладної математики). Після цього стала молодшим науковим співробітником Royal Aircraft Establishment — дослідницької організації в Фарнборо.\nЧерез два роки вона перейшла в коледж Біркбек, спочатку як науковий асистент, а потім — викладач і науковий співробітник. Завдяки їй з’явився Департамент комп’ютерних наук та інформаційних систем Біркбек.\nПізніше Кетлін працювала в Британській дослідницькій асоціації виробників каучуку (BRPRA), де познайомилася з математиком та фізиком Ендрю Дональдом Бутом, який згодом став її чоловіком. Це важлива деталь, адже багато розробок — їхня спільна заслуга. Наприклад, через те, що чоловікові доводилося робити багато обчислень вручну, вони разом побудували аналоговий комп’ютер, щоб автоматизувати частину роботи.\nКетлін Бут\nСпадщина Бутів\nУ 1946 році подружжя спільно працювало в Біркбек-коледжі над раннім цифровим комп’ютером — автоматичним релейним калькулятором (ARC). Кетлін повністю розробляла апаратне забезпечення для комп’ютера. Наставник Бутів отримав фінансування від Фонду Рокфеллера, щоб вони могли відвідати Інститут перспективних досліджень у Прінстоні. Там вони спілкувалися з Джоном фон Нейманом – знаменитим математиком, з ім’ям якого пов’язують архітектуру більшості сучасних комп’ютерів. Нейман пояснив концепцію своєї архітектури, що надихнуло пару на модернізацію комп’ютера.\nПовернувшись до Великої Британії, вони перепроєктували обчислювальну машину на основі ідей Неймана. В результаті було створено ARC2 і залучено першу барабанну пам’ять (магнітний пристрій зберігання даних) — вона забезпечувала достатнє місце для зберігання як інформації про програму, так і даних. Але машина на основі реле була надто складною, тому в 1948 Бути створили простий електронний комп’ютер (SEC), а потім розробили універсальний електронний рентгенівський комп’ютер APE(X)C. До речі, ви можете випробувати APE (X) C навіть зараз – в емуляторі MESS.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nAPE(X)C продавався під назвою HEC компанією British Tabulating Machine Co Ltd, яка зрештою стала ICL. Ось так він виглядав:\nКомп’ютер HEC1\nЩоб отримати подальше фінансування своєї роботи, Бути знову звернулися до Фонду Рокфеллера – гроші дали за умови, що APE(C)X працюватиме не лише з математикою, а й із людськими мовами. В результаті було розроблено технологію машинного перекладу.\nКонтрактна нотація = Assembler language\nВсе програмне забезпечення для машин ARC2 і SEC Кетлін писала власною мовою, яку вона назвала контрактною нотацією. Ця мова пройшла кілька етапів еволюції, сьогодні вона відома як Assembler. Докладніше про цю технологію “в зачатку” можна прочитати в книзі Кетлін Бут “Програмування для автоматичного цифрового калькулятора”, виданої в 1958 році. Цікаво, що це була одна з перших книг із програмування, що написана жінкою.\nУ тому ж році професорка почала працювати з нейромережами. Через багато років, 1993 року, вона разом із сином доктором Яном Бутом опублікувала книгу «Використання нейронних мереж для ідентифікації морських ссавців». При цьому фахівчиня вийшла на пенсію ще у 1970-х роках.  \nКетлін Бут померла 29 вересня 2022, нещодавно їй виповнилося 100 років.','2022-12-03 00:23:59','2022-12-03 00:23:59'),(163,'Співробітників TikTok змушують працювати з постійно увімкненою камерою та платять копійки — розслідування','Анастасія Пономарьова\nЖурналістка Highload','Якщо тебе наймають працювати на IT-гіганта з мільярдами прибутку, це не означає, що тобі пощастило. Іноді зовсім навпаки: Бюро журналістських розслідувань (БЖР) з’ясувало, що TikTok наймав підрядників з рабськими умовами праці.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЩо сталося\nКароліна — екс-модераторка TikTok з Колумбії. Вона влаштувалася на віддалену роботу в паризькій компанії Teleperformance, що пропонує послуги модерації — ними користується компанія Bytedance (власник TikTok). Суть роботи наступна: перевіряти контент зі скаргами на жорстоке поводження з дітьми та насильство із застосуванням вогнепальної зброї та видаляти відповідний.\nЗа це вона заробляла $10 на день і їй доводилося постійно тримати камеру включеною під час нічної зміни. При цьому в компанії вимагали, що ніхто не був у полі зору камери, а пити дозволялося лише з прозорої чашки на її столі. Кароліна сказала, що ситуація була жахливою, бо вона живе зі своєю родиною.\n«Я почувала себе дуже винною, коли просила не проходити повз камеру, бо мене можуть звільнити. Така ось телевистава, де люди дивляться, як ми робимо свою роботу», — ділиться дівчина.\nВебкамера, ілюстрація\nСитуація не є унікальною\nПредставники БЖР поговорили із дев’ятьма модераторами, їхні історії схожі. Вони розповідали, що їм доводилося фіксувати час входу та виходу із системи, а також реєструвати будь-які перерви у застосунку під назвою Timekeeper, але не підтвердили, чи повинні вони працювати з увімкненими камерами.\nРобота травмувала психіку людей. Один з колишніх модераторів TikTok Карлос сказав, що найруйнівніше на нього діяли відео про сексуальне насильство над дітьми. На одному з них було показано дівчинку років п’яти-шости: «Вона танцювала, спрямовуючи зад на камеру, і це було так близько…».\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nА 28-річний Луїс працював ночами, регулярно «підчищаючи» відео із вбивствами, самогубствами, педофілією, порнографічним контентом, нещасними випадками, канібалізмом. Він згадав, як на одному з відео, знятому на вечірці, двоє людей тримали в руках щось схоже на шматки м’яса. Коли вони обернулися, то виявилося, що вони тримають шкіру та хрящі, здерті з людських облич.\n«Найгірше було те, що друзі грали з ними й почали використовувати людські обличчя як маски», — сказав Луїс.\nЩо кажуть у TikTok\nПредставник TikTok повідомив Insider, що у них все добре:\n«Ми прагнемо створити сприятливе робоче середовище для наших співробітників та підрядників. Наша команда з довіри та безпеки співпрацює зі сторонніми фірмами у важливій роботі із захисту платформи та спільноти TikTok, а також ми продовжуємо розширювати спектр оздоровчих послуг, щоб модератори відчували психологічну та емоційну підтримку».\nЦікаво, що ані TikTok, ані Teleperformance, де працює понад 42 000 співробітників у Колумбії, не відповіли на докладний список звинувачень Бюро журналістських розслідувань. На запит Insider відповіді також немає.\n ','2022-12-03 00:24:10','2022-12-03 00:24:10'),(164,'Легендарний і найоплачуваніший програміст у Google: хто він?','Анастасія Пономарьова\nЖурналістка Highload','Коли ви думаєте про людей, що зробили інтернет таким, яким він є сьогодні, ви напевно уявляєте когось на зразок Тіма Бернерса-Лі, Білла Гейтса та Марка Цукерберга. Вони, безперечно, найрозумніші люди, але за їхніми спинами працюють легіони анонімних кодерів, створюючи системи та продукти, якими ми всі користуємося щодня. Деякі з них геніальні та незамінні.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПро такого програміста сьогодні йтиметься.\n«2002 року пошук Google відключився на кілька годин; Джефф Дін обробляв усі запити вручну, і якість видачі покращилася вдвічі», – так говорять про розробника Google Джеффа Діна, пише Medium.\nЗвичайно, це неправда — а просто один із багатьох корпоративних жартів про Джефа Діна, але скоро ви зрозумієте, чому люди так кажуть.\nВідкотимося на роки назад…\nУ середині 2000-х років шестеро найкращих інженерів Google зібралися в імпровізованому оперативному штабі компанії. Основна система Google, яка індексувала інтернет, скануючи його, перестала функціонувати. Так, користувачі все ще могли вводити запити, але результати були застарілими на п’ять місяців. Тобто як мінімум свіженькі новини не почитаєш.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nGoogle мала угоду з Yahoo про створення для нього пошукової системи вдесятеро більшої, ніж була у самої Google в той час. Угода могла зірватись, якщо проблему з пошуком не буде вирішено. Напруга зростала. Багато чого було поставлено на карту — молодій компанії загрожує небезпека втратити кошти та збанкрутувати. Все, над чим працювали розробники, могло перетворитися на дим.\nСтрункий, високий, енергійний чоловік тридцяти років на ім’я Джефф Дін був серед тих шести блискучих інженерів в імпровізованому штабі. Він лише кілька місяців тому розпочав свою кар’єру в Google. Програміст перекотив стілець навколо свого колеги Санджая Гемавати, сів праворуч від нього і почав уважно вчитуватися в код, віртуозно виправляючи недоліки. Так почалася його історія у компанії.\nХто такий Джефф\nЙмовірно, раніше ви ніколи не чули нічого про Джеффа Діна. Він американський інженер-програміст та вчений-комп’ютерник. Саме Дін надихав команду на створення багатьох залаштункових продуктів, які допомогли Google стати впливовою корпорацією-гігантом та керувати інтернетом. Джефф — співзасновник і керівник групи інженерів з deep learning research в Google, а сьогодні — і головний спікер з технологій, інновацій та штучного інтелекту.\nДжефф Дін, фото: bossnetworth.com\nУ 1990-х він працював у Вашингтонському університеті як асистент викладача, інструктор та науковий співробітник, одночасно здобуваючи ступінь магістра та доктора філософії в галузі інформатики. Після закінчення університету Дін приєднався до групи Західної дослідницької лабораторії Compaq Computer Corporation. Працюючи тут, Джефф брав участь у створенні інфраструктури безперервного профілювання для цифрових технологій та розробляв сервіс зі створення профілів у Git ProfileMe.\nКрім того, програміст став одним творцем і безпосередньо розробником Swift — однієї з найшвидших у світі реалізацій Java. Джефф також працював старшим членом технічного персоналу mySimon Inc. (колись популярний вебсайт для порівняння покупок), витягуючи та кешуючи контент для електронної комерції.\nКоли Дін прийшов до Google у середині 1999 року, він уже був одним із найкращих молодих програмістів країни.\nГеніями народжуються?\nУ своєму дитинстві, коли потужність персонального комп’ютера залишала бажати кращого, Джефф постійно шукав способи розширити його можливості. А у старшій школі його програма для обробки епідеміологічних даних Epi Info була у 26 разів швидше за те, ніж користувалися професіонали. Центри з контролю за захворюваннями оцінили та впровадили в роботу цю систему — вона була доступна 13 мовами.\nЯк студент, Джефф працював над компіляторами — програмами, що перетворюють вихідний код на мову, зрозумілу комп’ютерам. Але хлопець не планував працювати над ними до кінця свого життя, тому залишив світ науки заради Google, у якому на той момент працювало менш ніж 20 людей.\nРобота в Google\nНа старті кар’єри в компанії Дін брав участь у розробці Google News та AdSense на ранній стадії, що сильно змінило інтернет-економіку. Незабаром після цього зосередився на одній нагальній проблемі — масштабуванні.\nУ міру зростання Google передбачувано зіштовхнувся із величезними обчислювальними проблемами. Наприкінці 1990-х років розробники створили PageRank — алгоритм, який повертає найбільш релевантні результати за пошуковим запитом. У міру того, як популярність Google зростала, компанія не встигала забезпечувати себе досить швидкими комп’ютерами, щоб задовольнити попит людей.\nДін у компанії займався улюбленою справою – пошуком технічних рішень. Він разом із колегою Санджаєм Гемаватом створили файлову систему Google, яка ефективно розподіляла великі дані щодо тисяч дешевих машин.\nДжефф Дін, фото: Medium\nВони ж розробили революційний інструмент програмування MapReduce, який допоміг програмістам обробляти величезні обсяги даних, використовуючи паралельні процесори. Інструмент також міг модифікувати алгоритм пошуку та додавати до нього нові обчислення. MapReduce став сенсацією в галузі.\nПро інші досягнення\nІнші ініціативи Діна, які були реалізовані в різні періоди роботи в Google, також вплинули на правила гри. Наприклад, BigTable — розподілена система зберігання даних, здатна керувати петабайтами даних, — була заснована на файловій системі Google. А Spanner — перша глобальна база даних, що являла собою метод зберігання даних на мільйонах серверів у десятках центрів обробки даних на багатьох континентах. Сьогодні вона є основою для всього — від Gmail до AdWords.\nЯкщо про попередні інструменти ви могли не чути, то Google Translate вам точно знайомий — його співзасновником став Дін. А зараз спеціаліст очолює підрозділ Google AI та працює в компанії як старший науковий співробітник (що еквівалентно віцепрезиденту) Google Research and Health.\nЗа свої досягнення у 2009 році він отримав стипендію Асоціації обчислювальної техніки (ACM), а у 2016 році — стипендію Американської академії мистецтв та наук. У 2012 році Дін був відзначений нагородою ACM-Infosys Foundation Award, раніше у 2007 році — ACM-SIGOPS Mark Weiser Award, і список можна продовжувати.\nПовертаючись до головного питання: скільки ж заробляє цей супермозок? Що ж, він вважається найбільш високооплачуваним співробітником Google — йому платять 3 мільйони доларів на рік.\n ','2022-12-03 00:24:16','2022-12-03 00:24:16'),(165,'«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера','Оленка Пилипчак\nРедактор у Highload','Максим Кучерук — волонтер, який допомагає херсонцям вижити в умовах російської окупації. Ситуація у регіоні не з простих: окупанти переслідують волонтерів та не випускають тих, хто хоче виїхати.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nУ цій статті — історія Максима, труднощі, які йому доводиться долати щодня та найголовніше — як кожен з нас може зробити життя українців на окупованих територіях трохи легшим.\nВорог присікає будь-яку допомогу\nМаксим каже, що окупанти з самого початку виловлювали АТОшників, поліцейських та СБУшників, а віднедавна відкрили полювання на волонтерів. Все заради того, щоб нав’язати людям російську гуманітарку та їхні товари. Місцеві заклади, які готували їжу для херсонців, вони закрили.\n«Я сам виїхав на 56-й день війни — дізнався, що орки внесли мене до списку на арешт. Я об’їжджав їхні блокпости, ховався, плюс я весь ще в татуюваннях, якби перевірили — точно затримали б. Довелося домовлятися, щоби виїхати. На щастя, вдалося. Зараз я у ЗСУ, але все одно допомагаю людям», — ділиться Максим.\nМаксим Кучерук\nВолонтерам, які залишилися у Херсоні, доводиться несолодко. Максим каже, що вони їздять громадським транспортом, ходять по одному до людей, щоб не світитися, чи взагалі збирають продукти у себе вдома — і люди приходять забирати їх самостійно. Якщо зловлять, то в кращому разі відсидиш у підвалі, у гіршому — попрощаєшся з життям.\nДопоможіть херсонцям. Навіть кілька гривень можуть урятувати життя! Якщо у вас є можливість, відправте будь-яку суму на картку 4149499991637628 або PayPal Troll2003@ukr.net. Ваша чашка кави може врятувати чиєсь життя в Херсоні.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЩодо настрою херсонців, Максим каже, що деякі вже перестали вірити в те, що їх звільнять. Але коли ЗСУ вдається відвоювати кілька сіл в окрузі — до людей знову повертається надія.\n«Колаборанти, звичайно, теж є, але їх одиниці. Усі інші ви самі бачили, коли люди виходили на мітинги, скільки їх було. Поки не почали ці мітинги розганяти», — наголошує Максим.\nДо Херсона не дістатися — все заміновано\nЗа словами Максима, у місті — справжня гуманітарна катастрофа. Великі магазини закриті, волонтерам доводиться купувати продукти на ринку чи з рук. Єдиний варіант, який залишається, — збирати гроші.\n«Тобто я свою зарплату і все, що мені відправляють люди, пересилаю дівчаткам (волонтерам у місті — прим. ред.). Так вони збирають продуктові набори. По-інакшому, на жаль, поки що ніяк», — каже Максим.\nВолонтер ділиться, що у місті немає роботи та пенсійних виплат, і людям доводиться просити допомоги. Люди, які мали бізнес, просять продуктовий пакет, бо їм нема чого їсти. Таких історій у Максима кілька: це і власник Duty Free, і господар кафе, який раніше їздив на спортивній BMW, а тепер скаржиться, що її нема кому продати, немає роботи та немає грошей.\n«Та й бояться люди працювати, поновлювати бізнес. І я їх розумію — прийдуть орки, відіжмуть, у підвал посадять, а потім ще третину змусять “данини” їм платити. Таких випадків дофігища. Доходить до того, що людям справді нічого їсти. Ми намагаємося допомагати всіма силами», — каже Максим.\nВійськовий зазначає, що щодня вони допомагають щонайменше 8-9 людям та сім’ям. Колись за тиждень встигли допомогти 162 сім’ям — особистий маленький рекорд. Максим щодня намагається надсилати 5 тисяч гривень волонтерам. Він каже, що трьом тисячам людей вони вже допомогли.\nДопоможіть херсонцям. Навіть кілька гривень можуть урятувати життя! Якщо у вас є можливість, відправте будь-яку суму на картку 4149499991637628 або PayPal Troll2003@ukr.net. Ваша чашка кави може врятувати чиєсь життя в Херсоні.\nЧому люди не їдуть\nЗа словами Максима, багатьом просто нема куди їхати. У людей може не бути грошей та автомобіля. У Херсоні здебільшого залишилися пенсіонери та багатодітні сім’ї: «Люди живуть по дві-три сім’ї, бо їм нема куди їхати. Вони виживають. Саме таким людям ми допомагаємо».\nНаразі виїхати з міста з перевізниками коштує $150-200.\nросія перекрила і на територію вільної України ніяк не потрапити. Можна через Крим, але це страшно. Ніхто не хоче їхати через рф.\nВи також можете допомогти людям підтримкою та фінансово. Якщо ви знаєте, як доставити набори або читаєте нас на непідконтрольній території, ви можете допомогти з доставкою допомоги по місту\nТут Максим регулярно викладає звіти про допомогу людям.\nПриєднуйтесь! Допомогти може кожен.','2022-12-03 00:24:34','2022-12-03 00:24:34'),(166,'Легендарний програміст у 80 років продовжує лагодити Unix','Анастасія Пономарьова\nЖурналістка Highload','Співавтор основної утиліти Unix, незважаючи на похилий вік, продовжує виправляти базовий код AWK, пише ARStechnica.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nІ — ініціатива\nЯкщо ви не знали, як це — кодити по любові, то почитайте цю мотивуючу історію. Професор Прінстона на літніх канікулах надіслав електронного листа своєму старому другові — Брайану Кернігану, співзасновнику AWK (Kernighan — це буква “K”). Керніган привітався, запитав, як проходить візит професора в США, і ненароком надіслав сотні рядків коду, які можна додати на підтримку Unicode для AWK — інструмент аналізу тексту, який він сам допоміг створити для Unix у Bell Labs ще 1977 року.\n«Я досить довго тестував це, але явно потрібні ще додаткові тести, — написав Керніган в електронному листі, опублікованому ще наприкінці травня як свого роду псевдокомміт у репозиторії onetrueawk. — Як тільки все уточню, спробую відправити пул-реквест. Хотів би краще зрозуміти git, але незважаючи на вашу (ред. комьюніті) допомогу, правильного розуміння все ще немає. Отже, процес може зайняти деякий час».\nЧому Керніган — легенда\nТрохи відволічемось і розповімо про Брайана Кернігана. Отже, розробник зробив великий внесок у створення AWK — мови спеціального призначення для вилучення та керування мовами, яка була ключовою для функцій конвеєра Unix та взаємодії між системами. Працююча awk function має вирішальне значення як для стандартної специфікації UNIX, так і для сертифікації IEEE POSIX з точки зору функціональної сумісності.\nТак, існує безліч варіантів сучасних похідних, що включають awk, з підтримкою Unicode. Але “One True AWK”, іноді відомий як nawk, є своєрідною канонічною версією — вона заснована на книзі Кернігана 1985 “Мова програмування AWK”.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\n  Брайан Керніган\n  Але це ще не всі заслуги розробника: Керніган також є співавтором основної книги 1978 «Мова програмування C», яку він написав разом із творцем мови С Деннісом Рітчі (відкриємо маленький секрет: ініціатором написання книги був саме Керніган). Книзі майже 50 років, але вона все ще актуальна для розробників, адже вона породила «єдиний справжній стиль дужок» та структуру, що лежить в основі кожної сучасної мови програмування.\nКрім того, Керніган дав назву Unix і першим продемонстрував приклад коду Hello, world.\nНавіщо було щось міняти у Unicode для AWK?\nЧерез те, що репозиторій onetrueawk, де Керніган розповів про оновлення, не надто популярний, про виправлення Unicode стало відомо головним чином завдяки інтерв’ю професора YouTube-каналу Computerphile — повну версію можете подивитися тут .\n«Завжди було ніяково, що AWK працює тільки з ASCII або, можливо, з 8-бітними вхідними даними, але насправді взагалі не обробляє Unicode, — сказав Керніган інтерв’юеру професору Девіду Брейлсфорду. — Кілька місяців тому я провів якийсь час, працюючи над покращенням неймовірно старої програми. Навіщо? На даний момент вона фактично обробляє введення та виведення UTF-8, так що ви можете отримувати регулярні вирази, які, знаєте, вибирають японські ієрогліфи тощо».\nКерніган згадує в інтерв’ю, що він також пропатчив AWK “нашвидкуруч”, щоб дозволити йому обробляти файли CSV .','2022-12-03 00:24:45','2022-12-03 00:24:45'),(167,'«Хто написав це лайно?», запитав СТО, дивлячись на свій старий код. Або як працювати над «кульгавою» кодовою базою і не вигоріти','Анастасія Пономарьова\nЖурналістка Highload','На Medium вийшов філософський блог про складнощі рефакторингу, розпач, пориви переписати «говнокод» з нуля та інші супутні труднощі, а також практичні поради, як привести кодову базу в порядок. Публікуємо переклад.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nХто написав це лайно?\nСТО та розробник вивчають застарілу кодову базу, щоб виправити помилку. Муки вже прагнуть нескінченності, вони готові здатися.\n“Хто написав це лайно?”, — запитав технічний директор. Схвильований, він перевірив, хто цей мерзотник. Ним виявився він сам.\n***\nПознайомтеся із нашим героєм — Джейком. Він розробник, його щойно найняли на проект, якому вже шість років. Джейку дали завдання виправити помилку, для чого доведеться поринути у глибини застарілого коду. Він озброївся знаннями та контекстом та пірнув у кодову базу. Все має вирішуватись легко. Зрештою, це ж завдання для адаптації на проекті. Що може піти не так? (Звучить пекельний сміх).\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nПісля перших двох годин Джейк вичерпав весь свій ентузіазм. Він загруз у павутинні розчарування, намагаючись розібратися у всіх змішаних ієрархіях — складніших, ніж королівське фамільне дерево в середньовічній Європі, довгих методах, які роблять багато різних речей, і іmplicits, захованих у темних кутах.\nВін люто боровся з усім цим геніально нагромадженим сміттєзвалищем коду, але марно. Сумнів і тривога покрили його, як ранкова роса, чи це був піт? Той, хто це написав, геній чи просто мудак? Джейку зовсім не подобався цей код. Кодова база не відповідала його стилю коду.\nТвоє обличчя, коли знаєш старий код\n“Це жахливо. Потрібно переписати це негайно”, — вирішив Джейк.\nВсі ми трохи Джейк\nБільшість розробників були там, де й Джейк. Вони відчували бажання переписати щось, що не відповідає їхнім уявленням про код. Все, що ви бачите в базі, це блюзнірство над чистим кодом. Вам не терпиться кинути ще один камінь у вже розбите вікно — ні для чого, просто на зло. Адже як взагалі можна адаптувати цей страшний стиль коду і внести виправлення?\nЦе нормально — почуватися таким чином. Але потрібно враховувати факт, що ви не знаєте контексту, чому розробник прийняв саме такі рішення. Постарайтеся зрозуміти, що ховається за мотивом, перш ніж суворо судити, вгамуйте своє его. Можливо, команда мала щільний графік, через який довелося зрізати шлях. Якщо це стартап, розробники могли залишити технічний борг, щоб закрити його пізніше, після гарячої фази роботи, коли терміново потрібно щось показати інвесторам для продовження проекту (це поширене явище).\nІнша причина може полягати в тому, що команда розробки починала з простого, але наростаючі вимоги змусили їх наблизитися до чогось складнішого. І вона використовувала найпростіший на той момент підхід, оптимізований за вартістю та швидкістю. Можливо, розробники не використовували якусь надпопулярну технологію, тому що на той час вона була недостатньо стабільною, не було альтернатив.\nЩо ще може бути причиною? Чиясь самовпевненість і бажання зіпсувати настрій тому розробнику, який у майбутньому копатиметься в цьому коді? Як не сумно, не зарозумілість є загальною причиною «кульгавої» кодової бази. Розробники просто не знали виходу краще. Це ж не гріх. Кожен пише найкращий код, який може зараз, враховуючи всі обставини.\nЧи врятує переписування ситуацію?\nЗазвичай переписувати все з нуля дуже дорого та ризиковано. Можна отримати шанс усе переробити, написати за правилами, і тут же зазнати невдачі, бо витрачав багато часу не на те, що проекту справді потрібно.\n«Я працював над проектом, який ми, розробники, вважали нестерпним через хаос у кодовій базі. Ми плакали, скаржилися та відмовлялися брати на себе відповідальність, просили повністю переписати систему. У кожній помилці ми звинувачували кодову базу, щільний графік, але не себе. Ми достукалися до керівників та отримали можливість все переписати. Я забув сказати вам, що це був стартап, який відчайдушно потребував інвестицій? Звичайно, на півдорозі стартап втратив імпульс для залучення інвестицій, і проект залишився без фінансування», — розповідає автор.\nСитуація у стартапі виглядала приблизно так\nЗвичайно, робота над кульгавою кодовою базою складна та стомлююча. Опиратися бажанню переписати те, що писали не ви — навичка, якою рідко володіє молодий розробник. Замість того, щоб зрозуміти проблему чи запит клієнта, ви хочете довести щось собі на кшталт «а я зробив би краще». Просто прийміть ситуацію: хоч би що ви робили, у кодовій базі завжди буде лайно.\nЧеклист при роботі з кодовою базою\nОтже, що ви можете зробити для покращення ситуації?\nДля початку: не скаржтеся. Ніхто довкола не хоче це слухати, як і розробники не хочуть слухати, що вони влаштували бардак у базі. Вам це теж не сподобалося б.\nВізьміть за правило залишати по собі порядок після кожного відвідування. Полагодьте «розбите вікно», коли є час, навчіть це робити інших.\nДодайте тест перед виправленням помилки, і через якийсь час ви будете впевненіше щось змінювати або рефакторити. Покажіть усім приклад, що ось так по крихтах, але ви всі можете зробити свій внесок і зробити кодову базу краще, охайніше. Це не станеться відразу, але через якийсь результат стане помітнішим.\nМотивуйте колег — поясніть, що це спростить вам подальшу роботу, буде корисніше для бізнесу загалом і т.д.\nСкладіть короткостроковий та довгостроковий план того, що ви могли б покращити у базі.\n«Пожежа» на проекті, коли терміново потрібно щось зарелізтити і для цього потрібно «зрізати шлях», може статися будь-коли. Поставте перед собою (і командою) завдання повернутись і навести в коді порядок після того, як «пожежа» закінчиться.\nЩо думають айтівці\nРозробники на Reddit зізналися, що всі мали такі моменти, коли дивишся на свій код і розумієш — «ну єресь якась». Однак, коли його писали, він не здавався таким дивним і незрозумілим. А тепер навіть підказки, залишені собі майбутньому, не допомагають.\nВони почали активно ділитися історіями зі свого досвіду.\n ','2022-12-03 00:24:51','2022-12-03 00:24:51'),(168,'«Ви не підходите як розробник, приходьте водієм»: листи, якими мені відмовили в Google, Meta та Apple','Оленка Пилипчак\nРедактор у Highload','Розробнику Себастьяну Карлосу відмовили в усіх компаніях FAANG. Highload переклав для вас ці листи та коментарі Себастьяна. Насолоджуйтесь 🙂\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЛист 1. Google\nДобрий день, Себастьяне Карлосе!\nДякуємо, що відгукнулись на нашу вакансію. \nМи нормально сприймаємо те, що ви використовуєте Bing у приватному житті, але не варто було згадувати про це стільки разів під час інтерв’ю.\nКрім того, ми не вважаємо, що наш Software Engineer може мати переконання, що «матриця реальна, і ми всі живемо в ній».\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\n Ми вирішили запропонувати цю посаду іншому кандидату.\nСпасибі за ваш час,\nGoogle HR\nЛист 2. Amazon\nШановний Себастьяне,\nНа жаль, маємо повідомити, що ви не пройшли відбір на посаду Software Engineer.\nОднак ми хотіли б запропонувати вам посаду водія у Amazon Fresh.\nДякуємо вам,\nAmazon HR\nЛист 3. Meta\nШановний пане Карлосе, \nдякуємо за вашу заявку. \nМи оцінили ваше розуміння природи реальності, яке, як ви згадували, демонструє фільм «Матриця» 1999 року.\nОднак ви, здається, не зовсім впевнені, що найкращий вихід для людства — побудувати матрицю всередині матриці.\nМаємо повідомити, що, на жаль, ми не будемо проводити співбесіду з вами. \nНа знак вдячності ми даруємо вам 10 000 метакойнів, які можна обміняти в будь-якому Міністерстві Достатку в метавсесвіті.\nГарного вам <час дня>,\nFacebook HR\n(Ми все ще оновлюємо наші HTML-підписи електронної пошти, вибачте за незручності)\nЛист 4. Apple\nШановний верховний чарівнику, \nНаша команда була дуже рада зустрітися з вами.\nЕнергія, яка вивільнилася під час нашої зустрічі, була настільки потужною, що нам довелося ізолювати половину Apple Park. Наші жерці все ще створюють захисні заклинання в порожнечі, що постійно розширюється.\nНіхто ніколи не отримував таку високу оцінку в нашому тесті на здібності. Ваша швидкість синхронізації просто незбагненна.\nНаше MRA підтверджує, що ви зв’язувалися з сутністю, яку Стів Джобс бачив багато років тому. Відразу після того, як секунда тривала сто років, відразу після проникнення у інопланетний простір, відразу після того, як почув, як небесна труба сурмить про питання, на які немає відповіді, відразу після того, як зазирнув за завісу реальності. Ось він, логотип Apple, сірого кольору.\nСірий колір був такий насичений, що аж палав. Коли я пишу ці рядки, сльози радості стікають по моєму обличчю. \nНезважаючи на те, що ми вважаємо вас Обраним, ми вирішили запропонувати цю посаду іншому кандидату. \nЗвичайно, Стів Джобс найняв би вас без роздумів. Але ми вважаємо, що будь-яка людина, яка бачила яблуко, що не має бути назване поза часом і простором, становить ризик для святих планів Тіма Кука.\nЗ найкращими побажаннями,\nApple HR\nЛист 5. Netflix\nСебастьяне, \nласкаво просимо у Netflix!\nМи раді вітати вас як нашого нового Software Engineer.\nНам сподобався ваш запал, і ми віримо, що ваші навички стануть цінним активом для нашої команди. \nМи з нетерпінням чекаємо ваших досягнень на новому робочому місці.\nЗ повагою\nNetflix HR\nЗвісно, від останнього я відмовився. Я подав заявку жартома. Ніхто не хоче працювати в Netflix.\nОтже, що ж пішло не так? Щось не так з FAANG чи зі мною?\nНезважаючи на поширену думку, є й інші компанії, де можна працювати програмістом. Але на жаль, мої спроби завершились так само.\nБонусний лист. Ecosia\nШановний пане Карлосе,\nНам сподобалась ваша пропозиція щодо міграції окремих структур даних у дерева.\nНаш бізнес дійсно зосереджений на відновленні лісів, але ми вирішили використовувати більш традиційну RDBMS для зберігання даних.\nЗ сумом у серці ми повідомляємо, що не можемо запропонувати вам посаду провідного архітектора.\nБажаємо вам удачі у ваших майбутніх пошуках.\nЗ повагою\nКоманда Ecosia\nЯк вважаєте, чия відповідь найкраща? Чекаю на ваші коментарі. Я думаю, що пропозиція від Amazon була дуже мила і щедра. Я міг би навіть залишити заявку на посаду водія вантажівки.\nМожливо, я б також написав Microsoft, але зараз вони почали виробляти деякі сумнівні продукти…\nЧитайте також: «Здавалося, щоб потрапити до Google або Facebook, треба бути генієм»: інженер Oracle про те, як пройти співбесіду у топ-компанії\nПереклала Євгенія Козловська','2022-12-03 00:25:09','2022-12-03 00:25:09'),(169,'«Роботодавець дзвонить та скаржиться вашим батькам»: HR поділилася «ноу-хау» мотивації в IT-компанії','Анастасія Пономарьова\nЖурналістка Highload','В одних IT-компаніях заборонено лаятися на айтівців, в інших — норма регулярно викликати «на килим». Але є й такі компанії, де для впливу на співробітника використовують… батьків.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо трапилося\nFounder & CEO HR.consulting Даліда Рижова поділилася в LinkedIn курйозним кейсом, як роботодавці «борються» з неякісною роботою співробітників, а також десятком інших історій про дивну поведінку на роботі.\n«Як ви відреагуєте, якщо ваш роботодавець зателефонує та поскаржиться на вашу роботу вашим батькам? , — пише Даліда. — Я гадала, що вже все бачила. І людей, що плачуть після звільнення, і розбірки в офісі дружин, які викрили чоловіків у зраді, і кулачні бої, і вживання заборонених речовин на робочому місці, і співробітників, які вплуталися в якісь кримінальні розбірки, і крадіжка ноутбуків новим співробітником після першого тижня роботи, і алкоголізм людей, які відповідають за головний ключ від сейфа в офісі, і ігроманів, які пропадають після кількох років чудової роботи та показників із корпоративною машиною. Про законні та незаконні з погляду суспільства романи я вже промовчу, тут швидше за все ви були свідками. Тепер у скарбничку плюсується дзвінок батькам».\nВона додала подробиці — роботодавець спеціально знайшов контакти родичів співробітника, щоби «скаржитися».\nВипадок не унікальний\nУ коментарях під публікацією інші HR та розробники стали ділитися своїми історіями з роботи\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\n«Було таке саме з подружкою, роботодавець сам знайшов номер батьків, зателефонував і поскаржився» , — розповідає Flutter developer Максат Капбар.\nДеколи трапляються і зворотні кейси.\n«Було навпаки: батько приходить розібратися через звільнення свого чада, після обґрунтування проходять етапи обхідного листа, а при підсумковій виплаті розбираємо кожен пункт і підпункт, чому так, а не інакше, — ділиться Азіз Нарметов. — Кейс був настільки незвичайний для мене, що з цікавості вирішив добити до кінця. Все закінчилося дзвінком від батька з коментом: «Коли що, я ще подзвоню, тож збережіть мій номер».\nІлюстрація\nІноді виховною роботою займаються дружини директорів. Причому не зі співробітниками компанії, а їхніми родичами.\n«Ось вам ще один дивовижний приклад: мені одного разу писала дружина директора мого чоловіка (заплутано, знаю) в Instagram, щоб призначити мені особисту зустріч з її чоловіком (він же директор мого чоловіка), щоб обговорити зі мною і попросити вплинути на захоплення в неробочий час мого чоловіка, які на його (директора) погляди шкодять роботі мого чоловіка», — згадує UX/UI дизайнер Марина Луц.\nІноді навіть не дружини, а коханки.\n«Співробітниця компанії, за сумісництвом коханка директора, якось зателефонувала моїй мамі і поскаржилася, що я не залишилася на овертайм. До речі, компанія була іноземна», — пише HR Олександра Романова.\nА ще є драматична історія повернення улюбленого співробітника до компанії з несподіваним фіналом:\n«Моя знайома якось сама звільнилася — так її шеф умовляв повернутися. Доходило до того, що він приходив у кафе, де вона обідала і мало не в коханні зізнавався — як фахівця, звичайно, — уточнив СМО Алекс Бурлаченко. — Загалом, два тижні штурму та знайома погодилася повернутися. Далі був раптовий поворот: наступного дня цей же шеф звільняє її. Це був четвер, якщо щось».','2022-12-03 00:25:19','2022-12-03 00:25:19'),(170,'Через кров, піт та сльози: як Google розробляла власний Linux','Анастасія Пономарьова\nЖурналістка Highload','Ймовірно, ви вже чули про операційну систему від Google — Chrome OS, але є в корпорації й інші розробки. Наприклад, усередині Google використовується власний дистрибутив Linux для настільних ПК — gLinux.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nGoobuntu\n«Саморобний» дистрибутив Linux у різних версіях використовується в компанії вже протягом десяти років. Першою версією була Goobuntu — як ви могли здогадатися з назви, вона ґрунтується на Ubuntu. Її використовували до 2018 року, коли запустили новий дистрибутив — gLinux на основі Debian.\nНавіщо було позбавлятися Goobuntu? Як пояснив Google, випуск Ubuntu раз на два роки з довгостроковою підтримкою означав необхідність вручну оновлювати кожен комп’ютер у компанії — понад 100 тисяч пристроїв — до дати закінчення терміну служби кожної версії ОС.\nДодайте до цього трудомістку необхідність повного налаштування комп’ютерів інженерів після оновлення. Як розумієте, це серйозний головний біль. Тому Google вирішив, що це обходиться компанії надто дорого. Крім того, установка Goobuntu на всі робочі машини зазвичай займала більшу частину року. З дворічним вікном підтримки залишався лише один рік вільного користування, після чого доводилося знову проходити той же процес на всіх машинах.\n“Весь цей процес був величезним стресом для нашої команди, тому що ми отримували звіти на сотні помилок з проханнями про допомогу в крайніх випадках”, — згадують у Google.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nDebian Linux\nКоли Google набридло постійно поратися з оновленнями Goobuntu, компанія частково перейшла на Debian Linux. Інженери корпорації створили ковзаючий дистрибутив Debian: GLinux Rolling Debian Testing (Rodete). Його основна ідея була в тому, щоб надавати останні оновлення та виправлення в міру їх створення та готовності до роботи, а не в якісь суворі часові рамки. До таких дистрибутивів належать Arch Linux, Debian Testing та openSUSE Tumbleweed.\nЗвичайно, для Google першою метою було вирватися із дворічного циклу обов’язкового оновлення ОС. Як показала практика, перехід до безперервної інтеграції/безперервного розгортання спрацювали добре: стало легше контролювати і відкочувати систему, якщо щось йде не так.\nSieve\nЩоб усі нововведення працювали без зайвої крові, поту та сліз, Google створила систему Sieve. Так, вона одна змогла автоматизувати виробничий конвеєр безперервного дистрибутива настільки, що сьогодні в компанії потрібен лише один інженер для обслуговування програми, що використовується більш ніж 100 тис. користувачів! Це чергова посада, що чергується між членами команди.\nІлюстрація\nЯк це працює? Коли Sieve виявляє нову версію пакета Debian, вона запускає нову збірку. Ці пакети об’єднані в групи, оскільки окремі пакети часто необхідно оновлювати разом. Після створення групи Google запускає віртуалізований набір тестів, щоб переконатися, що основні компоненти та робочі процеси розробників не порушені. Потім кожна група тестується окремо з повним встановленням системи, завантаженням та запуском локального набору тестів. Збірка пакета завершується протягом декількох хвилин, хоча тестування може тривати до години. \nЯк тільки збірка завершиться, всі нові пакети будуть об’єднані з найновішим пулом пакетів gLinux. Потім, коли Google вирішує, що час випустити його у виробництво, команда робить знімки цього пулу. Нарешті, він випускає нову версію ОС без усіляких багатоступеневих альфа-, бета-версій та загальнодоступних випусків.\nЗавдяки ковзаючому графіку випусків Google тепер може швидко усувати недоліки в системі безпеки всіх комп’ютерів без шкоди для стабільної роботи. А раніше інженерам доводилося ретельно переглядати кожну пораду з безпеки Debian, щоб переконатися, що виправлення увімкнено.\nКрім того, покращений набір тестів Google та інтеграційні тести з ключовими командами, які запускають критичні системи розробників, також дали більш стабільний досвід використання дистрибутива Linux. А прагнення автоматизувати весь процес значно зменшило навантаження та стрес усередині команди. ','2022-12-03 00:25:26','2022-12-03 00:25:26'),(171,'«Компанія вважає етику маркетинговою забаганкою»: Apple відмовила українці в роботі за три дні до виходу','Анастасія Пономарьова\nЖурналістка Highload','Фахівчиня з України успішно пройшла всі етапи співбесіди в Apple, де її навіть квапили з виходом на роботу, але напередодні старту підставили «бюрократичну підніжку». Про це SLS Quality Engineer Катерина Трусова написала у своєму LinkedIn.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо сталося\nДва тижні тому дівчина пройшла останню співбесіду та їй запропонували посаду в Apple. Рекрутер сказав, що перевірка біографічних даних може зайняти деякий час, оскільки їм потрібно переконатися, що вона не здійснювала злочинів за останні сім років. Катерину запевнили, що це не стане проблемою та її чекають на новій роботі якнайшвидше, тому вона повідомила нинішньому роботодавцю про своє звільнення.\nАле все пішло не за планом.\n«За 3 дні до виходу мені повідомили, що, на жаль, Apple не може мене найняти, тому що останні два роки із семи я провела в Україні. А через війну не можна проводити перевірку біографічних даних людей з України , — пише айтівниця. — Не допомогло навіть те, що я подала результати повної перевірки біографічних даних з грудня 2021 року, а також мою туристичну візу B1/B2 до США з травня 2015 року, яка не могла бути надана мені, якби я мала кримінальні обвинувачення».\nДівчина дуже засмутилася, у той час як Apple на папері висловила «глибоке занепокоєння вторгненням росії в Україну та підтримку всіх людей, що страждають внаслідок насильства».\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nІлюстрація\n«Насправді вони відмовилися робити винятки зі своєї політики з огляду на одну важливу обставину — війну в Україні… Я закликаю Apple та інших техгігантів переглянути свою політику та зробити винятки для українців. Ми вже сильно страждаємо, втрачаємо наші будинки, спогади та близьких… Чому ви додаєте до цього ще більше проблем?», — сказала Катерина.\nЧи важко перевірити судимість?\nВ Україні є кілька способів отримати підтвердження несудимості людини в електронному вигляді:\nна порталі Міністерства внутрішніх справ України;\nзапитат довідки на порталі «Дія»;\nза допомогою сервісу YouControl.\nРаніше українку Юлію Романенко, спеціалістку з IT-безпеки, відмовилися працевлаштувати у банку Данії з аналогічної причини. Однак у той період МВС закрив свій реєстр у зв’язку з початком війни, щоб уникнути витоку приватної інформації, а пізніше відновив його роботу. Отримання документа займає 1-3 години.\nНа порталі «Дія» обіцяють оформити довідку приблизно за 10 хвилин.\nЩо кажуть айтівці\nДопис зібрав кілька десятків коментарів. Одні здивувалися, як можна було незнайти дані про несудимість.\nІнші зазначили, що не вперше бачать таку поведінку FAANG-компаній щодо українців (і не лише), і абсолютно не здивовані.','2022-12-03 00:25:44','2022-12-03 00:25:44'),(172,'«Буде з грошима складно — можна продати кота»: айтівець поскаржився на образи з боку рекрутера','Анастасія Пономарьова\nЖурналістка Highload','Невідомі від імені найбільшої в Україні IT-компанії знущалися з тестувальника з інвалідністю — айтівці вимагали розплати, не розібравшись.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПодробиці\nTrainee QA Engineer Георгій Базмажян, який має І групу інвалідності, розповів у своєму LinkedIn неприємну історію, яка трапилася з ним напередодні. Невідома людина, що представилася рекрутером ЕРАМ, спочатку запропонувала роботу, а потім почала сипати образами щодо його статусу.\n«Фейк це чи рекрутер — не знаю. Не розумію тільки, навіщо? Хотів зробити боляче? В нього вийшло…», — пише Георгій.\nЩо кажуть айтівці\nДеякі фахівці не засумнівалися, що низькими образами справді міг сипати рекрутер, і вирішили закликати компанію до відповіді.\nІнші зазначили, що це витівки «тролів» і постаралися підтримати ображеного айтівця.\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nЩо говорять у ЕРАМ\nУ компанії прокоментували інцидент і спростували, що до цього причетний рекрутер EРАМ.\n«Ми не знаємо, що це за людина і чому вона використала ім’я компанії. Хочемо зазначити, що у команді компанії працюють фахівці з інвалідності, компанія всіляко сприяє розвитку корпоративної різноманітності та інклюзії (D&I), — уточнили у коментарі. — При відборі та наймі ми керуємося навичками та вміннями спеціаліста, маємо відповідні політики та проводимо проекти, які підтримують людей з інвалідністю».\nТакож наголосили, що EРАМ не співпрацює, а тому й не веде переговори з фахівцями з тимчасово окупованих територій.\n«Ми не можемо впливати на те, хто, що та кому пише в мережі. Всім потенційним кандидатам рекомендуємо ретельно перевіряти профайли рекрутерів та використовувати для комунікації офіційні канали зв’язку», — наголосили в EРАМ.','2022-12-03 00:25:55','2022-12-03 00:25:55'),(173,'$1500 на релокейт та покупка військового екіпірування: як IT-компанії піклуються про своїх співробітників під час війни','Оленка Пилипчак\nРедактор у Highload','В останні роки IT-сфера активно розвивалася: 2021-го кількість спеціалістів в індустрії збільшилося з 244 тис. до 285 тис. осіб, а обсяги експорту сягнули $6,8 млрд. Але 24 лютого в Україні розпочалася повномасштабна війна. ВРУ ухвалила закон «Про організацію трудових відносин в умовах воєнного стану». Раніше максимальна тривалість робочого часу не перевищувала 40 годин на тиждень, тепер вона може сягати 60 за умови працевлаштування за КЗпП.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТакож роботодавець може відмовити співробітнику у відпустці, а якщо компанія призупинила операційну діяльність — припинити виплачувати зарплатню. Або значно скоротити команду.\nНаприклад, IT-компанія Alchemy за один день без попередження та notice-періодів звільнила 7 тестувальників з України.\nЯк компанії адаптуються до нової реальності, підтримують співробітників та країну, а також які практики можна запровадити у себе навіть за обмеженого бюджету — дізналися у IT-рекрутинговому агентстві ITExpert.\nРелокейт та організація роботи: досвід українських та міжнародних IT-компаній\nОпитування українських IT-фахівців показало: 84% із них повернулися до роботи фултайм. Близько 7% працюють парт-тайм, а 6% втратили роботу. 61% IT-фахівців виїхали до більш безпечніших регіонів або інших країн. Близько 45% із них залишаються в Україні — переважно у Львівській області.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nКерівники IT-компаній активно допомагають командам із релокейтом, а також адаптацією до нових умов та переходом на ремоут, зокрема такими способами:\nЧати та підтримка менеджерів. У компаніях запускають гарячі лінії та чати, де HR, рекрутери та happiness-менеджери відповідають на запитання співробітників, координують евакуацію та стежать за рівнем продуктивності. Наприклад, у Luxoft та OBRIO запустили засоби інформування та підтримки у перші години після вторгнення. Вони доступні всім членам команди практично 24/7.\nСпальні місця в офісі.Більшість компаній з офісами у західних регіонах або за кордоном пропонують притулки для співробітників та їхніх сімей. IT-компанія CHI Software з офісами у Харкові, Дніпрі, Ізраїлі та Каліфорнії відкрила новий офіс у Львові. Тепер він служить хабом для співробітників, їхніх сімей та домашніх тварин. А два офіси GlobalLogic у Львові перетворилися на цілодобові центри координації, де члени команди можуть отримати все необхідне для життя та роботи.\nОрганізація трансферу.ІТ-компанії оголосили про можливість релокейту ще до вторгнення Росії. Наявність плану евакуації співробітників та завчасна підготовка допомогли організаціям уникнути паніки та оперативно вивезти частину команди. Наприклад, Sigma Software за перші кілька тижнів війни допомогла переїхати 1 140 співробітникам та їхнім сім’ям. А IT-компанія MEV з бізнес-юнітом у США та розробкою в Україні також забезпечила евакуацію співробітників, які переживали за себе чи життя близьких. Частину команди з офісу у Черкасах вдалося перевести до Львова. Процес сапортила компанія.\nПідтримка ментального здоров’я. Продуктивність співробітників зараз тісно пов’язана з їхнім загальним емоційним станом. Компанії пропонують вебінари з психологами та наймають у штат фахівців, щоб допомогти співробітникам впоратися з тривогою та апатією. Наприклад, компанія GlobalLogic запустила серію вебінарів у рамках проєкту Wellbeing Project, де психологи та інші фахівці діляться корисними порадами.\nMilitary leave package та покупка екіпірування для співробітників у ТрО або ЗСУ. Сім’ям мобілізованих фахівців Intellias, а також тим, хто приєднався до сил Тероборони, IT-компанія виплачує 6-місячний Military leave package та виділяє кошти на придбання необхідного екіпірування.\nБільшості компаній в IT знадобилося 7–14 днів, щоб адаптувати внутрішні процеси та допомогти співробітникам із релокейтом. Частина фахівців була готова відновити роботу майже відразу після вторгнення, щоб відволіктися від новин і менше хвилюватися.\nКейс Ciklum: релокейт до вторгнення та military leave package тим, хто залишився в Україні\nCiklum — міжнародна IT-компанія, заснована у Києві. У її українських офісах працює понад 3000 працівників. У компанії розробили Business Continuity Plan на випадок повномасштабної війни. З початку 2022 року керівництво ініціювало тимчасовий релокейт частини співробітників у Польщу та Болгарію. Команді компенсували витрати на квитки чи пальне, а також на проживання.\nУ перші два тижні війни компанії вдалося евакуювати решту співробітників — сумарно понад 70% команди в Україні. Ciklum покриває проживання в готелях або видає «добові» спеціалістам, які самостійно шукають житло. Пріоритетний напрямок для релокейту — захід України.\nСпеціалісти, які приєдналися до ЗСУ, у березні отримали 50% від своєї зарплатні. Їм і далі виплачуватимуть military leave package зі збереженням робочого місця у проєктах компанії.\nОфіс Ciklum у Болгарії\nКейс KITRUM: план евакуації, фінансова та інфопідтримка \nKITRUM — міжнародна IT-компанія зі штаб-квартирою у Флориді, а також центрами розробки в Україні, Польщі, Ізраїлі та Казахстані. В українських офісах працює понад 350 осіб.\nУ компанії за два тижні до початку військових дій прописали покрокову інструкцію на шість сторінок про те, куди у разі повномасштабної війни евакуюють команду та скільки фінансів потрібно для цього виділити. 50% української команди перебувало у Харкові, ще 20% — у Києві.\nЗ 24 лютого працівники почали виїжджати до центру та на захід України, а також за кордон.\nРелокейт із сім’єю компанія компенсувала співробітникові у розмірі $1500, а для тих, хто виїжджав самостійно, виділяла $1000.\nОрганізацією релокейту займався HR-менеджер, бронюючи квартири та допомагаючи з логістикою. Близько 20% співробітників KITRUM живуть у європейських країнах — вони також допомогли співробітницям з України перетнути кордон та знайти житло.\nКрім того, у компанії запустили інфопідтримку 24/7. Щоб структурувати та зберігати інформацію в одному місці, HR та керівництво створили Telegram-чат, а також розробили бота, де оновлюється інформація про доступний транспорт та житло. А в зручній таблиці можна знайти посилання на інформацію про правила в’їзду в країни, контакти юристів та телефони психологів.\nКейс BotsCrew: гуманітарна допомога та фінансова підтримка ЗСУ\nBotsCrew — розробник кастомних чат-ботів для Facebook Messenger, WhatsApp, Telegram, Skype, Slack та Instagram з офісами у Лондоні та Львові. Компанію започаткували троє студентів з України.\nУ BotsCrew випустили понад 100 чат-ботів і голосових додатків для компаній зі списку Fortune 500, серед яких Samsung NEXT, Mars і Virgin. У команді BotsCrew — понад 40 співробітників, з них більшість українців.\nУкраїнський офіс компанії розташований у Львові, отож гострої потреби в релокейті співробітників не було. Фаундери BotsCrew зосередилися на підтримці ЗСУ та гуманітарній допомозі: пожертвували понад ₴1,1 млн, передали частину офісного та технологічного обладнання волонтерським фондам. Крім того, компанія завдяки своїм доходам та допомозі благодійних організацій:\nвиділила офісний дрон на потреби ТрО у Львові;\nзамовила військові рації у Фінляндії на суму $17 тис.;\nпередала офісні монітори, частину макбуків та ₴750 тис до фонду «Повернись Живим»;\nкупила та передала ЗСУ 105 кевларових касок, 40 військових рацій, 200 акумуляторів для тепловізорів, комплекти теплого одягу лікарям на фронт.\nКоманда BotsCrew\nЯк підтримати продуктивність та ментальне здоров’я команди\n«Не панікуйте», — тепер ми чуємо цю пораду безліч разів на день. Зібрали поради, які допоможуть подолати тривожний стан, зберегти адекватність та продуктивність команди.\nПроживайте тривогу\nНамагаючись штучно позбутися почуття тривоги, людина дає зрозуміти нервовій системі, що є причини для хвилювань. Так запускається нескінченна рекурсія тривоги. На думку Девіда Х. Росмаріна, доцента психології у Гарвардській медичній школі, один із найефективніших способів полегшити панічний стан — прийняти його.\nСкажіть собі: «Я відчуваю тривогу, оскільки турбуюся про те чи про того».\nНе критикуйте себе за такі почуття, визнайте, що це нормальна реакція тіла на напружені події.\nПриділяйте час фізичним вправам\nВчені з Медичної школи Мічигану виявили, що фізичні вправи — ефективна профілактика занепокоєння. Фізнавантаження, які прискорюють серцевий ритм на 60–90% упродовж 20 хвилин тричі на тиждень, значно знижує рівень тривоги.\nЗаплануйте час на тривогу\nАмериканський психолог Кіссен рекомендує «планувати» термін на стрес та занепокоєння. Виділяйте 15 хвилин щодня для того, щоб подумати про свої страхи — це дозволить безпечно транслювати свої почуття та знизить рівень внутрішньої напруги.\nЧитайте також: Треба повернути контроль над ситуацією: ветеран АТО — про те, як планувати майбутнє і не збожеволіти\nЩо може зробити кожна компанія — навіть якщо є фінансові обмеження\nТривожність та падіння мотивації виникають на тлі невідомості. Мінімум, який ви можете забезпечити співробітникам — інформувати їх про подальші плани компанії, фокус у роботі та апдейти в бізнесі. Що ще можна зробити, щоб підтримувати ментальне здоров’я команди навіть за обмежених ресурсів:\nКомунікувати зі співробітниками. Раніше all-hands-мітинги проводили раз на місяць, але зараз цього недостатньо. Виходьте на зв’язок із командою, повідомляйте про плани та апдейти мінімуму один раз на тиждень.\nПовертати у розпорядок звичні речі. Можна проводити зарядку, грати в настільні ігри або влаштувати онлайн-квест — щось, що ви робили до війни і можете повернути в робочу рутину зараз, навіть якщо не зустрічаєтеся в офісі.\n«Переформатувати» 1:1 зустрічі. Змістіть фокус із проблем, пріоритетів та фідбека про роботу на почуття співробітника.\nІ нарешті зберіть базу контактів психологів, до яких при необхідності можуть звернутися співробітники. Наприклад, безкоштовну допомогу готові надавати сертифіковані спеціалісти Центру психологічного консультування та травмотерапії Open Doors. Психологи навчені за американським стандартом, мають досвід роботи з учасниками збройних конфліктів. Як отримати допомогу: зайти в чат-бот за посиланням, залишити заявку та контактну інформацію.\nЯк допомогти країні та підвищити популярність на ринку роботодавця\nОкей, Google: ви запустили чат підтримки 24/7, евакуювали співробітників у безпечне місце, провели воркшоп про психологічну стійкість під час війни та встигаєте передавати екіпірування на фронт. Що далі? Які дії допоможуть залишатися в «полі зору» кандидатів?\nЗапустіть безкоштовні консультації HR-спеціалістів\nНа сайті пошуку роботи Work.ua запустили волонтерську ініціативу: спеціалісти кар’єрного порталу надають українцям безкоштовні консультації щодо пошуку роботи. До експертів Work.ua можна звернутися із запитами про пошук роботи в Україні та за кордоном, отримати рекомендації щодо оформлення CV українською чи англійською та дізнатися, як заповнити профіль у LinkedIn.\nВідкрийте безкоштовний доступ до своїх продуктів\nСвіт об’єднався, щоб підтримати Україну: десятки країн приймають біженців та надсилають гумдопомогу, а світові компанії надають українцям безкоштовний доступ до своїх сервісів. Наприклад, MacPaw відкрили для українців безкоштовний річний доступ до VPN-сервісу ClearVPN.\nЗробіть онлайн-курси безкоштовними\nУкраїнська онлайн-школа програмування Mate Academy, де можна «з нуля» опанувати Java, Front-end, Full Stack Web та UI/UX Design, зробила повністю безкоштовним навчання на фултайм-курсі для всіх, хто служить у ЗСУ з 24 лютого. Приємний бонус: після навчання 90% випускників Mate Academy знаходять роботу в IT-компаніях — це 9 із 10 студентів.\nНа ринку кандидата у виграші будуть компанії, яким є що запропонувати співробітнику, крім зарплатні. Скілові спеціалісти звертатимуть увагу на наявність соцпакету, Total Rewards, штатного happiness-менеджера та програм із підтримки ментального здоров’я.\nЗбережеться ціннісна складова — цінності та позиція компанії матимуть вирішальне значення під час вибору місця роботи після війни.\nЧитайте також: «Сеньору з 5 роками досвіду пропонують $1000»: як війна змінила ринок найму в Україні','2022-12-03 00:26:02','2022-12-03 00:26:02'),(174,'«Наймання відновили, доходи зростають»: як українські IT-компанії почуваються в умовах війни','Максим Тимченко BLOG\nКопірайтер у Don\'t Panic Recruiting Agency','Рекрутингова агенція Don’t Panic поспілкувалася з п’ятьма командами, які мають офіси в різних куточках України, у тому числі в тимчасово окупованому Херсоні. Розпитали про робочі процеси, зарплати, прибутки і найм в умовах повномасштабної війни з рф. Не оминули увагою волонтерську діяльність та колег, які стали до лав ЗСУ.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nZibraAI BotsCrew Postindustria Uproad Innocode\nРік заснування 2021 2016 2006 2018 2010\nСфера діяльності Deep tech компанія, яка створює технології і продукти для розробників ігор. Створення кастомних чат-ботів і голосових помічників Розробка клієнтських рішень у  галузях Healthcare, Fashion, AdTech, FinTech; власний продукт –  AI/ML Додаток, в якому американські водії сплачують рахунки за платні дороги Створення продуктів та рішень для медіа та контент провайдерів\nОфіс (станом на 23 лютого) Київ Львів Миколаїв, Херсон, США, Чорногорія, Хорватія Київ, США Львів, Київ, Норвегія, Швеція\nПро географію команди\nZibraAI: В перші декілька днів більшість людей із команди евакуювалися. Основний напрямок — Захід України. Хтось поїхав у рідну хату до батьків, хтось зняв готель. Були випадки, коли люди їхали у Івано-Франківськ, а зупинялися в Тернополі. Двоє дівчат поїхали за кордон. Всі, хто хотів, встигли виїхати.\nУ Києві залишилося близько 10% команди.\nЗокрема, розробник Діма Булатов увесь цей час живе на Позняках. В той час як у місті падали ракети, він із бомбосховища відповідав людям у дискорд-спільноті. Це ком’юніті на 860+ учасників, що сформувалось довкола наших проєктів: клієнти, розробники зі сфери та ентузіасти.\nКомпанія має плани щодо відкриття офісу в західній частині країни. Займається пошуком хабу — є декілька варіантів. Обере той, який вмістить найбільшу кількість людей, щоб зосередити там одразу декілька компаній. \nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nБогдан (ZibraAI) призвичаївся до віддаленої роботи за містом\nUproad: Вся команда знаходиться у безпечних місцях. Хтось поїхав за кордон, хтось залишився. Співвідношення 60/40 на користь тих, хто виїхав. Можна сказати, команда стала міжнародною: люди є в Польщі, Чехії, у Франції, Латвії. \nBotsCrew: Роззосереджені по Україні (Київ, Львів, Одеса,) та за кордоном (Чехія, Польща, Іспанія, Великобританія).\nPostindustria: Більшість наразі у відносній безпеці. За декілька тижнів близько 70% команди перемістились у західні й центральні регіони України.\nСпівробітники, які мали на те законні підстави, евакуювались за кордон та працюють в наших офісах у Хорватії та Чорногорії.   \nЧастина команди залишилась і продовжує працювати з окупованого Херсону. Незважаючи на проблеми зі звʼязком, люди залишаються інтегрованими в проєкти, як і раніше.\nЗа словами девелопера Віталія, компанія пропонувала релокейт співробітникам і їх сім’ям, багато хто скористався. Поїхати допомагають і зараз, але зробити це вже набагато складніше. Він з родиною лишився у місті й чекає на перемогу. \nInnocode: Найбільше переймалися за київський офіс і людину з Маріуполя. Колеги звідти одразу виїхали. Один зі співробітників знаходиться у Путивлі Сумської області біля кордону — вирішив залишитися, працює кожного дня. Дехто вже встиг повернутися до Києва. Частина людей зі львівського офісу відправилась у села в області, дехто поїхав на Франківщину. Більшість перебуває у Львові і довкола.\nПро життєдіяльність компанії після 24 лютого\nBotsCrew: Команда показала себе дуже сильно та згуртовано. Усі наполегливо працювали, зокрема в укриттях — хто де міг. З перших днів вирішили, що зароблятимуть гроші, виплачуватимуть зарплати, а прибутки віддаватимуть на ЗСУ. \nКрім того, тепер у компанії є класна опція — супутниковий інтернет Starlink. \nInnocode: Трапилась цікава історія. У Львові компанія орендує офіс у гарній віллі «Юлієтка». Серед іншого, там є просторі підвали, які довгий час ніхто не ремонтував. \nУ грудні, за два місяці до повномасштабного вторгнення, до компанії звернувся колишній військовий з АТО, який шукав роботу різноробом, тож його з радістю запросили. Він усе розчистив і побілив, зробив проводку. Так команда отримала неймовірно красивий підвал, а тепер називає його бомбосховищем. Вже у лютому, коли посилилась напруга, вирішили купити туди води і батончиків — раптом доведеться спускатись. Ніхто не міг подумати, що Innocode буде активно користуватися цими запасами, починаючи з березня. \nУ понеділок, 28 лютого, у компанії мали загальну щомісячну зустріч, де, замість звичних статусів, обговорювали, як діяти далі. Домовились, що всі, хто можуть працювати, активно включаються в роботу, адже потрібно підтримувати клієнтів і державну економіку, донатити на ЗСУ, купувати броніки, каски. Для цього потрібні гроші.\nУ компанії зрозуміли: аби не впадати в шок, треба діяти. Організували тренінг з першої домедичної допомоги, запросили психолога поговорити про ментальне здоров’я і компанію, яка розповіла про інформаційну гігієну.\nПідвал-бомбосховище в офісі Innocode\nZibraAI: Спочатку роботу поєднували з волонтерством. Допомагали на ІТ-фронті. За декілька тижнів відновили продуктивність до звичних показників. Застою як такого не було, адже ZibraAI — продуктова компанія — у них завжди є великий беклог задач, до якого треба ставати і робити.\nUproad: Якихось відчутних змін немає. У компанії працюють, як і до повномасштабної війни.\nНа щотижневих п’ятничних зустрічах обговорювали, хто як себе почуває, у кого які складнощі, ділилися новинами. Раніше були сльози і емоції, тепер ситуація стабілізувалася.\nЯкщо спочатку поставали питання «як жити?», «куди бігти?», то зараз обговорюють більш приємні, буденні питання, на кшталт дитячих садочків. \nЗапустили індивідуальні й групові сесії з психологом. Компанія закупила лептопи для тих, хто працював за комп’ютером, аби підвищити їхню мобільність. \nPostindustria: На першому місці для компанії — безпека, а вже далі — бізнес. Виділили час на переміщення у більш безпечні регіони, компенсувала всі години. \nКоманда підкасту про технології (а тепер часто і про відстоювання незалежності) — Pi Tech давно намагалась перейти на українську і нарешті це зробила. Тепер і у внутрішніх комунікаціях кожен бнамагається спілкуватись рідною мовою. \nПро фінанси і клієнтів\nPostindustria: Усі компенсації, бонуси та зарплати збережно, жодних скорочень. 25-го лютого зробили виплату зарплати достроково. Запровадили окремий пакет компенсацій під час війни: витрати на релокацію, оренду житла, допомогу колегам, чий дохід менший за зарплату топових інженерів.\nЗ фонду компанії, організованого в перші дні, ми надавали фінансову допомогу співробітникам на персональні потреби чи волонтерську діяльність.   \nУсі партнери та клієнти залишились з компанією, адже одна з головних переваг компанії — делівері — залишилась без змін. Більш того, з лютого зʼявилися нові партнери. Кожен з них підтримував і продовжує підтримувати Україну та співробітників.\nZibraAI: Зарплати не урізали, навпаки перші виплати зробили трохи раніше, ніж повинні були: 24-25 лютого. Жодних скорочень немає і не планується.\nА продажі збільшились. Березень — рекордний місяць за кількістю проданих копій плагіна Zibra Liquids. \nBotsCrew: Березень став найприбутковішим місяцем за всю історію. Компанія постійно зростала і останні місяці перед повномасштабною війною часто били рекорди прибутковості, але ніхто не припускав, що подібне станеться і у часи війни. Всі гроші, зароблені з лютого по травень, задонатили на ЗСУ. \nНіхто з клієнтів компанію не покинув. Більше того — долучились нові.\nШість потужних контрактів: зокрема великий американський стартап ProofPilot, один з найбільших виробників автівок Honda, всесвітньо відома PR-агенція Leo Burnett. \nТакож мають проєкт, що чудово зарекомендував себе у сфері клінічних випробувань. Від початку пандемії COVID-19 допомагали Moderna шукати пацієнтів для третьої фази випробування вакцини. Це пришвидшило вихід продукту на ринок. \nЗарплати виплачують вчасно і в повному обсязі. У перший місяць заморозили performance review. Згодом, коли ситуація прояснилась, опцію повернули і вже провели сімнадцять переглядів, часто зі збільшенням компенсації.\nInnocode: Зберегли усіх клієнтів і виплати. Деякі з клієнтів хотіли платити наперед і пропонували допомогу з житлом у Норвегії. Компанія вирішувала фінансові питання індивідуально: комусь платили завчасно, хтось навпаки просив притримати гроші. Оскільки у березні повернулися до звичної діяльності, виставили рахунки клієнтам і закрили всі задачі, вже на початку квітня декільком людям підняли зарплати після перегляду.\nUproad: Компанія залишила бонуси і вихідні на свята, не дивлячись на те, що в країні вони скасовані у зв’язку з воєнним станом.\nВиконує всі зарплатні зобов’язання, перші виплати здійснили раніше запланованого, наприкінці лютого. Зараз не фіксує кількість годин на робочому місці. Усі дні, коли людині треба вирішити особисті питання, оплачуються. Перш за все, важить особиста безпека. \nПро найм персоналу і відкриті вакансії\nInnocode: Ще до 24 лютого почали пошуки офіс-менеджера, а вже після найняли одну з кандидаток. Відтепер мають двох офіс-менеджерів, один з яких на фронті.\nТакож ще у січні найняли розробника, а вийшов він вже у березні. Постійно тримали зв’язок і чекали на нього. Врешті він дійшов, відпрацював перший місяць і всі задоволені. \nСподобалась ініціатива одного з рекрутерів, який у файлику збирав людей, що втратили роботу чи самі пішли з компаній, для яких ще досі «не все так однозначно». Часто є потреба надіслати людині вакансію або ж порадити когось на певну посаду.\nОфіс-менеджер Андрій (Innocode) захищає Україну на фронті\nZibraAI: Відновили найм за 3-4 тижні після початку повномасштабної війни. Не відмовились від жодного з планів, що закладали в roadmap компанії.\nНайняли декількох інженерів: Senior ML Engineer і Senior 3D-розробника. Також з’явився Community Manager у відділі Growth. До кінця другого кварталу планують збільшити команду ще на 6-7 людей. \nUproad: Станом на 24 лютого мали шість відкритих вакансій. Жодну із позицій не скоротили. За цей час найняли чотирьох людей. Компанії важливо наймати саме українців, у тому числі й тих, що перебувають за кордоном.\nPostindustria: З 24-го лютого призупинили активний найм. Вакансії залишались відкритими, тож ті, хто потребував роботи, могли подати заявку — обробляли їх у звичайному режимі. Наприкінці квітня повернулися до активного найму.\nЗ 2014 року не наймають у росії, а віднедавна зʼвився ще один фільтр: не беремо у команду релокованих вихідців із країни-агресора. \nВ умовах повномасштабної війни плани щодо розширення компанії змін не зазнали. Й надалі працюють над новими напрямами в ML/AI, у квітні відкрили 4 нові вакансії, дві з яких — в Україні. \nBotsCrew: Продовжують наймати як в Україні — адже тут хороший пул талантів, — так і за кордоном. Переважно фокус на українських ФОПах. Від клієнтів є запит, аби команда була збалансована: бодай один фахівець за кордоном, щоб мати постійний зв’язок. Решта може знаходитися в Україні. \nТрапляються й випадки, коли кажуть: «Хочемо саме в Україні». У нас є потужний партнер з Америки, який раніше жив у Львові. Він спеціально переніс деякі позиції з Індії в Україну. Каже: «Ми приїдемо зі Штатів та Індії і проведемо тімбілдинг у Львові після перемоги». \nЗа відчуттями наймати стало простіше, почали швидше закривати позиції. Менше вакансій — менше вибору, відтак стало легше знаходити людей.\nПро колег, які пішли в ЗСУ\nPostindustria: Одного з колег мобілізовано й наразі він у лавах ЗСУ захищає Україну на фронті. Ми опікуємося забезпеченням його підрозділу та допомагаємо його сімʼї.\nBotsCrew: Колегу мобілізували у перший день війни. Компанія зберегла його зарплату у повному обсязі. \nInnocode: Офіс-менеджер Андрій із третьої спроби потрапив у ТрО. Нещодавно забрали на фронт. Домовились, що повністю зберігають зарплату і прикривають його — розподілили обов’язки між собою. СТО мобілізували до лав ЗСУ, але він поки що у Львові, працює у штабі. \nПро волонтерську діяльність\nInnocode: Взяли шефство над підрозділом ЗСУ, в якому служить офіс-менеджер Андрій. Збирають і відправляють все, чого вони потребують. Львівський офіс впродовж трьох місяців функціонував як хаб для біженців: багато коштів йшло на те, щоб підтримувати його у належному стані, аби люди могли жити, спати, харчуватися. З ними жила команда волонтерок: вісім дівчат, які працюють на розподілі гуманітарки ще з 2014 року. Віддали їм окрему кімнату. Мають в офісі душ і кухню, тож є бодай умовний комфорт.\nЛьвівська команда зібрала кошти на два тепловізори. Дехто зі співробітників допомагає тваринам, хтось розвантажує вагони, інші долучаються до сортування гуманітарки.\nУ перші дні норвезька команда надіслала список із 40 будинків, які готова була надати для безкоштовного проживання, якби хтось з команди поїхав у Норвегію. Також компанія перекладає і редагує інформацію для українських біженців у Норвегії. \nЩе один клієнт зв’язався з СТО, власноруч організував доставку гуманітарної допомоги, прилетів із нею у Польщу. Далі вже поляки довезли до кордону, а наш СТО забрав у Львові. \nZibraAI: Розробники допомагали вирішенням задач на ІТ-фронті. Маркетинговий напрям був також задіяний у волонтерську діяльність: розробка різноманітних інформаційних кампаній, всього, що стосується роботи з людьми.\nЗапустили крутий NFT-проєкт, спрямований на допомогу країні та людям, які постраждали внаслідок війни. Sirens Gallery — це 1991 зображення вирішальних подій війни, які можна буде придбати у вигляді NFT-токенів. Мінімальна стартова ціна за один NFT – еквівалентна $100. 100% коштів від продажу NFT-творів будуть передані на благодійність — гуманітарну допомогу постраждалим від війни українцям та відбудову українських міст.\nОлександр (ZibraAI) вдень писав код, а ввечері патрулював місто\nPostindustria: Колеги на півдні організовували доставку ліків, продуктів харчування, допомагали із прихистком залишених тварин. Шукали житло тим, хто прямував на Захід. Дехто з команди опікуються забезпеченням окремих захисників у ЗСУ.\nВ перші дні відкрили фонд, долучились партнери та клієнти компанії. Завдяки фонду надали фінансову допомогу більш ніж 10 сімʼям, які постраждали від війни, та підтримали кожен благодійний запит від наших співробітників-волонтерів.\nСпівробітники технічних команд зі сторони клієнтів також доєднались до підтримки і донатили на «Повернись Живим».  \nPostindustria бере участь в ініціативі KOLO — групі ІТ-компаній, що займаються фінансуванням потреб ЗСУ.     \nUproad: Засновник корпорації Kapsch TrafficCom, до складу якої входить Uproad, Джордж Капш виділив гроші для підтримки української команди під час війни.\nКоманда в США провела кампанію зі збору коштів на платформі Fundly: долучалися як співробітники, так і пересічні небайдужі американці. Ці кошти здебільшого йдуть на точкові потреби волонтерів. \nOperational Lead Сергій разом із дружиною координували доставку безкоштовних ліків з Канади і відправляли в лікарні та будинки для людей похилого віку. Фахівці з Uproad брали участь у розробці дизайнів для сайтів допомоги армії.\nДопомагали сім’ям і друзям співробітників: зокрема, команда зібрала кошти на лікування жінці, яка 38 днів знаходилась в окупації у Ворзелі. Необхідну суму зібрали за 4 години.\nBotsCrew: Вже перерахували на «Повернись Живим» близько 2,4 млн грн, а загалом на допомогу армії витратили більше 4 млн. \nПриймали гуманітарку з-за кордону, розподіляли через різні організації, завозили безпосередньо військовим. Усього транспортували десь 35 бусів. \nУ перший місяць війни за запитом від військових хірургів, придбали швидку допомогу й броньовану інкасаторську машину для ТрО Києва. Потім ці машини передали ЗСУ: одна знаходиться під Миколаєвом, друга — десь на сході. \nРобили три вилазки у Київську область, останній раз — із французьким журналістом. Завозили гуманітарну допомогу в Ірпінь і навколишні села за декілька днів після звільнення. \nКлієнти також допомагали. Питали: «Куди можемо надіслати кошти?» Звичайно, давали їм посилання на «Повернись живим», а вони потім скидали скріншоти. Деякі клієнти навіть спеціально виділили своїх програмістів, аби ті стали до лав української ІТ-армії і виконували завдання. \nКоманда BotsCrew приймала гуманітарку з-за кордону і розвозила військовим\nВсі компанії роблять дуже схожий висновок: працювати, не дивлячись ні на що та допомагати ЗСУ. Так переможемо!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:26:19','2022-12-03 00:26:19'),(175,'«Здавалося, ніби я біжу в колесі і вже нічого не тішить»: чи реально волонтерити і не вигоріти — моя історія','Святослав Іванців BLOG\nQA Engineer у U-Genius','Привіт! Мене звати Святослав Іванців, я QA Engineer у U-Genius Software Development Company. У цій статті я хочу розповісти про свій досвід волонтерства паралельно з роботою та підтримати всіх, хто допомагає нашим хлопцям на фронті: поділюся своїми невеличкими лайфгаками — де на все знайти сили та як не вигоріти.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк я став волонтером\nПерші тижні війни минули «на телефоні». Намагався допомагати із пошуком житла для знайомих моїх знайомих, модерував новостворений місцевий Telegram-канал та почав отримувати запити на бронежилети, балаклави, каски, розгрузки.\nУ компанії усім, хто з України, дали час на збирання себе докупи, тож саме перші тижні війни я не працював, але зарплатню було збережено у повному обсязі. Саме зарплата дала мені змогу придбати деякі речі за власний рахунок, тому честь і хвала тим компаніям, які продовжують платити винагороду своїм спеціалістам, у тому ж розмірі, як і до війни. \nПро донати, думаю, навіть казати не треба. Звісно, донати стали частиною моїх витрат. І після перемоги планую продовжувати.\nБо зараз увесь час в голові пульсує лише єдине питання: «Що я ще можу зробити?». \nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nУ ЗСУ є люди, яких я знаю особисто. Саме завдяки їм я довідався що, кому, куди і скільки треба. \nХочете волонтерити? Будьте готові до цього\nПроцеси допомоги вкрай хаотичні і до цього треба бути готовим. В першу чергу навіть не вам, як людині, а компанії, як роботодавцю. Мій досвід можна назвати позитивним, бо на проєкті, де я працюю, із розумінням і схваленням поставились до того, що час від часу я випадатиму із радарів. А може їм навіть доведеться на мене чекати.\nВони чудово розуміли, що у країні війна і кожна пара рук на вагу золота та наближає Україну до перемоги.\nОтже, декілька порад:\nПовідомте про свій намір волонтерити. Окресліть приблизну кількість часу, який ви плануєте присвячувати волонтерству.\nОтримайте підтримку (дозвіл) або несхвалення.\nПодякуйте за підтримку, якщо отримаєте її, а у разі несхвалення замисліться, чи будете ви й надалі продовжувати працювати у компанії. Або ж вам доведеться змінити її на ту, яка підтримуватиме ваше прагнення.\nЯк збирати кошти та звітувати\nFacebook — сила! Насамперед, коли потрібно зібрати кошти, я звертаюсь до соцмережі. Для збору коштів я створив банку у Mono, спочатку приходили невеликі суми від жителів громади. До речі, сила Facebook спрацювала ще й тому, що мені почали писати у приватні повідомлення і надавати матеріали для пошиття розгрузок та жилетів безкоштовно. Тому кошти з першого збору ще навіть не були до кінця витрачені, і пришвидшують закриття наступного.\nДалі складніше — надійшов запит на авто. Авто знайшлося, але його вартість становила 5000 євро. Чесно кажучи, у мене було стійке відчуття, що мені не вдасться зібрати цієї суми. З самого ранку я і декілька моїх друзів поїхали до місцевих підприємців просити допомоги.\nНаписав пост у Facebook, а далі моя дружина поширила допис у 50+ групах обласних центрів України. Збір було закрито за добу! Вдалося зібрати 190 879 грн.\nСума перевищувала необхідну, то ж решту було витрачено на пальне. \nВсі кошти, які надходили, я вніс у документ з іменами та сумами переказів. Наступним кроком був ще один пост зі звітом — скільки, за скільки, на що ми зібрали та які подальші дії. Пост-звіт із фото вже є на моїй сторінці. \nПротягом війни нам вже вдалося зібрати таку допомогу:\n10 розвантажувальніх жилетів\nСувій тканини на розгрузки ($400)\n10 комплектів активних беруш\n15 спальників та карематів\n22 плитоноски\n20 аптечок\n200 фасованих порошків калій-йодиду\nДекілька десятків одиниць спідньої білизни\nАвто LandRover 2002 \nМікроавтобус Renault \nІ на додаток було придбано та доставлено різноманітні медикаменти, кріплення для ПНБ до шолома\nВраховуючи досвід попередніх потреб, нашим бійцям й надалі будуть потрібні авто (тривалість життя авто на війні — всього декілька тижнів), розвантажувальні жилети, бронежилети, медикаменти, спідня білизна та весняно-літнє взуття.\nЯк волонтерити та не зійти з розуму\n1\nДотримуватися режиму дня\nЯк би банально це не звучало, але вкрай необхідно дотримуватися режиму дня. Тобто регулярно харчуватися, знаходити час для відпочинку та нормального сну. Я декілька разів знехтував цим правилом і одразу відчув відтік сил. Саме тоді я вирішив більш уважно ставитися до режиму.\nСкажу одразу: виходить не завжди, але це не виправдання, аби відмовлятися від більш-менш адекватного розпорядку дня. Намагаюся заснути до 00:00, регулярно їсти (насправді з цим часто виникають проблеми) — навіть якщо окрім хот-догу на заправці більше альтернатив немає, то краще так, ніж нічого зовсім. \nЩоб не забувати вчасно їсти можете собі налаштувати нагадування на телефоні. \n2\nКористуватися нічним режимом смартфону\nЦе мій мастхев і не лише під час війни. Перший місяць я не користувався нічним режимом і отримував усі сповіщення та повідомлення і о першій, і о другій ночі. Це неабияк заважає і як показує досвід — читання тих сповіщень чи повідомлень можна було сміливо відкласти на ранок. \nТому сам користуюсь і вам раджу. По-перше, ви швидше засинатимете, бо не будете відписувати на повідомлення ледь не до ранку. По-друге, ви дійсно зможете якісно відпочити і ніщо вас не відволікатиме від перегляду фільму чи серіалу, наприклад. Якщо раптом хтось терміново має вам щось повідомити, то можна подзвонити, чи не так?\n3\nХвалити себе за усі успіхи\nВеликі справи складаються з маленьких дій. Якщо постійно думати про велику кінцеву мету і пропускати всі зусилля, які докладаються, то можна дуже швидко розчаруватися та стомитися.\nВід моменту ухвалення рішення про збір коштів на купівлю авто для ЗСУ та до передачі авто для батальйону минув місяць. Мені здалося, ніби я біжу у колесі і вже нічого не тішить. Вже три тижні минуло, а автівки ще немає…\nСаме тоді мені спало на думку підсумувати, скільки кроків було зроблено до сьогодні і скільки ще знадобиться. Це неабияк допомогло, адже я чесно оцінив свої зусилля і сил стало більше.\nДля того, щоб підбадьорювати себе — записуйте «маленькі справи» у нотатки і перечитуйте їх.\n4\nЗалишати час на спілкування з рідними\nНе варто цілковито присвячувати себе волонтерству від ранку до ночі. Ви швидко стомитесь і відчуєте вакуум від нестачі спілкування із рідними та друзями. Декілька тижнів я мало часу проводив із рідними і коли нарешті це вдалося зробити — відчув полегшення та розслаблення. \nВідтоді я вирішив шукати час для спілкування із родиною чи друзями так само, як і час для сну або прийомів їжі. Це не завжди вдається зробити, бо інколи моя допомога потрібна дуже раптово, але якщо я точно знаю, що у середу я вільний, то фіксую це у календарі.\nВам раджу робити те ж саме. Окрім цього, попереджайте і рідних про свій вільний час, адже у них теж можуть бути плани.\n5\nЗнаходити бажаючих допомогти та не відмовлятися від допомоги\nСпочатку здається, що ти все можеш сам! Це так тільки здається. На своєму досвіді можу сказати, що підтягуються небайдужі, які теж хочуть чимось допомогти, ваше завдання — не заважати, а ввести в курс справ та делегувати частину обов’язків. \nЯк не вигоріти волонтеру\nПовертайтесь до звичних речей.Заземляйтеся та повертайтеся до звичних буденних справ. Таких як приготування їжі, прибирання оселі, зустрічі з друзями та вечірнього перегляду кіно або серіалів. Це допомагає перемкнутися та відволіктися.\nЗнайте тих, кому допомагаєте. Я допомагаю тим, кого знаю особисто. Мої друзі, знайомі та родичі вже на війні і передають мені запити, що їм необхідно. Це дає змогу відчути, що я допомагаю конкретним людям, батальйонам. Я їх знаю. Тому як тільки настає втома, я пригадую, що умовно у Василя є родина, яку я знаю і маю допомогти йому та його побратимам. Якщо ви допомагаєте у волонтерському центрі і не знаєте тих, кому допомагаєте особисто, то можете як мінімум дізнатися, який це батальйон, звідки він, або й навіть попросити показати вам фото.\nФізична активність і «розумна» прокрастинація. Фізична активність допомагає відімкнутися від справ і ні про що не думати. Але часом просто немає фізичних сил на біг чи тренування. Тому інколи я обираю комп’ютерні ігри, аби вимкнути мозок від справ і буднів. Щоправда, аби не перестаратися із втечею від реальності раджу ставити собі будильник на фіксований час, щоб не провести шість годин за іграми. Години-дві цілком вистачить.\nРиторичне запитання: чи на все вистачає сил\nЗвісно бракує декілька годин в добі, але цілком можна намагатися встигнути все. Сідаю працювати вранці, через певний час починаються дзвінки, повідомлення. Доводиться швидко реагувати та координувати людей або їхати кудись по щось самому. В обід повертаюся і знову працюю, ввечері знову дзвінки та повідомлення. І так по колу.\nЧи вистачає сил і часу? Мусить вистачати, інакше — ніяк. Якщо хтось бажає долучитися до майбутніх зборів, ласкаво запрошую на мою сторінку у Facebook! Давайте допомогати разом!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:26:30','2022-12-03 00:26:30'),(176,'«Працювали з бомбосховищ по всій Україні»: як ми створили навчальну платформу та надали безкоштовний доступ вишам і волонтерам','Юрий Кислицын BLOG\nProduct Manager в SendPulse','Війна не змогла зупинити український IT-бізнес. Поки окупанти нищили нашу країну артилерією, авіацією та ракетами, команда й далі розробляла платформу для створення онлайн-курсів SendPulse online course platform із бомбосховищ по всій Україні та підвалу чернігівського офісу.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nМене звати Юрій Кісліцин, я продакт-менеджер у SendPulse. У цій статті я розповім, як були налаштовані процеси в умовах війни, чому довелося поступитися функціоналом та хто зможе отримати безкоштовний доступ до платформи.\nІдея платформи з’явилась у результаті глибинного аналізу аудиторії\nЩоби відповідати запитам аудиторії та мінімізувати фінансові ризики, ми в SendPulse періодично проводимо глибинні дослідження користувачів.\nНавесні 2021 року дізнались, що велика кількість наших клієнтів працює в ніші онлайн-освіти та використовує SendPulse паралельно із платформами на кшталт GetCourse.\nКористувачам освітніх сервісів, окрім можливості створити курс, потрібні додаткові інструменти:\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nчат-боти для автоматизації підтримки і продажів;\nemail-розсилки для комунікації зі студентами;\nCRM-система для обробки заявок.\nТому на перший план виходить проблема інтеграції кількох сервісів між собою.\nЩоби закрити болі клієнтів та зробити їхнє щоденне життя простішим, ми вирішили створити власну навчальну платформу і в травні 2021 розпочали розробку.\nПоріг входу для створення платформи такого рівня — $150 тис. Інвестиції не залучали, фінансували проєкт з власних коштів компанії.\nКонцепт MVP створювали на основі:\nаналізу європейських та американських топплатформ;\nінтерв’ю з експертами в ніші онлайн-освіти;\nроботи з фокус-групами.\nПочатковий опис проєкту та флоу користувачів в Miro\nУ процесі роботи ми переосмислили можливості платформи, тому кілька функцій помістили в беклог, а кілька, навпаки, додали задля закриття користувацького сценарію. Наприклад, нам довелося відмовитися від редагування візуального складника сайту, що спричинило зміни в дизайні та сценаріях використання навчальної платформи.\nЗначних змін зазнав і кабінет студента: ми вирішили об’єднати налаштування профілю та дашборд із переліком курсів, питань та сповіщень, щоб спростити користування навчальною платформою.\nПрототип дизайну кабінету студента\nФінальний дизайн особистого кабінету студента\nЧерез війну довелося скоротити функціонал\nНаразі ми практично завершили розробку платформи для створення онлайна-курсів — SendPulse online course platform. З її допомогою експерти, інфлюенсери та онлайн-школи зможуть монетизувати власні знання, не обмежуючись аудиторією певного населеного пункту.\nПлатформа включає:\nкабінет студента;\nкабінет експерта;\nконструктор уроків;\nконструктор сайту.\nУ кабінеті студента відображаються доступні курси та сертифікати.\nЗа допомогою кабінета експерта можна створити та налаштувати курс, запросити інших експертів, а також відслідковувати успішність студентів та створювати сертифікати.\nПриклад кабінета експерта\nУ конструкторі уроків викладач створює структуру курсу та окремих уроків, додає тексти, завантажує текстові, графічні, аудіо- та відеоматеріали.\nПриклад конструктора уроків\nКонструктор сайтів дає можливість створити новий сайт для розповсюдження інформації про курс та збору лідів. Через війну довелося значно скоротити функціонал: зараз експерти можуть працювати лише зі стандартним шаблоном. Але в найближчих релізах ми реалізуємо повноцінний конструктор.\nПриклад кабінету управління сайтом\nПісля реєстрації на платформі експерт отримує доступ до всієї екосистеми SendPulse. Він може створити курс, підключити лендінг і Telegram чат-бота для збору та утеплення лідів, налаштувати email-розсилку та CRM-систему.\nУ такий спосіб зникає необхідність додаткових інтеграцій: експерт зосереджується на навчальному процесі та маркетингу, а не технічних налаштуваннях.\nОсновне завдання в контексті безпеки та стабільності платформи — захист унікальних матеріалів від копіювання та запису. Особливо важливі відео: значна частина лекцій завантажується безпосередньо на платформу, а не на YouTube, щоб уникнути розповсюдження в публічному просторі.\nМи захищаємо матеріали від скачування, але маємо ускладнити запис екрану — на сьогодні це найпростіший спосіб скопіювати будь-який контент. Наразі частина команди працює над тим, щоби максимально захистити унікальні матеріали від скачування та подальшого розповсюдження.\nНайскладніше було налагодити роботу за проєктом в умовах війни\nНад проєктом на постійній основі працює дві команди: одна займається розробкою платформи, інша — конструктором сайтів та конструктором уроків. Міжпроєктні завдання, дизайн, маркетинг, роботу з тарифами віддаємо спеціалістам всередині компанії; для консультацій протягом усього процесу розроблення залучаємо зовнішніх експертів.\nЗадля злагодженої роботи обох команд та сторонніх спеціалістів я тісно співпрацюю із продактом розробників сайтів. Ми разом плануємо беклог, займаємось декомпозицією завдань, контролюємо всі процеси від ідеї до релізу. У роботі не використовуємо Agile в чистому вигляді, скоріш, це поєднання Scrumban та інкреметної моделі.\nНайскладніше було налагодити роботу за проєктом в умовах війни. Я закладав різні ризики — навіть одночасний вихід з ладу всіх комп’ютерів — але не війну.\nТому коли почалась облога та масовані обстріли Чернігова, продуктивність команди впала до нуля. Людям було важливо знайти хоча б порівняно безпечне місце для себе та близьких, щоби вижити, тому ми організували укриття в офісному підвалі. Колеги приходили з речами, дітьми та хатніми улюбленцями, разом готували їжу, працювали в перервах між обстрілами, підтримували одне одного морально.\nРобота в офісному підвалі. Фото з особистого архіву\nУ результаті ми пройшли найскладніший період невизначеності та страху з мінімальними втратами: реліз затримався на 2,5 місяці, зате всі колеги живі, цілі та здорові. Звичайно, ризик обстрілів залишається, команда постійно переміщується між укриттям та робочими місцями, але життя колег пріоритетніш продуктивності.\nНереальний буст — безоплатний доступ до SendPulse online course platform для вишів та волонтерів\nНереальний буст мотивації всій команді дало рішення керівництва відкрити безоплатний доступ до платформи волонтерам, благодійним фондам та державним навчальним закладам. Тепер ми працюємо не просто над навчальною платформою, а допомагаємо здобувати освіту співвітчизникам, які боронять нашу країну.\nНаприклад, SendPulse online course platform знадобиться тим, хто не може відвідувати онлайн-лекції, тому що патрулює вулиці, боронить Україну в лавах ЗСУ та ТрО чи проживає на тимчасово окупованих територіях. Також платформою користуватимуться благодійні організації для навчання нових волонтерів та надання інформації цивільним.\nНаразі всі бажаючі можуть подати заявку на ранній доступ. Відразу після релізу ми зв’яжемося та надамо доступи для тестування.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:26:35','2022-12-03 00:26:35'),(177,'Хтось ходив на роботу пішки, хтось об’їжджав блокпости: як IT-компанія працювала в окупованому місті до виїзду','Діана Смєлікова BLOG\nОпераційний директор WEZOM.ACADEMY','Український IT-бізнес досить швидко відійшов від квітневого шоку та загалом повернувся до роботи. Навіть паралізуючі обставина війни та окупації не можуть завдати йому фатальної шкоди. Приклад того — херсонська команда WEZOM. \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nХерсон — єдиний обласний центр України, який спромоглася зайняти російська армія. З 1 березня місто живе у стані дивної окупації — там все ще функціонує українська адміністрація, працюють українські банки та українська інфраструктура. Але окупанти стоять у центрі міста, вимагають дотримання комендантської години, жорстоко розганяють регулярні українські мітинги. Сьогодні Херсон живе під п’ятою окупантів, але городяни наполегливо відмовляються миритися з цим, продовжуючи жити і працювати всупереч усім старанням ворога. \nДо групи компаній Wezom входять освітні курси WEZOM.Academy. Викладачі академії — практикуючі розробники, дизайнери, SEO-фахівці. Це ті ж люди, які працюють над створенням продукту.  \nСпочатку окупація стала для академії шоком, але ми опанували себе і продовжуємо працювати. Поки вулицями ходять іноземні солдати, ми повністю перевели наші IT-курси до онлайн-режиму.Це дозволило продовжувати навчання без зайвого ризику для життя викладачів та студентів.\nМи вирішили зберегти команду за всяку ціну\nМинулі кілька років були для WEZOM дуже вдалими — ми будували амбітні плани та набирали команду «на виріст». З приходом війни все змінилося — на зміну бурхливому зростанню прийшла невизначеність. Попри це команда не згорнула запущені проєкти, не звільнила жодного співробітника. \nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nЩо стосується WEZOM.Academy, то ми не скасовували запущені в лютому курси. Усі викладачі продовжують працювати, нікого не було звільнено. Зарплату працівникам виплачують у строк і в повному обсязі, адже навчання продовжується, хоч і в онлайн-режимі.\nМи навіть плануємо запускати нові курси, адже саме зараз мільйони українців опинилися у пограничній життєвій ситуації — багато хто втратив роботу і хоче опанувати нову професію. \nЧому ми не оптимізували штат? По-перше, наш потенціал для зростання нікуди не подівся, потрібно лише пережити важкі часи. По-друге, «бухгалтерське мислення» для нинішніх умов непридатне.\nКраїна потребує робочого бізнесу, зайнятості. Важливо продовжувати платити людям зарплати, щоб вони витрачали гроші та підтримували нашу економіку. Це наш внесок в український тил, без якого перемога у сучасній війні неможлива. \nНаші співробітники завжди на зв’язку — навіть із підвалу\nКоманда WEZOM.Academy по можливості продовжувала працювати над курсами навіть у найпохмуріші дні війни. Тому що ми маємо відповідальність перед студентами, яких почали навчати. \n«Працюю, роблю, що можу. Спочатку було дуже складно — хоч би як ми себе готували психологічно заздалегідь, до такого підготуватися неможливо. Зараз мені максимально допомагає зосередитись техніка Pomodoro. Хтось перший раз про неї чує — ви без проблем знайдете її в інтернеті. Дуже всім рекомендую, вона допомагає зосередитись, не відволікаючись на новини», — каже Олег, викладач курсу Frontend.\nОдна з ключових нових ідей — створити онлайн-курс для переселенців, щоб вони могли за кілька тижнів освоїти нову професію на рівні, достатньому для працевлаштування на новому місці.\nАле цей проєкт вимагав серйозної координації усієї команди. Потрібно було зібрати в одному місці відеооператора, викладачів та операційного директора. А це в окупованому місті проблематично: росіяни буквально паралізували життя Херсона.  \nСпівробітники збиралися у студії на свій страх і ризик: хтось йшов на роботу пішки, хтось їхав у об’їзд ворожих блокпостів, аби потрапити до офісу та записати онлайн-урок — так було до виїзду з окупованого Херсона.\nПроте результатом можна пишатися — ми змогли створити максимально щільні стартові курси для входу в розробку та дизайн. \nЯк ми відновлювали та змінювали робочі процеси\nЄ співробітники, які записували уроки в підвалі у місті Чорнобаївка, але зараз їм вдалось виїхати та продовжичи навчати студентів з вільної территорії. \nДумки про безкоштовні курси не було. Якщо бути відвертими — кожен із нас ще під час пандемії завантажив з десяток безкоштовних курсів на різні теми, яких за два минулі роки жодного разу не торкнувся. Все тому, що психологічно ми не вважаємо безкоштовне цінним. Вірю, щоб курси спрацювали, потрібно надати їм трохи цінності — людина має вкласти в них щось, і тоді ставитиметься до них серйозно та швидше візьметься за вивчення. У практиці WEZOM практично немає фахівців, яких приймали на роботу після безкоштовних курсів.\nУ результаті ми вирішили знизити вартість курсів до кордону трохи нижчого за самоокупність — до 1500 грн. \nНа релокацію та вироблення нової стратегії розвитку у нас пішло приблизно півтора тижні. Зараз компанія продовжує роботу, переважно у віддаленому режимі.\nЩодо студентів, то вони слухають лекції у Zoom. А якщо стабільний інтернет їм недоступний, ми надсилаємо запис уроку. \nЗміни в компанії та на сайті\nЗ першого дня стало зрозуміло, що працювати у довоєнному форматі вже неможливо. WEZOM.Academy відмовилася від курсів офлайн, щоб не наражати на небезпеку життя викладачів і студентів в окупованому місті. Ми оперативно розробили кілька скорочених та оптимізованих онлайн-курсів для людей, які прагнуть за кілька тижнів освоїти на базовому рівні нову професію. Вони спрямовані на внутрішніх переселенців.\nКрім того, компанія підкоригувала графік. Тепер обов’язковий робочий день триває 6 годин, і працівники можуть обирати час на власний розсуд.\nПісля російського нападу ми повністю переклали свій сайт українською мовою і встановили заглушки для заходу з території РФ і Білорусі. Академія відмовилася від студентів із Росії і впевнено говоримо, що працювати з ними більше ніколи не будемо. \nЩо ми робимо для нашого міста та країни\nУ перші дні російського вторгнення WEZOM включився у збирання коштів для українських захисників, залучив до нього своїх іноземних партнерів. Наші зміни в робочому графіку частково продиктовані тим, що співробітники поєднують роботу з громадянською ініціативою.\nХоча зараз вже є розуміння, що краще допомагати грошима, а для цього краще зосередитись на роботі.\nНіхто не опустив руки, війна нас згуртувала і об’єднала. Жителі окупованого Херсона щодня виходять на масові мітинги та дають зрозуміти окупантам, що їм тут не раді. Ми віримо у перемогу, рано чи пізно наше місто буде звільнене, а над Україною знову запанує мирне небо. \nСлава Україні!\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:26:35','2022-12-03 00:26:35'),(178,'«Я не могла знайти свою машину в гаражі і забувала цілі розмови»: як робота в Google пошкодила мені мозок','Оленка Пилипчак\nРедактор у Highload','На початку 2015 року розробниця Кетлін Гадд прийшла до Google. Її взяли в команду V8 як одного з перших авторів специфікації до WebAssembly. У цій статті вона розповість частину історії про те, що у підсумку пішло не так і завдало непоправної шкоди її здоров’ю.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПередаємо слово Кетлін.\nРедакція Highload публікує переклад матеріалу.\nПерекладено бюро перекладів у Києві «Профпереклад».\nПереклад від\nСподіваюся, що моя розповідь навчить людей розпізнавати токсичну культуру на робочому місці. Або хоча б допоможе новим співробітникам побудувати кар’єру в Google трохи краще.\nБудь-яка історія про WebAssembly буде упередженою — історія самого проєкту дуже непроста. Моя розповідь — не виняток. Намагатимуся викласти якомога точніше, незважаючи на погану пам’ять.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nЯк все починалося\nДо приходу в команду V8 я кілька років пропрацювала на підтримці транспайлера, що конвертує .NET-додатки в ефективний JavaScript. Проєкт запустили одночасно з Emscripten — саме ця програма спочатку стала стандартом, а потім надихнула команду на створення WebAssembly. Мені пощастило попрацювати зі творцем asm.js Елоном Закаї (Alon Zakai), і я багато чого в нього навчилася. Завдяки цьому досвіду я ідеально підходила до команди WebAssembly.\nНезважаючи на хронічне захворювання, останніх років двадцять мені абияк вдавалося зберігати продуктивність, багато в чому завдяки моїм колегам.\nТим не менш, Google — найгірша компанія, в якій мені довелося працювати. Це місце буквально пошкодило мій мозок.\nЯкщо ви через роботу не можете спати, щодня перебуваєте на межі зриву або постійно сумніваєтеся у власній цінності — послухайте моєї поради: шукайте нову роботу.\nУ WebAsembly був грандіозний потенціал. Mozilla і Google вкалували щосили, щоб asm.js став механізмом, що забезпечує роботу додатків у мережі. Вони вирішили більшість технічних проблем, але стало зрозуміло, що деякі з них занадто важко усунути. Так почалася робота над WebAsembly.\nПотрібно було вивчити сильні сторони asm.js та одночасно розібратися зі слабкими. А потім створити специфікацію, яку можна легко реалізувати в нинішніх runtime JavaScript з використанням їх генераторів коду, debugging та іншої інфраструктури.\nЯ приєдналася до цього процесу однією з перших, і це було дуже цікаво. У мене був досвід роботи з вебплатформами, але написання специфікацій має свої унікальні складності.\nВсі були водночас і менеджерами, і юристами, і програмістами. І Дж.Ф. Бастьєн (JF Bastien ), і Люк Вагнер, і Елон Закаї, і Бен Тітзер, і багато інших старанно працювали, створюючи основу того, що потім використовуватимуть мільярди людей.\nКоли працюєш над продуктом для мільярдів користувачів, які не мають інших варіантів, це може викликати певний стрес. В історії розвитку вебтехнологій повно прикладів паршивих API, погано продуманих специфікацій і величезних дірок у системах безпеки. Те, що один програміст склепає за тиждень, може в майбутньому вимагати багато років інженерної розробки.\nДля WebAssembly ми не могли і не збиралися випускати напівфабрикат. Як браузер-розробники ми всі розуміли, яку ціну доведеться заплатити за погану специфікацію.\nЗвідки взялися стрес та токсичність?\nЦей стрес і важливість проєкту були причиною постійних негараздів, підвищуючи токсичність середовища. Багато обговорень дизайну стали занадто бурхливими. Два експерти однієї сфери, але з конкуруючих компаній, не могли дійти згоди. Кожен був абсолютно впевнений у тому, що саме його думка є єдиною правильною.\nНаради зривалися — не встигнеш прийти до тями, як уже провів у кабінеті безрезультатно цілу годину. У здоровому середовищі така команда має менеджерів проєкту та лідів, вони відразу розпізнають проблему і намагаються її пом’якшити, щоб команда могла працювати далі.\nУ нас не було менеджера. Ми знали, що він нам потрібен, і навіть намагалися його отримати. У кращому разі такий менеджер викликався попрацювати за сумісництвом і недовго, а потім переходив до іншого проєкту. Через це у нас виникали складні соціально-організаційні проблеми, і вирішувати їх доводилося самим інженерам, які не мають такого досвіду. А роботи в них і так було достатньо.\nУ результаті ми змогли вчасно уявити продукт із мінімальним функціоналом, якість специфікації була низькою, а автори просто розбігалися. Подібна ситуація в історії продуктів з відкритим кодом не є унікальною, але спостерігати її все одно було сумно.\nДалі — гірше. Наші ліди були загнані як коні — у них просто не було сил щось змінювати. Для процвітання будь-якої команди потрібен лідер-експерт, а йому — підтримка людей, яким вони підзвітні. Інакше вони просто не зможуть зробити все необхідне для процвітання. Наші керівники не мали такої підтримки.\nКоманді V8 загалом не пощастило — ми працювали під керівництвом лідера Chrome, людини, якій було на все начхати. У нього досі чи не найнижчий рейтинг у всій компанії.\nЗа свою кар’єру я не раз бачила менеджерів, що плачуть, і тут це теж траплялося.\nКоли команді не вистачає ресурсів, а лідери не контролюють планування, ресурси та розклад, навіть дрібна проблема може швидко стати серйозною. Зацікавлені люди з інших проєктів та відділів компанії влізли у проєкт, сподіваючись застосувати власний досвід для вирішення. Чи просто поставити у своїх резюме галочку — ось, мовляв, над яким крутим проєктом я працював. У цьому й була проблема.\nЧерез війну специфікація WebAssembly будувалася на каламутній і зовсім невідповідній технології. Через це людям було складно зробити свій внесок, і багато учасників групи залишилися незадоволені. Зрештою, специфікацію, звичайно, зачесали до потрібного рівня і випустили, але коштувало це недешево.\nЯк WebAssembly пошкодила мій мозок\nТрохи вище я писала, що WebAssembly пошкодила мій мозок — абсурдне твердження, але, на жаль, правда. Два роки роботи у Google супроводжувалися постійним стресом. Мені довелося неофіційно виступити менеджером проєкту, допомагати вести наради, документувати рішення і при цьому ще й розбиратися з ворожо налаштованими колегами.\nПодяка іншим учасникам команди, вони допомагали мені вирішувати ці питання, але це все одно далося взнаки всім нам. Згодом я відзначила втрату середньострокової та короткострокової пам’яті.\nДійшло до того, що часом я не могла знайти свою машину в гаражі або забувала цілі розмови. Доводилося весь час писати самій собі детальні записки.\nВ результаті лікарі силою відправили мене у відпустку за станом здоров’я та наполягали на звільненні. Я послухалася їхньої поради, але набагато пізніше, ніж слідувало.\nДо кінця цього процесу я вирішила щось зробити. У минулому я вже так робила, хоч це ніколи і не спрацьовувало: я домовилася про зустріч з одним із керівників компанії. Вкрай не рекомендую такий варіант, але кожній команді потрібен захисник. У нас його не було, і мені здалося, що це останнє, що ще можна зробити. Зустріч пройшла погано.\nМоєю першою оплачуваною роботою була робота гейм-дизайнера у студії з розробки ігор на початку 2007 року. Я швидко вжилася у роль, яка визначила всю мою кар’єру — роль tool-програміста. Я зосередилася на тому, як допомогти іншим виконувати свою роботу, як зрозуміти, що саме викликає у них стрес та заважає рухатися далі.\nЧасто це невдячна робота, але дуже важлива. Мені пощастило з колегами та лідами, які побачили цінність цієї роботи та підтримали мене. Моя робота в тій студії закінчилася, коли я зустрілася з єдиним засновником компанії, що залишився. Я пояснила, що проєкт відстав від графіка, що люди стресують та видають низьку якість роботи. Пояснила, чому це відбувається, і як це вирішити, щоб заощадити компанії гроші.\nЗасновник заявив, що нічого міняти не буде, а команді потрібно збрехати, щоб вони продовжували працювати. У результаті продукт випустили із запізненням у кілька років.\nБудь-яке токсичне місце, де я працювала, зазвичай було результатом поганої роботи керівництва. Цей випадок не став винятком. Тут я теж пояснила одному з керівників Google, чому у проєкті WebAssembly виникли проблеми. Що йому не вистачає підтримки з боку організації, бо люди просто йдуть геть. Він погодився з моєю оцінкою, а потім повідомив, що нічого не змінюватиме. У результаті команда змінила все самостійно.\nФінал моєї історії з Google\nМоя робота в Google завершилася тихо і без жодних драм. Я повернулася з відпустки і виявилося, що команду WebAssembly фактично розпустили — хтось звільнився, а хтось втік до інших відділів. Мій новий менеджер повідомив, що тепер я буду працювати над незнайомою мені частиною Chrome з іншими людьми.\nЯ написала заяву, пройшла коротку співбесіду із поясненнями причин звільнення. Останній день роботи був приблизно за тиждень до дати, коли я могла б придбати акції компанії за пільговою схемою як її співробітник (упс!).\nНаступні кілька років я була безробітною, відновлювала здоров’я і іноді писала код. Наразі можу з радістю заявити, що частково відновилася і отримую гроші за роботу над продуктом з відкритим кодом. Але я вже ніколи не буду такою, як раніше.\nСподіваюся, ви ніколи не відчуєте на собі те, що пережила я, і зможете побудувати успішну кар’єру своєї мрії.\nАвтор: Кетлін Гадд','2022-12-03 00:26:54','2022-12-03 00:26:54'),(179,'«Я бачив, як сайти падають за лічені хвилини»: ми створили кіберармію і ддосимо ресурси ворога','Андрій Чернієнко BLOG\nMiddle Support Administrator в Favbet Tech','Привіт! Мене звати Андрій Чернієнко, я Middle Support Administrator в Favbet Tech, і з березня вже пішов третій рік моєї роботи. Перша моя посада в Favbet була Junior Support Administrator, а на Middle перейшов приблизно рік тому. \nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nDDOS-атаки\nНа рішення ддосити ворожі сайти мене і багато інших наштовхнув наш Team Lead Олександр Старостенко, він поділився з нами посиланням на Telegram-канал, де навчали запускати DDOS-атаки, а також займались їх координацією. В момент першого запуску атаки з мого ПК я відчув тільки задоволення від того, що все ж в мене вийшло все правильно налаштувати, більше нічого відчути не встиг бо атакований ресурс «впав» за пару хвилин 🙂\nЗа роботою\nЗвісно таку ініціативу у нас дуже підтримали. Айтівці у нашій компанії самі по собі дуже ініціативні люди і взагалі, якщо можна так сказати, «за будь-який двіж». Спочатку це було самоорганізовано в середині нашого айтівцевого кола, а потім з’явилась ініціатива створити свою кіберармію з усіх бажаючих співробітників Favbet. На самому початку мені допомагали колеги і безпосередньо люди, що вже успішно проводили DDOS-атаки.\nПрямого досвіду з DDOS-атак  до вступу в IT Army я не мав, розумів тільки принцип їх роботи. Але маю сказати, що моя робота в Favbet вимагає від мене вирішення різних задач і не рідко ці задачі доводиться вирішувати креативним способом. Я думаю що саме досвід роботи в компанії допоміг мені швидко розібратись у цій справі.\nЯк відбуваються атаки\nЯкщо казати про аналіз цілей, то це відносно не складно, достатньо обрати саму ціль і перевірити наявність відкритих портів через сайт https://2ip.ua/. Але атаки наносяться комплексно. Якщо атака йде, наприклад, на якийсь банківський ресурс, то цього буде замало. На щастя, вже все, що потрібно, є у відкритому доступі в тематичних телеграм каналах 🙂\nТак виглядають добрі новини\nЯ особисто для DDOS-атак використовую mhddos_proxy — цей інструмент розроблений українськими програмістом, він наносить атаки, використовуючи величезний список проксі-серверів і дуже ефективний, бо може атакувати відразу декілька ресурсів, також його відносно просто встановити. Ось інструкція для Windows.\nВіртуальні машини у поміч\nНайцікавіше для мене в роботі нашої IT-армії було те, як на початку роботи нашої групи учасники шукали різний софт і способи нанесення цифрового ураження ворогу. У нашій команді є Сергій Баснін (Erlang Team Lead) — він проявив у цьому особливу креативність, бо для запуску атак він використовував не тільки свій ПК, а розгортав віртуальні машини на сервісах Azure і Kamatera,що посилило ефективність цих атак в рази.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nНаслідки атаки на ворожий ресурс\nЗ перших днів мене вразила єдність людей, які запускають атаки, бо ефективність DDOS-атаки напряму залежить від кількості людей, що її запускають: чим більше, тим ефективніше.\nВ перші ж дні я бачив як ресурси країни-агресора падають протягом лічених хвилин і це дійсно дивує і вражає одночасно.\nНаша IT-армія в Favbet — це частина величезної IT Army of Ukraine. \nНаші атаки успішні на 90%\nЗараз процес став більш організованим, всі атаки скоординовані і націлені на важливі об’єкти в індустрії ворога, такі як оператори фіскальних даних, авіаперевізники, система «Меркурій» та багато інших.\nВ IT-армії Favbet Tech наразі 36 людей, але готові прийняти всіх, хто ще хоче долучитись 🙂\nВсього було атаковано 1000-1200 сайтів, API та інших ресурсів, успішність атак близько 85-90%, більше залежить від того, чи включають там геозахист.\nЕсли вы нашли ошибку, пожалуйста, выделите фрагмент текста и нажмите Ctrl+Enter.','2022-12-03 00:27:11','2022-12-03 00:27:11'),(180,'«Не засуджую тих, хто розмовляє російською в Україні»: чесні історії айтівців, які перейшли на українську мову','Оленка Пилипчак\nРедактор у Highload','З початку вторгнення росії в Україну дуже багато російськомовних українців вирішили остаточно перейти на українську мову. Ми зібрали для вас декілька історій про те, як це роблять айтівці з Pingle Game Studio. Надаємо їм слово.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯ не засуджую тих, хто говорить російською\nМене звати Надія Гавриленко, я Unity (C#) Developer. Хоча я досить непогано знаю українську, мені завжди було набагато зручніше спілкуватися російською — банально мала більше практики, ну і раніше на мову не так звертали уваги. Але вже на другий день війни деякі з моїх друзів (котрі теж завжди спілкувалися російською) перейшли на солов’їну. І я подумала, що це чудова ідея, хоча тоді ніхто нікого ні до чого ще не закликав.\nДеякі люди переходять на українську, тому що не хочуть мати нічого спільного з росією, відчувають огиду. Але мною керували інші емоції — це гордість за свою країну, за те, що ми вистояли в перші дні, коли ніхто від нас цього не очікував, і продовжуємо дивувати весь світ своєю мужністю. Мені хочеться відчувати себе українкою, хочеться відчувати єдність з українським народом.\nЯ зараз знаходжуся далеко за кордоном, виїхала десь через тиждень після початку. Хочу сказати, що тут навіть не очікують, що я знаю російську. Що вона навіть теоретично може бути для мене ближчою. Такі думки іноземцям просто не приходять в голову. Україна — це українська.\nПроте я не засуджую тих, хто продовжує говорити російською. Багато з них, можливо, вже втратили все. Куди ж їм втрачати ще і звичну мову?\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЧи заслуговує людина відчувати себе вигнанцем просто за те, що просто так вийшло, що російська для неї зручніша? У кожного свої обставини і свої причини. І врешті-решт мову не можна вивчити за один день. Але що можна — так це чітко знати, на якому боці ти зараз. А як ти про це скажеш, вже не так важливо.\nЩо я засуджую — так це будь-які сварки на тему мови. Зараз це просто неприпустимо. Людина, яка всім серцем за Україну, але розмовляє російською, не наносить нікому шкоди. А ті, хто говорять українською і змушують до цього інших — наносять! Ще й яку. Банально псують настрій собі та іншим, створюють розкол всередині країни. Ми не можемо зараз сваритися один з одним, вся агресія має бути направлена на справжніх ворогів.\nІсторично склалося, що ми знаємо дві мови, цього не змінити за одну мить. І у будь-який інший час я б сказала, що це досить круто, тому що знаючи дві мови «за замовчуванням», ми можемо набагато легше (навіть не докладаючи зусиль!), ніж росіяни, розуміти польську, білоруську, інші слов’янські мови. Хто ще може таким похвалитися?\nСумно, що одна з добре знайомих нам мов виявилася мовою агресора, але замість того, щоб відхрещуватися, краще подумаємо, як нам це допоможе перемогти.\nДеякі з людей, с якими я спілкуюся, з різних причин не можуть перейти на українську, хоча щиро на нашому боці. Я продовжую спілкуватися з ними як раніше, тому що головне, щоб ми добре розуміли один одного і продовжували бути разом. Разом ми сильніші.\nЗа останній місяць української в моєму житті стало набагато більше і розмовляти стало набагато простіше. Коли я маю вибір — я однозначно обираю українську. А коли, в силу різних обставин, вибору немає, я тішуся з того, що знання російської приносить мені користь — впевнена, що росія не хотіла б нам ні в чому бути корисною, але тут вона просто нічого не може зробити.\nБабуся каже, що у мене виходить набагато краще\nЯ Юрій Нікулін, Graphic Designer. Народився і більшу частину життя провів у моєму рідному місті Харкові. Усе моє оточення розмовляло російською, батьки, друзі, вчителі — всі. Українську я чув тільки на QTV, коли дивився реслінг чи «Футураму».\nШкола у мене була російськомовна, більшість вчителів я досі пам‘ятаю та поважаю, але були й такі, які у період 2014 року замість того, щоб вести урок — влаштовували нам «ватні» монологи з приводу Криму, Майдану тощо.\nУ моєму житті українська займала важливе місце, особливо після того, як ми познайомилися з моєю другою половинкою. Їй з українським оточенням пощастило більше, ніж мені, і з нею хочеться розмовляти лише солов‘їною.\nАле все зупинялось на моменті усного мовлення. Я, мабуть, й досі не думаю українською, а коли розмовляю — перекладаю свої думки у слова. І через це здаюсь сам собі якимось загальмованим.\nПісля 24 лютого стало зрозуміло, що час переходити на українську.\nПочав я з відмови від будь-якого контенту російською: кіно, серіали, анімаційні фільми тощо — тільки український переклад.\nІ, до речі, вже знайшов безліч прикладів, що українська локалізація набагато правильніша з точки зору перекладу. З’явився мотив передивитись усі улюблені фільми.\nЩоб не здаватись надто повільним у спілкуванні, поки що перейшов на українську тільки в тексті, а спілкуюсь у більшості з тими людьми, перед якими не соромно виглядати смішним. Бабуся каже, що у мене виходить вже набагато краще, а бабуся брехати не буде! 🙂\nТак що все моє оточення в цьому мене підтримує, і всі теж, як можуть, намагаються перейти на українську. Впевнений, що згодом буду спілкуватися на достатньому рівні, щоб почуватися впевнено.\nДо людей, які досі спілкуються російською, я ставлюсь так само, як і раніше, бо на особистому прикладі знаю, що можна щиро любити свою країну, розмовляючи будь-якою мовою.\nСпілкуватися українською — моя форма протеста\nМене звати Дарія Панфіленко, я Concept Artist. До війни я спілкувалась російською, українська займала далеко не перше місце. Але я не цуралася читати чи щось писати або ж відповідати на ній, коли до мене зверталися українською.\nУ перші тижні війни прийшло усвідомлення того, що хочу перейти на українську. \nМені стало гидко, що у нас з цими нелюдями так багато спільного — корені, родичі, загальна розмовна мова. І спілкуватися тільки українською, яку вони не розуміють, відчувається наче якась форма протесту.\nПерехід відбувся зовсім нескладно, це відбулося натуральним чином.\nЯ почала з того, що стала спілкуватись українською у нашому робочому чаті на 150 осіб. А також майже одразу — з рідними та друзями.\nНа 100% не переходжу, бо відчуваю себе трохи невпевнено, коли всі навкруги розмовляють російською. Я живу у Дніпрі. Здається, що буду звучати якось недоречно, чи буде здаватись, наче я якийсь імпостер.\nАле по телефону з представниками обслуговуючого персоналу, пошти, або з людьми, які дзвонять щось уточнити щодо замовлень, все ж, переважно, відповідаю українською. \nПроте, я впевнена у своїх навичках щодо мови і, слава богу, завдяки великій кількості прочитаного та написаного за своє життя, труднощів з її використанням майже не маю, це ж рідна мова, як не як.\nВиходить в мене, як і більшості українців, дві рідні мови. Але російська нині наче заплямована цими покидьками, що роблять жахливі злочини на нашій землі. І мені чомусь соромно, що я вважаю російську не менш рідною. ','2022-12-03 00:27:13','2022-12-03 00:27:13'),(181,'«Українські паспорти поки не роблю — принципи дорожчі»: що зараз відбувається в даркнеті','Виктория Пушкина\nЖурналистка в Highload','Вільний і небезпечний — це про даркнет. Сама по собі прихована мережа передбачає лише анонімність, тому дозволена в більшості країн світу. Але саме анонімність дозволяє проводити в ній незаконну діяльність, не боячись державного втручання.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nТому не дивно, що з початком війни в Україні саме в даркнеті насамперед з’являються дані спецслужб країни-агресора, тут намагаються знайти способи виїзду з України і тут же обманюють іноземців, збираючи «на допомогу біженцям».\nДаркнет — серце кібервійни\nКібератаки з боку росії на українські сайти розпочалися ще до повномасштабних військових дій. Але коли битва почалася в реальності, вона розгорнулася і у віртуальному просторі.\nКожне з відомих хакерських угруповань вибрало свій бік у цій війні, і більша частина з них використовує даркнет для спілкування, пише dnstats. Тут вони розкривають конфіденційну інформацію урядових організацій і домовляються про нові атаки.\nDnstats акцентує на тому, що моніторинг IP-адрес має вирішальне значення для виявлення ранніх індикаторів кібератак. І їхнє дослідження показало, що протягом останнього місяця в даркнеті значно збільшилася кількість саме російських IP-адрес.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nАнонімні махінації\nШахраїв повно і у звичайному інтернеті. У даркнеті вони ще небезпечніші, бо це анонімна мережа. І начебто цього недостатньо — як вишенька на торті, вони часто дурять на кібервалюту.\nЗа даними Check Point Research, на форумах прихованої мережі з’являється дедалі більше оголошень зі збором коштів на кібергаманці для допомоги українцям. Деякі з них офіційні, вони ведуть на сайти Defend Ukraine або «Повернись живим». Підтримати їх цілком можливо біткоїном або ETH.\nОфіційні криптогаманці Defend Ukraine\nАле є й не такі чесні «волонтери».\nНаприклад, на одному з форумів даркнету просять донати для «Марини». Їй та її дітям треба «терміново втекти з України». Допомогу приймають тільки в криптовалюті, а текст супроводжує болісна фотографія. Та сама, яку, як вказує Check Point, у два кліки можна знайти в статті Deutsche Welle про дітей — жертв війни. Але як багато людей вирішать це перевірити?\nСтати українцем за будь-які гроші\nМати український паспорт is a new black. І поки одні задовольняються тим, щоб лише надіти обкладинку та сподіватися, що це дасть безкоштовний проїзд у європейському транспорті, інші ведуть гру на великі гроші та шукають можливість купити підроблений документ.\nХто шукає — той завжди знайде. Ми в Highload змогли знайти потрібне оголошення на першому ж популярному російськомовному форумі. Ціна питання — зарплата мідла. Точніше, вона така була кілька місяців тому. А сьогодні — за жодні гроші.\n«Українські ID поки що не роблю. Репутація та принципи понад усе. Сподіваюся, війна закінчиться незабаром», — пише автор оголошення, під ніком якого висвічується підпис «Порядний».\nНу і насамкінець, звичайно, ще один популярний зараз запит — виїзд з України чоловікам призовного віку. Але навіть у даркнеті не рекомендують користуватися нелегальними методами.\n«Як і раніше, не рекомендуємо ходити лісами та полями, а також застерігаємо від круїзів та інших водних екскурсій. За спробу незаконного перетину загрожує адміністративна відповідальність, а за перетин — кримінальна», — пишуть на форумі.','2022-12-03 00:27:29','2022-12-03 00:27:29'),(182,'Як стартапу втриматись на плаву під час війни: розповідають українські фаундери','Виктория Пушкина\nЖурналистка в Highload','На ринку IT-наймання найбільше від війни постраждали джуни. На ринку IT-бізнесу джуни  — це стартапи.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯк вони залишаються на плаву, попри всі складнощі, дізнавалася журналістка Highload.\nWOD Insight\nСтартап WOD Insight — це застосунок для людей, які займаються кросфітом і функціональним тренінгом. Highload писав про нього в липні 2021 року. Його запустили троє українських дівчат. Продукт вийшов на ринок у березні 2020 року та націлювався на ринок США. На сьогодні вони мають 15 тис. користувачів, 85% з них — із США.\n«Коли почалася війна, частина команди була в США, а частина терміново переїхала на захід України чи в Європу», — розповідає одна з фаундерок стартапу Вероніка Корж. У плані фінансів, з її слів, команда не постраждала. «Проєкт вийшов на самоокупність та основні продажі в нас у США. Якщо ж говорити про моральний стан — тут особливо похвалитися нічим. Ми, як і всі українці, з 24 числа живемо в кошмарі», — додає вона.\nВероніка Корж, кофаундерка WOD Insight\nПерші два тижні основними завданнями стартапу були забезпечити безпеку членів команди та волонтерство: «Але час іде, а продукт — це дитина, про яку треба дбати і допомагати їй рости. Тож зараз ми повернулися до колишнього режиму».\nВероніка каже, що вони із самого спочатку використовували хмарні рішення, які прив’язані до західної інфраструктури. Їхні сервери знаходяться на AWS у штаті Вірджинія, США. Команда завжди була розподіленою, тому із цього погляду змін не було.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\n«Зараз у нас багато роботи: зустрічі з партнерами й інвесторами, імплементація нової функціональності. Справляємося, хоча завжди відкриті до співпраці», — розповідає Вероніка.\nПлани WOD Insight найближчим часом — «активно працювати». Кілька тижнів тому команда провела фандрейзинг для одного з кросфіт-атлетів в Україні, Володимира Тисанюка. «Напередодні він мав взяти участь у відбірному етапі щорічних ігор з кросфіту в штаті Вісконсин, США, але пішов на фронт захищати свою країну. Ми хочемо й надалі продовжувати робити подібні акції для наших хлопців», — каже Вероніка.\nMosqitter\nІнтерв’ю журналістки Highload з командою Mosqitter було заплановане якраз на 24 лютого, але в результаті скасувалося.\n«Пристрій Mosqitter захищає людей від укусів комарів без використання хімікатів і ризику для здоров’я. Для його створення ми об’єднали софтверні та хардверні рішення та запатентували технологію, яка імітує живу істоту», — розповідає засновниця стартапу Анастасія Романова.\nАнастасія Романова, CEO та Founder Mosqitter\nСтартап працює на різні ринки, включаючи Канаду, Таїланд, Бразилію та інші, але R&D-офіс Mosqitter знаходиться в Україні.\n«Ми проводили комунікації з командою та партнерами щодо можливого вторгнення росії, але до останнього не хотіли вірити в те, що війна буде. Продовжували рухатися згідно з стратегією: розробляли нові версії пристрою, розширювали команду», — говорить Анастасія.\nЗа її словами, утриматися на плаву стартапу допомогли міжнародні партнерства та напрацьовані процеси виробництва в інших країнах.\n«Ми продовжуємо діяльність, виплачуємо зарплати та податки, — ділиться Анастасія. — Але, як у багатьох інших українців, у нас з’явився й другий фронт: ми наближаємо перемогу, співпрацюючи з волонтерськими організаціями та розповсюджуючи інформацію про Україну в інших країнах».\nКоманда Mosqitter працює в попередньому складі з безпечних локацій. Крім того, стартап продовжує наймати та розширювати географію діяльності.\nCardiomo\nТакож 24 лютого на Highload вийшло інтерв’ю із засновником стартапу Cardiomo.\n«Ідея стартапу Cardiomo народилася наприкінці 2014 року, а вже наприкінці 2016-го в Делавері, США, я зареєстрував компанію Cardiomo Care, Inc», — розповідає СТО Cardiomo Роман Бєлкін.\nСТО Cardiomo Роман Бєлкін\nCardiomo — це сервіс віддаленого кардіомоніторингу, який працює 24/7. Він складається з мініатюрного пристрою, який кріпиться на груди і постійно знімає ЕКГ-сигнал у високій роздільній здатності, та аналітичної системи на базі штучного інтелекту для аналізу ЕКГ в режимі реального часу.\nПерша партія пристроїв сертифікувалась для продажу на ринку України. Фаундери — Роман і Ксенія Бєлкіни — останні два роки живуть у Нідерландах, але їхня команда перебуває в Україні.\n«Напередодні війни ми були на етапі підписання контракту на раунд інвестицій з дуже хорошими для нас умовами, — розповідає Роман. — І все різко зупинилося. Наразі інвестори ставлять запитання про стан команди, яка розкидана Україною. Але навіть якби ми зібрали команду в одному місці — ні в кого немає впевненості, що туди не прилетить і плани не зірвуться».\nРоман каже, що першого тижня війни про стартап взагалі важко було думати. Потім вони з Ксенією взялися за гуманітарну допомогу. Наразі вони продовжують цю діяльність, але при цьому повернулися і до свого бізнесу.\n«Думки закрити стартап у нас не було, і цілі не змінилися, — пояснює Роман. — Ми розуміємо, що терміни відтягуватимуться, але продукт буде зажаданим, і ми не здаємось».\nНайважливішим Роман вважає не піддаватися емоціям і не падати духом. Найближчими місяцями команда Cardiomo планує шукати нові інвестиції та закінчити етап європейської медичної сертифікації CE Mark для продажу в Європі.','2022-12-03 00:27:45','2022-12-03 00:27:45'),(183,'«Зовсім не по-шведськи»: співробітники G5 незадоволені позицією компанії щодо війни з росією','Виктория Пушкина\nЖурналистка в Highload','2D Animator Максим Грипишин у своєму LinkedIn звинуватив геймдев-компанію G5 у проросійській позиції. Спочатку в коментарях до допису Максима інші співробітники G5 залишали контраргументи, а компанія відмовчувалась. Але вже за кілька днів рекрутерка Юлія Шкарупова випустила аналогічний допис.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nА пізніше з’ясувалося, що деякі співробітники G5 залишили свої посади через позицію компанії ще на початку березня.\nЩо сталося\n«У міжнародній шведській компанії G5 все зовсім не по-міжнародному і не по-шведськи», – пише 2D Spine Animator Максим Грипишин у своєму дописі в LinkedIn від 25 березня. Він працював у компанії з лютого 2021 року і, за його словами, був незадоволений нею ще до початку вторгнення росії.\n«Мене змушували транслітерувати моє прізвище з російської, а не як в українському закордонному паспорті, – пояснює Максим у дописі. – Тому що така політика фірми й так простіше росіянам»\nКоли ж розпочалася війна, то, за словами Максима, евакуацію співробітників зі Сходу України не оголосили. Пізніше автобус для колег з Харкова знайшли, але заплатити за нього потрібно було самим працівникам. Також Максим пише, що «позиція СЕО, яку висловили далеко не одразу, була абсолютно проросійською та невизначеною».\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nТретій момент, який відзначив Максим у своєму дописі: що в робочих чатах G5 не можна обговорювати війну – інакше переписку видаляють. А також що росіянам, які виїхали з росії, платять компенсацію більше, ніж біженцям-українцям.\nНа підтвердження частини своїх слів Максим Грипишин додав скриншоти з переписками:\nХоча допис Максима зібрав понад 200 коментарів, погодилися з ним співробітники з інших компаній. Колеги ж із G5 змогли пред’явити контраргументи.\n«Хочу додати деякі факти, які ви у своєму гнівному дописі чомусь не написали, – пише Quality Assurance Engineer у G5 Олександра Бондаренко. – Людям справді пропонували заплатити за евакуацію, але ці гроші відшкодувала компанія».\nТакож вона додає, що компанія дала співробітникам багато «позитивних моментів». Наприклад, видала аванс зарплати та оплатила переїзд.\nWeb Developer Павло Якимович – якраз із харківського офісу G5, і він заявляє, що евакуація пройшла успішно. У тому числі компанія надала два тижні відпустки для вирішення всіх моментів з переїздом та відшкодувала оплату за бензин тим, хто вирішив поїхати своєю автівкою.\nПроте на цьому історія не закінчилася.\nЄ й інші працівники, незадоволені компанією\nУже за пару днів на захист Максима Грипишина стала рекрутерка Юлія Шкарупова і написала свій допис.\n«Працюючи у відділі рекрутингу, знаєш багато деталей, про які інші співробітники навіть не здогадуються», – пише Юлія. Усіх деталей у дописі вона розкривати не стала, але згадала деякі факти, які вплинули на її рішення звільнитися з компанії.\nУ тому числі, за словами Юлії, G5 не стала закривати офіси в росії і продовжила наймати там співробітників і, відповідно, сплачувати податки.\nПост Юлії Шкарупової не настільки розлетівся по соцмережі і зібрав лише 50+ коментарів. Проте під ним також з’явилися контраргументи.\n«Не знаю, про що ти говориш, але компанія однією з перших призупинила наймання в росії, – пише Narrative Director в G5 Георгій Чиркунов. – Неможливо припинити роботу в країні одразу, це означає смерть компанії».\nТакож виявилося, що негативні відгуки про компанію вже з’являлися в мережі до допису Максима. Technical Artist Костянтин Стрілец написав, що звільнився з G5 ще 1 березня «через внутрішню позицію компанії щодо війни росії проти України, яка була повідомлена всім співробітникам 28 лютого». Інших деталей у дописі Костянтина не було.\nРеакція G5\nЖурналістка Highload намагалася зв’язатися з компанією G5 відразу ж, як з’явився пост Максима Грипишина, але не отримала відповіді. На пости своїх співробітників та негативні відгуки на DOU, які почали з’являтися, компанія також ніяк не реагувала – до 28 березня. Від цього числа представники G5 коментують такою заявою від компанії:\nDOU\nНа сайті G5 усе ще вказаний перелік офісів компанії в росії, проте відкритих вакансій там немає.','2022-12-03 00:27:48','2022-12-03 00:27:48'),(184,'У Закарпатті готові бронювати айтівців від військкомату: покрокова процедура','Виктория Пушкина\nЖурналистка в Highload','Представники Закарпатської облдержадміністрації 3 квітня провели зустріч з IT-бізнесом. На ній вони розказали, які можливості для індустрії наразі пропонує Закарпаття, як юридично оформити переїзд до області та забронювати своїх працівників від військкомату.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nВидання Highload розказує основні тези цієї зустрічі.\nГолова Закарпатської ОДА Віктор Микита на зустрічі. Фото: https://carpathia.gov.ua\nЗакарпаття та IT: навіщо потрібен цей союз\nНа сьогодні для України Закарпаття є дуже потужним тилом. Сюди приїхало багато переселенців з інших областей, тут є змога працювати, щоб поповнювати бюджет України та наближати перемогу.\nФінансування зараз потрібно за двома основними напрямами:\nДопомога армії.\nДопомога територіальним громадам Закарпаття для забезпечення переселенців усім необхідним.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nЩоб налагодити ведення бізнесу, на Закарпатті створили нову процедуру, яка складається з чотирьох кроків. IT-індустрія — не єдина, яка може скористатися цими кроками. Але є кілька причин, чому ці кроки пропонуються айтівцям у першу чергу:\nIT — галузь, яка може швидко почати працювати. А, наприклад, легкій промисловості треба перевозити устаткування.\nРобота індустрії не має негативного впливу на екологію у порівнянні, наприклад, з тяжкою та хімічною промисловістю. Це особливо важливо тому, що Закарпаття — один з найчистіших регіонів України.\nПротягом року IT-індустрія сплачує майже $5 млрд податків. І це швидкі надходження в бюджет України.\nВажливо! Переїзд IT-бізнесу на Закарпаття розглядається не як тимчасовий крок. Область готова розширювати інфраструктуру, щоб будувати новий український IT-парк.\nПокрокове пояснення нової процедури\nКрок 1. Реєстрація IT-компанії на сайті Мінекономіки\nЯк суб’єкта господарської діяльності, який має бажання здійснити релокацію в іншу область України. Бажана область, яку потрібно вибрати в формі заяви, — Закарпатська.\nЯкщо адреси для реєстрації офісу в компанії поки що немає, область запропонує тимчасову адресу.\nКрок 2. Перереєстрація суб’єкта підприємницької діяльності в обласних податкових органах\nЦе доступно як для юридичних осіб, так і для ФОП. Є два шляхи, як це зробити:\nУповноважена особа підприємства фізично звертається до реєстратора, наділеного правами перереєстрації. Вони є в ЦНАПах міської ради Закарпатської області. Також інформацію щодо реєстраторів (у тому числі в інших областях, якщо ви знаходитесь не в Закарпатті) можна отримати телефоном в Міністерстві юстиції.\nУповноважена особа підприємства направляє необхідні документи з електронним підписом реєстратору онлайн на його електронну скриньку.\nНайближчим часом також додадуть можливість перереєструватися через «Дію».\nКрок 3. Постановка на військовий облік\nПрацівник, що стоїть на військовому обліку (реєструвався у військкоматі до воєнних дій), може пройти процедуру дистанційно. Працівникам, що ніколи не були у військкоматі, треба фізично з’явитися і пройти цю процедуру.\nКрок 4. Подання й опрацювання пропозицій щодо бронювання\nДо Закарпатської ОДА подаються пропозиції щодо бронювання працівників, які працюють в IT-компанії — вони можуть подаватися від юридичних осіб, для ФОПів такого порядку немає. Опрацювання проходить спочатку в ОДА, потім заяви передаються Мінекономіки, далі в Міноборони і в військову адміністрацію.\nВажливо! Забронювати працівників, які не стали на військовий облік, неможливо. Також є перелік військово-облікових спеціальностей. Якщо працівник належить до нього — його також не можна забронювати.\nШляхів розв’язання питання бронювання ФОПів два:\nПереоформити працівників за звичайним трудовим договором.\nОформити громадську організацію з такою самою (або схожою) назвою, як і в компанії, і звернутися щодо бронювання ФОПів від неї. Додатково знадобиться також лист від самої компанії з обґрунтуванням броні.\nКорисні контакти\nВідділ з питань державної реєстрації в Закарпатській області Міністерства юстиції:\n+380312613536 — Євгенія\nЗ питань обслуговування платника податків (надання сервісних функцій), отримання довідок, подачі звітності тощо:\n+380506666775 — Мар’яна Степанівна\nЗ питань роз’яснення податкового законодавства:\n+380506904083 — Алла Володимирівна\nЗ питань роз’яснення трудового законодавства:\n+380954690895 — Володимир Володимирович \nЗ питань військового обліку:\n+380937808356 — Олександр Юрійович\nЗ питань бронювання:\n+380669267050 — Іван Миколайович\nЗ питань будівництва офісних і житлових будинків:\n+380681931405 — Павло','2022-12-03 00:28:05','2022-12-03 00:28:05'),(185,'Java String format: робота з ним та приклади','Сергей Бондаренко\nжурналист','Сьогодні ми розберемося з форматуванням текстових та числових виразів у Java, попрацюємо з Java String format(), дізнаємося що таке специфікатори, які вони бувають і як ними користуватися.\nСодержание\nКлас Formatter та метод format()\nНавіщо використовується інструмент форматування?\nПриклади із шаблонними рядками\nОсновні специфікатори\nВикористовувані прапори формату\nПриклади використання прапорів формату\nВисновок\nКлас Formatter та метод format()\nОсновний засіб управління виводиться на екран інформації в Java – клас Formatter. Останній доданий до складу пакету java.util , де також міститься безліч допоміжних класів та інтерфейсів.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦей клас дає можливість перетворювати формат даних – числа, рядки, дату, час, а також відображати їх на екрані у зазначеному оформленні.\nКлас Formatter містить метод format(). Даний метод отримує дані і потім їх перетворює на певний рядковий формат, зберігаючи в об’єкт типу Formatter . Метод format()також є в класах PrintStreamі PrintWriter( System.outстатична змінна типу PrintStream).\nДля оформлення виведення використовуються звані специфікатори формату. У виразі попереду стоїть знак %, після якого йде символ, що вказує на тип аргументу, який потрібно відформатувати.\nНавіщо використовується інструмент форматування?\nЩоб зрозуміти, для чого потрібний цей інструмент, уявіть собі завдання, коли потрібно вивести на екран деяку інформацію. Допустимо:\n public static void main(String[] args) { \n\n        String student_surname = \"Олексій Петров\"; \n\nint age = 19; \n\nСтрунний викладач = \"Серж Бонд\"; \n\nint години = 301; \n\nSystem.out.println(\"Користувач = {прізвище: \" + прізвище_студента + \", вік: \" + вік + \" нехай, викладач: \" + викладач + \", тривалість_навчання: \" + години + \" години.}\"); \n\n    } \n\n}\nНа екрані спостерігаємо:\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nUser = {surname: Alex Petrov, age: 19 let, teacher: Serge Bond, duration_of_the_training: 301 hours.}\nВізуально ситуація ще більше утрудняється, коли змінні містять надто «незручні» імена з великою кількістю символів, а також коли необхідно використовувати методи виклику тих чи інших даних:\nSystem.out.println(\"Користувач = {student_surname: \" + user.getStudent_surname() + \", age: \" + user.getAge() + \" let, викладач: \" + user.getTeachers().get(0) + \", duration_of_the_training: \" + user.getExtraInformation().getDuration_of_the_training() + \" години.}\");\nДля вирішення проблеми чинимо наступним чином:\nString information= String.format(\"User = {student_surname: %s, age: %d let, teacher: %s, duration_of_the_training: %d hours.}\", \n\nuser.getStudent_surname(), user.getAge(), user.getAge(), користувач. getTeachers().get(0), user.getExtraInformation().getDuration_of_the_training()) \n\nSystem.out.println(інформація);\nМи передали в метод формат шаблон, де вказали області, куди підставлятимемо значення, позначивши їх як %s(коли підставляємо рядок) і %d (коли підставляємо число).\nПриклади із шаблонними рядками\nЩе наочніший приклад:\nРядок s = String.format(\"a = %d, b = %d, c = %d\", 9, 77, 80); \n\nSystem.out.println(s);\nУ консолі буде виведено текст:\na = 9, b = 77, c = 80\nШаблонні рядки можна використовувати і при створенні умов:\nint a = -1, b = 4, c = 3; \n\nРядок shablon_dlya_texta; \n\n if (a < 0) \n\n  shablon_dlya_texta = \"Увага! a = %d, b = %d, c = %d\"; \n\n else \n\n  shablon_dlya_texta = \"a = %d, b = %d, c = %d\"; \n\nSystem.out.println(String.format(shablon_dlya_texta, a, b, c) );\nВиведення на екран:\nWarning! a = -1, b = 4, c = 3\nЯкщо застосувати в коді специфікатори є верхнім регістром – відображення в консолі також буде використовувати верхній регістр. Наприклад, %sпереведе відповідний рядок до верхнього регістру.\nЗасіб форматування класу Formatter підтримує найпоширеніші типи Java, такі як byte, BigDecimal та Calendar. \npublic static void main(String[] args) { \n\ndouble y = 775.0 / 33.0; \n\n        System.out.println(\"Зразок рядка без формату: \" + y); \n\n        Formatter formatter = new Formatter(); \n\n        formatter.format(\"Зразок рядка формату: %.2f%n\", y); \n\n        formatter.format(\"Зразок рядка формату: %8.4f%n\", y); \n\n        formatter.format(\"Зразок рядка формату: %16.4f%n\", y); \n\n        System.out.println(форматувальник); \n\n    } \n\n}\nНа екрані ми побачимо таке:\nSample string without format: 23.484848484848484\nSample format string: 23,48\nSample format string:  23,4848\nSample format string:          23,4848\nАльтернативою методу оформлення виведення даних можуть бути методи System.out.printf()і  .System.out.format()\nПриклади їх використання:\nSystem.out.printf(\"Привіт - %s! Ну як справи %s?\", \"Джек\", \"з продажами\");\nабо\nSystem.out.format(\"Привіт - %s! Ну як справи %s?\", \"Джек\", \"з продажами\");\nОсновні специфікатори\nРозглянемо найчастіше вживані специфікатори у таблиці.\nСпецифікатори Тип даних Приклад використання / Результат\n%s Рядковий тип \nString.format(\"Вітаю %s!\",\"Олег\")\nПриветствую, Олег!\n%b Всі типи, наведені до boolean. Значення «істинно» якщо не 0, «брехня» якщо 0\nString.format(\"Вітаю %b!\",null)\nПриветствую, false!\n%c Cимвол Unicode\nString.format(\"Улюблений д%cм!\",о\')\nЛюбимый дом!\n%d Ціла кількість integer (включаючи byte, short, int, long, bigint)\nString.format(\"З Новим %d роком! \",2025)\nС Новым 2025 годом!\n%e Значення з плаваючою комою, наукова нотація\nString.format(\"Константа Фейгенбаума - % e!\", 2.502);\nКонстанта Фейгенбаума - 2,502000e+00!\n%f Звичайне десяткове число\nString.format(\"Кількість G дорівнює - %f!\", 9.8)\nЧисло G равно - 9.8!\n%a Числа з плаваючим рядком у шістнадцятковому вигляді\nString.format(\"Прискорення одно - %a!\", 9.8);\nУскорение равно - 0x1.399999999999ap3!\n%o Ціле число (int. byte, short, int, long, BigInteger) у вісімковому форматі\nString str = String.format (\"Вік обмеження - % o\", 18);\nВозраст ограничения - 22\n%n Ідентичний символу перекладу рядка /n\nString.format(\" Duran %n Duran\")\nDuran\nDuran\n%x Цілому числу (int. byte, short, BigInteger, int, long) відповідає символ з певним значенням у таблиці ASCII\nString.format(\"Верхня межа - %x!\",25)\nThe upper limit is 19!\n%t Управління перетворенням дати та часу за допомогою прапора\nString.format(\"Поточна дата: %tA\",нова дата())\nThe current date is Sunday\nВносити корективи у форматування можна також за допомогою комбінації специфікаторів, які називаються інструкціями .\nФормат запису інструкцій виглядає так:\n%[аргумент_индекс][флаги][ширина][.точность]спецификатор\nВикористовувані прапори формату\n-– Центрування щодо лівого краю;\n#– і зміна відображення (наприклад, переведення у вісімковий формат);\n0– прогалини у числовому значенні заповнюються нулями;\n«пробел»  – Перед позитивними числами з’являється «перепустка»;\n+— перед числами більше за нуль йде знак «плюс»;\n,  – Числа містять знаки-розділювачі;\n(– Числа менше нуля поміщаються в дужки. \nПриклади використання прапорів формату\nВирівнювання щодо лівого краю:\nSystem.out.println(String.format(\"|%-40s|\", \"Highload Today\"));\nРезультат:\n|Highload Today                          |\nЗ виведенням перед позитивними числами символу +:\nSystem.out.println(String.format(\"|%+44d|\", 701));\nВідображення в консолі:\n |                                        +701|\nЗ завданням ширини поля та максимальним числом символів:\nSystem.out.println(String.format(\"|%25.8s|\", \"Highload Today\"));\nВідображення в консолі:\n|                 Highload|\nПробіл перед позитивним числом:\nSystem.out.println(String.format(\"|% d|\", 877));\nРезультат:\n| 877|\nВисновок дати (не забуваємо попередньо імпортувати import java.util.Locale;):\nДата дата = нова дата(); \n\nSystem.out.printf(Locale.ENGLISH,\"%tB %te, %tY\",date,date,date);\nВисновок:\nNovember 27, 2022\nВисновок\nТепер ви маєте уявлення про те, як працює форматування в Java і можете застосовувати специфікатори та прапори, оформляючи текст та числові вирази.\nДля закріплення матеріалу рекомендуємо вам подивитися відеоурок, в якому розповідається про основні прийоми форматування Java: ','2022-12-03 00:28:21','2022-12-03 00:28:21'),(186,'User Acceptance Testing (UAT) – приймальне тестування та його цілі','Сергей Бондаренко\nжурналист','Содержание\nЯк проходить тестування ПЗ\nЩо таке User Acceptance Testing?(приймальне тестування)\nЦілі та переваги приймального тестування\nДокументи, необхідні для приймального тестування\nІнструменти UAT, приклади тестування\nВисновок\nЯк проходить тестування ПЗ\nЖиттєвий цикл розробки має строгу структуру. Без її чіткого дотримання процес роботи над програмним продуктом неможливий. Щоб отримати результат, необхідно пройти такі етапи:\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПланування\nАналіз поставлених вимог\nДизайн і, власне сама розробка проекту\nІмплементація коду та отримання кінцевого продукту\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nТестування\nОцінка\nРеліз\nЗабезпечення підтримки\nЕтап тестування – обов’язковий етап життєвого циклу ПЗ. Це дуже важливий процес роботи над проектом, на якому визначається, що зроблено правильно і добре, а що – ні. В інтернеті можна зустріти визначення терміну «тестування» як процес пошуку помилок. Насправді це твердження правильне лише частково. Одна з аксіом software development говорить про те, що знайти всі баги неможливо. І, якщо в результаті детального тестування не було виявлено жодної помилки, це ще не означає, що їх немає.\n\nАле шукати їх можна вічно. Тому, щоб процес тестування не став нескінченним циклом, вигадали різні критерії приймання якості. Процес пошуку дефектів завершується тоді, коли ми досягаємо певного рівня довершенності. Звідси можна зробити висновок: тестування – це процес, спрямований на визначення якості програмного продукту та на відповідність очікуванням та вимогам замовника.\nПоняття якості – річ звісно суб’єктивна. Проте, у кожному проекті ми маємо якесь очікування результату. З початку роботи над продуктом, product owner, який вигадав якусь ідею, має деякий набір уявлень про те, як має виглядати кінцевий проект. Він прописав вимоги, з ним попрацювали аналітики, склали для розробників списки вимог. Завдання тестувальника – переконатися, що якість продукту відповідає очікуванням замовника. Не суб’єктивним очікуванням самого тестувальника, не очікуванням проектного менеджера, а саме очікуванням того, хто є первісним автором ідеї.\nЩо таке User Acceptance Testing?(приймальне тестування)\nДавайте трохи розберемося як організовано тестування ПЗ загалом. У процесі тестування розрізняють дві області. За першу частину, на позиції QC (Quality Control) відповідає test engineer – після тестів він виконує верифікацію щодо виправлених помилок (наприклад, попливла верстка, не працюють кнопки, некоректно обробляються посилання тощо). За другу область відповідальний QA (Quality Assurance) – він забезпечує якість вихідного продукту на прийнятному рівні. Він входить у роботу ще на стадії аналізу та опрацюванні архітектури. Покладаючись на свій досвід і чуття, він ще на ранніх стадіях пропонує внести правки до документації та змінити список вимог, завдяки чому мінімізуються ризики погіршення якості продукту. Також він передбачає вузькі місця в архітектурі та готує набір тестів, що вже на початку роботи над продуктом дозволять виявити деякі дефекти. QA значною мірою економить витрати на весь процес розробки, оскільки виправлення недоліків, пропущених на початковому етапі, згодом серйозно позначається на кошторисі всього проекту.\nДо речі, підбираючи кандидата на роботу, HR зазвичай не робить відмінностей і називає посаду тестувальника абияк – QA-аналітик, QA-інженер тощо. Тут слід розуміти, що посаду визначає замовник аутсорсингової послуги, який хоче отримати співробітника з якомога ширшим спектром скілів. Але робота Quality Assurance порівняно з Quality Control набагато об’ємніша і складніша. У першому випадку фахівець просто виконує тести і складає баг-репорти, у другому – людина повинна вибудувати і забезпечити контроль за якістю всього проекту.\nМіжнародною кваліфікаційною комісією з тестування програмного забезпечення ISTQB розрізняють такі рівні тестування:\nМодульне випробування. Відповідальність за юніт-тести зазвичай лежить переважно на самих девелоперах, компетенція яких дозволяє їм легко орієнтуватися в коді. Припустимо, ваш проект – інтернет-магазин, що складається з великої кількості веб-додатків та окремих модулів (блок реєстрації, модуль авторизації, пошук, фільтри пошуку та ін.). Тестування на рівні окремо взятої опції – це і є модульне тестування. Unit-тести виконуються лише на рівні коду. Наприклад, якщо у калькуляторі виконати перевірку додавання 2 та 2, а у вікні бачимо «5» це ще не свідчить, що функція Sum(a,b) працює некоректно. Можливо, помилка криється в іншому місці і калькулятор висвічуватиме п’ять що б ми не вводили. Тому тестами ми перевіряємо роботу лише цієї функції умовою if Sum(2, 2) = 4 then...\nІнтеграційний рівень тестування. Він означає тестування кількох взаємодіючих модулів системи щодо того, як вони передають між собою дані та виконують операції при взаємодії один з одним.\nСистемний рівень тестування – тестування всієї системи в цілому, перевірка того, як вона працює. Цей рівень тестування враховує оточення – на якій платформі працює програмне забезпечення, на якому девайсі відбувається його запуск, який браузер використовувався, яка була локалізація і т.д. Усі тести проганяються з урахуванням різних умов.\nПриймальне тестування – це формальний рівень тестування, який задіюється тоді, коли продукт досягає необхідного рівня якості. Він визначає, чи збігається результат з очікуваннями замовника. Для цього застосовується набір типових тестових випадків та сценаріїв, розроблених спеціально під даний проект.\nЦілі та переваги приймального тестування\nНа перший погляд, приймальне тестування на останньому рівні може здатися надлишковим. Якщо орієнтуватися на замовника, то він, напевно, вже не раз «мацав» сирий (ну, або й не дуже сирий) продукт, залишав свої коментарі (фідбек) з приводу його роботи. Однак тут слід розрізняти «перевірку» та «тестування». Рівень приймального тестування призначений не для того, щоб виявити помилки, а щоб оцінити, наскільки продукт готовий до продакшену та чи відповідає він бізнес-вимогам замовника. UAT – це не функціональне тестування, воно не виявляє збої в роботі, а дає оцінку продукту загалом, виявляючи наскільки він зручний та придатний для використання.\nГоловна мета приймального тестування – з’ясувати, чи проходить система приймальні критерії. Якщо все добре, продукт можна схвалити і запустити в продакшн. В іншому випадку необхідно відправити назад на подальшу розробку. Порівняно з іншими рівнями тестування UAT має низку переваг. Так, наприклад, воно допомагає виявити неявні баги інтерфейсу користувача – знайти фактори, що сповільнюють роботу, визначити незручні місця. Оскільки реальні користувачі залучені до тестових випробувань продукту, їхню думку можна вважати об’єктивною, бо фактично вони є незалежними тестувальниками.\nДокументи, необхідні для приймального тестування\nСценарій приймання розробляється з урахуванням умов, максимально наближених до реалістичних, у яких використовуватиметься продукт. Часто етап UAT лягає на продакт-оунера, однак, не будучи кінцевим користувачем, він може не знати всіх факторів, які впливають на роботу з ПЗ. Існує вірогідність, що оунер зробить невірний висновок. Тому, в ідеалі, тестування слід проводити через кінцевого користувача, тобто групу бета-тестувальників.\nПриймальне тестування вимагає кілька робочих документів:\nПлан прийомних випробувань – тобто список тестів, що проводяться. Він складається ще на етапі розробки для формування архітектури проекту\nФормат UAT – опис з вимогами тестування, предмет тестування та сценарії тестування з урахуванням вимог\nРеєстр коментарів до процесу тестування\nПротокол UAT\nІснують різні підходи до приймального тестування. Чек-лист з найчастішими формами перевірки проекту виглядають так:\nАльфа-бета тестування – залучення групи реальних користувачів.\nКонтрактне тестування – перевірка відповідності продукту ТЗ.\nОпераційне тестування – варіант тестування, у якому аналізуються процеси, що необхідні для функціонування продукту. Це можуть бути, наприклад, системи захисту, різні послуги для резервного копіювання та відновлення інформації та ін.\nЗаконодавче тестування – визначає, наскільки програмний продукт відповідає чинному законодавству. Особлива увага приділяється, якщо проект має відношення до фінансової діяльності чи сфери охорони здоров’я.\nІнструменти UAT, приклади тестування\nНа ринку є кілька інструментів, які зазвичай використовуються для приймального тестування користувачів.\nНасамперед це FitNesse tool, написаний на Java, який призначений для автоматизації процесу тестування. Він поставляється у вигляді єдиного виконуваного jar файлу, який включає вікі движок, вбудований веб-сервер, тестовий движок та інші ресурси. FitNesse дозволяє користувачам системи, що розробляється, здійснювати введення даних у спеціальному форматі (зрозумілому для не-програмістів). На основі цього введення автоматично генеруються тести, які виконуються системою, з подальшим поверненням результатів.\nWatir: інший інструментарій для приймального тестування на основі браузера. Це бібліотека мови Ruby, яка дозволяє створювати свої сценарії тестування веб-додатків.\nСкрипт для acceptance testing в Watir може виглядати, наприклад, так:\n# Приклад невеликого скрипту для перевірки послідовності дій\n\n require \'watir\'                          # підключаемо інструмент Watir\n\n testing _site = \'http://www.some_adress.com\'      # визначаємо змінну\n ie = Watir::IE.new                       # запускаємо браузер Internet Explorer\n\n ie.goto(testing _site)                   # переходим за посиланням\n\n ie.text_field(:name, \"search\").set(\"Picasso\") #у текстове поле з ім\'ям \"search\" розміщуємо слово \"Picasso\"\n\n ie.button(:name, \"Knopka\").click           # натискання на кнопку з ім\'ям \"Knopka\"\n\n if ie.text.include?(\"Programming Ruby\")  # опис умови тесту\n\n   puts \"Test Passed. Found the test string: \'Programming Ruby\'.\" # висновок щодо успішного проходження\n else\n\n   puts \"Test Failed! Could not find: \'Programming Ruby\'\" #тест не пройдено\n\n end\nВисновок\nТепер ви знайомі з принципами приймального тестування та маєте уявлення про те, для чого воно необхідне, як працює і що необхідно, щоб програмний продукт був остаточно перевірений перед передачею на продакшн. Насамкінець рекомендуємо вам подивитися виступ лектора, який розповідає про сучасні патерни тестування.','2022-12-03 00:28:23','2022-12-03 00:28:23'),(187,'Що таке CMS? Якими вони бувають і як працюють','Сергей Бондаренко\nжурналист','Содержание\nЩо таке CMS\nCMS та фреймворки\nWordPress \nJoomla\nDrupal\nAtlassian Confluence\nKirby \nВисновок\nСьогодні йтиметься про системи управління контентом — CMS. Ми розповімо, що це таке, навіщо потрібні такі системи, які види CMS бувають, на що слід звернути увагу під час вибору CMS. Також ми розглянемо переваги та слабкі сторони найпопулярніших систем керування контентом.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо таке CMS\nСистема керування контентом – це дуже важлива частина сучасного веб-сайту. Часто користувачі називають системи CMS «движком сайту». По суті, CMS – це програма, яка забезпечує спільний доступ до функцій публікації та редагування інформації, а також пошуку по ній. CMS робить процедуру додавання до сайту тексту, зображень та відео  максимально простим. Публікація в CMS не потребує втручання веб-майстра та не вимагає глибоких знань HTML, PHP, JavaScript або CSS. Крім управління вмістом, система управління контентом також вирішує низку важливих завдань – забезпечує конфіденційність даних, допомагає виконувати адміністрування, формувати подання даних у зручному вигляді, робити SEO-оптимізацію та ін.\nCMS та фреймворки\nУ широкому значенні система управління контентом не обов’язково має забезпечувати роботу лише веб-сайту. Розрізняють дві основні групи CMS: системи керування корпоративним контентом (ECM) та системи керування веб-вмістом (WCMS). Через популярність останніх, частіше під CMS мають на увазі саме систему управління веб-контенту. Будь-яка WCMS на льоту компілює сторінки сайту, використовуючи для цього шаблон оформлення, а також сам контент — текст, зображення, відео та ін.\nЯкщо ви поставили за мету організувати сайт, до вибору CMS слід підходити обдумано. Від того, на якій системі для керування контентом ви зупините свій вибір, залежить функціонал вашого сайту, а також стабільність його роботи та можливості адміністрування.\nСтворюючи сайт, веб-майстер може використовувати два варіанти вирішення такого завдання: скористатися вже готовими рішеннями або зануритися в тривалий процес створення CMS «з нуля» за допомогою таких фреймворків як Django, Flask, AioHTTP, Laravel, The Laminas Project та ін.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nЗазвичай фреймворк – це набір бібліотек для певної мови, що полегшують розробку веб-додатків. Так, наприклад, Django – це інструмент для мови Python.\nІ хоча будь-який веб-проект можна написати на голому коді Python без даного фреймворку, Django значно прискорює процес створення та конфігурації основних модулів сайту – веб-адмінки, модуля для публікації повідомлень і т.д. Крім того, використання фреймворків дає ряд переваг, наприклад можливість швидко переносити налаштовані модулі сайту в інші проекти.\nТаким чином, варіант з фреймворками підходить тим, в кого є навички програмування, тоді як звичайний варіант CMS вже «з коробки» дає можливість людині далекої від веб-розробки використовувати великий спектр інструментів. За допомогою “звичайних” CMS можна, наприклад, за лічені хвилини розгорнути на хостингу інтернет-магазин, створити, скажімо, соціальну мережу або організувати базу знань wiki.\n  Рейтинг різних CMS для інтернет-магазину\nWordPress \nhttps://wordpress.com/\nWordPress – це безкоштовна CMS з великим набором функцій і можливістю роботи з шаблонами (понад 10 тисяч лише на офіційному сайті). Спочатку WordPress створювався як платформа, яка використовується для блогінгу, але сьогодні область застосування цієї CMS набагато ширша за сферу блогінгу.\nНа ній реалізовано безліч інтернет-магазинів, корпоративних сайтів, порталів новин та інших великих проектів. Популярність цього движка пояснюється тим, що працювати з WordPress максимально просто, а його інтерфейс доброзичливий і зрозумілий будь-якому користувачеві.\nУстановка CMS відбувається в кілька кліків: копіюємо файли движка на хостинг, створюємо нову базу даних та запускаємо саму установку. Весь процес розгортання сайту займає лічені хвилини.\n“З коробки” у WordPress функціональність досить обмежена. Однак, з розвитком цієї CMS з’явилася величезна кількість доповнень, які дозволяють вирішити задачі кастомізації практично будь-якої складності. До WordPress існує величезна кількість плагінів, тем і віджетів. За допомогою візуального редактора сторінок навіть користувач з невеликим досвідом веб-розробки може легко та швидко верстати нові сторінки.\nІз недоліків даної CMS слід відзначити високе навантаження на сервер. Велика кількість розширень до цього двигуна містить помилки.\nJoomla\nhttps://www.joomla.org/\nОдна з найпопулярніших і найпоширеніших CMS серед веб-майстрів. CMS має повністю відкритий вихідний код. Для налаштування та кастомізації системи доступно понад 6500 перевірених розширень та шаблонів високої якості. Після встановлення движка можна виконати стандартними засобами мінімальну SEO-оптимізацію сайту: вказати опис та ключові фрази для пошукових ботів, включити генерування «нормальних» URL, зробити переадресацію, налаштувати індексування. У движку є менеджер розсилки новин. У Joomla реалізована багатоступенева аутентифікація, можна вибирати різні механізми ідентифікації користувача: використовувати Yubi-key, веб-аутентифікацію, за кодом підтвердження або за допомогою спеціального коду, надісланого на електронну пошту.\nБезліч розширень дає можливість мінімізувати час на налаштування сайту.\nНа відміну від того ж WordPress, модулі Joomla часто є платними. З іншого боку – вони містять менше багів і працюють стабільніше. Система регулярно оновлюється, завдяки чому оперативно усуваються помилки та закриваються вразливості.\nDrupal\nhttps://www.drupal.org/\nЦей проект заснував бельгійський програміст Дріс Бейтарт ще 2000 року і веде його досі. Сама назва Drupal – це голландське “drupel” – крапля.\nНа цьому движку працює велика кількість урядових сайтів, наприклад, сайт Білого дому (www.whitehouse.gov), Сенату штату Нью-Йорк (www.nysenate.gov), сайт уряду Естонії (www.nysenate.gov) та ін.\nDrupal має сенс розглядати не як готове рішення для встановлення в один клік, а як каркас для проекту, який потрібно доопрацьовувати. Робота CMS заснована на стеку LAMP – комбінації програмного забезпечення (Linux-Apache, база даних MySQL і скриптова мова PHP). Система управління контентом має модульну структуру – функціоналом та зовнішнім виглядом сайту можна керувати за допомогою модулів та тем оформлення. З особливостей CMS можна виділити вбудовану систему кешування, яка дозволяє вирішити таку важливу проблему, як навантаження на сервер. Модифікуючи дані Drupal використовує хуки, що дозволяє вносити зміни у роботу платформи без модифікації значного обсягу коду.\nДана CMS представляє інтерес для веб-розробників, які ставлять перед собою завдання зробити якийсь складний проект. Drupal – це професійний інструмент, він явно не для новачків. Створити сайт у два кліки на Drupal явно не вдасться. CMS вимагає деякого досвіду та практики у користувача, його технічної обізнаності. Система підійде для комплексних розвинених сайтів зі складною організацією даних.\nAtlassian Confluence\nhttps://www.atlassian.com/\nЦя CMS написана на Java і дуже популярна серед корпоративних проектів, які використовують єдину внутрішню систему бази знань. Вона безкоштовна для некомерційних організацій та відкритих проектів. Confluence може працювати як у хмарі, так і у власній інфраструктурі.\nВся інформація в CMS розміщується на динамічних сторінках – це можуть бути плани проектів, протоколи зборів, різні посібники та ін. Для кожного типу інформації можна вибирати свій шаблон. Ці сторінки містяться в розділах. Одночасно з розділом створюється оглядова частина (тобто велика сторінка) та блог. Це спрощує поширення оновлень та оголошень серед користувачів системи. Для наочної систематизації контенту використовується ієрархічне дерево сторінок. CMS веде історію версій та підтримує інтеграцію з Jira. На сторінках Confluence можна організовувати динамічний контент за допомогою макросів. За допомогою доповнення система керування контентом підтримує вікі-розмітку.\nKirby \nhttps://getkirby.com/\nЗазвичай CMS працює із базами даних MySQL. Проте, є низка систем управління контентом, які не звертаються до БД, а зберігають дані як каталоги і текстові файли. Такі CMS називаються “Плоскими”. До такого типу CMS належить Kirby. Ця німецька платформа має доброзичливий інтерфейс у дусі WordPress, налаштовується через файли YAML і не потребує окремого механізму шаблонів, таких як Twig. Щоб встановити Kirby, користувачам необхідно завантажити файли движка, а також свої HTML/PHP, мультимедійні та текстові файли на PHP-сервер (необхідний PHP версії 5.4+).\nОскільки CMS з плоскими файлами не має системи бази даних і не потребує настроювання та адаптації, статично згенеровані сторінки можна відтворювати безпосередньо з веб-сервера. За допомогою модуля Kirby Text реалізується підтримка Markdown, також розширенням можна підключити візуальний редактор. Варто зауважити, що у разі складної структури сайту CMS все-таки можна підключити до MySQL.\nВисновок\nМи розглянули основні види CMS і тепер ви можете вирішити, яка вам підійде. Вибирати систему управління контентом слід виходячи з поставлених завдань та особливостей тієї чи іншої системи керування контентом . Наприклад, якщо потрібна швидкість і широкі можливості кастомізації – беремо WordPress, встановлюємо ЇЇ і за півгодини налаштовуємо всі необхідні модулі. Хочете створити базу знань – вибираємо Confluence. Якщо вам потрібен специфічний проект з функціями, що відсутні в популярних CMS, якщо ви плануєте надалі його масштабувати і доопрацьовувати – тут вже необхідний веб-фреймворк і допомога досвідченого розробника, який зможе реалізувати ваші ідеї. Або Dripal – як варіант.\nНайкраще вивчати CMS на практиці, тому рекомендуємо вам переглянути відео про інтеграцію верстки HTML CSS у CMS OpenCart.','2022-12-03 00:28:26','2022-12-03 00:28:26'),(188,'Styled Components — стилізація React-додатків','Сергей Бондаренко\nжурналист','Содержание\nОсобливості Styled Components\nПереваги та недоліки Styled Components у React-додатках\nУстановка Styled Components\nУправління глобальними стилями\nРобота з пропсами\nПсевдокласи\nУгруповання стилів на основі пропсів\nАнімація\nВисновок\nСьогодні ми розглянемо зручну бібліотеку для React – Styled Components. Вона призначена для реалізації стилів у файлах JavaScript на основі вхідних даних React-компонентів — пропсів (props).\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nОсобливості Styled Components\nReact – це чудовий спосіб писати великі та швидкі JavaScript-додатки. При розробці динамічних програм з цим інструментом часто доводиться стилізувати контент. Через низку причин використання стандартних засобів CSS для цього не зовсім зручне. Бібліотека Styled Components дає можливість виконати стилізацію React-програми, спростивши і прискоривши написання коду. Styled Components дозволяє працювати зі стилями прямо в JavaScript – це компонент, який в стилі підсовує функцію від якихось аргументів. У Styled Components ви звертаєтеся до функції і вона, по суті, може робити будь-що, повертаючи будь-яке рядкове значення для стилю цього компонента.\nПереваги та недоліки Styled Components у React-додатках\nРаніше до появи Styled Components, якщо потрібно було зробити динамічні стилі, їх потрібно було виносити в inline або писати багато className. Але з цією бібліотекою ви більше не стилізуєте елементи HTML або компоненти на основі їхнього класу чи HTML-елемента. Відпадає необхідність у тернарних операторах, немає потреби вдаватися до className. Натомість використовуються пропси всередині компонент, із зазначенням стилів, а класи генеруються автоматично (до речі, проблема колізії імен відсутня як така). Звернення до стилів CSS відбувається прямо в JavaScript, завдяки чому їм легко керувати, він зрозумілий, немає необхідності вивчати якийсь додатковий синтаксис.\nСтилі легко відстежувати. Припустимо, ви написали якийсь компонент, а потім його прибрали, а стилі залишилися – їх потрібно позбутися, щоб вони зайвий раз не грузилися на клієнт. Така проблема зі Styled Components вирішується автоматично – видалили компонент, видалились стилі. Також до переваг Styled Components можна віднести наявність серверного рендерингу та модульних тестів.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nОчевидний недолік Styled Components – прив’язка до React. Крім того, ми не повинні використовувати для вхідних даних React-компонентів зарезервовані назви (height, width, background-color тощо) . Ще один мінус цієї бібліотеки – стилі не зберігаються в кеші, стиль з’являється лише тоді, коли виконується JavaScript. Це дещо впливає на продуктивність.\nУстановка Styled Components\nДля початку розберемося із встановленням Styled Components. Бібліотеку можна встановити так:\n# менеджер пакетів npm\nnpm install --save styled-components\nАльтернативний варіант з yarn:\n# через yarn\nyarn add styled-components \nСтилизація компонентів виконується наступним чином. Замість того, щоб описувати стилі HTML на основі класу:\n<button className=\"btn\">Knopka</button>\nТа\nbutton.btn { background-color: #1dcde0;\n    color: white;\n    font-size: 22px;\n    margin: 11px;\n    padding: 5px 20px;\n    border: 4px solid black;\n    border-radius: 8px;}\nВказуються компоненти, які містять власні інкапсульовані набори стилів:\nconst Knopka = styled.button`\n   background-color: #1dcde0;\n    color: white;\n    font-size: 22px;\n    margin: 11px;\n    padding: 5px 20px;\n    border: 4px solid black;\n    border-radius: 8px;`;\nЗа допомогою утиліти create-react-app створимо новий додаток, видалимо все зайве, залишивши програму повністю порожньою. Після встановлення пакета переходимо в компонент App і імпортуємо цей модуль styled-component. Створимо стилізований компонент – обгортку програми, грубо кажучи, кореневий блок div.\nУсередині шаблонних літералів пишемо стилі, які збираємося використовувати: ширина на 100 відсотків, мінімальна висота – на всю висоту вікна браузера, padding у два rem (розмір щодо шрифту) та чорний колір фону програми.\nЩоб побачити стилі, тепер обернемо наш додаток до обгортки:\n const App = () => {\n    return (\n      <AppWrapper>\n         Some text\n        </AppWrapper>\n  );\n};\nУправління глобальними стилями\nОскільки за замовчуванням у браузері завжди є зовнішні-внутрішні відступи (через що з’явилася смуга прокручування), їх слід усунути глобальними стилями. Для цього в коді index.js із модуля styled-components імпортуємо функцію GlobalStyle і, за аналогією з попереднім прикладом, створюємо компонент, викликаємо цю функцію, вказуючи шаблонні літерали та стилі. Використовуючи універсальний селектор для кожного елемента на сторінці за замовчуванням, приберемо зовнішні та внутрішні відступи, параметр box-sizing (визначає як обчислюється загальна ширина та висота елемента) поставимо як border-box. Тепер цей компонент можна помістити в будь-яку ділянку коду, і ці стилі функціонуватимуть. Зазвичай, їх поміщають у корінь програми, або компоненту app. Згортаємо все в react-фрагмент і додамо наш додаток App-компоненту та глобальні стилі:\nimport React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\nimport styled, {createGlobalStyle} from \"styled-components\";\n  const Global = createGlobalStyle`\n* {\n       margin:0;\n       padding:0;\n       box-sizing:border-box;\n       }`\nReactDOM.render(\n    <>\n        <Global/>\n        <App />\n    </>,\n  document.getElementById( \'root\')\n);\nВідступи зникли, отже, глобальні стилі працюють. У стилях підключимо шрифт.\nfont-family: consolas;\nРобота з пропсами\nЩоб упорядкувати компоненти, створимо окрему директорію, назвемо її компоненти. Створимо там перший компонент – Title.js. Швидко розгортаємо React-компонент (можна через сніппет, набравши rsc) і зробимо стилізований заголовок, прописавши в шаблонних літералах стилі:\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledTitle = styled.h1`\ncolor: white;\n`\nconst Title = () => {\n    return <StyledTitle> \n          </StyledTitle>\n};\n  export default Title;\nПовернемося до App.js та додамо його на сторінку. Замість Some text додаємо\n<Title>Highload.today </Title>\nЯкщо оновити сторінку у браузері, ми побачимо чорний колір.\nЩоб React зрозумів, що текст потрібно додати всередину стилізованого заголовка, використовуємо пропс, який називається {children}. Додаємо цей пропс і поміщаємо його всередину.\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledTitle = styled.h1`\ncolor: white;\n`\nconst Title = ({children}) => {\n    return <StyledTitle>\n            {children}\n    </StyledTitle>\n};\nexport default Title;\nПрипустимо, під час роботи програми, нам необхідно динамічно змінювати колір заголовка. За допомогою наступного синтаксису залежно від пропсу, який приймає компонент, можна змінювати ті чи інші властивості:\ncolor: ${props => props.color};\nПовернемося в компонент App і додамо нашому заголовку пропс color, додавши, скажімо, синій колір:\n<Title color={\"blue\"}>Highload.today </Title>\nЯкщо зараз ми відкриємо браузер, то нічого не побачимо, оскільки передали пропс не в StyledTitle, а просто в Title. Тому в Title.js цей пропс потрібно прийняти та передати до StyledTitle:\nconst Title = ({children, color}) => {\n    return <StyledTitle color={color}>\nВідкриваємо браузер і бачимо, що колір змінився – таким чином можна міняти колір заголовка передаючи різні пропси .\nОднак такий запис є досить незручним. Адже якщо у нас буде з десяток різних пропсів, вручну їх перераховуват незручно. Є більш лаконічний синтаксис, що дозволяє в StyledTitle розгорнути всі пропси:\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledTitle = styled.h1`\ncolor: ${props => props.color};\n`\nconst Title = (props) => {\n    return <StyledTitle {...props}/>\n};\nexport default Title;\nВсе, що ми будемо передавати в Title, буде автоматично передаватися і в StyledTitle.\nСтворимо ще один компонент, назвемо його Flex.js. Це буде також свого роду обгортка, яка прийматиме напрямок Flex-контейнера, align-items і justify-content, щоб вирівнювати щодо контейнера всі внутрішні елементи.\nimport React from \'react\';\nimport styled from \'styled-components\'\nconst StyledFlex = styled.div`\ndisplay: flex;\nflex-direction: ${props => props.direction || \'row\'};\nalign-items: ${props => props.align || \'stretch\'};\njustify-content: ${props => props.justify || \'stretch\'};\nmargin: ${({margin}) => margin || \'0\'};\n`\nconst Flex = (props) => {\n    return <StyledFlex {...props}/>\n};\nexport default Flex;\nКожна з перерахованих властивостей прийматиме значення, залежно від того, який пропс ми прокинули. Так, якщо ми передали props.direction, то він буде присвоєний властивості flex-direction. У протилежному випадку буде надано значення \'row\'.\nПовертаємося в App.js – тепер можемо користуватися компонентом Flex і помістити в нього наш Title, центруючи його посередині.\nimport Title from \"./components/Title\";\nimport Flex from \"./components/Flex\";\nconst AppWrapper = styled.div`\nwidth: 100% ;\nmin-height: 100vh;\npadding: 2rem;\nbackground: black;\n`\nconst App = () => {\n    return (\n      <AppWrapper>\n          <Flex justify = \"center\">\n          <Title color={\"blue\"}>Highload.today </Title>\n          </Flex>\n        </AppWrapper>\n  );\n};\nexport default App;\nЩоб розібратися в цій темі, зробимо щось на зразок симулятора вікна командного рядка. Перейдемо до верстки вікна терміналу – створюємо компонент Console.js. Поле текста розтягнемо на всю ширину, висоту – 80% від висоти вікна браузера, прокинемо в компонент пропси і повернемо з цього компонента нашу стилізовану консоль.\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledConsole = styled.textarea`\nwidth:100%;\nheight:80vh;\n`\nconst Console = (props) => {\n    return <StyledConsole {...props}/>\n};\nexport default Console;\nУ компоненті Flex.js додамо цю консоль\nconst App = () => {\n    return (\n      <AppWrapper>\n          <Flex justify = \"center\">\n          <Title color={\"blue\"}>Highload.today </Title>\n          </Flex>\n          <Console/>\n        </AppWrapper>\nНалаштуємо зовнішній вигляд консолі\ncolor: ${({color}) => color || \"red\"\nПсевдокласи\nНа прикладі фокусу розглянемо, як працювати з псевдокласами. Використовуємо знак &, який замінює селектор поточного елемента та вказуємо, щоб рамка поля при виділенні не малювалася:\n&:focus{ \n    outline: none;\n}\nДодамо кнопку і, на прикладі цього елемента, розглянемо як можна робити різні стилі залежно від пропса. Створюємо та розгортаємо новий компонент Button.js:\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledButton = styled.button`\nborder:none;\npadding:10px 15px;\nfont-size:26px;\ncursor: pointer;\n& focus {\n    outline:none;\n    }\n`\nconst Button = (props) => {\n    return <StyledButton{...props}/>\n};\n  export default Button;\nПовертаємося до App.js і додаємо під консоль цю кнопку:\n.. <AppWrapper>\n          <Flex justify = \"center\">\n          <Title color={\"blue\"}>Highload.today </Title>\n          </Flex>\n          <Console/>\n          <Button>Publish</Button>\n        </AppWrapper>\nПеремістимо кнопку праворуч. Консоль і кнопку обернемо у <Flex> і додамо пропс для того, щоб змістити кнопку праворуч:\n     <AppWrapper>\n          <Flex justify = \"center\">\n          <Title color={\"blue\"}>Highload.today </Title>\n          </Flex >\n          <Flex direction=\"column\">\n              <Console/>\n              <Button align=\"flex-end\">Publish</Button>\n          </Flex>\n        </AppWrapper>\nУ Button.js додаємо властивість align-self, що дозволяє вирівняти якийсь елемент усередині флекс-контейнера. Значення отримуватимемо з пропсів, а якщо такого немає, за замовчуванням встановимо stretch.\n  align-self: ${props => props.align || \'stretch\'}\nУгруповання стилів на основі пропсів\nТепер займемося стилями. Щоб згрупувати декілька властивостей, залежно від пропсів, використовується наступна конструкція. Вона складається з логічного “І” (&&) і вказаного в шаблонних літералах стилів, які застосовуються, якщо ми передали компонент цей пропс. Ставимо код у Button.js\nimport React from \'react\';\nimport styled from \"styled-components\";\nconst StyledButton = styled.button`\nborder:none;\npadding:10px 15px;\nfont-size:26px;\ncursor: pointer;\n& focus {\n    outline:none;\n    } \n    align-self: ${props => props.align || \'stretch\'};\n${props => props.primary && `\ncolor: ${props => props.color ||\'white\'};\nbackground: ${props => props.background||\'white\'};\n`}\n`\nconst Button = (props) => {\n    return <StyledButton{...props}/>\n};\nexport default Button;\nПерейдемо в компонент App і передамо пропс primary.\nButton primary background={‘green’} color={\'red\'} align=\"flex-end\">Publish</Button>\nЗмінюємо color={\'green\'}  і переконуємося, що колір кнопки став червоним на зеленому фоні.\nТепер зробимо стиль кнопки з обведенням\n${props => props.outlined && css`\n    color: ${props => props.color || \'white\'};\n    border: 1px solid ${props => props.color || \"white\"};\n    background: transparent;\n`}\nПовертаємося в App.js та передаємо пропсам outlined\n<Button outlined align=\"flex-end\">Publish</Button>\nСтворимо кнопку, яка буде мати ті самі стилі, що і Styled button, але більше в розмірах. Викликаємо Styled, параметром передаємо компонент, від якого хочемо успадковуватися, збільшуємо розмір шрифту.\nconst LargeButton = styled(StyledButton)`\n    font-size: 32px;\nТепер кнопка стала більшою, але вона зберегла всі стилі, які є у StyledButton. Грубо кажучи – LargeButton успадковується від StyledButton. Таким чином, стилі можна розширювати на основі існуючих компонентів.\nАнімація\nПринцип анімації той самий, що й у CSS. Щоб додати анімацію, необхідно використовувати функцію keyframes. Для підключення використовуємо псевдоклас hover.\nimport React from \'react\';\nimport styled, {css, keyframes} from \'styled-components\'\n  const rotateAnimation = keyframes`\n0% {\n    transform: rotateZ(0deg);\n}\n100% {\n    transform: rotateZ(360deg);\n}\n`const StyledButton = styled.button.attrs(props => ({\n    outlined: true,\n}))`\nborder: none;\npadding: 10px 15px;\nfont-size: 18px;\ncursor: pointer;\n&:focus {\n    outline: none;\n}\n&: hover {\n    animation: ${rotateAnimation} 1s infinite linear;\n}\nalign-self: ${props => props.align || \'stretch\'};\n${props => props.primary && css`\n    color: ${props => props.color || \'white\'};\n    background: ${props => props.background || \'white\'};\n`}\n${props => props.outlined && css`\n    color: ${props => props.color || \'white\'};\n    border: 1px solid ${props => props.color || \"white\"};\n    background: transparent;\n`}\n`const LargeButton = styled(StyledButton)`\n    font-size: 32px;\n`const Button = (props) => {\n    return <StyledButton {...props}/>\n};\nexport default Button;\nВисновок\nМи розібралися з бібліотекою Styled Components та розглянули основні прийоми роботи з нею. Для більш детального вивчення даної теми рекомендуємо вам переглянути відео, де автор використовуючи Styled Components проведе майстер клас зі створення SPA-додатка з вибором теми REST API запитами, пошуком, фільтрацією SPA-проект с темізацією на React та styled-components.','2022-12-03 00:28:28','2022-12-03 00:28:28'),(189,'Що таке gRPC і як він працює','Сергей Бондаренко\nжурналист','Содержание\nПринцип роботи gRPC\nПереваги gRPC\nТипи RPC\nКоли доцільно використовувати gRPC\nПерехоплювачі (Interceptors) та балансування навантаження\nВисновок\nНастав час розібратися, що таке gRPC — у чому принцип його роботи і які переваги перед звичним REST API.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nРозроблений в 2016 році компанією Google фреймворк gRPC швидко став популярним і сьогодні активно використовується як у самому Google, так і в ряді великих проектів, серед яких, наприклад, Netflix, Cisco, Dropbox, Spotify та ін. Система виклику віддалених процедур gRPC є альтернативою звичному REST API, її доцільно розглядати в контексті мікросервісів. gRPC часто можна зустріти там, де доводиться обслуговувати велику кількість клієнтів. Останнім часом великі проекти активно переходять на мікросервісну архітектуру і все більше компаній сприймають gRPC як основний стандарт передачі даних замість REST API. Як він працює і в чому його перевага?\n\nПринцип роботи gRPC\nІдея gRPC не нова – парадигма, яку використовує даний фреймворк, вже давно відома, вона ґрунтується на RPC (віддаленому виклику процедур). За допомогою RPC відбувається комунікація між клієнтом та сервером, для якої використовується не HTTP-запрос, а виклик функції. Клієнт викликає віддалену процедуру, серіалізує параметри та додаткову інформацію у повідомленні, після чого надсилає повідомлення на сервер. Прийнявши дані, сервер здійснює їх десеріалізацію, виконує потрібну операцію і надсилає результат назад клієнту. Такі об’єкти як stub сервера та stub клієнта беруть на себе функції серіалізації та десеріалізації параметрів. \nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nРозглянемо наступний приклад – у нас є велика монолітна програма, яка має єдиний загальний модуль і яка працює на одному сервері. Поступово ця програма розвивається, додаються нові можливості, з’являються нові опції. В міру розростання монолітного додатку, вносити до нього зміни стає все важче, масштабування проекту не можливе. Додаткові можливості програми, нові функції – помітно збільшують навантаження на сервер, а тому вимагають все більше апаратних потужностей. До певного моменту цих потужностей вистачатиме. Але рано чи пізно доведеться зіткнутися з проблемою обмеженості ресурсів сервера. Потужність комп’ютера не можна збільшувати до нескінченності і в якийсь момент досягається рівень, який обмежує вертикальне масштабування проекту.\nДля розв’язання цієї проблеми використовують розподіл монолітного додатка на окремі, невеликі, слабо пов’язані маленькі додатки – мікросервіси. Кожен такий мікросервіс – це автономна програма. Мікросервіси спілкуються один з одним і взаємодіють, виконуючи функції підсумкового додатка. Якщо у випадку монолітної архітектури користувач звертається до додатку і отримує відповідь, то з мікросервісною архітектурою він звертається до мікросервісу. Цей мікросервіс, у свою чергу, звертається до іншого мікросервісу, який, наприклад, може звернутися до третього мікросервісу або бази даних і т.д. Спілкуючись між собою за допомогою програмного інтерфейсу API, сукупність мікросервісів формує весь додаток повністю.\nНавіщо це потрібно? Коли виникає потреба в масштабуванні, окремі мікросервіси можна розмістити на різних серверах, виконавши таким чином горизонтальне масштабування. Збільшувати число вузлів можна практично нескінченно, тому для масштабування програми мікросервісна архітектура більш зручна в порівнянні з монолітною реалізацією. Тим більше, що монолітна архітектура при масштабуванні набуває дуже об’ємного коду в якому розробнику складно розбиратися.\nКрім того, коли ми вносимо зміни до монолітного додатку, через велику кількість зв’язків між різними його частинами, це може спричинити зміну тих чи інших модулів. У мікросервісній архітектурі програма декомпозована на безліч додатків — тому вносити зміни лише в якийсь певний модуль відносно легко і безпечно.\nОднак мікросервісна архітектура має і мінуси. Чим більше мікросервісів використовується в проекті, тим більше програмних інтерфейсів API необхідно створювати, забезпечуючи взаємодію мікросервісів.\nСтандартний спосіб реалізації API та організації спілкування з додатками – за допомогою REST API. Коротко це виглядає так: є клієнт та сервер, який має доступ до бази даних. Клієнт посилає якийсь HTTP-запит із певним методом, передаючи (або не передаючи) дані JSON. Сервер приймає цей HTTP-запит і відправляє відповідь (зазвичай, теж у форматі JSON або, рідше – у вигляді XML). Один із недоліків REST API полягає в тому, що для окремої мови програмування потрібно створювати свій код API. Всі мови програмування мають власні бібліотеки для розробки API, і щоразу код доводиться писати вручну. Звичайно, можна генерувати код за допомогою сторонніх інструментів (наприклад, Swagger), але стандартного способу виконати це в REST API – на жаль, немає.\nІнша незручність REST API полягає в тому, що формат даних, що використовується для пересилання даних, – не бінарний, а текстовий. Такий формат зручний для візуального ознайомлення зі вмістом, однак він ніяк не оптимізується, не стискається при передачі. Відповідно розмір повідомлення, що передається, виходить великий і час на його відсилання збільшується. Якби дані були бінарними, ми могли б застосувати до них оптимізацію.\nНу, і третій недолік REST API полягає в тому, що транспортний протокол, що застосовується у передачі – HTTP 1.1. Як наслідок – організація стримінгу потокових даних ускладнена.\nПереваги gRPC\nПерераховані вище недоліки були усунені в gRPC, завдяки чому фреймворк стрімко набув популярності. Система обміну повідомленнями gRPC використовує замість JSON бінарний формат Protobuf, завдяки чому розмір повідомлень стає меншим і збільшується пропускна здатність – швидкість передачі в кінцевому підсумку зростає в 7-10 разів. Цей формат підтримує строгу типізацію, однак, для його читання необхідно декодувати повідомлення, а для надсилання – кодувати.\n\nБуфер протоколу Protobuf дозволяє зберігати свої дані та функціональні контракти у вигляді proto файлу. Клієнт і сервер повинні зберігати той самий proto файл, він діє як посередницький договір клієнта для виклику будь-яких доступних функцій з сервера. Для proto файлів використовують мову опису інтерфейсів (IDL). У proto файлі ми описуємо типи даних, формат повідомлень і ті операції RPC, які передбачається використовувати в додатку. Скажімо, для опису структури даних повідомлення потрібно додати message, ім’я структури, всередині тип, ім’я та номер поля. На відміну від Protobuf, JSON не має суворої типізації – ключу “timestamp” може відповідати і рядок, і число. У Protobuf можна вказати, що якась колонка (“timestamp”) – це ціле число. При пересиланні масиву об’єктів JSON спостерігається надмірність — багаторазово передаються ті самі ключі (“timestamp” і “url”), в Protobuf надмірності немає.\nУ gRPC є стандартні засоби для генерації коду різними мовами програмування – компілятор protoc перекладає мову, яку ми використовуємо в proto файлі, на будь-яку з популярних мов програмування, включаючи Python, Java, C++, Golang і т.д.\nБінарний формат, що використовується в gRPC, транслюється через протокол HTTP 2, завдяки чому швидкість обміну даними (згідно з окремими тестами) збільшується на 14 відсотків. У HTTP 2 добре реалізовані потоки даних (можна запитувати сервер і отримувати від нього потік даних по каналу клієнт-сервер).\nТипи RPC\nЗавдяки мультиплексуванню на HTTP 2, реалізація стрімінгу потокових даних не є проблемою. Розрізняють наступні види RPC:\nRPC потокової передачі сервера – клієнт надсилає один запит, а сервер посилає серію відповідей. Приклад використання – коли клієнт надсилає запит на домашню сторінку зі списком елементів, а сервер відправляє відповіді окремо, завдяки чому для клієнта можливе відкладене завантаження.\nКлієнтський стрімінг RPC – клієнт відправляє серію запитів, а сервер відправляє лише одну відповідь.\nДвонаправлений потоковий RPC – відправлення з боку клієнта і сервера відбувається одночасно, не чекаючи відповіді.\nВаріант коли клієнт надсилає один запит і повертає одну відповідь називається – унарним RPC.\nКоли надходить кілька запитів до сервера (ситуація є актуальною, наприклад, при потоковій передачі), на сервері можна скасувати виклик gRPC, якщо відповідь не потрібна.\nКоли доцільно використовувати gRPC\nНезважаючи на те, що gRPC багато в чому зручний, є низка умов, за яких доцільніше відмовитись від нього на користь REST API. gRPC не підтримується у браузері, тому для монолітної програми, до якої має бути клієнтський доступ запитів ззовні або через браузер, слід використовувати звичайний API REST.\nЯкщо програма використовує архітектуру мікросервісів, де численні мікросервіси спілкуються один з одним, то вибір слід робити вибір на користь gRPC. У цьому випадку у вас можуть використовуватися різні мови програмування (що, втім, не є проблемою і для REST API, якщо використовувати Swagger), а також велика кількість передач повідомлень. Відповідно до gRPC ви можете використовувати автоматичну генерацію коду та отримаєте більш високу швидкість роботи порівняно з REST API. Також gRPC є актуальним у випадках, коли необхідний стрімінг даних.\nПерехоплювачі (Interceptors) та балансування навантаження\nВ арсеналі gRPC є механізм розширення, який називається перехоплювач (interceptor). Коли потрібно змінити запит або відповідь перед передачею, можна перехопити виклик і змінити його (аналог проміжного ПЗ в REST API). Interceptors зручно використовувати для логування запитів, збору метрик, аутентифікації та ін.\n\nТакож gRPC підтримує механізм балансування навантаження клієнта – він уже реалізований за допомогою бібліотеки Golang.\nВисновок\nТепер ви маєте уявлення про те, що таке gRPC, які у нього переваги та особливості роботи, в яких випадках даний фреймворк застосовується. Для більш детального занурення у тему рекомендуємо вам переглянути вебінар, на якому будуть розглянуті технології gRPC та REST на основі реального проекту.','2022-12-03 00:28:32','2022-12-03 00:28:32'),(190,'Цикл for-each і метод forEach у Java','Андрій Денисенко','Содержание\nЦикл for-each\nОбмеження циклу for-each\nМетод forEach\nВикористання forEach для ітерації в List\nВикористання forEach для ітерації в Set\nВикористання forEach для ітерації в Map\nforEach із умовою\nІтерація в Map із використанням entrySet і фільтрацією\nІтерація по колекції з використанням Stream.forEachOrdered\nІтерація за допомогою Iterator.forEachRemaining\nВисновок\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nУ Java, крім циклу for, для ітерації по колекціях використовується цикл for-each і методи forEach, forEachOrdered і forEachRemaining.\nЦикл for-each\nЦикл for-each перебирає елементи масиву або колекції. Його синтаксис такий:\nfor (тип им\'яЗмінної : им\'яМасива) {\n    // блок коду\n}\nНаведений нижче приклад виводить усі елементи масиву fruits у циклі for-each.\npublic class ForEachLoop {\n    public static void main(String[] args) {\n        String[] fruits = {\"apple\", \"orange\", \"banana\", \"mango\"};\n        \n        System.out.println(\"=== Цикл for-each ===\");\n        for(String fruit: fruits){\n            System.out.println(fruit);\n        }\n    }\n}\nОбмеження циклу for-each\nЦикл for-each недоцільно використовувати, якщо потрібно змінити колекцію. Параметр циклу лише отримує значення поточного елемента колекції, тому його змінення не призводить до змінення цього елемента.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nimport java.util.ArrayList;\nimport java.util.List;\npublic class ForEachNoChange {\n    public static void main(String[] args) {\n        List fruits = new ArrayList();\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"banana\");\n        fruits.add(\"mango\");\n        \n        for(String fruit: fruits){\n            System.out.println(\"fruit = \" + fruit);\n            fruit = \"grapes\";\n            System.out.println(\"Now fruit = \\\"\" + fruit + \"\\\"\");\n        }\n        System.out.println();\n        System.out.println(\"The list after attempting to change it:\");\n        for(String fruit: fruits){\n            System.out.println(fruit);\n        }\n    }\n}\nЦикл for-each не відстежує індекс елемента масиву, тому його неможливо використовувати, щоб отримати індекс, до якого прикріплено елемент.\nfor(String fruit: fruits){\n    if(fruit == \"banana\"){\n         // Ми знаємо тільки значення елемента, але не індекс\n    }\n}\nДля визначення індексу необхідно використовувати цикл for.\nfor(int i = 0; i < fruits.length; i++){\n    if(fruits[i] == \"banana\"){\n         index = i;\n         System.out.println(i);\n    }\n}\nЦикл for-each перебирає колекцію в прямому напрямку, але не в зворотному, із кроком в один елемент. Цикл for дає змогу перебирати елементи в прямому та зворотному порядку з довільним кроком. Наприклад, наведений нижче код виведе в консолі “mango” та “orange”, перебираючи елементи від кінця до початку з кроком 2:\nString[] fruits = {\"apple\", \"orange\", \"banana\", \"mango\"};\n\nfor(int i = fruits.length - 1; i > 0; i-=2){\n    System.out.println(fruits[i]);\n}\nУ циклі for-each неможливо обробити два прийняття рішення одночасно:\nfor(int i = 0; i < numbers.length; i++){\n    if(numbers[i] == arr[i]){\n         // Складно реалізувати в циклі for-each\n    }\n}\nДо того ж, цикл for-each поступається звичайній ітерації з погляду продуктивності.\nМетод forEach, який введено в Java 8 для інтерфейсів Iterable і Stream, також має кілька переваг перед традиційним циклом. Наприклад, ітерацію можна здійснювати паралельно, використовуючи паралельний потік замість звичайного. Оскільки операції виконуються над потоком, можна фільтрувати елементи та застосовувати до них функцію map. Після цього можна застосувати метод forEach для ітерації по елементах. У методі forEach можна використовувати посилання на метод або лямбда-вираз для отримання чистого і короткого коду.\nРозглянемо метод forEach детально.\nМетод forEach\nУ Java 8 для ітерації по елементах колекції введено метод forEach. Його визначено для інтерфейсів Iterable та Stream.\nДля інтерфейсу Iterable це метод за замовчуванням. Класи колекцій, що розширюють інтерфейс Iterable, можуть використовувати цикл forEach для ітерації.\nСигнатура методу forEach:\nvoid forEach(Consumer<? super T> action)\nІнтерфейс Consumer — це функціональний інтерфейс (інтерфейс із єдиним абстрактним методом). Він приймає вхідний параметр і не повертає результату.\nОсь його визначення:\n@FunctionalInterface\npublic interface Consumer {\n    void accept(T t);\n}\nТому аргументу forEach можна передати будь-яку реалізацію, наприклад таку, що друкує рядок:\nConsumer printConsumer = new Consumer() {\n    public void accept(String s) {\n        System.out.println(s);\n    };\n};\nЦе не єдиний спосіб створити дію за допомогою Consumer та API forEach. Розглянемо три найпоширеніші способи використання методу forEach.\nАнонімна реалізація Consumer, приклад якої наведено вище. Якщо його проаналізувати, стає зрозуміло, що корисна частина знаходиться всередині методу accept. Щоб код було зручно читати, найчастіше використовують два наведені далі способи.\nЛямбда-вираз. Велика перевага функціональних інтерфейсів Java 8 – можливість використовувати лямбда-вирази для створення їх екземплярів замість написання громіздких реалізацій анонімних класів. Оскільки інтерфейс Consumer є функціональним, можна уявити його як лямбда-вираз: (argument) -> { //body }\nМетод printConsumer спрощується:\nname -> System.out.println(name)\nТепер його можна передати методу forEach:\ns.forEach(s -> System.out.println(s));\nПісля впровадження лямбда-виразів у Java 8 це, ймовірно, найпоширеніший спосіб використання методу forEach.\nПосилання на метод. Замість звичайного синтаксису лямбда-виразів можна використовувати синтаксис посилання метод, якщо існує метод, який виконує операцію над класом.\ns.forEach(System.out::println);\n  Використання forEach для ітерації в List\nДля списків метод forEach використовується так:\nimport java.util.ArrayList;\nimport java.util.List;\npublic class ForEachList {\n    public static void main(String[] args) {\n        List fruits = new ArrayList();\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"banana\");\n        fruits.add(\"mango\");\n        \n        System.out.println(\"=== Метод forEach для List ===\");\n        System.out.println();\n\n        fruits.forEach(fruitList -> System.out.println(fruitList));\n        System.out.println();\n    }  \n}\nУ цьому прикладі коду метод forEach викликається з передачею лямбда-виразу:\nfruits.forEach(fruitList -> System.out.println(fruitList));\nВивід:\n=== Метод forEach для List ===\n\napple\norange\nbanana\nmango\nВикористання forEach для ітерації в Set\nУ наведеному нижче прикладі показано, як метод forEach застосовується до Set і викликається з передачею посилання метод.\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ForEachSet {\n\n    public static void main(String[] args) {\n        \n        Set fruits = new HashSet<>();\n        \n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"banana\");\n        fruits.add(\"mango\");\n        \n        System.out.println(\"=== Метод forEach для Set ===\");\n        \n        fruits.forEach((e) -> { System.out.println(e); });\n    }\n}\nВивід:\n=== Метод forEach для Set ===\norange\nbanana\napple\nmango\nВикористання forEach для ітерації в Map\nУ цьому прикладі метод forEach застосовується до Map:\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ForEachMap {\n\n    public static void main(String[] args) {\n\n        Map<Integer, String> fruits = new HashMap<>();\n\n        fruits.put(1, \"apple\");\n        fruits.put(2, \"orange\");\n        fruits.put(3, \"banana\");\n        fruits.put(4, \"mango\");\n        \n        System.out.println(\"=== Метод forEach для Map ===\");\n\n        fruits.forEach((k, v) -> {\n            System.out.printf(\"%d: %s%n\", k, v);\n        });\n    }\n}\nВивід:\n=== Метод forEach для Map ===\n1: apple\n2: orange\n3: banana\n4: mango\nforEach із умовою\nЯкщо потрібно вибрати з колекції певні елементи, можна перетворити її на потік, а потім застосувати до нього метод filter. Після цього можна провести ітерацію лише за відібраними елементами.\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ForEachFilter {\n\n    public static void main(String[] args) {\n\n        List<String> fruits = new ArrayList<>();\n\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"banana\");\n        fruits.add(\"mango\");\n        \n        System.out.println(\"=== Метод forEach + filter ===\");\n        fruits.stream().filter(fruit -> (fruit.length() == 5)).forEach(System.out::println);\n    }\n}\nВивід:\n=== Метод forEach + filter ===\napple\nmango\nІтерація в Map із використанням entrySet і фільтрацією\nУ наведеному нижче прикладі коду з HashMap із рейтингом мов програмування за жовтень 2022 року вибираються записи з рейтингом більше семи.\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class JavaForEachExample {\n\n    public static void main(String[] args) {\n\n        Map<String, Double> languages = new HashMap<>();\n\n        languages.put(\"Abap\", 0.58);\n        languages.put(\"Ada\", 0.95);\n        languages.put(\"C#\", 7.79);\n        languages.put(\"C/C++\", 7.01);\n        languages.put(\"Cobol\", 0.34);\n        languages.put(\"Dart\", 0.64);\n        languages.put(\"Delphi/Pascal\", 0.16);\n        languages.put(\"Go\", 1.48);\n        languages.put(\"Groovy\", 0.48);\n        languages.put(\"Haskell\", 0.29);\n        languages.put(\"Java\", 17.64);\n        languages.put(\"JavaScript\", 9.21);\n        languages.put(\"Julia\", 0.41);\n        languages.put(\"Kotlin\", 1.57);\n        languages.put(\"Lua\", 0.51);\n        languages.put(\"Matlab\", 1.71);\n        languages.put(\"Objective-C\", 2.21);\n        languages.put(\"Perl\", 0.44);\n        languages.put(\"PHP\", 5.27);\n        languages.put(\"Python\", 27.61);\n        languages.put(\"R\", 4.26);\n        languages.put(\"Ruby\", 1.1);\n        languages.put(\"Rust\", 1.29);\n        languages.put(\"Scala\", 0.73);\n        languages.put(\"Swift\", 2.17);\n        languages.put(\"TypeScript\", 2.43);\n        languages.put(\"VBA\", 1.07);\n        languages.put(\"Visual Basic\", 0.65);\n        \n        languages.entrySet().stream().filter(x -> (x.getValue() > 7)).forEach(System.out::println);\n    }\n}\nСпочатку HashMap перетворюється на множину записів за допомогою методу entrySet. Потім ця множина перетворюється на потік методом stream. Далі методом filter відфільтровуються записи зі значенням більше 7. Відфільтровані записи виводяться в консоль із використанням методу forEach.\nВивід:\nC#=7.79\nC/C++=7.01\nJavaScript=9.21\nPython=27.61\nJava=17.64\nІтерація по колекції з використанням Stream.forEachOrdered\n\nЯкщо для проходу по колекції використовується метод forEach, то не гарантується, що він щоразу виводитиме елементи у початковому порядку. Це добре видно на прикладі паралельного потоку.\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ForEachOrdered2 {\n    public static void main(String[] args) {\n        List<String> fruits = new ArrayList<String>();\n        fruits.add(\"apple\");\n        fruits.add(\"orange\");\n        fruits.add(\"banana\");\n        fruits.add(\"mango\");\n        \n        for(int i = 0; i < 3; i++){\n            System.out.printf(\"Iteration %d:%n\", i+1);\n            fruits.stream().parallel().forEach(s->System.out.println(s));\n            System.out.println();\n        }\n    }\n}\nВивід може бути таким:\nIteration 1:\nbanana\nmango\norange\napple\n\nIteration 2:\norange\nbanana\napple\nmango\n\nIteration 3:\norange\napple\nmango\nbanana\nЕлементи паралельного потоку за використання методу forEach виводяться в різному порядку.\nЗамінимо метод forEach на forEachOrdered:\nfruits.stream().parallel().forEachOrdered(s->System.out.println(s));\nДля методу forEachOrdered вивід завжди буде здійснюватися в порядку входження елементів:\nIteration 1:\napple\norange\nbanana\nmango\n\nIteration 2:\napple\norange\nbanana\nmango\n\nIteration 3:\napple\norange\nbanana\nmango\nЦей метод має таку сигнатуру:\nvoid forEachOrdered(Consumer<? super T> action)\nТут Consumer є функціональним інтерфейсом, від якого очікується, що він буде працювати за рахунок побічних ефектів, а T є типом елементів потоку.\nІтерація за допомогою Iterator.forEachRemaining\nНарешті, ітерацію в колекції можна здійснювати за допомогою методу forEachRemaining інтерфейсу Iterator.\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ForEachRemaining {\n\n    public static void main(String[] args) {\n        \n        List fruitList = new ArrayList();\n        fruitList.add(\"apple\");\n        fruitList.add(\"orange\");\n        fruitList.add(\"banana\");\n        fruitList.add(\"mango\");\n\n        fruitList.iterator().forEachRemaining(E -> System.out.println(E));\n    }\n}\nВисновок\nУ цій статті ми розглянули використання методу forEach для ітерації по колекціях та порівняли його з іншими способами ітерації. Ми дізналися, як працює метод forEach і в які способи можна реалізувати його аргумент. Також ми застосували інші методи ітерації в колекції (forEachOrdered, forEachRemaining) і провели ітерацію по відфільтрованих елементах колекції.\nЗагалом, метод forEach надає більше можливостей, ніж цикл for-each. Також він дає змогу писати легкий для читання код, хоча інколи поступається продуктивністю циклу. ','2022-12-03 00:28:35','2022-12-03 00:28:35'),(191,'Що таке MQTT і для чого він потрібний','Андрій Денисенко','Содержание\nЩо таке MQTT?\nІсторія MQTT\nОсобливості MQTT\nЯк працює MQTT\nСемантика тем\nСтруктура повідомлень\nЗахист передачі даних\nВикористання MQTT\n Допомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо таке MQTT?\nMQTT (MQ Telemetry Transport) — це негроміздкий обміну повідомленнями, що працює за моделлю «видавець—підписник». Його призначено для телеметрії між машинами (M2M) у середовищах із низькою пропускною здатністю. Це найпоширеніший протокол передачі повідомлень для Інтернету речей (IoT).\nMQTT — це набір правил, що визначає, в який спосіб пристрої IoT публікують дані та підписуються на них через Інтернет. Цей протокол використовується для обміну повідомленнями й даними для IoT та промислового IoT (IIoT), наприклад, вбудованими пристроями, датчиками, промисловими програмованими логічними контролерами та іншими пристроями.\nВідправник (видавець) та одержувач (підписник) зв’язуються один з одним із використанням тем (топіків) і працюють окремо один від одного. Зв’язком між ними керує MQTT. Брокер MQTT фільтрує всі вхідні повідомлення та розповсюджує їх між відповідними підписниками.\nІсторія MQTT\nПротокол MQTT створили Енді Стенфорд-Клерк (IBM) та Арлен Ніппер у 1999 році для підключення телеметрії систем нафтопроводу через супутник. Цей протокол мав забезпечувати мінімальне споживання заряду акумулятора та мінімальну пропускну здатність. Винахідники сформулювали такі вимоги до протоколу:\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nпростота реалізації;\nдоставка даних про якість обслуговування;\nлегкість та ефективне використання пропускної здатності;\nнейтральність стосовно даних;\nпідтримка безперервності сеансів.\nЦі цілі й досі є основою MQTT. Проте головний фокус протоколу перейшов від пропрієтарних вбудованих систем до відкритих прикладів застосуванні для Інтернету речей (IoT). MQTT більше не вважають абревіатурою. Тепер MQTT є назвою протоколу.\nНезважаючи на те, що MQTT спочатку був закритим, у 2010 році версію 3.1 було видано з ліцензією royalty-free. 2014 року MQTT став офіційно затвердженим стандартом OASIS.\nЄ два варіанти й декілька версій MQTT:\nMQTT v3.1.0\nMQTT v3.1.1\nMQTT v5\nMQTT-SN\nНаразі дуже поширена версія 3.1.1. Найновішу версію (5-а) затверджено в 2019 році, і вона підтримується обмежено. Клієнт mosquitto підтримує її з випуску 1.6, а клієнт Paho (Python) — з версії 1.5.1. Специфікація MQTT-SN з’явилася в 2013 році. Її призначено для роботи з UDP, ZigBee й іншими транспортами.\nОсобливості MQTT\nНижче наведено головні особливості MQTT.\nНегроміздкий та ефективний для мінімізації ресурсів, яких потребує клієнт, і пропускної здатності мережі.\nЗабезпечує двоспрямовану взаємодію між пристроями й серверами. Також забезпечує передачу повідомлень групам речей.\nМасштабується до мільйонів речей.\nВизначає рівні якості обслуговування (QoS) для забезпечення надійності повідомлень.\nПідтримує постійні сеанси між пристроєм і сервером, що скорочує час на повторне підключення в ненадійних мережах.\nПовідомлення можуть шифруватися за допомогою протоколів TLS і підтримують протоколи аутентифікації клієнтів.\nНа відміну від парадигми «запит-відповідь» протоколу HTTP, MQTT керує подіями й дозволяє клієнтам надсилати push-повідомлення. Ця архітектура відокремлює клієнтів один від одного, що дає можливість створювати високомасштабовані рішення без залежностей між пристроями, що генерують дані, і пристроями, що їх отримують.\nЯк працює MQTT\nЗ’єднання MQTT завжди встановлюється між клієнтом і брокером. MQTT відокремлює видавця від абонента, і клієнти ніколи не підключаються один до одного безпосередньо. Зв’язки між клієнтами завжди обслуговуються брокерами. Для підключення клієнт надсилає брокеру повідомлення CONNECT. Брокер відповідає повідомленням CONNACK із кодом стану. Коли з’єднання встановлено, брокер залишає його відкритим, поки клієнт не надішле повідомлення про відключення або з’єднання не буде розірвано.\nРозглянемо клієнти й брокери докладніше.\nКлієнти\nКлієнтами MQTT є і видавці, і передплатники. Їх називають видавцями й передплатниками залежно від того, що робить клієнт у певний момент: публікує повідомлення чи підписується на їх отримання. В одному й тому самому клієнті MQTT можна реалізувати функціонал і видавця, і підписника. Клієнтом MQTT є будь-який пристрій, від мікроконтролера до повнофункціонального сервера, що запускає бібліотеку MQTT й підключається до брокера MQTT по мережі. Наприклад, клієнт MQTT може бути дуже маленьким пристроєм із обмеженими ресурсами й мінімальною бібліотекою, який підключено через бездротову мережу. Клієнтом MQTT може бути також типовий комп’ютер, що використовує графічний клієнт MQTT для тестування. Реалізація протоколу MQTT для клієнта дуже проста, тому він ідеально підходить для невеликих пристроїв. Клієнтські бібліотеки MQTT доступні для різних мов програмування й платформ, зокрема таких:\nAndroid\nArduino\nC\nC++\nC#\nGo\niOS\nJava\nJavaScript\n.NET\nБрокери\nБрокер є центром будь-якого протоколу, який працює за моделлю «видавець—підписник». Деякі реалізації брокера дають їм змогу обслуговувати мільйони одночасно підключених клієнтів MQTT.\nБрокер відповідає за прийом усіх повідомлень, їх фільтрацію, ідентифікацію передплатників для кожного повідомлення й надсилання відповідним клієнтам. Він також зберігає дані для всіх клієнтів із постійними сеансами, зокрема підписки й пропущені повідомлення. До того ж, брокер здійснює аутентифікацію й авторизацію клієнтів. Зазвичай брокер є розширюваним, що спрощує аутентифікацію користувачів, авторизацію та інтеграцію в серверні системи. Інтеграція особливо важлива, оскільки брокер часто є тим компонентом, який підключений до Інтернету безпосередньо, обслуговує багатьох клієнтів і має надсилати повідомлення в системи аналізу та обробки. Оскільки всі повідомлення проходять через брокера, він має бути масштабованим, інтегрованим у серверні системи, легким для відстеження та стійким до збоїв.\nСемантика тем\nУ MQTT слово «суб’єкт» означає рядок у кодуванні UTF-8, що використовується брокером з метою фільтрації повідомлень для кожного підключеного клієнта. Тема містить один або кілька рівнів. Рівні відокремлено один від одного косою рискою (роздільником рівня теми):\nПорівняно з чергою повідомлень, теми MQTT не такі громіздкі. Замовнику не потрібно створювати необхідну тему перед публікацією або підпискою. Брокер приймає тему без будь-якої попередньої ініціалізації.\nКожна тема має складатися хоча б з одного символу. У рядку теми допускаються пробіли. Теми чутливі до регістру. Наприклад, office/temperature та Office/Temperature – це дві різні теми. Темою може бути навіть символ косої риски.\nСимволи узагальнення MQTT\nКоли клієнт підписується на тему, він може підписатися на певну тему опублікованого повідомлення або використати символи узагальнення, щоб підписатися на кілька тем одночасно. Символ узагальнення можна використовувати лише для підписки на теми й не можна використовувати для публікації. Є два символи узагальнення: однорівневий і багаторівневий.\nОднорівневий: +\nОднорівневий символ узагальнення замінює один рівень теми. Для цього використовується символ плюсу (+).\n\nТема відповідає темі символом узагальнення, якщо містить довільний рядок на місці цього символу. Наприклад, підписка на тему office/+/humidity може дати такі результати:\n+ office/room1/humidity\n+ office/conference-room/humidity\nАле вона не відповідатиме зазначеним нижче результатам:\n– home/room1/humidity\n– office/room1/temperature\nБагаторівневий: #\nБагаторівневий символ узагальнення охоплює кілька рівнів теми. Для цього використовується символ діезу (#). Щоб брокер визначив, які теми необхідно зіставити, цей символ узагальнення має бути останнім у темі, а перед ним має бути пряма коса риска.\nЦей запис відповідатиме таким темам:\n+ office/room1/humidity\n+ office/room1/temperature\nЙому не відповідатимуть такі теми:\n– home/room1/temperature\n– office/conference-room/humidity\nКоли клієнт підписується на тему з багаторівневим символом узагальнення, він отримує всі тематичні повідомлення, що починаються з шаблону узагальнення, незалежно від кількості рівнів у темі. Якщо тему складає лише цей символ узагальнення (#), будуть отримані всі повідомлення, що надіслано брокером MQTT. Якщо ви очікуєте високої пропускної здатності, використовувати лише багаторівневий символ узагальнення як тему не рекомендовано.\nТеми, що починаються з символу $\nЗагалом, ви можете називати теми MQTT як завгодно. Проте є і виняток. Теми, що починаються з символу $, мають інше призначення. Їх не буде включено в підписку з використанням багаторівневого символу узагальнення (#). Ці теми зарезервовано для внутрішньої статистики брокера MQTT. Клієнти не можуть публікувати повідомлення в цих темах. Наразі офіційного стандарту подібних тем немає.\nСтруктура повідомлень\nMQTT є двійковим протоколом, у якому елементи керування представлено двійковими байтами, а не рядками тексту. MQTT використовує формат команд і підтвердження. Кожна команда має відповідне підтвердження.\nНазви тем, ідентифікатори клієнтів, імена користувачів і паролі представлено у вигляді рядків у кодуванні UTF-8. Корисне навантаження, за винятком інформації протоколу MQTT, тобто ідентифікатора клієнта і т. і., представлено у вигляді двійкових даних, а вміст є специфічним для програми.\nПакет MQTT складається з двобайтового фіксованого заголовка (завжди присутній), змінного заголовка (не завжди присутній) і корисного навантаження (не завжди присутнє).\nМожливі формати пакетів:\nФіксований заголовок (поле керування + довжина). Приклад: CONNACK.\nФіксований заголовок (поле керування + довжина) + заголовок змінної довжини. Приклад: PUBACK.\nФіксований заголовок (поле керування + довжина) + заголовок змінної довжини + корисне навантаження. Приклад: CONNECT.\nФіксоване поле заголовка складається з поля керування й поля довжини пакета (поле змінної довжини).\nМінімальний розмір поля довжини пакета становить 1 байт і підходить для повідомлень із загальною довжиною менше за 127 байт (за винятком поля керування й довжини). Максимальний розмір пакета — 256 МБ. Пакети довжиною понад 127 і менше за 16383 байт матимуть розмір поля 2 байти і так далі. Примітка. Використовується 7 бітів, а 8-й є бітом продовження.\nМінімальний розмір пакета становить 2 байти: однобайтове поле керування й поле довжини пакета в один байт. Наприклад, повідомлення DISCONNECT містить лише два байти.\nПоле керування\n8-бітне поле керування є першим байтом двобайтового фіксованого заголовка. Його поділено на два 4-бітних поля, що містять усі команди й відповіді протоколу.\nПерші 4 найбільш значущих біта — поле типу команди або повідомлення, а другі використовуються як прапорці керування. Наприклад, команда CONNECT має двійковий код 0001 (десятковий = 1), CONNACK — 0010 (2), PUBLISH — 0100 (3), DISCONNECT — 1110 (14). Оскільки це старші біти, фактичні коди будуть бітами від п’ятого до восьмого біта, наприклад, CONNECT — 00010000 (16), CONNACK — 00100000 (32) і так далі.\nПрапорці керування\nХоча 16 прапорців керування можуть бути представлені чотирма бітами, лише деякі використовуються часто. У повідомленні PUBLISH використовуються всі біти, як показано нижче:\n Біт 3 Біт 2  Біт 1 Біт 0\n DUP QoS  QoS RETAIN\nПрапорець DUP використовується для повторної публікації повідомлення з QoS 1 або 2.\nПрапорці QoS використовуються для публікації з зазначенням рівня QoS (0 — один раз, не гарантовано, 1 — щонайменше один раз, гарантовано, 2 — лише один раз, гарантовано).\nПрапорець RETAIN також використовується під час публікації.\nРешта байтів поля довжини\nКожен із байтів поля довжини використовує 7 бітів для позначення довжини, а MSB використовується як прапорець продовження.\nЗаголовок змінної довжини\nЯк було зазначено вище, цей заголовок не завжди присутній у повідомленні MQTT. Він є необхідним у деяких типах повідомлень MQTT для передачі додаткової керуючої інформації. Цей заголовок схожий, але не однаковий для різних типів повідомлень.\nКорисне навантаження\nВрешті решт пакет може містити корисне навантаження. Це необов’язкове поле, що містить різну інформацію для різних типів пакетів. Зазвичай це поле містить дані, що надсилаються. Наприклад, для пакета CONNECT робочим навантаженням є ідентифікатор клієнта, а також ім’я користувача й пароль, якщо їх зазначено. Для пакета PUBLISH це опубліковане повідомлення.\nПриклад пакета CONNECT\nПершим байтом пакета CONNECT буде 00010000. Команда CONNECT має код 1, тому для старших чотирьох бітів буде встановлено значення 0001, а оскільки прапорців немає, то і молодші чотири біти дорівнюватимуть нулю.\nДругим байтом буде довжина решти пакета. Він складається з довжини заголовка змінної довжини й довжини корисного навантаження. Нижче наведено формат заголовка змінної довжини та корисного навантаження пакета CONNECT. \nЗахист передачі даних\nКоли йдеться про безпеку мережі IoT, потрібно враховувати три основні поняття: ідентифікатор користувача, аутентифікацію та авторизацію.\nУ кожному сценарії MQTT беруть участь клієнт і брокер. Як вже говорилося раніше, клієнтом може бути будь-який пристрій: від мікроконтролера до сервера. Будь-який пристрій, що підключається до брокера, вважається клієнтом.\nБрокер отримує всі повідомлення й координує їх публікацію для підписаних клієнтів. Брокер відповідає за підтримку стійких підключень, а також ідентифікацію та авторизацію для передачі даних клієнтам MQTT. З’єднання MQTT встановлюється лише між одним клієнтом і одним брокером.\nІдентифікатор клієнта\nДля підключення до брокера клієнт має передати йому ідентифікатор клієнта в повідомленні CONNECT. В ідеалі кожен клієнт має унікальний ідентифікатор. Більшість пристроїв мають універсальний унікальний ідентифікатор (UUID) або MAC-адресу мережевого пристрою для підключення клієнта.\nПісля отримання повідомлення CONNECT брокер перевіряє ідентифікатор, ім’я користувача й пароль, щоб визначити, чи має клієнт право підключитися до брокера, .\nКрім аутентифікації з використанням імені користувача й пароля, протокол MQTT дає змогу здійснювати аутентифікацію за допомогою сертифіката X.509. Для цього виберіть TLS (Transport Layer Security) як метод шифрування.\nАвторизація\nКоли клієнт підключається до брокера, він може виконати дві дії: публікувати й підписуватися на теми. Теми є основним ресурсом, доступним для клієнтів, і вони вимагають авторизації для безпеки системи. Без неї будь-який клієнт зможе підключитися до будь-якої теми, доступної в брокері.\nНайпоширенішими типами авторизації є контроль доступу на основі ролей (RBAC) та список контролю доступу (ACL).\nЗа використання RBAC роль надає шар абстракції між клієнтом і основним ресурсом, тобто в даному випадку темами. З певними ролями пов’язані певні дозволи, що дозволяє брокеру авторизувати клієнта для публікації чи підписки на певну тему.\nACL пов’язує конкретних клієнтів зі списком дозволів. Ці дозволи містять політики, що визначають теми, на які клієнт може підписатися або в яких може опублікувати.\nТакож можлива авторизація за допомогою токенів доступу. Вони дають змогу обмежити дозволи клієнтів певною сферою, дозволяючи запобігти несанкціонованому доступу до читання або запису даних, який може мати небажаний вплив на інші клієнтські пристрої, підключені до вашої інфраструктури IoT.\nВикористання MQTT\nMQTT використовується в багатьох прикладах застосування та галузях промисловості. На сайті MQTT наведені зазначені нижче приклади впровадження.\nАвтомобільна промисловість\nHiveMQ: Програма для спільного використання автомобілів BMW покладається на надійність підключення, яку забезпечує HiveMQ.\nEMQ, допомагає SAIC Volkswagen створити платформу IoV (Інтернет транспортних засобів).\nЛогістика\nНадійне підключення IoT забезпечує моніторинг автономних дронів Matternet у режимі реального часу.\nВиробництво\nMQTT використовується для моніторингу електростанцій турецької компанії Çelikler Holding.\nІнтелектуальний будинок\nПриклад застосування телеметрії IBM: моніторинг і контроль електроенергії в домі.\nПриклад застосування телеметрії IBM: домашній моніторинг пацієнтів.\nСистема безпеки для розумного будинку eFon Technology довіряє рішенню MQTT компанії Bevywise.\nНафтогазова промисловість\nEMQ допомагає стимулювати інновації IoT у нафтохімічній промисловості.\nСпоживчі товари\nCASO Design створює пристрої для розумної кухні.\nТранспорт\nIoT розгорнуто в німецькій залізничній системі Deutsche Bahn AG.\n     ','2022-12-03 00:28:40','2022-12-03 00:28:40'),(192,'Винятки в Java — пояснення та приклади','Андрій Денисенко','Содержание\nЩо таке виняток у Java (Java Exception)?\nОператори try, catch, finally, throw, throws: обробка винятків та приклади використання\nІєрархія винятків Java\nВисновок\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЩо таке виняток у Java (Java Exception)?\nВиняток – це небажана ситуація, що виникає під час виконання програми та порушує нормальний перебіг її роботи.\nТака ситуація може виникнути, наприклад, через спробу читання з файлу, якого не існує, ділення на нуль, збій пристрою тощо. Виняток можна перехопити, щоб вжити відповідних заходів.\nНаведемо приклад коду, у якому виникає виняток.\nclass ExceptionTest{ \n    // Метод приймає два цілих числа\n    // та повертає результат поділу\n    // першого на друге\n    static float divide(int x, int y){\n        float result = x / y;\n        return result;\n    }\n\n    public static void main(String args[]){\n        // Ця стрічка буде виконана \n        System.out.println(divide(4, 2));\n        // Ця теж\n        System.out.println(divide(0, 2));\n        // Ця викине виняток\n        System.out.println(divide(4, 0));\n    }\n}\nЯкщо його запустити, отримаємо наступний результат:\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\n2.0\n0.0\nException in thread \"main\" java.lang.ArithmeticException: / by zero\n        at ExceptionTest.divide(ExceptionTest.java:6)\n        at ExceptionTest.main(ExceptionTest.java:16)\nВиводяться два результати ділення та повідомлення про виняток. У цьому повідомленні вказано таку інформацію:\nтип винятку (ArithmeticException);\nякий саме виняток виник (розподіл на нуль);\nстек виконання: методи та рядки, у яких виник виняток.\nОператори try, catch, finally, throw, throws: обробка винятків та приклади використання\nДля перехоплення виняткових ситуацій створюється об’єкт винятку, що передається середовищу виконання. Він містить інформацію про помилку, зокрема її тип та стан програми на момент виникнення помилки. Створення об’єкта винятку та його передача середовищу виконання називається викиданням виняткової ситуації.\ntry-catch\nДля перехоплення винятку використовується конструкція try–catch. Код, який потрібно перевірити на виняток, розміщено в блоці try, а код, що обробляє виняток, – у блоці catch.\nДодамо ці блоки до наведеного вище блоку коду і доповнимо його парою змінних для наочності.\nclass ExceptionTest{  \n    // Метод принимает два целых числа\n    // и возвращает результат деления\n    // первого на второе\n    static float divide(int x, int y){\n        float result = x / y;\n        return result;\n    }\n\n    public static void main(String args[]){\n        int x = 4;\n        int y = 2;\n        try {\n            // Эта строка будет выполнена\n            System.out.println(divide(x, y));\n\n            x = 0;\n            // Эта тоже\n            System.out.println(divide(x, y));\n\n            x = 4;\n            y = 0;\n            // Эта выбросит исключение\n            System.out.println(divide(x, y));\n        } catch (ArithmeticException e) {\n            System.out.println(\"Ошибка при делении \" + x + \" на \" + y);\n        }\n    }\n}\nОтримаємо більш зручний для читання результат:\n2.0\n0.0\nПомилка ділення 4 на 0\nfinally\nБлок finally виконується після try-catch незалежно від того, чи виник виняток. Це необов’язковий блок, але якщо немає блоку catch, то блок finally необхідний.\nУ цьому блоці можна, наприклад, закрити файл, який відкрито в блоці try, як у наведеному нижче коді.\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FinallyTest {\n    public static void main(String[] args) {\n        FileWriter writer = null;\n        try {\n            writer = new FileWriter(\"out.txt\");\n            writer.write(\"Writing to the file!\");\n            System.out.println(\"Файл записаний вдало.\");\n        } catch (IOException e) {\n            System.out.println(\"Помилка запису у файл.\");\n            e.printStackTrace();\n        } finally {\n            if ( writer != null ){\n                try{\n                  writer.close();\n                } catch (IOException e) {\n                  System. out.println(\"Помилка закриття файла.\");\n                  e.printStackTrace();\n                }\n            }\n        }\n    }\n}\nthrow\nУ деяких випадках потрібно викинути виняток самостійно. Це робиться за допомогою ключового слова throw .\nУ цьому прикладі метод PrintMe викидає виняток, якщо його аргумент дорівнює null.\nimport java.util.LinkedList;\n\npublic class ThrowTest\n{\n  public static void main(String[] args) {\n        LinkedList<String> fruits = new LinkedList<String>();\n        fruits.add(\"apple\");\n        fruits.add(\"banana\");\n        fruits.add(\"orange\");\n        fruits.add(\"mango\");\n\n        // Печатает список\n        ThrowTest.PrintMe(fruits);\n\n        // Выбрасывает исключение\n        ThrowTest.PrintMe(null);\n  }\n\n    public static void PrintMe(LinkedList<String> fruits){\n        if (fruits == null){\n            throw new NullPointerException(\"Аргумент не инициализирован\");\n        }\n        System.out.println(fruits);\n    }\n}\nІєрархія винятків Java\nВинятки в Java поділяються на дві основні категорії: вбудовані та користувацькі.\nВбудовані винятки\nВбудовані винятки – це винятки, які визначено в Java.\nКоли виникає вбудований виняток, віртуальна машина Java (JVM) створює об’єкт, що належить класу вбудованого винятку. Усі винятки походять від класу java.lang.Throwable, але їх визначено в кількох пакетах.\nКлас Throwable походить безпосередньо від класу Object і є кореневим класом дерева класів винятків. Від нього походять два підкласи: Error та Exception. Помилки й винятки, які зустрічаються в програмах Java, є об’єктами цих класів.\nЗа допомогою класу Throwable можна створювати власні винятки.\nКлас Error є надкласом всім класів помилок часу виконання. Він завершує виконання програми, якщо відбувається помилка, пов’язана із системою або ресурсами (JVM).\nПомилка зазвичай є незвичайною проблемою, після якої складно здійснити відновлення. Вони відбуваються не з вини програміста, а через неналежну роботу системи або виділення ресурсів.\nПриклади помилок: AssertionError, LinkageError, OutOfMmeoryError, StackOverFlowError, VirtualMachineError.\nКлас Exception представляє помилки, які спричинено програмою чи зовнішніми чинниками. Це надклас для всіх класів винятків.\nДля цього класу існує два конструктори:\npublic Exception() (за замовчуванням)\npublic Exception(String message) (приймає рядкове повідомлення як аргумент)\nЦі конструктори успадковуються всіма підкласами винятків. Сам собою клас Exception не надає своїх методів. Він успадковує методи класу Throwable.\nВбудовані винятки поділяються на дві групи: перевірювані (checked) та неперевірювані (unchecked).\nПеревірювані винятки Java\nПереваірювані винятки перевіряються компілятором Java під час компіляції і не є підкласами RuntimeException (винятку часу виконання).\nЯкщо метод викидає перевірюваний виняток, то цей виняток необхідно обробити або в цьому самому методі, або передати методу, який його викликав.\nПеревірювані винятки обробляються або в блоці try-catch, або в оголошенні методу з ключовим словом throws. Якщо виняток не опрацьовано, відбувається помилка компіляції.\nПеревіреними винятками є всі винятки, крім RuntimeException, Error та його підкласів.\nПриклади винятків, що перевіряються: ClassNotFoundException, IOException, SQLException, IllegalAccessException, FileNotFoundException.\nНеперевірювані винятки (винятки часу виконання) в Java\nНеперевірювані винятки в Java – це винятки, які перевіряються JVM, а не компілятором Java. Вони виникають під час виконання програми.\nУсі підкласи RuntimeException називаються неперевіреними винятками або винятками часу виконання в Java.\nМожна написати програму на Java й скомпілювати її, але ми не побачимо неперевірених виключень і помилок, поки не запустимо цю програму.\nКомпілятор Java не перевіряє винятки часу виконання під час компіляції, незалежно від того, чи обробляє їх програма.\nЯкщо в методі виникає виняток часу виконання, а програміст не обробляє його, JVM припиняє виконання програми та не виконує остаток коду.\nПриклади неперевірюваних винятків: ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException, NegativeArraySizeException, NullPointerException.\nУ Java визначено багато вбудованих винятків. Нижче наведено описи деяких з них.\nВиняток Опис\nArithmeticException Викидається, коли виникає виняткова арифметична ситуація.\nArrayIndexOutOfBoundsException Викидається під час спроби звернутися до масиву за недійсним індексом.\nArrayStoreException Викидається під час спроби зберегти об’єкт невідповідного типу в масиві об’єктів.\nClassCastException Викидається, коли код здійснює спробу привести тип об’єкта до підкласу, екземпляром якого він не є.\nClassNotFoundException Викидається, коли програма намагається завантажити клас за його ім’ям у рядковому поданні з використанням методу forName у класі Class.\nCloneNotSupportedException Викидається, коли для клонування об’єкта певного класу викликано метод clone, але клас цього об’єкта не реалізує інтерфейс Cloneable.\nEnumConstantNotPresentException Викидається, коли програма намагається звернутися до константи з переліку на ім’я, але тип цього переліку не містить константу з зазначеним ім’ям.\nВиняток Клас Exception та його підкласи є підкласами Throwable та вказують на ситуації, які можуть бути перехоплені програмою.\nIllegalAccessException Викидається, коли програма намагається застосувати рефлексію, щоб створити примірник (відмінний від масиву), призначити полю значення або отримати значення поля, викликати метод, але поточний метод не має доступу до визначення зазначеного класу, поля, методу чи конструктора.\nIllegalArgumentException Викидається, коли методу передано неприпустимий чи неприйнятний аргумент.\nIllegalMonitorStateException Викидається, коли нитка намагається очікувати на монітор об’єкта або надіслати сповіщення іншим ниткам, які чекають на монітор об’єкта, але вказаний монітор не належить їй.\nIllegalStateException Викидається, коли метод викликано в неприпустимий або неприйнятний час.\nIllegalThreadStateException Викидається, коли нитка знаходиться в неприйнятному стані для виконання цієї операції.\nIndexOutOfBoundsException Викидається, коли індекс певного типу (наприклад, для масиву, рядка або вектора) знаходиться поза допустимим діапазоном.\nInstantiationException Викидається, коли програма намагається створити екземпляр класу з використанням методу newInstance класу Class, але створити екземпляр зазначеного класу неможливо.\nInterruptedException Викидається, коли нитка перебуває в стані очікування, сну або зайнята іншими діями, але її роботу перервано перед виконанням дії чи після її виконання.\nВиняток NegativeArraySize Викидається, коли програма робить спробу створити масив негативного розміру.\nNoSuchFieldException Викидається, коли в класі немає поля з зазначеним ім’ям.\nNoSuchMethodException Викидається, коли неможливо знайти вказаний метод.\nNullPointerException Викидається, коли програма намагається використовувати значення null, але потрібно вказати об’єкт.\nNumberFormatException Викидається, коли програма намагається перетворити рядок на один із числових типів, але рядок має неприпустимий формат.\nRuntimeException Це батьківський клас для тих винятків, які можуть бути викинуті за нормальної роботи віртуальної машини Java.\nSecurityException Викидається менеджером безпеки у випадку порушення безпеки.\nStringIndexOutOfBoundsException Викидається методами класу String під час спроби використати негативний індекс або індекс, що перевищує розмір рядка.\nTypeNotPresentException Викидається, коли програма намагається отримати доступ до типу з зазначенням його імені у вигляді рядка, але не вдається знайти визначення типу зі вказаним ім’ям.\nUnsupportedOperationException Викидається, коли запитана операція не підтримується.\nКористувацькі винятки\nКористувацькі винятки створюються користувачами або програмістами відповідно до їх власних потреб. Їх створюють розширенням класу Exception.\nПрикладом винятку може бути ситуація, коли користувач намагається відкрити банківський рахунок, але не досяг віку 18 років. У такому разі може бути видано повідомлення про те, що потрібно відкрити рахунок із кимось із батьків. \nЩоб використовувати користувацький виняток, потрібно виконати наступні дії.\nВизначити клас, який розширює клас Exception.\nВизначити конструктор. Якщо не потрібно зберігати відомості про виняток, визначається стандартний конструктор. Якщо потрібно зберегти інформацію про виняток як рядок, визначається конструктор з параметром.\nСтворити об’єкт користувацького винятку й викинути його за допомогою ключового слова throw.\nПриклад винятку з конструктором за замовчуванням:\nclass MyException extends Exception{\n    // Конструктор по умолчанию\n    MyException(){}\n}\n\nclass Main{\n    public static void main(String[] args){\n        try{\n            MyException e = new MyException();\n            throw e;\n        }\n        catch(MyException ex){\n             System.out.println(\"Перехоплено користувацьке виключення\"); \n        }\n    }\n}\nЦей код виведе наступний текст: ” Перехоплено виняток користувача”.\nПриклад виключення з параметром конструктора:\nclass MyException extends Exception{\n    MyException(String msg){\n        super(msg);\n    }\n}\n\nclass Main{\n    public static void main(String[] args){\n        try{\n            MyException e = new MyException(\"Перехоплено користувацьке виключення з інформацією\");\n            throw e;\n        }\n        catch(MyException ex){\n             System.out.println(ex.getMessage()); \n        }\n    }\n}\nБуде виведено такий текст: “Перехоплено виняток користувача з інформацією”\nВисновок\nВинятки Java дозволяють зазначити шляхи обходу проблем і виправлення їх наслідків. З їхньою допомогою можна помістити логіку обробки виняткових ситуацій в окремі блоки коду (catch), залишивши основну логіку в блоці try, а логіку завершальних дій з обробки винятку – у блоці finally. Винятки можуть бути оброблені в методах, де вони виникають, або передані далі за допомогою ключових throw та throws.\nJava надає великий набір вбудованих винятків, а також дає програмісту гнучкість, дозволяючи створювати власні винятки відповідно до потреб програми.','2022-12-03 00:28:41','2022-12-03 00:28:41'),(193,'Що таке API, навіщо він необхідний і яку користь несе','Сергей Бондаренко\nжурналист','Содержание\nЯк працює і навіщо потрібен API \nДля чого використовують API\nОсобливості сучасного API\nВиды API\nПриклади API: корисні та цікаві\nВисновок\nДля новачка у програмуванні є багато «страшних» термінів, назва яких йому ні про що не говорить. Один з таких термінів – API, інтерфейс прикладного програмування. Зараз ми вам «на пальцях» пояснимо, що таке API, навіщо воно потрібне і які бувають різновиди API.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк працює і навіщо потрібен API \nБільшість додатків (як десктопних, так і мобільних) працюють за клієнт-серверною архітектурою. Це означає, що програма або сервіс складається з двох програмних частин – клієнтської та серверної. Припустимо, ви заходите на сайт із прогнозом погоди, щоб дізнатися, чи буде сьогодні у вашому місті дощ. Ви вставляєте посилання у ваш веб-браузер і він завантажує на адресу дані, використовуючи транспортний протокол HTTP. В даному випадку ваш браузер – це клієнтська частина веб-програми, а дані, що згенеровані під запит вашого браузера – це відповідь серверної частини веб-програми.\nЩоб дізнатися прогноз погоди, ви могли вчинити інакше – скористатися програмою на вашому смартфоні (це теж клієнтська частина). Ви запускаєте її на Android (або IOS – залежно від типу вашего девайсу), після чого програма звертається до сервера. Але цього разу вона запитує не сайт, а лише маленький файл – фрагмент даних у форматі JSON з інформацією про те, чи буде дощ, чи ні. І у випадку з браузером, і у випадку з мобільним додатком клієнтська та серверна частина якимось чином знаходять спільну мову. Ця «спільна мова» і називається API. Вона дозволяє двом програмам функціонувати, спілкуватися між собою, не звертаючи уваги на такі «незручності», як, наприклад, різні мови програмування, якими зроблено клієнтську та серверну частину. Ви можете використовувати в якості клієнтської частини програму, написану для платформи IOS, а можете використовувати програму для Android і т.д.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nБільше того, використовувати API можуть не тільки пара клієнт-сервер, а й, скажімо, два сервери. Наприклад, ви скористалися сервісом для покупки авіаквитків (звертаючись до API цього сервісу), а сайт вам ще й показав прогноз погоди в тій місцевості, куди ви відправляєтесь – тобто сервер надіслав запит на адресу іншого сервера, зв’язавшись з API сервісу метеослужби.\nДля чого використовують API\nСпробуємо уявити ситуацію у вигляді простої аналогії. Всі автомобілі мають кермо та педаль газу – Запорожець, Мерседес, чи вантажівка. Якщо ви вмієте керувати автомобілем, то можете сісти в автомобіль будь-якої марки і поїхати з пункту А в пункт В. А все тому, що у вас є інтерфейс – знайоме вам кермо і знайома педаль газу. Тому вам не важливо, яка саме електроніка прихована під капотом, адже ви знаєте, як використовувати машину за допомогою елементів її інтерфейсу. У певному сенсі, кермо та педаль газу – це API автомобіля.\nТеоретично, замість себе ви можете посадити за кермо знайомого або, навіть, сконструювати механічного робота, який займе місце водія, і теж буде крутити кермо і тиснути педаль газу. Іншими словами, інтерфейс автомобіля у вигляді керма та педалі дозволяє вести автомобіль будь-кому. Так само програмний інтерфейс програми дозволяє серверній частині програми функціонувати з клієнтською частиною.\nОсобливості сучасного API\nРозробка API складається з двох частин – написання коду та складання правил спілкування з додатком. Складання правил включає:\nвиконання операції\nотримання даних на вхід\nпередачу даних на вихід\nЧи це не нагадує принцип роботи функції в мовах програмування? Вона приймає деяку інформацію на вхід, виконує з даними дії і видає щось на вихід. API це і є набір функцій і складається він так, як схоче розробник. Сортувати API можна за призначенням. Скажімо, розробник робить окремо API для авторизації в системі (а також реєстрації), окремо API для списку звітів з різними функціями (Звіт №1, Звіт №2, Звіт №3 тощо), окремо API для платіжок з різними платіжними системами (Банк1, Банк2 тощо) тощо. Можна також створити єдине для всіх функцій загальне API або групувати функції іншим способом, як вам зручно.\nВ одній системі може бути кілька API, скажімо – окремо загальне API, а окремо API Банку та API інтегратора зі своїми методами. До кожного з цих API співвідноситься своя контракт-угода, яка визначає, які дії можна виконувати, які опції в ній реалізовані. У випадку, коли ми маємо справу з SOAP і REST інтерфейсами, це зазвичай описується стандартом WSDL або специфікацією WADL. Само собою, функції можна перевикористовувати та включати їх у різні набори API.\nДо опцій API можна вдаватися прямо, а можно побічно, за допомогою графічної оболонки GUI. При цьому користувач звертається до деякого набору візуальних елементів, які спрощують спілкування з функціями API – кнопочками, списками, чекбоксами і так далі.\nВиды API\nНайпопулярніший стандарт API – REST API. До нього був SOAP – Service Object Access Protocol. Він містив правила синтаксису для оформлення запитів та відповідей, що надсилаються веб-додатками. Усі програми, які підтримували SOAP, повинні були обмінюватися даними у форматі XML через HTTP або SMTP.\nXML (розширювана мова розмітки) зберігає дані у вигляді, що легко читається – використовуючи для цього теги. Стандарт REST, на відміну від SOAP, не є протоколом, а є архітектурним стилем.\nУ SOAP потрібно було створювати в рази більше коду, загортаючи його в XML. Rest надає дані у вигляді ресурсів, викликати які можна за унікальним URL-посиланням. Тобто, наприклад, щоб звернутися зі списку передплат користувача на канали YouTube, необхідно виконати запит на вигляд https://www.youtube.com/feed/subscriptions\nВеб-API, що відповідає підходам REST-API називають RESTFUL API.\nRESTFUL API застосовують HTTP-запити для роботи з ресурсами – такі як GET (для отримання інформації) або POST (запит, необхідний для надсилання даних). Також застосовуються запити PUT/PATCH для оновлення або зміни та DELETE для видалення даних.\nНа відміну від SOAP, який використовує тільки формат XML, система RESTFUL підтримує обмін повідомленнями в різних форматах — звичайний текст, YAML, HTML, XML, JSON.\nREST API з’явилася як вдала альтернатива технології віддаленого виклику процедур RPC. Але в 2015 році Google випустив фреймворк gRPC і ця технологія знову стала актуальною. gRPC – фреймворк підтримує більше 11 мов програмування – від Java та C++ до Ruby та Python, завдяки чому клієнтську та серверну частину програми можна розробляти зовсім у різних середовищах. В gRPC була додана підтримка аутентифікації, а в якості базового транспортного протоколу використовувався HTTP 2.0 (до речі, REST часто використовує версію HTTP 1.1).\nДля налагодження програми та налаштування роботи сервісів gRPC застосовує трасування, виконуючи моніторинг виклику процедур. Це дає можливість швидко проводити оптимізацію та вносити корективи у функціонал. Основна перевірка реалізується за допомогою опції Health Check. Для простої структури визначення сервісів використовуються .proto-файли.\nІ, нарешті, останній інструмент для роботи з API, про який варто згадати – GraphQL. Він дозволяє вказувати точні дані та спрощує отримання та склеювання даних з декількох джерел.\nЗавдяки мові запитів GraphQL розробник може використовувати одне звернення API для отримання всіх необхідних даних.\nПриклади API: корисні та цікаві\nІ, насамкінець ми розглянемо список найцікавіших API.\nNASA API \nНаціональне управління з аеронавтики та дослідження космічного простору є володарем величезної бази «космічної» інформації різного роду – фотографії далеких зірок і планет, інформація, яка отримана з  марсоходів, дані про екзопланети та астероїди, відомості про магнітні бурі, технологічні проекти NASA та багато іншого. Все це можна підключати та використовувати для сервісів та мобільних додатків.\nNASA API \nGIF Search \nЗа допомогою цього безкоштовного API ви отримуєте доступ до величезної бібліотеки анімованих файлів у форматі GIF. Ви можете визначати релевантність пошуку за ключовими словами, вказувати кількість картинок у списку результатів, вибирати у випадковому порядку та ін.\nGIF Search \nDeck of cards API \nЯкщо ви розробляєте карткову гру, вам регулярно потрібно виконувати такі дії як перемішування карт у колоді, вибір заданої кількості карт тощо. Цей API спрощує всі ці маніпуляції та перемішування. А в репозиторії проекту на гітхабі ви знайдете навіть дизайн з картинками карт.\nDeck of cards API \nSleep API\nGoogle Sleep API – це API для розпізнавання активності на платформі Android, що відображає інформацію про бездіяльність користувача. Цей API можна використовувати, наприклад, для автоматичного вимкнення екрана годинника. Використовуючи алгоритм штучного інтелекту, API дивиться на показання датчиків світла і руху як вхідні дані, і вже за ними визначає, чи дійсно користувач спить і як довго.\nSleep API \nTelegram Bot API\nНайпопулярніший API (по суті, надбудова над Telegram API) для розробки ботів у месенджері Telegram. З можливостей: робота через вебхуки, спрощена розмітка повідомлень та інше. Для телеграм-ботів не потрібні додаткові телефонні номери. Їх облікові записи є інтерфейсом для коду, що працює на вашому сервері.\nTelegram Bot API\nCoinGecko API \nЯкщо ви працюєте над проектом, який так чи інакше пов’язаний із криптовалютою, можливо, вас зацікавить даний API. Сервіс викликає список усіх існуючих криптовалют та показує актуальні ціни за версіями криптобірж зі списку. CoinGecko API безкоштовний і допускає до 100 запитів на хвилину.\nCoinGecko API \nFake Store API \nЯкщо ви займаєтеся розробкою у сфері e-commerce, цей API може бути дуже корисним. Він призначається для тестування маркетингових платформ та інтернет-магазинів. API генерує безліч фейкових даних для здійснення тестових покупок онлайн. За допомогою всіх основних запитів (POST, GET, DELETE, PATCH і PUT) сервіс автоматично заповнює товарні позиції, генерує профілі користувача та платіжні дані, токени для авторизації та ін.\nCoinGecko API \nPexels \nРесурс Pexels – це одна з найкращих безкоштовних бібліотек з фотографіями та відео. API на основі RESTful дозволяє отримати програмний доступ до всього контенту в базі. Для інтеграції даного сервісу достатньо кількох рядків коду. Ви можете здійснювати пошук за перевагою на зображенні палітри кольорів певного відтінку, за орієнтацією кадру на відео, за ключовими словами, розміром і ін.\nPexels \nБільш широкий список безкоштовних API з описами ви можете знайти, наприклад, тут.\nТакож раніше ми писали про API Gateway.\nВисновок\nСподіваємося, ми зацікавили вас темою API і білих плям з термінології розробника-початківця у вас стало менше. Якщо ви бажаєте глибше розібратися з темою REST API, рекомендуємо переглянути це відео.','2022-12-03 00:28:47','2022-12-03 00:28:47'),(194,'Фреймворки у веб-розробці — що це, які існують і для чого потрібні','Андрій Денисенко','Содержание\nЩо таке фреймворк?\nНавіщо потрібні фреймворки\nЧим фреймворк відрізняється від бібліотеки\nІсторія появи фреймворків\nКласифікація фреймворків\nОсновні переваги фреймворків\nНедоліки в роботі з фреймворками\nPHP-фреймворки: головні особливості\nPython-фреймворки: головні особливості\nJavaScript: фреймворки и библиотеки\nВисновки\nЩо таке фреймворк?\nФреймворк (англ. framework – каркас) – це програмне середовище, яке спрощує та прискорює створення програмного забезпечення. За використання фреймворків ви пишете лише код, який реалізує логіку, специфічну для вашого продукту. Вам не доводиться самостійно забезпечувати роботу з базою даних, автентифікацію, підтримку сеансів тощо. Все це реалізовано у фреймворках.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nДля створення веб-програм використовуються веб-фреймворки.\nНавіщо потрібні фреймворки\nІснують завдання, спільні для різних веб-сайтів, веб-програм та інших продуктів. Це маршрутизація, взаємодія з базою даних, автентифікація користувачів, підтримка сеансів, захист від веб-атак, кешування, відокремлення логіки від представлення та багато іншого. Створювати код для виконання цих завдань щоразу – це невиправдана трата часу та зусиль. Код для виконання таких завдань реалізований у фреймворках.\nФреймворки надають розробникам безліч можливостей, зокрема:\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nпозбавляють необхідності писати код щоразу заново;\nприскорюють процес розробки;\nспрощують роботу над веб-програмою;\nдозволяють сконцентруватися на логіці, специфічній для веб-програми;\nвідокремлюють логіку від уявлення;\nреалізують базову функціональність веб-продукту.\nЧим фреймворк відрізняється від бібліотеки\nБібліотека містить набір функцій для вирішення завдань із певної області. Бувають бібліотеки для роботи з датою та часом, випадковими числами, файловою системою, HTTP-запитами, серіалізацією у різних форматах.\nБібліотека не визначає структуру програми. Під час роботи з нею користувач вирішує, що і коли викликати.\nФреймворк визначає архітектуру програми та забезпечує взаємодію між\nїї компонентами. Він містить різні бібліотеки та використовує їх для створення каркасу програми. Коли ви працюєте з фреймворком, відбувається інверсія управління. Не користувач, а фреймворк встановлює, коли викликати функції користувача.\nІсторія появи фреймворків\nВеб тримається на трьох китах: HTML, CSS та JavaScript. HTML визначає структуру веб-сторінки, CSS відповідає за її оформлення, а JavaScript забезпечує взаємодію з користувачем.\nВеб-браузери «розуміють» лише ці три технології. Проблема в тому, що і ці технології, і браузери розвиваються окремо одне від одного. Щоб веб-сторінка виглядала однаково у всіх браузерах та однаково взаємодіяла з користувачами, під час написання коду потрібно врахувати особливості різних браузерів.\nПроробляти таку роботу для кожного сайту, що створюється, накладно. Тож з’явилися бібліотеки. Вони являли собою набори функцій для вирішення типових завдань роботи з HTML-кодом сторінки. Прикладом є бібліотека JavaScript jQuery. Вона спрощує аналіз HTML-документа й керування його вмістом, обробку подій, анімацію та використання Ajax.\nЗгодом почали з’являтися бібліотеки для HTML і CSS. За допомогою  цих бібліотек можна, наприклад, розбити сторінку на кілька колонок або закріпити заголовок. Це типові завдання, і їх краще вирішити один раз, а потім повторно використовувати готовий код. Прикладом такого фреймворку є Bootstrap, створений компанією Twitter. Це фронтенд-фреймворк. Він працює на стороні клієнта – у браузері.\nІснують і бекенд-фреймворки, наприклад, Django для мови програмування Python. Також існують фулстек-фреймворки. Розглянемо різні типи веб-фреймворків докладніше.\nКласифікація фреймворків\nБекенд-фреймворки\nПрацюють на боці сервера й забезпечують роботу веб-програми або веб-сайту. За допомогою бекенд-фреймворків можна створювати базові сторінки та форми, перевіряти вхідні дані та формувати вихідні. Зокрема, у них реалізовано функції для роботи з базою даних та захисту від атак.\nПрикладами бекенд-фреймворків є Laravel і CakePHP для PHP, Django і Flask для Python, Express.js для Node.js і Ruby on Rails для Ruby.\nФронтенд-фреймворки\nВідповідають за зовнішній вигляд веб-сторінки. Забезпечують однакове відображення веб-сторінки у всіх браузерах. Спрощують роботу зі стилями, анімацією та дозволяють створювати привабливі інтерактивні інтерфейси.\nСеред найпоширеніших фронтенд-фреймворків – Vue.js, Bootstrap, Foundation, Angular, React.\nФуллстек-фреймворки\nЦі веб-фреймворки працюють і на боці клієнта, і на боці сервера. Прикладами фуллстек-фреймворків є Meteor, Next.js і Nuxt.\nОсновні переваги фреймворків\nФреймворк дозволяє писати код, специфічний для програми, і виконує всю «чорнову» роботу.\nПроєкти, які створено на основі фреймворку, легко супроводжувати, масштабувати та допрацьовувати.\nПродукти, що базуються на фреймворках, працюють набагато швидше й можуть упоратися з великим навантаженням.\nФреймворки захищені від атак і допомагають уникнути помилок.\nСтворювати продукти на основі веб-фреймворків дешевше, ніж починати з нуля.\nНедоліки в роботі з фреймворками\nНа відміну від CMS, веб-фреймворки містять лише основні компоненти логіки, і для створення готового веб-сайту потрібно писати багато додаткового коду.\nЗ іншого боку, фреймворки як такі містять багато коду. Малоймовірно, що ви користуватиметеся абсолютно всіма доступними можливостями.\nФреймворк обмежує вашу свободу. Він диктує свої правила: угоди щодо іменування, структуру каталогів, накладає обмеження на функції, доступні у шаблонах сторінок тощо.\nОскільки фреймворки надають безліч функцій і висувають безліч вимог, їх вивчення часто потребує значного часу.\nPHP-фреймворки: головні особливості\nLaravel\nНайпопулярніший PHP-фреймворк у світі. Він використовується для створення досить складних веб-сайтів та веб-програм. До того ж, Laravel є одним із найзручніших у роботі PHP-фреймворків.\nВін характеризується високим рівнем безпеки та захистом від проникнення SQL-коду та крос-сайтового скриптингу.\nШаблонізатор цього фреймворку не лише дозволяє стандартизувати та повторно використовувати шаблони, але й дає розробнику свободу використовувати вбудовані засоби PHP.\nМодель, представлення та контролери чітко відокремлено одне від одного, що спрощує спільну роботу над проєктами.\nЗавдяки популярності Laravel існує безліч ресурсів, де можна знайти інформацію про цей веб-фреймворк. Це численні посібники, інструкції, обговорення, спільноти, форуми тощо.\nОфіційний сайт\nSymfony\nЦей фреймворк, який покладено в основу Laravel, дає змогу спростити роботу навіть над найскладнішими проєктами.\nВін забезпечує масштабування вже перших етапах роботи над продуктом.\nSymfony гнучкий у налаштуванні. Він інтегрується з поширеними CMS та сервісами, а також із поширеними JavaScript-фреймворками.\nОфіційний сайт\nCodeIgniter\n  Поєднує в собі простоту та продуктивність, забезпечуючи високу швидкість кодування.\nВін характеризується простим інтерфейсом, зручним не лише для професіоналів, а й для новачків.\nВідкритий вихідний код цього фреймворку є чистим і зрозумілим, що дозволяє уникати помилок під час розробки.\nCodeIgniter дозволяє тестувати проєкти на будь-якій стадії розробки.\nОфіційний сайт\nCakePHP\n\nЦей веб-фреймворк є еталоном надійності та стабільності. Він відрізняється гнучкою архітектурою з можливістю масштабування проєктів.\nТакож у ньому зручно реалізовано керування сеансами, що значно підвищує швидкість обробки даних.\nПотрібно відзначити й високу продуктивність CakePHP, завдяки якій швидше створюються шаблони та здійснюється маршрутизація.\nРішення й плагіни будуються одноманітно, завдяки чому покращується взаємодія елементів рішення між собою. Крім того, теми у цьому фреймворку реалізовано у вигляді плагінів, що значно спрощує розробку рішень.\nОфіційний сайт\nYii\nОсобливостями цього фреймворку є ефективність роботи з AJAX, покращене кешування й зручний набір інструментів для створення інтерфейсів користувача. Крім того, він вирізняється миттєвим завантаженням, чим перевершує інші фреймворки.\nYii інтегрується з jQuery, що спрощує роботу над проєктом і взаємодію між розробниками.\nПроте цей фреймворк характеризується високим порогом входу, і робота з ним вимагає належного досвіду.\nОфіційний сайт\nPython-фреймворки: головні особливості\nDjango\nНайвідоміший і дуже популярний фреймворк для Python. Забезпечує повну функціональність для створення веб-програм і веб-сайтів. Надає готовий інтерфейс адміністратора, коментарі, можливості керування користувачами.\nDjango пропонує зручну систему шаблонів з успадкуванням, убудовані можливості автентифікації, просту маршрутизацію та багато інших можливостей.\nЦей фреймворк працює з такими базами даних, як PostgreSQL, MySQL, SQLite та Oracle.\nМістить веб-сервер для стадії розробки.\nВ цілому, фреймворк простий для вивчення й використання та підходить для створення проєктів різного обсягу та призначення.\nОфіційний сайт\nFlask\nУ цьому мікрофреймворку реалізовано мінімальний набір базових функцій, але при цьому його можна розширювати.\nЗавдяки своїй простоті підходить для програмістів-початківців, які знайомляться з веб-фреймворками.\nFlask установлюється й налаштовується швидше за інші фреймворки. У ньому передбачено налагоджувач та сервер. Працює на двигуні Jinja2, але може взаємодіяти і з іншими.\nFlask використовується для вирішення конкретних завдань і не має широкого функціоналу.\nОфіційний сайт\nPyramid\nФуллстековий мінімалістичний веб-фреймворк із модульною архітектурою. Надає розробнику безліч функцій і дозволяє писати і малі, і великі програми. А завдяки модульності фреймворку можна легко замінювати компоненти.\nPyramid дає змогу створювати однофайлові програми. У ньому передбачено інтернаціоналізацію і підтримку сеансів. Можлива робота з кількома базами даних одночасно.\nФреймворк забезпечує стовідсоткове покриття коду тестуванням та надає гнучкі можливості налагодження. Панель для налагодження вбудовується у браузер.\nРозробники можуть скористатися підтримкою спільноти й детальною документацією.\nОфіційний сайт\nWeb2py\nЦей фреймворк не потрібно встановлювати й налаштовувати, на відміну від інших фреймворків для Python.\nWeb2py має власний швидкий багатопоточний веб-сервер, базу даних SQL та веб-інтерфейс. Цей фреймворк не залежить від стороннього ПЗ, але використовує сторонні інструменти. На базі одного екземпляра фреймворку можуть працювати декілька сайтів, які використовують різні бази даних.\nWeb2py забезпечено детальною документацією, макетами, плагінами, готовими прикладами програм та іншими корисними ресурсами.\nЦей веб-фреймворк працює з різними протоколами й підтримує всі платформи, на яких працює Python.\nWeb2py є фулстековим фреймворком, який забезпечує швидку розробку програм, що вирізняються високою швидкістю роботи, масштабованістю, безпекою та переносимістю.\nОфіційний сайт\nBottle\nBottle – це швидкий, простий і легкий мікрофреймворк. Він поширюється як один файл і залежить лише від стандартної бібліотеки Python.\nМаршрутизація в Bottle підтримує чисті й динамічні URL-адреси.\nШвидкий вбудований движок шаблонів підтримує шаблони mako, jinja2 та cheetah.\nУтиліти забезпечують зручність доступу до даних форм, завантажених файлів, cookie-файлів, заголовків та інших метаданих.\nВбудований HTTP-сервер для розробки підтримує такі сервери, як paste, bjoern, gae, cherrypy та інші сервери з використанням WSGI.\nОфіційний сайт\nJavaScript: фреймворки и библиотеки\njQuery\njQuery – це швидка та легка бібліотека JavaScript із безліччю функцій.\nВона значно спрощує обхід документа HTML та керування його елементами, а також обробку подій, анімацію та роботу з AJAX. Це забезпечується простим у використанні API, який працює з безліччю браузерів.\nОдин рядок коду на jQuery замінює кілька рядків коду JavaScript.\njQuery – крос-браузерна бібліотека. Вона сумісна з Chrome, Edge, Firefox, Internet Explorer, Safari, Android та iOS. Підтримує CSS3. Добре задокументована.\nПоєднуючи в собі багатосторонність і розширюваність, ця бібліотека змінила спосіб написання коду JavaScript для мільйонів людей.\nБібліотека jQuery проста у використанні. Проте її призначено для досвідчених JavaScript-програмістів. Без упевненого знання JavaScript може бути важко зрозуміти, що відбувається за лаштунками при виконанні певних функцій. Це викликає труднощі налагодження, коли виникають проблеми. Тому новачок може значно уповільнити роботу сайту лише одним рядком jQuery або ж у нього не вистачить знань, щоб відтворити код на чистих JavaScript та CSS.\nОфіційний сайт\nReact\nReact є і бібліотекою, і, у певному сенсі, веб-фреймворком. Він використовується для створення веб-інтерфейсів. Щоб створити інтерактивний інтерфейс, достатньо описати вигляд компонента в різних станах, а після змінення даних React автоматично виведе лише потрібні компоненти.\nReact базується на компонентах. Ви можете побудувати складний інтерфейс із створених вами окремих компонентів.\nReact дає змогу легко забезпечити реактивність. При зміні одного компонента змінюється все, що пов’язане з цією зміною.\nДозволяє розробляти односторінкові веб-програми та програми для мобільних пристроїв, а також багатосторінкові програми.\nОфіційний сайт\nVue.js\nЦе доступний, продуктивний і багатосторонній веб-фреймворк для створення веб-інтерфейсів.\nУ його основі – стандартні HTML, CSS і JavaScript з інтуїтивно зрозумілим API та якісною документацією світового рівня.\nУ Vue.js реалізовано система рендерингу, яка оптимізована для компілятора та характеризується справжньою реактивністю. Вона рідко потребує додаткової оптимізації вручну.\nVue.js масштабується від бібліотеки до повнофункціонального фреймворку. Його декларативна програмна модель на основі компонентів допомагає ефективно розробляти і прості, і складні інтерфейси користувача.\nДля цього фреймворку створено детальну документацію, а підвищити майстерність його використання можна за допомогою бібліотеки курсів.\nОфіційний сайт\nAngular\nКоли ви навчитеся створювати програми за допомогою Angular, ви зможете повторно використовувати свій код та компоненти, щоб створювати програми для будь-якого цільового розгортання: у вигляді веб-програм, мобільних веб-програм і програм для робочого столу.\nAngular забезпечує високу швидкість, яка збільшується за використання Web Workers та рендерингу на стороні сервера.\nЗавдяки простим декларативним шаблонам, можна швидко створювати компоненти. Мову шаблонів можна розширити за рахунок власних компонентів або широкого асортименту готових.\nAngular підтримується багатьма IDE й редакторами.\nТакі можливості фреймворку дають змогу сконцентруватися на створенні привабливих інтерфейсів, а не гаяти час на те, щоб змусити код працювати.\nОфіційний сайт\nBackbone.js\nBackbone.js задає структуру веб-програм, надаючи моделі з прив’язкою ключів до значень і підтримуючи події користувача, колекції з великим API, представлення з декларативною обробкою подій – і все це підключається до вашого API через RESTful JSON-інтерфейс.\nBackbone.js дає змогу створювати односторінкові веб-програми та їх фронтенд за допомогою функцій JavaScript.\nНаведемо перелік деяких із його переваг.\nАвтоматично оновлює HTML-код програми.\nНадає безкоштовну бібліотеку з відкритим кодом.\nДозволяє розробляти клієнтські мобільні та веб-програми з використанням чітко структурованого процесу.\nЧіткий, легкочитаний та добре задокументований.\nМоделі Backbone.js легко прив’язати до бекенду.\nДозволяє розробляти маленькі веб-програми за допомогою jQuery.\nФреймворк просто опанувати. На GitHub доступний його анотований вихідний код і набір онлайн-тестів, приклад програми, навчальні посібники, він користується великою підтримкою спільноти.\nОфіційний сайт\nВисновки\nВеб-фреймворки значно прискорюють та спрощують розробку веб-програм і сайтів. Вони реалізують серверну, клієнтську частину проєкту, або охоплюють обидві його частини. Деякі фреймворки є універсальними, а деякі дозволяють вирішувати конкретні завдання. Проте, незалежно від того, яким фреймворком ви користуєтеся, він дасть вам змогу зайнятися кодуванням бізнес-логіки програми, а не намагатися змусити код працювати.','2022-12-03 00:28:52','2022-12-03 00:28:52'),(195,'Команда chmod Linux та приклади зміни прав доступу','Сергей Бондаренко\nжурналист','Содержание\nЩо таке CHMОD?\nПараметри chmod\nЗміна прав за допомогою символьної нотації та чисел\nПризначення дозволів за допомогою chmod\nРекомендації для адміністрування\nРозширені дозволи\nВисновок\nПрава доступу до файлів і папок визначають рівень захищеності, тому мають велике значення в контексті безпеки. Сьогодні ми розберемося з тим, які види прав доступу існують, як встановлюються дозволи на Linux, а також навчимося використовувати команду chmod.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЩо таке CHMОD?\nПарадигма будь-якої операційної системи будується із сукупності правил, що регламентують порядок звернення до об’єктів інформації. Механізм дозволів Linux був винайдений ще 1970-х роках. У Unix-системах функція розмежування доступу реалізована у вигляді дев’яти бітів режиму. З її допомогою описується, власники яких облікових записів можуть читати вміст файлів, виконувати їх зміну (редагувати) і запускати файли.\nНабір цих дев’яти і трьох бітів, відповідальних за можливість запуску виконуваних файлів, складають код режиму доступу до файлу. Ці 12 бітів режиму записані у 16-бітове поле індексного дескриптора. Там же зберігаються чотири додаткові біти, які визначають тип файлу. Ці чотири біти не можуть бути змінені – вони прописуються відразу при створенні файлів. Команда chmod (скорочення від англійського change mode – змінити режим) дає можливість власнику файлу (або суперкористувачу) відредагувати вміст бітів режиму – змінити правила доступу до даних. Вона включена до серії стандартів POSIX, пакету GNU Core Utilities.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nКоманда chmod представлена такою конструкцією:\nchmod [параметри] задання_прав_доступу ім\'я_файлу\nІснують два варіанти опису прав доступу – символьний і за допомогою вісімкової системи позначення (використовуючи числа в діапазоні 0…7).\nПараметри chmod\nПараметри chmod:\n-c – відобразити відомості про будь-які зміни\n-f – не виводити на екран помилки\n-v – показати повну інформацію\n-R – використовувати рекурсивну обробку даних\n–help – відобразити документацію\n–version – відомості про версію\nКоли параметри не визначені, chmod змінює права доступу до даних на ті, що задані користувачем. У Unix є три основні групи користувачів, які можуть звертатися до властивостей безпеки, отримуючи доступ до даних і встановлюючи права:\nвласник даних (тобто той, хто їх створив)\nгрупа з користувачами, які входять до тієї ж групи, що і власник даних\nінші користувачі\nОсновні групи прийнято позначати першими літерами: u – user, g – group и o – other.\nПоділяють чотири основні рівні доступу, що призначаються файлам і директоріям:\nr – читання;\nw – запис;\nx – виконання;\ns – запуск від імені суперкористувача (додатковий);\nЗміна прав за допомогою символьної нотації та чисел\nРозглянемо приклад опису правил доступу до даних. Припустимо, ви є власником файла з ім’ям –  ім’я_файлу. Потрібно встановити такі права доступу:\nдля користувача user дозволено читання (read), запис (write) та можливість його запуску (execute);\nучасники певної групи (group) мають можливість читання файлу (read), і навіть його запуску (execute);\nінші користувачі (others) мають доступ лише на читання файла (read).\nУ цьому випадку слід використати команду виду:\nchmod u=rwx,g=rx,o=r ім\'я_файлу\nЗнак рівності = у цьому виразі означає строге визначення права доступу. У команді можна також використовувати знак + для додавання зазначених режимів до зазначених класів і знак – для видалення зазначених режимів із зазначених класів.\nЗверніть увагу – права доступу записуються у строгому порядку. Спочатку читання, потім запис, в кінці виконання. У вісімковому поданні виконувати адміністрування дещо зручніше, оскільки такий вид запису коротший за літерний опис прав доступу.\nПравам доступу для читання, запису та запуску файлу відповідають наступні числові значення: читання – чотири, запис – два, запуск – один, не встановлені права доступу – нуль. Число, що визначає дозвіл для користувача, складається із суми чисел, що вказують на певні права доступу (0, 1, 2, 4). Наприклад: 0 (0 + 0 + 0) – прав немає,  1 (0 + 0 + 1) – є права тільки на запуск, 2 (0 + 2 + 0) – дозволено лише запис, 3 (0 + 2 + 1) – є дозволи на запис та виконання, 4 (4 + 0 + 0) – є можливість лише читання даних і так далі. Нижче наводимо таблицю з описом атрибутів доступу до директорій та файлів, а також з їх позначенням.\n  OCT  Bin Mask Права доступу до файлу Права доступу до каталогу\n0 000 – – – Пpава відсутні Пpава відсутні\n1 001 – – x Атрибути запуску файлів Права доступу до каталогів. При цьому відсутні права на отримання списку файлів, а також їх створення, видалення та перейменування\n2 010 – w – Атрибути зaпису Пpaва відсутні\n3 011 – w x Атрибути запису та запуску Повні права доступу за винятком прав доступу до імен файлів\n4 100 r – – Доступ для читання Читання імен файлів\n5 101 r – x Доступ для читання та зaпуску Доступ для читання імен файлів, а також файлів і доступ до їх атрибутів. При цьому відсутні права на створення, видалення та перейменування файлів у каталозі\n6 110 r w – Атрибути читання та зaпису Тільки читання імен файлів\n7 111 r w x Повний доступ Повний доступ\n  Призначення дозволів за допомогою chmod\nПриклади керування правилами доступу за допомогою чисел:\nchmod 764 ім\'я_файлу\nЦифра 7 описує дозволи для власника файлу, цифра 6 – вказує на права доступу для групи і 4 – це права доступу для всіх інших користувачів. Відповідно, такий запис говорить про те, що власник файлу може читати, змінювати та запускати файл. Всі члени групи мають доступ для читання та внесення до файлу змін, однак запускати його не можуть. Інші користувачі мають право лише читати файл.\nchmod a=rwx ім\'я_файлу\nНаведений вище рядок змінює встановлені розширення файлу на повні права доступу для всіх.\nchmod u+x,g+w-x ім\'я_файлу\nТака команда розширює права доступу на запуск, тоді як користувачам групи забороняється запускати файл, але дозволяється вносити зміни. Атрибути доступу для інших користувачів залишаються незмінними.\nЩоб переглянути правила доступу до зазначеного файлу у вісімковому форматі запису, використовується команда stat:\nstat -c “%a” ім\'я_файлу 644\nТакий варіант вживання chmod дозволяє прибрати права доступу на запис для користувача «інші»:\nchmod o-w ім\'я_файлу\nЩоб користувач, який не є власником даних, міг скоригувати права на доступ – він повинен задати команду chmod із використанням sudo, скажімо:\nsudo chmod 644 highloadtoday.txt\nЦя команда застосовує правила для будь-яких даних у директорії /home/highload , а також у будь-якому файлі у вкладених директоріях:\nfind /home/highload -type f -exec chmod 644 {} \\;\nЦя команда рекурсивно застосовує правила доступу для будь-якої папки в каталозі /home/highload , а також для будь-яких вкладених підкаталогів:\nfind /home/highload -type d -exec chmod 755 {} \\;\nАналогічні дії можна виконати без команди find:\n chmod -R go=rX,u=rwX /home/highload \nРекомендації для адміністрування\nВаріант «chmod 777» категорично не рекомендується використовувати для визначення дозволів файлів та папок. Цей варіант означає, що дані будуть доступні для зміни, запуску та читання будь-яким користувачем, що є потенційною вразливістю та несе загрозу безпеці. Якщо виникають проблеми з керуванням доступом до веб-сервера, замість рекурсивної установки прав доступу 777, змініть власника файлу на користувача, який запустив програму, і призначте права доступу до файлу та дозволу для каталогу з 644 (-rw-r--r--) на 755 (drwxr-xr-x).\nУ ситуації, коли потрібно перепризначити власника файлу або директорії в Linux, використовується команда chown. Формат цієї команди дуже схожий на chmod:\nchown имя_пользователя параметры имя__файла\nНаприклад, щоб поміняти власника директорії /home/highload на користувача sergii, необхідно задіяти команду:\nchown sergii /home/highload \nЯк і при використанні команди chmod, для рекурсивної обробки всіх вкладених каталогів вказується параметр -R:\nchown -R sergii /home/highload \nРозширені дозволи\nКрім основних прав доступу, в LinuxOS є розширені права. До них відносяться дозвіл на надання ідентифікатора користувача SUID, ідентифікатор групи SGID, а також sticky bit. SUID відповідає числове значення 4, SGID – це 2, а sticky bit визначається числовим значенням 1.\nБіт зміни ідентифікатора користувача SUID необхідний, коли потрібно змінити поточний userID на ідентифікатор власника файлу. При цьому користувач зможе запустити файл із правами власника цього файлу. Біт зміни айді групи SGID схожий на SUID, але визначає не права користувача файлу, а групи – власника файла. Будь-які файли, що створюються в каталозі з призначеним SGID, отримуватимуть ідентифікатор групи – власника каталогу, а не власника файлу. Папки, що створюються в директорії з призначеним SGID, будуть успадковувати його від батьківської директорії.\nДозвіл sticky bit застосовується проти випадкового знищення даних у ситуації коли кілька користувачів мають права для запису в одну і ту ж директорію. Після використання sticky bit, користувач може стерти файл тільки за умови, що він є власником файлу або директорії з файлом. sticky bit призначається для каталогу /tmp, а також будь-яких каталогів загальних груп.\nВисновок\nМи розібралися з базовими принципами встановлення дозволів доступу до даних у Unix-системах. Для закріплення навичок рекомендуємо вам переглянути відео, в якому розповідається як влаштована система прав та як нею керувати.','2022-12-03 00:29:09','2022-12-03 00:29:09'),(196,'Що таке протокол SSH і як його використовувати?','Сергей Бондаренко\nжурналист','Содержание\nЩо таке SSH\nІсторія створення протоколу\nЯк протокол працює\nТунелювання\nSSH та ключі\nГенерація ключів\nВисновок\nЩо таке SSH\nХоча протокол SSH і розшифровується як Secure Shell, але насправді він не є шеллом. SSH – це протокол безпечного доступу до віддалених систем. В основному SSH використовується для доступу до серверів, для віддаленого доступу до консолі, до терміналу, до командного інтерпретатора віддаленої машини (скоріше за все ПК під керуванням Linux, але може бути інше мережеве обладнання або навіть пристрій з Windows). SSH застосовується різними способами, наприклад через цей протокол можна монтувати різні віддалені файлові системи, прокидати порти і т.д. SSH – це де-факто стандарт доступу до віддалених Linux-машин.\nІсторія створення протоколу\nSSH була розроблена ще далекого 1995 року фінським інженером Тату Юльоненом з Технологічного університету в Гельсінкі.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nТату Юльєнен\nВін працював над створенням механізму захисту, який служив би альтернативою TELNET, FTP та rsh, які не могли на той час гарантувати безпечну автентифікацію користувача в мережі (для написання першої версії використовувалася бібліотека libgmp). Тільки до кінця 1995 року загальна кількість користувачів SSH-1 зросла вже до двадцяти тисяч у п’ятдесяти країнах, а до 2000 року ця кількість збільшилася до двох мільйонів. 2006 року протокол пройшов оновлення, а його версія SSH-2 стала підтримувати обмін ключами Діффі-Хеллмана (покращена захищеність), перевірка відбувалася за допомогою MAC-підписів. Друга версія мала сумісність із SSH-1. Протокол SSH-2 міг запускати будь-яку кількість сеансів оболонки через одне з’єднання SSH.\nНа даний момент існують дві реалізації SSH, причому практично з однаковим набором команд: приватна комерційна і безкоштовна вільна OpenSSH. Переважна кількість комп’ютерів Інтернету використовує саме OpenSSH. Комерційна реалізація протоколу створюється SSH Communications Security, і також безкоштовна для некомерційного використання. Перша версія протоколу вже давно не підтримується, через велику кількість виявлених у ній уразливостей.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nЯк протокол працює\nЦей протокол використовує клієнт-серверну архітектуру, тому SSH складається з двох частин – клієнтської та серверної. Звичайний SSH-сервер управляється клієнтською частиною, приймаючи вхідні підключення по 22 порту (за замовчуванням). Клієнтська частина може бути реалізована під різні платформи: десктопні, мобільні, серверні та ін. На сервері, до якого ви підключаєтеся, має працювати daemon sshd.\nDaemon SSH\nДля підключення SSH необхідно виконати в терміналі команду\nssh username@remote_host -p port\nНаприклад, для підключення до сервера 51.306.148.242 в обліковий запис serge потрібно ввести\nssh serge@51.306.148.242\nВ данному прикладі порт не вказуємо, він береться за замовчуванням стандартний – 22.\nТунелювання\nSSH-з’єднання може забезпечувати тунелювання даних, наприклад, для пересилання файлів. Особливість цієї функції полягає в тому, що незашифрований трафік будь-якого протоколу шифрується з одного боку SSH-тунелю, а розшифровується з іншого боку з’єднання. З практичної точки зору це може бути реалізовано або за допомогою Socks-проксі, або через через програми, що підтримують SSH-тунель, або через VPN-тунель. Якщо програма працює з одним певним сервером, можна налаштувати SSH-клієнт таким чином, щоб він пропускав через SSH-тунель TCP-з’єднання, що приходять на певний TCP-порт машини, на якій запущено SSH-клієнт. Наприклад, для клієнтів Jabber використовується порт 443. Так, щоб налаштувати підключення до сервера Jabber через SSH-тунелювання, SSH-клієнт налаштовується на перенаправлення підключень з будь-якого порту локальної машини (наприклад, з порту 4430) на віддалений сервер (наприклад, jabber.example .com та порт 443):\n$ ssh -L 4430:jabber.example.com:443 будь_який_хост\n  Головний плюс SSH – у його безпеці та поширеності. Цей протокол можна знайти практично на будь-якій машині з Linux. Якщо ви встановили, скажімо, стандартну Ubuntu, там вже буде встановлений SSH —  ваш основний спосіб спілкування з цією машиною, будь то віртуальна машина чи фізичне залізо. На будь-якому Linux, як правило, вже встановлено клієнт SSH «з коробки», відповідно ви вибираєте самі яким командним інтерпретатором користуватися і як це виглядатиме зовні. Якщо використовувати комп’ютер під керуванням MacOS, там можна використовувати для клієнта SSH стандартний UNIX Terminal або одну з численних надбудов. Так, наприклад, можна порекомендувати використовувати для протоколу SSH програму iTerm2.\n  iTerm2 для MacOS\nДля Windows є кілька клієнтів:\nPutty (https://www.putty.org/) – маленька, легка безкоштовна програма\nXshell (https://www.netsarang.com/en/xshell/) – платний клієнт (проте, вільний для некомерційного використання), який розрахований на більш серйозне використання. Цю програму можна рекомендувати тим, хто працює з великою кількістю серверів (скажімо, більше десяти).\nXshell\nOpenSSH – вбудований клієнт, який з’явився у Windows 10.\nCygwin (https://cygwin.com/) – ще один клієнт під Windows, головна особливість якого полягає у тому, що він підтримує команди Linux. Наприклад, у цій програмі SSL-сертифікати створюються так само, як і в Linux. Встановивши цю програму ви можете використовувати SSH зі звичайного командного рядка, через Power Shell та ін.\nІнтерфейс Pytty\nВажливим елементом безпеки SSH є генерація унікального відбитка fingerprint при кожній установці Open SSH сервера. Це дозволяє ідентифікувати сервер та захиститися від його заміни. Наприклад, коли сервер фізично вимкнений, хтось може взяти його IP-адресу, прослухати всі підключення і отримати всі паролі. У цьому ж випадку ви отримуєте попередження про те, що автентифікація fingerprint порушена. Важливим елементом безпеки SSH є генерація унікального відбитка fingerprint при кожній установці Open SSH сервера. Це дозволяє ідентифікувати сервер та захиститися від його заміни. Наприклад, коли фізично сервер вимкнений, хтось може взяти його IP-адресу, прослухати всі підключення і отримати всі паролі. У цьому ж випадку ви отримуєте попередження про те, що автентифікація fingerprint порушена.\nSSH та ключі\nДля максимальної безпеки зазвичай прийнято відмовлятися від паролів та використовувати практику ключів. Її суть полягає в тому, що генерується два ключі, один із яких є приватним, він зберігається лише у вас, а другий ключ – публічний. Оскільки другий ключ не становить цінності без першої частини, його можна публікувати та передавати. Якщо хтось хоче зашифрувати дані, він використовує публічний ключ. При цьому навіть той, хто зашифрував інформацію, відкрити її без приватного ключа не зможе. Також це використовується і у зворотньому напрямі – для гарантування цифрового підпису. Людина може зашифрувати дані, використовуючи свій приватний ключ – будь-який користувач зможе розшифрувати дані, користуючись публічним ключем. Таким чином можна переконатися, що відправник секретної інформації володіє другою частиною ключа, що гарантує цифровий підпис. \nВикористання ключів має низку переваг, пов’язаних з безпекою. Насамперед їх досить важко зламати. При достатній довжині ключа зламати його методом перебору (атака методом брутфорс) або методом підбору за словником – завдання практично нездійсненне.\nПо-друге, під час використання ключів на сервері не зберігається жодної приватної інформації. При використанні пароля, наприклад, на сервері залишається парольний хеш, який, у разі доступу до зловмисників, є потенційною загрозою безпеці.\nКрім того, використання ключів дає низку додаткових переваг. Наприклад, у звичайному випадку, коли створюється обліковий запис на сервері, генерується тимчасовий пароль, який необхідно змінювати при першій авторизації. Відповідно цей тимчасовий пароль потрібно якось передавати, що з міркувань безпеки є не дуже добре. З ключами все набагато простіше – ви передаєте свій публічний ключ, його прописують на потрібні сервери. При цьому є можливість призначити кілька ключів одному користувачеві. Це набагато зручніше та безпечніше, ніж при використанні паролів.\nТак працюють ключі SSH\nГенерація ключів\nПроцедура генерації пари ключів є досить простою. Її можна виконати за допомогою консольної команди ssh-keygen, яку підтримують усі SSH-клієнти.\nssh-keygen -t rsa\nЗгенеровані ключі будуть збережені у файлах  ~/.ssh/id_rsa.pub та ~/.ssh/id_rsa.\nОднак, у нашому прикладі ми використовуємо програму PuTTY Key Generator, яка використовує свій формат зберігання приватного ключа (в разі необхідності він легко конвертується). Вказавши внизу, у правому нижньому куті вікна, довжину ключа, а також алгоритм шифрування, натискаємо Generate та чекаємо, паралельно рухаючи мишею, щоб створити «випадковість» для ключа. Публічний ключ відображається одразу, його можна копіювати через буфер обміну.\nГенерація ключа в Putty\nДля того, щоб отримати приватний ключ, ми спочатку повинні ввести пароль (дана процедура не є обов’язковою, але рекомендується з метою безпеки). До кожного ключа можна призначити свій коментар, наприклад, вказати ім’я користувача, щоб було зрозуміло чий він. Тепер нам потрібно прописати наш публічний ключ на сервер.\nНа сервері необхідно переміститися в домашню папку користувача та створити там папку .SSH:\nujin@ubuntu:~$ mkdir .ssh\nПісля того, як папка буде створена, необхідно встановити права тільки на нашого користувача, щоб інші користувачі не могли переглянути наші ключі:\nujin@ubuntu:~$ chmod 700 .ssh\nujin@ubuntu:~$ vim .ssh/autorized_keys\n  Після чого копіюємо вміст ключа через буфер обміну. Потім ми маємо виправити права на читання створеного файлу:\nujin@ubuntu:~$ chmod 600 .ssh/autorized_keys\nТепер машина готова до прийому нашого приватного ключа як механізму авторизації.\nВисновок\nОсновна перевага SSH – простота, безпека та універсальність віддаленого доступу. У той час, як графічний інтерфейс автоматизувати досить проблематично, з віддаленим командним рядком це зробити досить просто. Завдяки використанню ключів протокол надійно захищає дані, забезпечуючи високий рівень безпеки. Для тих, кому цікава дана тема, рекомендуємо подивитися відео нижче в якому розповідається, як налаштувати доступ до сайту по SSH і працювати з командного рядка https://youtu.be/Ms-xEJzZahk','2022-12-03 00:29:14','2022-12-03 00:29:14'),(197,'TCP/IP – що це таке і як працює','Сергей Бондаренко\nжурналист','Содержание\nЩо таке протокол\nПередісторія виникнення протоколу IP\nМережева модель та рівні взаємодії\nПрикладний рівень у TCP/IP\nЯк відбувається передача інформації\n Работа транспортного рівня у TCP/IP\nНедоліки та переваги TCP/IP\nВисновок\nСьогодні ми розберемося в тому, що таке TCP/IP, як функціонує цей стек протоколів, розглянемо його переваги та недоліки.\nЩо таке протокол\nПочнемо з найпростішого. Вся сучасна інфраструктура оплутана нескінченним числом мереж, що об’єднують сервери, лептопи, маршрутизатори, смартфони, десктопи, камери стеження та інше обладнання. Всі ці пристрої обмінюються між собою даними через мережі. Щоб один пристрій міг передати інформацію іншому пристрою, вони повинні діяти спільно. Два пристрої зобов’язані якимось чином розуміти, як встановлювати між собою сесію, які параметри передачі даних використовувати, як визначати і що робити у разі помилок, як завершувати передачу і т.д. Іншими словами, потрібен певний алгоритм, певний набір правил. Цей набір правил і називається протокол.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПередісторія виникнення протоколу IP\nУ далекому 1969 році в США підрозділ Міністерства оборони, який називався DARPA, розробила прототип сучасного інтернету – мережу під назвою Arpanet. Спочатку це були об’єднані чотири обчислювальні модулі, потім ще 11. Мережа поступово росла і розвивалася, включаючи вже термінали у Великій Британії, а також Норвегії.\nТак, якщо 1977 року Arpanet складалася з усього трохи більше сотні хостів, то вже 1983 року це число зросло до 4 тисяч. Починаючи з 1983 року, вона стала першою у світі мережею, в якій була реалізована маршрутизація пакетів даних.\nПротоколом маршрутизації для роботи цієї мережі став протокол IP – один із найважливіших протоколів передачі даних в Інтернеті сьогодні.\nМережева модель та рівні взаємодії\nОскільки варіантів комп’ютерних мереж може бути нескінченне число, щоб уникнути плутанини були розроблені мережеві моделі, основною з яких стала OSI (The Open Systems Interconnection model).\nВона визначала основні правила та вимоги до мережевих протоколів. Більшість алгоритмів зв’язку, що застосовуються сьогодні, ґрунтуються на стандарті OSI, що визначає рівні взаємодії систем. Модель передбачає сім варіантів таких взаємодій:\nПрикладний рівень\nСеансовий рівень\nРівень представлення\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nТранспортний рівень\nМережевий рівень\nКанальний рівень\nФізичний рівень\n  Група протоколів за певними рівнями називається стеком протоколів. Сучасний Інтернет побудований на стеку протоколів TCP/IP. Як очевидно з назви стека TCP/IP – він складається із двох частин, протоколу TCP і протоколу IP. Забігаючи наперед —  IP-протокол вирішує питання з адресацією, тоді як TCP – реалізує трансфер даних і стежить, щоб клієнт точно отримав свої байти. Цей стек використовує чотири рівні з перерахованих вище:\nПрикладний рівень\nТранспортний рівень\nМережевий рівень\nКанальний рівень\nПрикладний рівень у TCP/IP\nПрикладний рівень відповідає за працездатність усіляких мережевих додатків. Такі програми можуть використовувати свої персональні протоколи обміну даними. Це можуть бути браузери, що функціонують через HTTP, клієнти для завантаження по ftp, програми для роботи з електронною поштою, SMTP, SSH (надійна комунікація з хостом), DNS (співвідношення IP-адрес і символьних імен) та ін.\nЯк відбувається передача інформації\nТрансфер пакетів від одного мережного вузла іншому забезпечує протокол IP – протокол мережного рівня. Щоб дані перейшли від хоста-відправника до хоста-отримувача, необхідно повідомити IP-адресу одержувача та відправника, а також вказати номер порту. Поєднання IP-адреси та номера порту за яким здійснюється передача даних називають сокетом. Для спрощення стандартів прийнято використовувати певні порти в залежності від функціонального призначення програми. Приміром, поштовий SMTP-сервер слухає 25 порт, POP3-сервер налаштований на 110 порт тощо. Більшість додатків на ПК є клієнтами та номери портів для них виділяються динамічно операційною системою. Серверні порти мають номер до 1024, клієнтські порти йдуть із більш великим значенням. Скажімо, сокет при зверненні до сервера порт HTTP може бути представлений як: 194.106.118.30:80. Відповідь у цьому випадку надходитиме на сокет виду aaa.bbb.ccc.ddd:xxxxx.\nЩоб мати можливість звертатися до того чи іншого мережного інтерфейсу, протоколом застосовуються IP-адреси, що відповідають одній із двох версій протоколу: IPv4 та IPv6. Для версії IPv4 використовуються 32-бітові адреси по 4 октети (вісім позицій під нуль або одиницю). Завдяки IP-адресам, що закріплені за пакетами даних, мережа визначає, з якого вузла той чи інший пакет надійшов і до якого хосту його слід відправити. Застосовувати довгі адресні записи з тридцяти двох нулів та одиниць не дуже зручно, тому IP-адресу вирішили вказувати у десятковій системі. Оскільки адресний простір протоколу IPv4 обмежено 4 294 967 296 (дві ступеня 32) адресами, було розроблено оновлений варіант протоколу – IPv6, у якому використовується довжина адреси 128 біт.\nДля зручності адресації замість числових значень використовується символьно-цифрове ім’я хоста. Щоб перетворити IP-адресу на доменне ім’я застосовується сервіс доменних імен DNS (Domain Name Server). DNS моніторить 53-й порт UDP (рідше – TCP).\nГлобальна мережа складається з багатьох з’єднаних локальних мереж. Ця особливість вплинула на запис IP-адреси: вона включає як дані про адресу мережі, так і інформацію про адресу хоста в цій мережі. Щоб можна було визначити, де закінчується адреса мережі та починається адреса комп’ютера в цій мережі, вигадали маску підмережі. Це свого роду інструкція, яка говорить про те, як слід читати IP-адресу, де межа між адресою мережі та адресою хоста.\n Работа транспортного рівня у TCP/IP\nЦентральним протоколом транспортного рівня TCP/IP є TCP (Transmission Control Protocol), крім нього ще використовуються два допоміжні протоколи – UDP (User Datagram Protocol ) і SCTP. На відміну від UDP, в якому передача датаграм відбувається без встановлення з’єднання, механізм передачі даних через TCP гарантує точне пересилання даних. З цієї причини, на практиці частіше використовується TCP – він перевіряє передані пакети з даними та при виявленні помилок, перезапитує пакети по новій. Крім того, протокол TCP стежить за правильною послідовністю переданих пакетів. Передача даних за допомогою TCP починається з так званого “рукостискання” – процедури встановлення з’єднання, яке виконується за три кроки.\nКлієнт надсилає одержувачу фрагмент даних з номером послідовності та прапором SYN. Сервер виділяє пам’ять для обробки завдання та повертає відправнику фрагмент з номером послідовності та прапорами SYN та ACK, після чого перемикається в режим SYN-RECEIVED. У разі збою в роботі сервер сигналізує клієнту про проблему, посилаючи сегмент із прапором RST (отримавши відмову, хост-відправник припиняє спроби встановити з’єднання).\nОтримавши прапор SYN, клієнт передає сегмент із прапором ACK, і якщо цей прапор вузол вже отримав, включається режим ESTABLISHED. Якщо за десять секунд сервер не відповідає, клієнт повторює свій запит. Коли сервер із режимом SYN-RECEIVED отримує пакет із прапором ACK, він включає режим ESTABLISHED. Не дочекавшись відповіді, після деякого часу він вимикає сокет, включаючи режим CLOSED.\nЗавершується сесія між двома хостами за три кроки:\nКлієнт шле хосту прапор FIN\nВузол повертає прапори відповіді ACK, FIN, що свідчить про закінчення зв’язку.\nКлієнт зупиняє з’єднання, після чого надсилає хосту сигнал про завершення сесії у вигляді прапора ACK.\nСфера застосування UDP обмежується програмами з потоковими даними – IPTV, Voice over IP, онлайн-іграх і т.д.\nУ цих додатках цифрова достовірність передачі даних не критична, тому нею жертвують (при необхідності функція перевірки достовірності даних може бути перекладена сама програма).\nДля контролю мережевих з’єднань можна використовувати набір команд, введених у терміналі. Наприклад, за допомогою команди iptrace (UNIX) виконується трасування (аналіз, відстеження) пакетів на рівні мережного інтерфейсу. Виклик даних про трасування даних у шістнадцятковому та текстовому форматах здійснюється за допомогою команди ipreport, а команда trpt виконає трасування пакетів TCP на транспортному рівні, показавши їх порядок прямування, час і стан з’єднання TCP.\nЩоб переглянути на комп’ютері під керуванням Windows всі встановлені з’єднання, необхідно відкрити термінал (cmd) та ввести команду netstat -an. У вікні командного рядка буде виведено список TCP та UDP коннектів, із зазначенням адреса та поточного стану між хостами.\nНедоліки та переваги TCP/IP\nЧому саме цей стек став таким популярним? По-перше, завдяки цілком загальнодоступній специфікації. Цей стек протоколів дозволяє реалізувати широкий спектр сервісних функцій від спільного використання принтерів і файлів до функцій віддаленого доступу до ОС. TCP/IP – це добре масштабований стек надійних протоколів, на базі якого можна легко налаштовувати роботу додатків і керувати маршрутизацією в глобальній або локальній мережі.\nОднак, у стека є і мінуси. Із недоліків TCP/IP можна виділити високе навантаження на операційну систему за великої кількості з’єднань. Крім того, стек протоколів передбачає великий час на встановлення коннекта, що дуже помітно при підключенні декількох TCP-з’єднань. Також для TCP/IP характерна тривала реакція на втрату пакета.\nВисновок\nТепер ви знаєте основні принципи роботи TCP/IP, а також маєте уявлення про переваги та недоліки даної моделі. Якщо у вас залишилися питання, ви також можете почитати нашу статтю про маски підмережі, де ми докладніше розглянули це питання. Також ми рекомендуємо вам переглянути відео, в якому детально розібрано, як працюють мережі TCP/IP та веб-додатки.','2022-12-03 00:29:16','2022-12-03 00:29:16'),(198,'СУБД: які бувають, як вибрати','Сергей Бондаренко\nжурналист','Содержание\nЩо таке система управління базами даних (СУБД)\nРізновиди СУБД\nВимоги до СУБД\nРекомендації щодо вибору СУБД\nП’ять найпоширеніших СУБД \nВисновок \nЩо таке система управління базами даних (СУБД)\nБаза даних – це масив інформації, до якої ми регулярно звертаємося і навіть не помічаємо цього. Наприклад, ви авторизуєтеся у соціальній мережі або просто завантажуєте картинку на сайт. У першому випадку використовується база даних облікових записів всіх користувачів мережі, у другому – база даних, де зберігається інформація про файли на сервері. Інакше кажучи, база даних – це впорядкований набір інформації, по який можна звертатися за необхідності, доповнюючи і редагуючи його структуру.\nРізновиди СУБД\nНабір даних зазвичай підпорядковується певним правилам. Наприклад, якщо ви видаляєте з бази даних користувача, разом з його ім’ям повинні бути видалені всі параметри – адреса електронної пошти, телефонний номер, інформація про рік народження і т.д. За таким принципом працюють реляційні бази даних.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nРеляційна база даних – це інформація, де дані впорядковані, тобто пов’язані між собою певними особливими відносинами. По суті, така база є таблицею, в якій розміщені всі дані. Фізично бази даних – це файли у спеціальному форматі. Для роботи з цими файлами використовується спеціальне програмне забезпечення. Цей софт називається СУБД – система управління базами даних. Оскільки СУБД нерозривно пов’язана з базами даних, ці терміни часто використовуються як синоніми, що, строго кажучи, некоректно.\nБаза даних може належати онлайновому сховищу (наприклад, використовуватися для впорядкування інформації на сайті) або програмі (скажімо, для каталогізації електронних книг). У будь-якому випадку звернення до бази даних відбувається через програмний інтерфейс (API), який приймає команди користувача (або додатки) та спрямовує їх до СУБД.\nІснує величезна кількість СУБД, платних та безкоштовних, що відрізняються між собою за функціональністю.\nКрім реляційних СУБД, розрізняють такі типи, залежно від моделі БД:\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nІєрархічні – у яких інформація у базі даних зберігається як об’єкти, що об’єднані в деревоподібну структуру. У порівнянні з іншими типами СУБД, ієрархічна СУБД має відносно невеликий арсенал операцій з маніпулювання даними (втім, цього достатньо для вирішення більшості завдань).\n\nМережеві – СУБД, які як і ієрархічні мають деревоподібну структуру, але відрізняються від ієрархічних СУБД тим, що будь-яка запис-нащадок може мати відразу кілька предків. Складність побудови такої БД компенсується добрими показниками швидкістю доступу та низькою витратою оперативної пам’яті.\n\nОбъектно-ориентированные (объектные) СУБД – базы данных, где каждая запись рассматривается как отдельный объект с некоторым набором свойств, взаимодействующий с другими объектами БД. В языке запросов реализована парадигма ООП – объекты, классы, наследование.\nОбъектно-реляционные СУБД – в которых объединены свойства реляционных и объектных СУБД.\nПЗ для роботи з базами даних може бути локальним або розподіленим. Локальні СУБД розміщують усі свої компоненти на одному комп’ютері, розподілені СУБД можуть розташовуватися на кількох робочих станціях.\nДля спілкування з базою даних використовується спеціальний синтаксис, який називається структурованою мовою запитів SQL (Structured Query Language). Для нереляційних БД застосовується інший синтаксис, що називається NoSQL. Такі СУБД застосовуються для зберігання великих даних або БД з великою кількістю внутрішніх зв’язків. Іноді замість стандартної мови запитів використовується якась мова програмування, наприклад JavaScript.\nВимоги до СУБД\nБув час, коли цифрові дані зберігали у форматі перфокарт – паперових карток з дірочками. Для їхнього зчитування була потрібна спеціальна машина, яка «розуміла», що означає послідовність дірочок у папері. Поява комп’ютерних баз даних, а також швидкісних цифрових носіїв значно прискорила процес зчитування та запису нової інформації.\n\nДо самих СУБД було сформовано низку вимог, яким обов’язково має відповідати будь-яка сучасна СУБД.\nНесуперечність даних. Інформація в БД має бути цілісною, помилок не має бути. Пов’язані дані мають адекватно змінюватися. Наприклад, користувач робить замовлення товару в магазині – у БД має відбутися резервування та оформлення замовлення, а загальна кількість придбаного товару на складі має бути зменшена на одиницю.\nДані мають бути актуальними.\nКористувач повинен мати можливість зробити запит і отримати швидкий доступ до будь-якої частини БД.\nДані мають бути позбавлені надмірності.\nІнформація в СУБД має бути максимально захищена від несанкціонованого доступу, зміни чи видалення.\nУ разі технічного збою СУБД повинна мати можливість відновлення вихідної інформації із резервної копії або за допомогою іншої технології корекції помилок. СУБД має вести системний журнал із усіма змінами, які вносяться до БД. Це дозволить виправити помилки і відкотити БД до робочої версії, наприклад, у випадку вірусної атаки.\nРекомендації щодо вибору СУБД\nРеляційні СУБД (Oracle, MySQL, Microsoft SQL Server, PostgreSQL) універсальні і підходять майже будь-яких завдань, коли потрібно обробляти дуже великий потік запитів і зберігати занадто великі обсяги даних. Коли ж запитів багато, виникає проблема масштабування, з якою реляційні СУБД поки що нормально впоратися не можуть.\nНайпростіша СУБД передбачає використання парадигми «ключ-значення» (наприклад, Redis та Memcached). Зазвичай такі СУБД застосовують коли треба зробити кешування. Окремі СУБД даного типу дозволяють перенести роботу повністю в пам’ять і задати час існування записів (потім вони автоматично будуть видалені). Для баз даних із великим числом і складними структурами сутностей, що зберігаються, ці СУБД незручні.\nЯкщо необхідно зберігати зв’язки між вузлами у графовій структурі БД (наприклад, у соціальній мережі для опису спільних інтересів чи родинних зв’язків), рекомендуємо звернути увагу на такі СУБД як InfiniteGraph, Neo4j, Amazon Neptune та InfoGrid. Дане ПЗ дозволить вам швидко побудувати систему оцінок та рекомендацій.\nУ колонкових СУБД використовується особливий спосіб запису інформації, завдяки чому змінювати структуру таблиць можна дуже швидко. Цей тип БД розглядає стовпчик як окрему таблицю. Якщо в звичайній реляційній СУБД зчитування даних відбувається по всьому рядку, доки не буде досягнуто потрібної колонки, в колонковій СУБД зчитується відразу потрібний стовпець. З переваг колонкових СУБД можна виділити добру компресію данних, що помітно зменшує об’єм, що займає БД. Особливістю колонкових баз та колонкових індексів є те, що для них неможлива операція проміжної вставки або апдейта. Часто ці бази не передбачають оператора UPDATE, тільки DELETE та INSERT. Застосовувати такі колонкові СУБД як SAP IQ, Vertica, ClickHouse, Google BigQuery, InfoBright для простої вибірки зі статичними параметрами, де зберігається менше ста мільйонів рядків, немає сенсу.\nДокументна СУБД оптимальна в тих випадках, коли об’єкти передбачається поміщати, наприклад, у якесь сховище станів або коли записуються складні структури зі списками та словниками (наприклад, якщо ви працюєте з форматом JSON). А от для формування звітності та для реалізації транзакційної моделі документна СУБД це не найкращий варіант.\nП’ять найпоширеніших СУБД \nУ цьому розділі ми обговоримо найпоширеніші СУБД, які використовуються у різних системах.\nMySQL\nMySQL – це одна з найпопулярніших реляційних баз даних. Цю СУБД часто включають до складу серверів. MySQL працює на всіх основних платформах, включаючи Red Hat, Fedora, Ubuntu, Debian, Solaris, Microsoft Windows та Apple MacOS. Реалізована підтримка кількох процесорів та багатопоточність. Через API з базами даних можна працювати за допомогою популярних мов програмування (C, C++, C#, PHP, Java, Ruby, Python та Perl). Бібліотека функцій SQL реалізується через високооптимізовану бібліотеку класів, завдяки чому досягається висока швидкість роботи і відсутні витоки пам’яті. У MySQL реалізовано підтримку Novell Cluster.\nНа жаль, MySQL не часто оновлюється та не підтримує гаряче резервне копіювання. MySQL часто критикують за недостатню надійність, а, крім того, вона має проблеми з юнікодом.\nOracle RDBMS (Oracle Database)\nЦя СУБД ідеально підходить для великих організацій, які обробляють величезну кількість даних.\nВона випускається у різних редакціях, від Enterprise Edition до Lite – для мобільних пристроїв. Безкоштовна версія Express Edition (XE) обмежена оперативною пам’яттю (1 ГБ), а також лише одним процесором, максимальний об’єм БД для безкоштовної редакції – 11 ГБ. Oracle СУБД забезпечує автономне адміністрування, у її складі ви знайдете інструменти управління базами даних «на всі випадки життя». Кожна транзакція проходить ізольовано, що дозволяє досягти високого рівня безпеки.\nPostgreSQL\nДосить поширена СУБД PostgreSQL, яка є безкоштовною та об’єктно-реляційною. Незважаючи на те, що СУБД є повністю безкоштовним ПЗ, за її впровадження, модифікацію та підтримку доведеться все же платити додатково.\n PostgreSQL може працювати з базами даних будь-якого розміру та з будь-якою кількістю записів та індексів у таблиці. СУБД відрізняє розширюваність – можна додати власні перетворення типів, домени, індекси, оператори, процедурні мови. Підтримується завантаження C-сумісних модулів. У PostgreSQL реалізовані складні та надійні механізми транзакцій та реплікації. PostgreSQL підтримує бітові рядки та мережеві адреси, масиви даних, у тому числі багатовимірні, композитні типи та інші складні структури. У СУБД є підтримка XML, JSON і NoSQL-баз.\nMicrosoft SQL Server\nДосить популярна СУБД від Microsoft, яка орієнтована на платформу Windows.\nДля управління БД використовується процедурне розширення мови SQL Transact-SQL. Воно додає до основного функціоналу мови запитів керуючі оператори, дає можливість працювати з локальними та глобальними змінними, а також розширює можливості роботи з рядками, датою, математикою та ін.\nSQL Server добре масштабується, може розгортатися в настільних системах, у центрах обробки даних, а також у «хмарі» (у 32-бітному та 64-бітному варіанті). Підтримується принцип самообслуговування, СУБД оптимізована під екосистеми хмарних обчислень.\nMongoDB\nMongoDB  – це одна з найпопулярніших СУБД із відкритим вихідним кодом типу NoSQL. Зазвичай MongoDB вибирають, коли є необхідність у базі даних, що масштабується. Серед клієнтів, які використовують MongoDB такі великі організації, як IBM, Twitter, Zendesk, Forbes, Facebook, Google.\nДані зберігаються у вигляді колекцій та документів, у форматі BSON (бінарні JSON-подібні документи). На відміну від реляційних БД, тут немає складних табличних сполук типу JOIN. Є підтримка індексів, є можливість роботи з кількома репліками на різних вузлах. Підтримується автоматична фрагментація. Для роботи з БД можна використовувати власну оболонку MongoDB Compass або один із альтернативних графічних інтерфейсів сторонніх розробників. \nСУБД підходить для реалізації проектів, пов’язаних з електронною комерцією, системами управління контентом, реєстрацією та зберіганням даних про події, мобільними програмами та ін.\nВисновок \nСистема управління базами даних має дуже велике значення. Від неї залежить функціональність величезної кількості додатків та веб-сервісів – від майданчиків для інтернет-маркетингу до синхронізації медичних даних та сервісів продажу квитків.\nВеликі обсяги інформації, що зберігається, представляють особливий інтерес для маркетологів і аналітиків, які можуть виконувати прогнозування використовуючи складні статистичні методи, штучний інтелект і машинне навчання. Спеціальні інженери (data-scientist) можуть визначати тенденції попиту товар, формувати тарифні плани, затребувані покупцем тощо. Усе це робиться з допомогою масивів інформації, яка керується СУБД. Обсяг аналізованої інформації «біг дата» може досягати сотень петабайт і це число зростає щороку.\nЯкщо вас зацікавила дана тема, рекомендуємо подивитися відео, в якому просто пояснюються базові речі, які має знати кожен розробник.\n ','2022-12-03 00:29:29','2022-12-03 00:29:29'),(199,'Основи Rust: читання з файлів','Игорь Грегорченко\nТехнический редактор Highload','У нашій серії матеріалів ми розглянемо базові основи новомодної мови Rust. А в другій частині циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проєктів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЦей пост — вільний переклад ось цієї оригінальної статті (з нашими доповненнями у місцях, де це здалося потрібним), яку написав Стів Донован. Початок можна знайти ось тут, а зміст усієї серії — ось тут.\nЧитання з файлів\nНаступним важливим кроком на шляху до відкриття наших програм світові є техніка читання файлів.\nЗгадайте, що expect схожий на unwrap, але видає повідомлення користувача про помилку. У наступній програмі, цілком гарній на вигляд, ми отримаємо кілька помилок. Далі по тексту розберемося, чому:\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\n// file1.rs\nuse std::env;\nuse std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let first = env::args().nth(1).expect(\"please supply a filename\");\n\n    let mut file = File::open(&first).expect(\"can\'t open the file\");\n\n    let mut text = String::new();\n    file.read_to_string(&mut text).expect(\"can\'t read the file\");\n\n    println!(\"file had {} bytes\", text.len());\n\n}\nЦе дає такий висновок:\nsrc$ file1 file1.rs\nfile had 366 bytes\nsrc$ ./file1 frodo.txt\nthread \'main\' panicked at \'can\'t open the file: Error { repr: Os { code: 2, message: \"No such file or directory\" } }\', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nsrc$ file1 file1\nthread \'main\' panicked at \'can\'t read the file: Error { repr: Custom(Custom { kind: InvalidData, error: StringError(\"stream did not contain valid UTF-8\") }) }\', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nПримітка: Запустіть із ключем `RUST_BACKTRACE=1` для отримання зворотного трасування.\nОтже, розбираємось: open може не спрацювати в реальному житті, тому що файл не існує або нам не дозволено його читати, а read_to_string може не спрацювати, тому що файл не містить правильного UTF-8. Щоб передбачити цю можливість, можна додатково використовувати read_to_end та помістити вміст у вектор байтів. Для файлів, які не надто великі, читання в один прийом є ефективним і простим.\nЯкщо ви знаєте щось про роботу з файлами в інших мовах, вам може бути цікаво, як обробляти ситуацію, коли файл закривається. Якби ми реально записали дані у цей файл, його незакриття могло б призвести до втрати даних. Але тут файл автоматично закривається, коли функція завершується і файлова змінна обнуляється.\nОтже, тепер ми повинні поговорити про те, що саме повертає File::open. Якщо Option — це значення, яке може містити щось або нічого, то Result — це значення, яке може містити щось або код помилки. Вони обидва розуміються як unwrap (та його двоюрідний брат expect), але вони є абсолютно різними.\nResult визначається двома параметрами типу: значення Ok і значення Err. Умовна скринька Result має два відділення, одне з яких позначено Ok, а інше Err. Ось приклад:\nfn good_or_bad(good: bool) -> Result<i32,String> {\n    if good {\n        Ok(42)\n    } else {\n        Err(\"bad\".to_string())\n    }\n}\n\nfn main() {\n    println!(\"{:?}\",good_or_bad(true));\n    //Ok(42)\n    println!(\"{:?}\",good_or_bad(false));\n    //Err(\"bad\")\n\n    match good_or_bad(true) {\n        Ok(n) => println!(\"Cool, I got {}\",n),\n        Err(e) => println!(\"Huh, I just got {}\",e)\n    }\n    // Cool, I got 42\n\n}\nФактичний тип \'error\' довільний — багато людей використовують рядки, доки не опанують типи помилок Rust. Це зручний спосіб повернути або одне значення, або інше.\nЦя версія функції читання файлів не є аварійною. Вона повертає результат, і саме сторона, що викликає, має вирішити, як обробити потенційну помилку.\n// file2.rs\nuse std::env;\nuse std::fs::File;\nuse std::io::Read;\nuse std::io;\n\nfn read_to_string(filename: &str) -> Result<String,io::Error> {\n    let mut file = match File::open(&filename) {\n        Ok(f) => f,\n        Err(e) => return Err(e),\n    };\n    let mut text = String::new();\n    match file.read_to_string(&mut text) {\n        Ok(_) => Ok(text),\n        Err(e) => Err(e),\n    }\n}\n\nfn main() {\n    let file = env::args().nth(1).expect(\"please supply a filename\");\n\n    let text = read_to_string(&file).expect(\"bad file man!\");\n\n    println!(\"file had {} bytes\", text.len());\n}\nПерший збіг безпечно отримує значення з Ok, яке стає значенням матчингу. Якщо це Err, то повертається помилка, обгорнута Err.\nДруга відповідність повертає рядок, обернений в Ok, або знову помилку. Фактичний вміст Ok не має конкретного значення, тому ми ігноруємо його за допомогою оператора _.\nНе дуже красиво виглядає, коли більшість функції — це обробник помилок. Go має тенденцію також виявляти цю проблему з великою кількістю явних ранніх повернень або просто ігноруванням помилок.\nНа щастя, є короткий шлях.\nМодуль std::io визначає псевдонім типу io::Result<T>, він такий самий, як Result<T,io::Error>, і його простіше набирати.\nfn read_to_string(filename: &str) -> io::Result<String> {\n    let mut file = File::open(&filename)?;\n    let mut text = String::new();\n    file.read_to_string(&mut text)?;\n    Ok(text)\n}\nОператор ? робить майже те саме, що і збіг в File::open — якщо результатом була помилка, то він негайно повертає цю помилку. В іншому випадку він повертає результат Ok. В кінці нам все ще потрібно повернути рядок як результат.\n2017 був хорошим роком для Rust, а ? був одним із тих крутих речей, які стали офіційно стабільними. Але все ще можна зустріти застарілий макрос try!, який використовується в старому коді:\nfn read_to_string(filename: &str) -> io::Result<String> {\n    let mut file = try!(File::open(&filename));\n    let mut text = String::new();\n    try!(file.read_to_string(&mut text));\n    Ok(text)\n}\nФінальне побажання\nЦя частина не тільки про запис файлів, якщо ви помітили. Сьогодні ми також принагідно обговорили, що можна написати абсолютно безпечний Rust-код, який не є потворним і не потребує при цьому винятків.\nПроте у наших прикладах є кілька недоліків. Краще використовувати функції: як правило, функції зрозуміліші та простіші в обслуговуванні за умови, що кожній функції відповідає лише одна ідея.\nІнша проблема в тому, що ми не так добре опрацьовуємо помилки, як могли б. Наші програми все ще малі, тому ці недоліки не є великою проблемою, але зі зростанням програми буде все важче їх знайти і виправити, щоб привести код у норму.\nТому рекомендується починати рефакторинг на ранній стадії розробки програми, тому що набагато простіше відрефакторити менші обсяги коду. І недарма вище було сказано про функції, тому що подібні логічні цеглинки програми можна легко обробляти окремо.\nДалі буде…','2022-12-03 00:29:34','2022-12-03 00:29:34'),(200,'Продакт-менеджер — хто це? Заробітна платня, обов’язки й завдання','Андрій Денисенко','Содержание\nХто такий продакт-менеджер (Product Manager)?\nПозиція в структурі компанії\nОбов’язки та завдання продакт-менеджера\nНавички та знання, необхідні продакт-менеджеру\nЯк оцінюється ефективність роботи продакт-менеджера\nПлюси й мінуси профессії продакт-менеджер\nПродакт-менеджер і власник продукту: у чому різниця?\nЯк стати продакт-менеджером?\nСкільки заробляє Product Manager\nПерспективи кар’єрного росту продакт-менеджера\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nХто такий продакт-менеджер (Product Manager)?\nПродакт-менеджер супроводжує товар від етапу дослідження ринку до етапу випуску товару й забезпечення його подальшого розвитку. Він працює на стику бізнесу, UX (user experience) та технологій.\nПозиція в структурі компанії\nПід час створення та просування продукту продакт-менеджер забезпечує взаємозв’язок між зацікавленими сторонами як усередині компанії, так і за її межами.\nУ продакт-менеджера немає безпосередніх підлеглих. З іншого боку, він підпорядкований директору продукту. Продакт-менеджер керує продуктом і в цьому процесі взаємодіє з представниками різних підрозділів компанії, зокрема з дизайнерами, програмістами, спеціалістами з маркетингу та продажів тощо.\nУ великій компанії продакт-менеджер часто працює зі стратегією, яку задано на вищому рівні. Також у ній потрібно організовувати роботу більшого колективу та приділяти комунікаціям більше часу.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nУ малих компаніях продакт-менеджер може сам складати стратегію та застосовувати більш творчі підходи до вирішення проблем. У них не так багато правил, яких слід дотримуватися, і не так багато людей, роботу яких потрібно організувати. Тому більше уваги можна приділити власне новому продукту, його можливостям.\nВибір компанії, у якій ви працюватимете, залежить від того, які цілі ви ставите перед собою і що буде краще для вас.\nОбов’язки та завдання продакт-менеджера\nПродакт-менеджер є найкращим знавцем продукту, його пропагандистом, і виконує такі завдання:\nдосліджує ринок і аналізує дані про тенденції та очікування, виявляє потреби, складає портрет користувача та визначає, як вирішити проблему й чи варто взагалі рухатися в задуманому напрямку;\nаналізує конкуренцію, зокрема нові продукти чи можливості, попит на них та рівень задоволеності клієнтів, щоб правильно розставити пріоритети;\nоцінює привабливість бізнес-можливості, тобто визначає, наскільки можливий ефект окупає витрати на розробку;\nскладає та підтримує дорожню карту продукту, щоб його розвиток  відповідав бізнес-планам, а зацікавлені особи були в курсі справ;\nпланує випуск нових версій та те, які можливості будуть у них реалізовані;\nвстановлює вимоги, виходячи зі складених планів;\nзбирає зворотний зв’язок, аналізує ключові показники ефективності та вдосконалює продукт та досвід його використання (UX).\nНавички та знання, необхідні продакт-менеджеру\nНавички та знання продакт-менеджера безпосередньо залежать від завдань, які перед ним стоять.\nУява — необхідна для знаходження рішень та створення бачення товарів.\nВміння дослідити ринок — необхідне для того, щоб визначити проблеми та потреби користувачів, дослідити конкуренцію та встановити, які можливості та характеристики продукту задовольнять клієнтів.\nКомунікабельність, уміння переконувати та працювати з конфліктними ситуаціями — необхідні для спільної роботи з безліччю зацікавлених осіб.\nВміння слухати, уважність — потрібні для того, щоб розібратися в потребах користувачів та знайти підхід до команди продукту.\nСтратегічне мислення — дає можливість бачити продукт загалом, оцінювати потенційну вигоду з його застосування, і навіть забезпечувати його розвиток.\nСамовдосконалення — допоможе продакт-менеджеру орієнтуватися на ринку, що постійно змінюється.\nКрім зазначених вище навичок знадобляться й спеціальні знання з кількох напрямів:\nмаркетинг — для дослідження ринку й просування товару;\nфінанси — для ціноутворення, обчислення окупності;\nметодологія гнучкої розробки (Agile Development) — для прискорення отримання результатів від розробки продукту та зменшення витрат часу й грошей уже на перших етапах роботи над продуктом;\nсоціальна психологія для кращого розуміння клієнтів, проведення інтерв’ю, а також роботи в команді;\nUX/UI — для розуміння проблем користувача, пов’язані з використанням продукту; а також\nробота з документацією;\nкерування ризиками;\nкерування проектами;\nтайм-менеджмент;\nпрогнозування продажів;\nоснови дизайну;\nпросування в соціальних мережах тощо.\nЯк оцінюється ефективність роботи продакт-менеджера\nЕфективність роботи продакт-менеджера оцінюється за внутрішніми й зовнішніми критеріями. У різних компаніях використовуються різні набори метрик, але в цілому ефективність роботи всередині компанії оцінюється за якістю організації взаємодії та доступу до інформації для всіх учасників колективу.\nЕфективність зовнішньої роботи оцінюється, наприклад, за ступенем задоволеності клієнтів, фінансової віддачі та різними іншими показниками.\nНижче наведені деякі ключові показники ефективності (KPI) продакт-менеджера:\nкількість покупок і нових клієнтів за порівнянням з поточними показниками;\nвідношення реального обсягу продажу до запланованого;\nкількість активних користувачів;\nкоефіцієнт утримання клієнтів;\nокупаемость інвестицій і таке інше.\nПлюси й мінуси профессії продакт-менеджер\nПрофесія продакт-менеджера, як і будь-яка інша професія, має свої плюси й мінуси.\nПлюси\nперспективність;\nзатребуваність;\nвисока оплата;\nвеликі бонуси за успіх;\nцікаві завдання.\nМінуси\nнеобхідність працювати в конфліктних ситуаціях;\nскладність узгодження дій багатьох людей;\nнеобхідність досягати результату в стислий термін;\nможливо знадобиться працювати більше за норму;\nвеликий ризик вигоряння.\nЗберіть інформацію в Інтернеті, поговоріть із тими, хто вже працює або працювали продакт-менеджерами, візьміть до уваги власні риси характеру, визначте сильні та слабкі сторони, можливості та загрози, і зможете зрозуміти, наскільки сильним є ваше прагнення, і прийняти правильне рішення.\nImage by Parabol\nПродакт-менеджер і власник продукту: у чому різниця?\nЦі терміни часто використовуються як взаємозамінні, але насправді міжними є значні відмінності.\nРоль власника продукту (product owner) потрібна тоді, коли в колективі застосовується якась із методик гнучкої розробки (Agile Development). Наприклад, якщо команда використовує Scrum, їй потрібен власник продукту.\nПродакт-менеджер досліджує ринок, визначає напрямок розвитку продукту, ставить цілі тощо. Власник продукту в співпраці з розробниками забезпечує досягнення цілей, поставлених продакт-менеджером.\nВласник продукту\nПродакт-менеджер\nДіє на стратегічному рівні Діє на тактичному рівні\nРозробляє техніко-економічне обґрунтування Розробляє список завдань (беклог — від англ. backlog)\nЕксперт із продукту та клієнтів Упорядковує завдання, щоб ефективно досягати цілей\nРозвиває та підтримує дорожню карту (roadmap) Підвищує цінність праці розробників\nПозиціонує продукт Забезпечує ясність і чіткість беклогу\nЗабезпечує фінансування й керує бюджетом Ставить перед Scrum-колективом наступні завдання\nЯк бачимо, ці ролі в чомусь схожі одна на одну. І менеджер, і власник проводять продукт через процес розробки і на деяких етапах працюють з одними й тими самими підрозділами.\nІноді власник продукту виконує завдання, що більше стосуються стратегії, а менеджер — ті, що більше стосуються тактики. Але в організації, що працює за принципом гнучкої розробки, будуть обидві ці ролі, і вони виконуватимуть різні завдання.\nЧи може власник продукту бути продакт-менеджером і навпаки? Так. Загалом, продакт-менеджер — це посада, а власник продукту — це роль у команді, що використовує Scrum. Часто так відбувається в стартапах, коли немає можливості найняти обох спеціалістів.\n  Як стати продакт-менеджером?\nЯк і в будь-якій роботі, насамперед потрібне прагнення та бажання займатися обраною справою. Це дасть необхідну енергію для досягнення успіху. Нижче наведено деякі поради щодо того, що вам потрібно опанувати.\nДля початку почитайте статті власне про продакт-менеджмент (product management), інтерв’ю з продакт-менеджерами, їхні блоги, підпишіться на їхні канали в Telegram.\nНавчіться проводити SWOT-аналіз (визначати сильні, слабкі сторони, можливості й загрози), розставляти пріоритети, розподіляти час.\nОтримайте уявлення про UX/UI, щоб краще зрозуміти враження клієнта від роботи з продуктом.\nОпануйте продуктові методології – вони допоможуть економити час та впорядковувати інформацію в голові.\nОзнайомтеся з гнучкою розробкою програмного забезпечення (методологія Agile).\nУ ній використовується методологія Lean Startup (економний стартап). Вона допомагає майже відразу засвоїти, що працює, а що ні. Розглянемо її докладніше.\nСтартапи діють за умов невизначеності й часто зазнають поразки з двох причин: або надмірно захоплюються традиційним підходом до бізнесу, або повністю відмовляються від класичних інструментів і пускають усе на самоплив.\nLean Startup дозволяє не витрачати час, зусилля та гроші на продукт, що не потрібний користувачеві.\nЦя методологія використовує цикл «створити – оцінити – навчитися».\nВам необхідно якнайшвидше створити мінімально життєздатний продукт (Minimum Viable Product, MVP) — продукт із мінімальними можливостями, які дозволяють оцінити, наскільки він успішний. Він вимагає мінімальних зусиль та мінімального часу. При цьому він приваблює перших клієнтів.\nПотім слід оцінити його за метриками MVP і зрозуміти, чи привели зусилля до необхідного результату.\nІ, нарешті, треба вчитися на результатах: зрозуміти, чи варто рухатися у вибраному напрямі, що потрібно міняти і чи взагалі варто витрачати час на продукт.\nLean Canvas (таблиця економного стартапу) дає змогу оцінити сильні та слабкі сторони бізнес-моделей.\nЇї заповнюють так.\nСегменти клієнтів. Зазначте в цьому полі цільових клієнтів, а також користувачів. Нижче можна вказати характеристики ранніх послідовників, тобто ваших ідеальних клієнтів.\nПроблема. Впишіть три основні проблеми клієнтів. Нижче в цьому полі можна вказати існуючі альтернативи, тобто як ці проблеми вирішуються сьогодні.\nПотоки прибутку. Зазначте джерело прибутку.\nРішення. Зазначте можливе вирішення кожної проблеми.\nУнікальна цінність. Тут має бути одне чітке привабливе повідомлення, яке перетворює необізнаного відвідувача на зацікавленого перспективного клієнта. Також у цьому полі можна навести високорівневу концепцію, тобто аналогію у вигляді X = Y (YouTube = Flickr для відео).\nКанали. Зазначте шляхи взаємодії з клієнтом.\nКлючові метрики. Перерахуйте основні показники, якими ви дізнаєтеся, як просувається ваш бізнес.\nСтруктура витрат. Зазначте очікувані фіксовані та змінні витрати.\nПрихована перевага. Зазначте, що саме у вашому неможливо просто скопіювати чи купити.\nОзнайомтеся з методологією Customer Development (тестування прототипу на потенційних клієнтах), щоб якнайшвидше й без зайвих витрат отримувати нових клієнтів. Вона є частиною методології Lean Startup. Суть полягає в тому, щоб створити кілька гіпотетичних бізнес-моделей на основі бачення, а потім створити стратегію тестування й перевірки. Перевірка з клієнтами оцінює масштабованість та повторюваність життєздатної гіпотези. Потім створюється база клієнтів шляхом формування попиту й підвищення обізнаності користувачів каналами продажів. І, зрештою, на етапі формування компанії відбувається перетворення організації зі стартапу на робочу компанію.\nТаблиця унікальної цінності (Value Proposition Canvas) допоможе структуровано спроектувати, протестувати та візуалізувати цінність вашого продукту для клієнтів.\nВажливо навчитися створювати дорожні карти розробки продукту (Product Development Roadmap) — високорівневі плани з робочим потоком та ключовими моментами. Відповідно до них структуруватиметься вся робота над продуктом.\nПопрацюйте помічником продакт-менеджера в маленькій омпанії. Спілкуйтеся з колегами — вам підкажуть, що до чого.\nНе зупиняйтеся на досягнутому, розвивайтеся постійно, навчайтеся на практиці, аналізуйте результати зусиль і вносьте корективи. Наприклад, пройдіть атестацію у великій компанії, почитайте літературу з психології, пов’язану з продажами, удосконалюйте знання англійської. Що ширший ваш кругозір, то цікавіші та ефективніші рішення ви зможете знаходити.\nImage by Parabol\nСкільки заробляє Product Manager\nЗа даними dou.ua середня заробітна платня продакт-менеджера за липень 2022 року в Україні склала 2800 доларів:\nЗарплата Product Manager\nПродакт-менеджери з досвідом до 1 року в середньому отримували 1950 доларів, а з досвідом від 9 до 10 років — 4000 доларів.\nВ аутстафінгових компаніях середня заробітна плата склала 5200 доларів, по аутсорсінгових — 3500, по стартапах — 2925 і по продуктових — 2800.\nПерспективи кар’єрного росту продакт-менеджера\nПродакт-менеджер може пройти по одному з двох шляхів кар’єрного зростання. За цією спеціальністю можна розвиватись як на індивідуальному рівні, коли ви постійно збільшуєте особистий внесок у продукт, так і на рівні менеджменту, коли ви розвиваєте навички керівника.\nУ будь-якому з цих випадків ви проходите шлях від стажера та молодшого (Junior) продакт-менеджера до середнього (Middle) та старшого (Senior). Далі ваш шлях лежить до посади провідного продакт-менеджера (Leading Product Manager) або директора продукту (Chief Product Officer, CPO).\nДо речі, зовсім не обов’язково підніматися кар’єрними сходами до самого верху. Головне знайти своє місце на них. Якщо ви, наприклад, хороший міддл, вам подобається така посада, і ви хочете залишитися на цьому рівні, це буде доцільно.\nЯкщо ж вам більше до вподоби робота над продуктом, ніж менеджмент, і ваші риси характеру підходять для цього, ви можете втратити ефективність, коли перейдете на керівну посаду. Займаючись продуктом, ви будете працювати з вищою ефективністю, а ваш внесок збільшуватиметься.\nЯкщо ж вам більше подобається спілкуватися з людьми, ви легко привертаєте їх до себе й усвідомлюєте, що можете керувати лінійкою продуктів, а отже, кількома командами, то доцільніше буде займатися управлінською роботою.\nУ кожного свій рівень компетентності, і важливо правильно оцінювати свої здібності та можливості, не завищувати та не занижувати самооцінку. Тоді ви досягнете успіху в роботі й зможете реалізувати себе повною мірою.','2022-12-03 00:29:50','2022-12-03 00:29:50'),(201,'Мова, з якої починалось ООП','Сергей Бондаренко\nжурналист','Що таке Objective-C\nСьогодні мова піде про одну з легендарніших мов програмування – Objective-C. Це досить складна мова, з високим порогом входу, на якій написано величезна кількість програм для macOS, iPad та iPhone.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nВідмінна риса цієї мови полягає в тому, що вона є розширенням для іншої мови програмування – С. Хоча останнім часом Objective-C значно поступається новій мові SWIFT, розробка Apple все ще залишається актуальною і викликає інтерес.\n  Історія появи Objective-C\nВсе почалося на початку 70-х років минулого століття. На зорі програмування використовувалася структурна парадигма написання коду. Завдяки цій архітектурі всі програми будувалися на трьох конструкціях: послідовність, розгалуження та цикл (плюс підпрограми). Подібна методологія мала суттєвий недолік, який ставав все більш очевидним у міру ускладнення програм – код виходив більш заплутаним та погано спиймався візуально. Виникла потреба у появі якоїсь технології, яка б дозволила раціональніше використовувати код. \nТаким рішенням стала одна з перших об’єктно-орієнтованих мов з динамічною типізацією – Smalltalk. Цікаво, що, хоча вона створювалася в сімдесятих, перша версія називалася Smalltalk-80 (напевно, розробники з науково-дослідного центру Xerox PARC давали ім’я з прицілом на майбутнє). Вже на той час Smalltalk могла похвалитися можливостями, які залишаються актуальними й донині – у нього був збирач сміття, динамічна типізація. Програми, написані на Smalltalk, компілювалися в байткод і виконувались віртуальною машиною, що дозволяло запускати код на будь-якому обладнанні.\nВзявши за основу головні принципи мови Smalltalk, було створено Objective-C. Творцем Objective-C вважається Бред Кокс, який намагався на початку вісімдесятих зробити таку мову програмування, в якій було б вирішено проблему повторюваності коду. Objective-C будувався на базових припущеннях: клас як самостійний повноцінний об’єкт, передача повідомлень між класами, динамічна типізація. Найголовніше, що відрізняло цю мову – гнучкість. Програміст міг писати код С, а потім просто вставляти його в Objective-C і програма працювала.\nУ 1985 році Стівом Джобсом після його звільнення з Apple була організована компанія NeXT, в яку пішли працювати кілька розробників з Apple. Стів Джобс вибрав для розробки майбутніх проектів Objective-C, що вже розроблялась кілька років і була досить перспективним проектом, та ще й крос-сумісна із мовою С. Objective-C стала базовою мовою програмування для операційної системи NeXTEP OS.\nУ 1988 програмісти NeXT розробили для Objective-C компілятор та SDK. А в 1992 році доопрацюванням Objective-C та компілятора зайнялися також і учасники проекту GNU, так що GCC отримав сумісність із Objective-C. З покупкою NeXT, Apple придбала і цей SDK (включаючи компілятор, бібліотеки та середовище розробки). IDE отримало назву Xcode, а GUI – Interface Builder. Фреймворк Cocoa (API для macOS) зараз є найпопулярнішим середовищем розробки програм на Objective-C.\nУ лютому 2008 року Apple представив iPhone SDK 2.0, який дозволяв розробляти програми під платформу iOS. Це посприяло популяризації мови програмування Objective-C і дало можливість компанії Стіва Джобса швидко заповнити AppStore великою кількістю програм.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nСинтаксис\nЗ Objective-C можна працювати практично на будь-якому дистрибутиві GNU/Linux через gobjc компілятор, що включений в набір компіляторів GNU Compiler Collection.\n Розробка застосунків Objective-C під ОС Windows можлива через безкоштовні емулятори середовища POSIX:\nmingw;\ncygwin;\nсервіси Microsoft Windows для UNIX\nКоли програміст С дивиться на код Objective-C, він бачить вже знайомий синтаксис з деякими доповненнями — квадратними дужками, значком “@”, та код, що починається з NS (спадщина NeXTSTEP).\nНайпростіша програма, яка виводить на екран текстове повідомлення, виглядає в Objective-C так:\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n           NSLog(@””Highload.today””);\n    }\n    return 0;\n}\nКоли потрібно запакувати в об’єкті Objective-C ціле, речове чи логічне значення, використовується клас NSNumber.\nNSNumber *someNumber = [NSNumber numberWithInt:1];\nз літеральным синтаксисом:\nNSNumber *someNumber = @1;\nЛітеральный синтаксис поширюється на всі типи данних:\nNSNumber *intNumber = @1;\nNSNumber *floatNumber = @2.5f;\nNSNumber *doubleNumber = @3.14159;\nNSNumber *boolNumber = @YES;\nNSNumber *charNumber = @’a’;\nЗмінні в Objective-C визначаются наступним чином:\nint hours = 24;\n/* де int – це тип змінної, hours – ім’я, 24 – значення */\nЯкщо змінні складаються з двох слов, то друге слово починається з великої літери. \nЗвертання до метода\nКоли в Objective-C виникає звертання до будь-якого метода, це трактується не як звернення до функції, а як відправка повідомлення (із зазначенням аргументів та імені), аналогично тому, як це реалізовано в Smalltalk.  В цьому заключаєтся принципова відмінність Objective-C от С++, що є функціо-орієнтованою мовою. Оскільки Objective-C це об’єктно-ориентирована мова, цілком очікуєо, що вона відповідає головним принципам ООП:\nінкапсуляція\nприховування данних\nнаслідування\nполіморфизм\nБудь якому об’єкту, що використовується в коді, можна відправити повідомлення з будь-яким змістом. Об’єкт сам може не обробляти повідомлення. Натомість він може делегувати (перенаправити) повідомлення іншому об’єкту, який вже його обробить. Об’єкти можуть знаходитись у різних адресних просторах та на різних ПК.\nВсе об’єкти класів Objective-C разміщуються в динамічній памяти. Кожен об’єкт в Objective-C має власний ідентифікатор id. Замість id можна використовувати більш звичне позначення із явною вказівкою класу. В ідентифікаторах Objective-C заборонено використовувати розділові знаки (символи @, $ та %). Крім того, слід пам’ятати, що Objective-C это реєстрозалежна мова программування. \nКонструкція для відправлення повідомлень має такий вигляд:\n[receiver method];\nАргументи в переданому повідомленні поділяються двокрапкою, параметрів може бути скільки завгодно:\n[receiver methodAndFirstArgument: 20 andLastArgument: 30];\nКоли потрібно звернутися до методу з будь-яким числом параметрів, використовується конструкція:\n[receiver undefinedNumberParameters: oneParam, twoParam, threeParam, fourParam, fiveParam, sixParam, sevenParam];\nКопіювання об’єктів\nЦя мова програмування дозволяє копіювати будь-які об’єкти. Для цього слід звернутися до методу copy, визначеного в класі NSObject. При створенні копії викликається метод copyWithZone протоколу NSCopying. NSObject не підтримує цей протокол, тому протокол NSCopying має реалізовуватись у класах-спадкоємцях. Розрізняють два види цієї операції – поверхнева копія (shallow copy) та глибока копія (deep copy). Відмінність одного типу копіювання від іншого у тому, що при виконанні поверхневого копіювання копіюються не дані, лише вказівник на об’єкт із даними. Під час глибокого копіювання копіюється об’єкт із даними.\nОскільки Objective-C є «оберткою» для мови С чи С++, у ньому використовуються два типи файлів – заголовні файли (.h) і файли реалізації (.m).\nФайли, створені при утворенні класса, можуть виглядати так:\n//EOCPerson.h\n#import\n@interface EOCPerson:NSObject\n@property (nonatomic, copy) NSString *firstName\n@property (nonatomic, copy) NSString *lastName\n@end\n//EOCPerson.m\n#import “EOCPerson.h”\n@implementation EOCPerson\n//Реалізація методів\n@end\nПрипустимо, в класі Mycompany існує instance-змінні nameofcompany.\n@interface Mycompany : NSObject\n{\n     NSString *nameofcompany;\n}\nДля доступу до неї оптимально звернутися до властивостей, які з’явилися в Objective-C 2.0. Щоб оголосити властивості, використовується ключове слово @property.\n@property (retain) NSString *nameofcompany;\nВ дужках перераховуються атрибути доступу до instance-змінної. \nБулевий тип\nНа жаль, булеві дані в даній мові відсутні як тип. Оскільки для програмування це має критичне значення, його додають штучно, як BOOL (за фактом це unsigned char). Він може приймати значення або YES, або NO (так реалізовано в операційних системах NextStep, Mac OS X).\nПротоколи\nВ інших мовах программування, наприклад, Java, вони називаються інтерфейсами. Протокол выглядає как перелік описів методів.\nДля залучення протоколу об’єкт повинен містити реалізації всіх способів, описаних у протоколі. За допомогою протоколів виділяються загальні риси у різних об’єктів, а також передаються дані про об’єкти заздалегідь невідомих класів.\nПриклад опису протоколу\n@protocol TestProtocol \n-(void) test;\n-(void) testWithName: (NSString *) name;\n@end\nЦикли\nУ Objective-C використовуються цикли таких типів:\nwhile loop – Повторює оператор або групу операторів, поки задана умова є істинною. Він перевіряє умову до виконання тіла циклу.\nfor loop – Виконує послідовність операторів кілька разів, скорочуючи лічильник коду, що управляє змінною циклом.\ndo…while loop — Аналог оператора while, за винятком того, що він перевіряє умову наприкінці тіла циклу.\nnested loops – Дозволяє застосовувати один або набір циклів всередині будь-якого іншого циклу, наприклад, while, for або do..while.\nРозглянемо, як реалізовані у Objective-C цикли. Напишемо простенький код, який прийматиме рядкові дані та розділятиме їх на аргументи, нумеруючи кожне введене слово.\n#include <stdio.h>\nint main (int argc, const char *argv[]) {\n    for (int i = 0; i < argc; i++) {\n        printf(“arg %d : %s\\n”, i, argv[i]);\n    }\n    return 0;\n}\nЦикл обробляє текст, у результаті програма друкує нове слово, змінюючи лічильник на одиницю. Тепер скомпілюємо програму та виконаємо у командному рядку\n  У Objective-C доступний контроль багатопоточних обчислень. Використовуючи директиву @synchronized()  якусь частину коду можна закрити від одночасного виконання паралельними потоками.\nНедоліки мови Objective-C\nObjective-C працює повільніше в порівнянні зі SWIFT\nКод, що написан на Objective-C, працює в Swift. Але навпаки – ні\nВідсутня можливість задіяти  возможность задіяти декларативну область «простір імен»\nВ Objective-C нема множинного успадкування\nМеханізм динамічного запуску робить методи оптимізації непридатними для використання та знижує продуктивність.\nПриклади коду на Objective-C\nІ, насамкінець, розглянемо кілька прикладів додатків на Objective-C.\nКод програми, яка обчислює коріння квадратного рівняння:\n#include\n#include\nint main()\n{\nint F, G, H, J;\nprintf(“F = “);\nscanf(“%d”, &F);\nif (F == 0) {\nprintf(“Помилка, що пов’язана з аргументами квадратного рівняння.”);\nreturn 0;\n}\nprintf(“G = “);\nscanf(“%d”, &G);\nprintf(“H = “);\nscanf(“%d”, &H);\n  J = G * G – 4 * F * H;\nif (J == 0) {\nprintf(“x = %f\\n”, -G / 2.0 / F);\nreturn 0;\n}\n  if (J > 0) {\nprintf(“x1 = %f\\nx2 = %f\\n”,\n(-G + sqrt(J)) / 2.0 / F, (-G – sqrt(J))/ 2.0 / F);\n} else {\nprintf(“x1 = (%f, %f)\\nx2 = (%f, %f)\\n”,\n-G / 2.0 / F, sqrt(-J) / 2.0 / F, -G / 2.0 / F, -sqrt(-J) / 2.0 /F);\n}\nreturn 0;\n} \nПриклад коду программи для переведення текста в регістр Camel Case \n#import <Foundation/Foundation.h>\n  #define LETTERS @”ABCDFEGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”\n  NSString *camelCase(NSString *s) {\n  return [[[s capitalizedString] componentsSeparatedByCharactersInSet:[[NSCharacterSet characterSetWithCharactersInString:LETTERS] invertedSet]] componentsJoinedByString:@””];\n}\nint main (int argc, const char * argv[]) {\n    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n    NSLog(@”%@”, camelCase(@”beliberda”));\n    NSLog(@”%@”, camelCase(@”primer-Dva “));\n    NSLog(@”%@”, camelCase(@”!!! eto_cHto_esche_PRIMER?..”));\n    [pool drain];\n    return 0;\n}\nВисновок\nСьогодні ця мова програмування стрімко втрачає популярність під тиском нових технологій, значно поступаючись більш простому та зручному SWIFT. Багато хто пророкує цій мові швидке забуття, тому вивчати її чи ні – вирішувати тільки вам. Будь-який програміст, який володіє мовою С, зможе розібратися з основами Objective-C за кілька годин. Для інших бажаючих краще зрозуміти тонкощі цієї мови програмування рекомендуємо подивитися відео . У ньому розповідається як створювати класи, викликати екземпляри класів, а також розповідається про властивості та методи класів.','2022-12-03 00:29:51','2022-12-03 00:29:51'),(202,'Не читав документацію — не фахівець: гайд, як правильно це робити (для самоучок і не тільки)','Виктория Пушкина\nЖурналистка в Highload','Чи можна стати хорошим фахівцем, жодного разу не зазирнувши в документацію? QA Engineer, автор курсів з тестування та YouTube-блогер Артем Русов на це запитання відповідає однозначним «ні».\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nСпеціально для Highload Артем розповідає, чим може допомогти документація самоучкам і сеньйорам і як правильно її читати.\nНавіщо слід читати документацію\nДокументація — це основне джерело знань для самоучки. Вона дає базове розуміння роботи інструменту, і там можна знайти позитивні приклади використання програми чи алгоритм.\nВажливо! Зазвичай документація англійською. Саме тому айтівцю важливо знати мову. Але якщо низький рівень, можна пошукати локалізації або версії від волонтерів. У крайньому разі — користуватися гугл-перекладачем.\nНе можна стати хорошим фахівцем, жодного разу не зазирнувши в документацію. Документація закриває велику кількість питань і робить з вас того фахівця, який любить дослідження та знає, де знайти відповідь. Як мінімум у перші пару років у своїй роботі потрібно навчитися дружити з документацією як проєктною, так і зовнішньою.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nДо того ж найчастіше тільки через документацію можна швидко дізнатися про оновлення та одним з перших почати використовувати нові функції застосунку.\nНавіщо документація не новачку\nНавіть запеклий фахівець не повинен знати документацію на зубок. Він повинен уміти в ній орієнтуватися, щоб швидко знаходити те, що йому потрібно.\nПорада для сеньйорів: Довідкова інформація повинна залишатися довідковою, тому не мучте людей на інтерв’ю по кожній дрібній можливості інструменту. Головне — розуміти, навіщо він взагалі.\nЩо можна знайти в документації\nУ хорошій документації є така інформація:\nЗагальний опис інструменту.\nПитання встановлення та налаштування на різних платформах — як з допомогою графічного інтерфейсу, так і командного рядка. До речі, раджу розбиратися насамперед з командним рядком. Він вшитий у багатьох середовищах розробки, базові команди люблять запитувати на інтерв’ю, та й страх інструменту зникне.\nSource: ProductHunt\nБазові позитивні кейси використання з прикладами. Можливо, саме ваша проблема не така вже й складна і її вже описали в документації.\nУ деяких інструментах є готові тестові дані та пісочниці, на яких можна потренуватися. Як раз закриєте питання з практикою.\nІноді документація може бути інтерактивною, наприклад, набори колекцій Postman, де можна навчитися працювати руками в інструменті.\nЯку документацію читати\nЧитайте документацію до всіх інструментів, які ви використовуєте. Навіть у мануального тестувальника їх багато: від багтрекінгових систем (Jira) до синтаксису БД та СУБД (MySQL). В автоматизатора та розробника таких інструментів ще більше: мови програмування, IDE тощо.\nЯк правильно читати документацію\nЯ б радив ознайомитися насамперед з базою: встановлення/налаштування/запуск. А далі не йти посторінково, а відштовхуватися від поставлених перед вами завдань.\nНаприклад, Postman можна використовувати для перехоплення запитів HTTPs. Але чи всім це треба знати? Однозначної відповіді немає.\nВодночас чим більше інструментів зі схожим набором функцій у вас у кишені, тим ви цікавіший фахівець, який може знайти швидке рішення або підказати, як використовувати наявні потужності.\nАле в першу чергу потрібно розуміти, для чого потрібен інструмент, його інтерфейс і фронт робіт, що їм закривається. Не раджу відразу використовувати все по максимуму: мозок має властивість забувати, а документація нікуди не пропаде і завжди буде в тому самому місці. Тим більше що версії застосунків змінюються, старі функції обростають новими, деякі йдуть у сторонні програми.\nЧим користуватись крім документації\nДивитися безкоштовні/платні курси на Stepik, Udemy, Coursera, PluralSight, YouTube.\nЧитати статті на професійних ресурсах на кшталт Stack Overflow.\nПриєднатися до професійних спільнот/чатів у месенджерах.\nЯкщо ви вже на проєкті, то часто самі учасники команди пишуть проєктну документацію та мануали, де описують типові завдання для конкретного продукту, що розробляють. Обов’язково уточніть у вашого ментора, де її шукати.\nВажливо! Багато хто думає, що ролики в YouTube зможуть замінити самостійне опрацювання документації та її практичне застосування, але це не так. Зазвичай відеоуроки — про те, що й так лежить на поверхні, а заглиблюватись доведеться вже самим.','2022-12-03 00:29:56','2022-12-03 00:29:56'),(203,'Основи Rust: пишемо перші тестові програми','Игорь Грегорченко\nТехнический редактор Highload','У нашій серії матеріалів ми розглянемо базові основи новомодної мови Rust. А у другій частині цього циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проектів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування вперед.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦей пост — вільний переклад на українську ось цієї оригінальної статті (з нашими доповненнями в місцях, де це здалося потрібним), яку написав Стів Донован.\nПишемо Hello world\nПочаткова мета Hello world, відколи була написана перша версія мовою Cі, полягала в тестуванні компілятора та запуску реальної мініпрограми.\n// hello.rs\nfn main() {\n    println!(\"Hello, World!\");\n}\n$ rustc hello.rs\n$ ./hello\nHello, World!\nRust — це мова з фігурними дужками, крапками з комою, коментарями в стилі C++ та головною стартовою функцією — поки що все знайоме.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nЗнак оклику тут вказує на те, що це виклик макросу. Для програмістів на C++ це може бути неприємно, оскільки вони звикли до серйозних накручених макросів на Cі — але запевняємо, що макроси в Rust більш зрозумілі і свідомі.\nОднак компілятор надзвичайно прозорливий, і якщо ви опустите цей оклик, отримаєте помилку:\nerror[E0425]: unresolved name `println`\n --> hello2.rs:2:5\n  |\n2 |     println(\"Hello, World!\");\n  |     ^^^^^^^ did you mean the macro `println!`?\nВивчення мови означає звикання до її помилок. Намагайтеся сприймати компілятор як суворого, але доброзичливого помічника, а не як комп’ютер, що кричить на вас, тому що спочатку ви будете бачити багато повідомлень про помилки. Набагато краще, якщо компілятор зловить вас на помилці, аніж якщо ваша програма розвалиться на очах у замовників.\nНаступним кроком буде запровадження змінної:\n// let1.rs\nfn main() {\n    let answer = 42;\n    println!(\"Hello {}\", answer);\n}\nСинтаксичні помилки – це помилки на етапі компіляції, а не помилки часу виконання, як у динамічних мовах, таких як Python або JavaScript. Це позбавить вас багатьох проблем у подальшому. І якщо для прикладу ми написали ‘ answr‘ замість ‘ answer‘, компілятор насправді цілком розумно виявить це:\n4 |     println!(\"Hello {}\", answr);\n  |                         ^^^^^ did you mean `answer`?\nМакрос println!приймає рядок формату та деякі значення, він дуже схожий на форматування, яке використовується в Python 3.\nЩе один дуже корисний макрос — assert_eq! Це робоча конячка тестування в Rust, з допомогою його ви стверджуєте, що дві речі повинні бути рівними, і якщо це не так, то виникає паніка.\n// let2.rs\nfn main() {\n    let answer = 42;\n    assert_eq!(answer,42);\n}\nЦе не призведе до жодного результату. Але змініть 42 на 40:\nthread \'main\' panicked at\n\'assertion failed: `(left == right)` (left: `42`, right: `40`)\',\nlet2.rs:4\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nІ це наша перша runtime-помилка в Rust.\nЦикли та розгалуження\nУсе, що потрібно, можна зробити більше одного разу з допомогою циклів:\n// for1.rs\nfn main() {\n    for i in 0..5 {\n        println!(\"Hello {}\", i);\n    }\n}\nДіапазон не є інклюзивним, тому iйде від 0 до 4. Це зручно в мові, яка індексує такі речі, як масиви, починаючи від 0.\nА ось приклад, як можна працювати всередині циклів з умовами:\n// for2.rs\nfn main() {\n    for i in 0..5 {\n        if i % 2 == 0 {\n            println!(\"even {}\", i);\n        } else {\n            println!(\"odd {}\", i);\n        }\n    }\n}\neven 0\nodd 1\neven 2\nodd 3\neven 4\ni % 2дорівнює нулю, якщо 2 може без залишку ділитися на i. Rust використовує оператори у стилі мови Сі. Дужки навколо умови відсутні, як і в Go, але треба використовувати фігурні дужки навколо блоку.\nЦе дозволяє переписати те саме в більш наочному вигляді:\n// for3.rs\nfn main() {\n    for i in 0..5 {\n        let even_odd = if i % 2 == 0 {\"even\"} else {\"odd\"};\n        println!(\"{} {}\", even_odd, i);\n    }\n}\nТрадиційно в мовах програмування є умови (наприклад, if) та вирази (наприклад, 1+i). У Rust майже все може бути виразом. Тому перевантажувати «трійковий оператор» із прикладу вище подробицями не потрібно.\nЗверніть увагу, що в цих блоках немає жодної точки з комою!\nДодавання\nКомп’ютери дуже хороші в арифметиці (якщо ви не знали). Ось наша перша спроба скласти всі числа від 0 до 4. Зараз ми застосуємо практично все, що дізналися вище.\n// add1.rs\nfn main() {\n    let sum = 0;\n    for i in 0..5 {\n        sum += i;\n    }\n    println!(\"sum is {}\", sum);\n}\nАле код не компілюється, хоча виглядає ніби все логічно:\nerror[E0384]: re-assignment of immutable variable `sum`\n --> add1.rs:5:9\n3 |     let sum = 0;\n  |         --- first assignment to `sum`\n4 |     for i in 0..5 {\n5 |         sum += i;\n  |         ^^^^^^^^ re-assignment of immutable variable\nІмутабельна змінна? Це змінна, яка може змінюватися. Змінні letза промовчанням можуть надавати значення лише при оголошенні. Але додавання чарівного слова mut(«будь ласка, зробіть цю змінну змінюваною») допомагає:\n// add2.rs\nfn main() {\n    let mut sum = 0;\n    for i in 0..5 {\n        sum += i;\n    }\n    println!(\"sum is {}\", sum);\n}\nЦе може викликати здивування, якщо ви прийшли з інших мов, де змінні можуть бути перезаписані за промовчанням. Що робить щось «змінною»? Те, що їй присвоюється значення під час виконання — це не константа. Це слово також використовується в математиці, наприклад, коли ми говоримо “нехай змінна n буде найбільшим числом у множині S“.\nЄ причина, через яку змінні за промовчанням оголошуються в Rust доступними лише для читання. У великих програмах важко відстежити, де відбувається запис. Тому Rust робить такі речі, як змінюваність (можливість запису), явними і строгими. У мові багато хитрощів, але Rust намагається бути максимально передбачуваним.\nRust є статично типізованим і сильно типізованим — ці поняття часто плутають, але згадайте Сі (статично, але слабо типізовану) і Python (динамічно, але сильно типізована). У статичних типах тип відомий під час компіляції, а динамічні типи стають відомими лише під час виконання.\nОднак поки що складається враження, що Rust приховує ці типи від вас. Який саме тип у i? Компілятор може визначити його починаючи з 0 з допомогою виводу типів і приходить до i32(чотирьохбайтове знакове ціле число).\nДавайте зробимо рівно одну зміну — перетворимо 0на 0.0. Потім ми отримуємо помилки:\nerror[E0277]: the trait bound `{float}: std::ops::AddAssign<{integer}>` is not satisfied\n --> add3.rs:5:9\n  |\n5 |         sum += i;\n  |         ^^^^^^^^ the trait `std::ops::AddAssign<{integer}>` is not implemented for `{float}`\n  |\nОтже, медовий місяць у нашому навчанні закінчився, починаються складнощі. Кожен оператор (наприклад, +=) відповідає trait’у, який є абстрактним інтерфейсом, який повинен бути реалізований для кожного конкретного типу.\nМи докладно розглянемо це пізніше, але тут вам потрібно знати тільки те, що AddAssign — це ім’я фічі, що реалізує оператор +=, а помилка говорить про те, що числа з плаваючою комою не реалізують цей оператор для цілих чисел (повний список трейтів операторів знаходиться тут ).\nЗнову ж таки Rust любить бути явним — він не буде мовчки перетворювати ціле число на число з плаваючою точкою за вас.\nМи повинні явно привести це значення до значення з плаваючою точкою, ось так:\n// add3.rs\nfn main() {\n    let mut sum = 0.0;\n    for i in 0..5 {\n        sum += i as f64;\n    }\n    println!(\"sum is {}\", sum);\n}\n  Явні типи функцій\nФункції – це одне з місць, де компілятор не обчислюватиме типи за вас. І це було навмисним рішенням, оскільки в мовах типу Haskell настільки потужний вивід типів, що явних імен типів майже немає. Це хороший стиль Haskell — вводити явні типи підписів для функцій. Rust вимагає це завжди.\nОсь проста функція користувача:\n// fun1.rs\n\nfn sqr(x: f64) -> f64 {\n    return x * x;\n}\n\nfn main() {\n    let res = sqr(2.0);\n    println!(\"square is {}\", res);\n}\nRust повертається до старого стилю оголошення аргументів, коли тип слідує за ім’ям. Так це робилося в мовах, похідних від Алгола, таких як Паскаль.\nЗнову ж таки жодних перетворень цілих чисел на дробові — якщо замінити 2.0 на 2, то ми отримаємо явну помилку:\n8 |     let res = sqr(2);\n  |                   ^ expected f64, found integral variable\n  |\nНасправді ви рідко побачите функції, написані з використанням оператора повернення. Найчастіше це виглядає таким чином:\nfn sqr(x: f64) -> f64 {\n    x * x\n}\nЦе тому, що тіло функції (всередині {}) має значення останнього висловлювання, як у разі блоку if-выразу.\nОскільки точка з комою вставляється напівавтоматично людськими пальцями, ви можете додати її сюди й отримати таку помилку:\n  |\n3 | fn sqr(x: f64) -> f64 {\n  |                       ^ expected f64, found ()\n  |\n  = note: expected type `f64`\n  = note:    found type `()`\nhelp: consider removing this semicolon:\n --> fun2.rs:4:8\n  |\n4 |     x * x;\n  |       ^\nТип ()– це порожній тип (void). Усе в Rust має значення, але іноді це буває просто ніщо. Компілятор знає, що це поширена помилка і допомагає вам. Будь-хто, хто проводив час із компілятором C++, знає, наскільки це незвичайно.\nЩе кілька прикладів цього стилю виразу без return:\n// absolute value of a floating-point number\nfn abs(x: f64) -> f64 {\n    if x > 0.0 {\n        x\n    } else {\n        -x\n    }\n}\n\n// ensure the number always falls in the given range\nfn clamp(x: f64, x1: f64, x2: f64) -> f64 {\n    if x < x1 {\n        x1\n    } else if x > x2 {\n        x2\n    } else {\n        x\n    }\n}\nВикористання returnне є неправильним, але код без нього чистіший. Ви все одно використовуватимете returnдля повернення з функції раніше часу.\nДеякі операції можуть бути елегантно виражені рекурсивно:\nfn factorial(n: u64) -> u64 {\n    if n == 0 {\n        1\n    } else {\n        n * factorial(n-1)\n    }\n}\nСпочатку це може здатися трохи дивним, і тоді найкраще скористатися олівцем і папером та вирішити кілька прикладів. Однак зазвичай це не найефективніший спосіб виконання такої операції.\nЗначення також можуть надсилатися за посиланням. Посилання створюється з допомогою &та розіменовується з допомогою *.\nfn by_ref(x: &i32) -> i32{\n    *x + 1\n}\n\nfn main() {\n    let i = 10;\n    let res1 = by_ref(&i);\n    let res2 = by_ref(&41);\n    println!(\"{} {}\", res1,res2);\n}\n// 11 42\nЩо, якщо ви хочете, щоб функція змінила один зі своїх аргументів? Вводимо посилання, що змінюються:\n// fun4.rs\n\nfn modifies(x: &mut f64) {\n    *x = 1.0;\n}\n\nfn main() {\n    let mut res = 0.0;\n    modifies(&mut res);\n    println!(\"res is {}\", res);\n}\nЦе більше схоже на те, як це робиться в C, ніж у C++. Ви повинні явно передати посилання (з допомогою &) та явно розіменувати її з допомогою *. Потім встановити mut, тому що він не використовується за промовчанням.\nНасправді Rust вводить тут потенційні проблеми і не дуже приховано підштовхує вас до повернення значень з функцій безпосередньо. На щастя, у Rust є потужні способи вираження таких речей, як «операція пройшла успішно, і ось результат», тому &mutпотрібний не так часто. Передача за посиланням важлива, коли ми маємо великий об’єкт і не хочемо його копіювати.\nСтиль type-after-variable застосовується і до let, коли ви дійсно хочете точно визначити тип змінної:\nlet bigint: i64 = 0;\n  Вчимося знаходити допомогу\nНастав час почати користуватися документацією. Вона буде встановлена на вашій машині разом з компілятором, і ви можете використовувати rustup doc --std, щоб відкрити її у браузері.\nЗверніть увагу на поле пошуку у верхній частині екрана, оскільки воно надовго стане вашим помічником. Воно працює повністю автономно.\nПрипустимо, ми хочемо подивитись, де знаходяться математичні функції, тому шукаємо «cos». Перші два результати показують, що вона визначена як для чисел із плаваючою одинарною комою, так і для подвійної точності. Функція визначається як метод, наприклад, так:\nlet pi: f64 = 3.1416;\nlet x = pi/2.0;\nlet cosine = x.cos();\nЧому нам потрібен явний тип f64? Тому що без нього константа може бути або f32, або f64вони дуже різні.\nДозвольте процитувати приклад, наведений для cos, але написаний як повна програма ( assert!є двоюрідним братом assert_eq!):\nfn main() {\n    let x = 2.0 * std::f64::consts::PI;\n\n    let abs_difference = (x.cos() - 1.0).abs();\n\n    assert!(abs_difference < 1e-10);\n}\nstd::f64::consts::PI — це багатозначне слово! ::означає те саме, що й у C++ (іншими мовами часто пишеться через ‘.‘) — це повне кваліфіковане ім’я. Ми отримуємо це повне ім’я з другого запиту на пошук PI.\nДо цих пір наші маленькі Rust-програми були вільні від усіх цих importі include, які зазвичай уповільнюють обговорення програм типу Hello world. Давайте зробимо цю програму більш читабельною з допомогою оператора use:\nuse std::f64::consts;\n\nfn main() {\n    let x = 2.0 * consts::PI;\n\n    let abs_difference = (x.cos() - 1.0).abs();\n\n    assert!(abs_difference < 1e-10);\n}\nМасиви та зрізи\nУсі статично типізовані мови мають масиви, які являють собою значення, упаковані у пам’яті від старту до хвоста. Масиви індексуються з нуля:\n// array1.rs\nfn main() {\n    let arr = [10, 20, 30, 40];\n    let first = arr[0];\n    println!(\"first {}\", first);\n\n    for i in 0..4 {\n        println!(\"[{}] = {}\", i,arr[i]);\n    }\n    println!(\"length {}\", arr.len());\n}\nІ на виході ми отримуємо:\nfirst 10\n[0] = 10\n[1] = 20\n[2] = 30\n[3] = 40\nlength 4\nУ цьому випадку Rust точно знає, якого розміру масив, і, якщо ви спробуєте звернутися до arr[4], це призведе до помилки компіляції.\nВивчення нової мови часто має на увазі відмову від ментальних звичок з мов, які ви вже знаєте; якщо ви Python-іст, то ці дужки говорять про List. Масиви можуть змінюватися (якщо ми ввічливо попросимо), але не можна додавати нові елементи.\nМасиви не часто використовуються в Rust, тому що тип масиву включає його розмір. Тип масиву у прикладі — [i32; 4];тип [10, 20]буде [i32; 2]і так далі: вони мають різні типи. Тому їх незручно передавати як аргументи функцій.\nСаме тому часто використовуються зрізи. Можна думати про них як про уявлення базового масиву значень. У решті випадків вони поводяться дуже схоже на масив і знають свій розмір, на відміну від небезпечних аналогів — вказівників.\nЗверніть увагу у прикладі нижче на два важливі моменти: як записати тип зрізу + те, що для передачі його в функцію потрібно використовувати &.\n/ array2.rs\n// read as: slice of i32\nfn sum(values: &[i32]) -> i32 {\n    let mut res = 0;\n    for i in 0..values.len() {\n        res += values[i]\n    }\n    res\n}\n\nfn main() {\n    let arr = [10,20,30,40];\n    // look at that &\n    let res = sum(&arr);\n    println!(\"sum {}\", res);\n}\nПроігноруємо на якийсь час код sumі подивимося на &[i32]. Зв’язок між масивами та зрізами в Rust аналогічний зв’язку між масивами та вказівниками в Ci, за винятком двох важливих відмінностей — зрізи в Rust відстежують свій розмір (і будуть панікувати, якщо ви спробуєте отримати доступ за межами цього розміру), і ви повинні явно сказати, що хочете передати масив як зріз, використовуючи оператор &.\nПрограміст на Cі вимовляє &як «адреса», програміст на Rust вимовляє його як «запозичувати». Це слово буде ключовим для вивчення Rust. Запозичення — це назва поширеної схеми в програмуванні, коли ви передаєте щось за посиланням (що майже завжди відбувається в динамічних мовах) або передаєте вказівник у Ci. Усе, що запозичене, залишається у власності первісного власника.\nНарізка на шматочки та кубики\nВи не можете роздрукувати масив звичайним способом з допомогою {}, але можете зробити налагоджувальний друк з допомогою {:?}.\n// array3.rs\nfn main() {\n    let ints = [1, 2, 3];\n    let floats = [1.1, 2.1, 3.1];\n    let strings = [\"hello\", \"world\"];\n    let ints_ints = [[1, 2], [10, 20]];\n    println!(\"ints {:?}\", ints);\n    println!(\"floats {:?}\", floats);\n    println!(\"strings {:?}\", strings);\n    println!(\"ints_ints {:?}\", ints_ints);\n}\nЩо дає:\nints [1, 2, 3]\nfloats [1.1, 2.1, 3.1]\nstrings [\"hello\", \"world\"]\nints_ints [[1, 2], [10, 20]]\nОтже, масиви масивів — це проблема, але важливо те, що масив містить значення лише одного типу. Значення в масиві розташовуються у пам’яті фізично поруч один з одним, тому доступ до них дуже ефективний.\nЯкщо вам цікаво, якими є реальні типи цих змінних, ось корисний трюк. Просто оголосіть змінну з явним типом, який, як ви знаєте, буде неправильним:\nlet var: () = [1.1, 1.2];\nОсь інформативна помилка:\n3 |     let var: () = [1.1, 1.2];\n  |                   ^^^^^^^^^^ expected (), found array of 2 elements\n  |\n  = note: expected type `()`\n  = note:    found type `[{float}; 2]`\n( {float}означає «деякий тип із плаваючою точкою, який ще не повністю визначений»)\nСлайси дають вам різні представлення одного й того самого масиву:\n// slice1.rs\nfn main() {\n    let ints = [1, 2, 3, 4, 5];\n    let slice1 = &ints[0..2];\n    let slice2 = &ints[1..];  // open range!\n\n    println!(\"ints {:?}\", ints);\n    println!(\"slice1 {:?}\", slice1);\n    println!(\"slice2 {:?}\", slice2);\n}\nints [1, 2, 3, 4, 5]\nslice1 [1, 2]\nslice2 [2, 3, 4, 5]\nЦе акуратна нотація, яка подібна до зрізів Python, але з великою відмінністю: копія даних ніколи не створюється. Усі ці зрізи запозичують дані зі своїх масивів. У них дуже тісний зв’язок з масивом, і Rust витрачає багато зусиль на те, щоб цей зв’язок не порушувався.\nНеобов’язкові значення\nЗрізи, як і масиви, можуть бути індексовані. Rust дізнається про розмір масиву під час компіляції, але розмір зрізу відомий тільки під час виконання. Тому s[i]може призвести до помилки поза межами при виконанні та викликатиме паніку. І тут немає винятків.\nОсмисліть це добре, тому що це шокує. Ви не можете загорнути сумнівний код, який викликає паніку, у який-небудь try-blockі просто «зловити помилку» — принаймні не в тому вигляді, який ви хотіли б використовувати кожен день. То як же Rust може бути безпечним?\nІснує метод slice get, який не викликає паніки. Але що він вертає?\n// slice2.rs\nfn main() {\n    let ints = [1, 2, 3, 4, 5];\n    let slice = &ints;\n    let first = slice.get(0);\n    let last = slice.get(5);\n\n    println!(\"first {:?}\", first);\n    println!(\"last {:?}\", last);\n}\n// first Some(1)\n// last None\nlastне спрацював (ми забули про нульове індексування), але повернули щось під назвою None. firstспрацював нормально, але відображається як значення, загорнуте в Some. Ласкаво просимо до типу Option! Це може бути Someабо None.\nТип Optionмає кілька корисних методів:\n    println!(\"first {} {}\", first.is_some(), first.is_none());\n    println!(\"last {} {}\", last.is_some(), last.is_none());\n    println!(\"first value {}\", first.unwrap());\n\n// first true false\n// last false true\n// first value 1\nЯкби ви розгорнули last, то отримали б паніку. Але принаймні ви можете спочатку викликати is_some, щоб переконатися в цьому, наприклад, якщо у вас є явне не-значення за промовчанням:\nlet maybe_last = slice.get(5);\n    let last = if maybe_last.is_some() {\n        *maybe_last.unwrap()\n    } else {\n        -1\n    };\nЗверніть увагу на * — точний тип всередині Some — &i32, що є посиланням. Нам потрібно розіменувати його, щоб повернутися до значення i32.\nЦе довго, тому є короткий шлях — unwrap_orповерне значення, яке йому було надано, якщо опція була None. Типи повинні збігатися — getповертає посилання, тому вам доведеться скласти &i32 з  &-1. Нарешті, знову використовуйте *для отримання значення у вигляді i32.\nlet last = *slice.get(5).unwrap_or(&-1);\nЛегко пропустити &, але компілятор тут підстрахує вас. Якщо це було -1, rustc скаже «очікувалося &{ціле}, знайдено інтегральну змінну», а потім «help: try with &-1».\nВи можете представити Option як поле, яке може містити значення або нічого (None). У Haskell це називається Maybe. Він може містити значення будь-якого типу, яке є параметром типу. У цьому випадку повним типом є Option<&i32>, використовуючи нотацію у стилі C++ для дженериків. Розгортання цієї скриньки може призвести до вибуху, але, на відміну від кота Шредінгера, ми можемо заздалегідь знати, чи він містить значення.\nДуже часто функції/методи Rust повертають такі maybe-боксы, тому навчіться їх зручно використовувати.\nДалі буде…','2022-12-03 00:29:56','2022-12-03 00:29:56'),(204,'План-карта зі швидкого навчання Python з нуля до професіонала','Игорь Грегорченко\nТехнический редактор Highload','Вивчити Python можна швидко. Наскільки швидко — залежить від того, чого конкретно ви хочете досягти з його допомогою і скільки часу можете виділити на регулярне вивчення та практику. Професіонал з десятирічним стажем, який навчає мові останні п’ять років, склав roadmap з восьми послідовних етапів навчання для всіх програмістів-початківців.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЦя стаття — переказ оригінальної статті з нашими доповненнями.\nСпочатку хочу зробити деякі припущення про вас і причини, які спонукали прочитати цю статтю. Ось на що ми розраховуємо на старті:\nУ вас практично немає досвіду вивчення Python.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nУ вас немає досвіду програмування на Python або взагалі.\nВи хочете знати, скільки часу займе вивчення Python.\nВас цікавлять ресурси та стратегії вивчення Python.\nЦей матеріал написаний для початківців. У ньому є поради та стратегії, щоб будь-хто міг вивчати Python самостійно та максимально ефективно.\nНаскільки швидко можна вивчити Python\nЯкщо вас цікавлять базові основи програмування на Python, навчання може зайняти не більше трьох-чотирьох тижнів при регулярній практиці. Якщо ж ви зацікавлені в освоєнні Python для виконання складних завдань або реальних проєктів для зміни професії, це займе вже набагато більше часу.\nУ когось на це йде кілька місяців, але зазвичай гуманітарій опановує мову програмування (при належному старанні) приблизно протягом року. У цій статті наведено поради та найкращі ресурси, які допоможуть отримати знання з програмування на Python у максимально короткі терміни.\nЯкщо ви ставите запитання, скільки коштуватиме вивчення Python, то відповідь буде: «залежить від ситуації». В інтернеті є великий вибір безкоштовних ресурсів, не кажучи вже про різні книги, курси та платформи, які опубліковані в електронному вигляді спеціально для початківців. Але загалом, можна сказати, вивчення мови програмування — досить бюджетне захоплення.\nВивчайте «Пітон» граючи\nІнше запитання, яке може виникнути: наскільки складно вивчити Python? Це також залежить від ситуації. Якщо на старті у вас є досвід програмування іншою мовою, наприклад, R, Java або C++, то вам, швидше за все, буде легше швидко вивчити Python, ніж тому, хто раніше не програмував взагалі.\nВивчення такої мови програмування, як Python, схоже на вивчення природної мови. Спочатку ви запам’ятовуєте базову лексику та вивчаєте правила синтаксису. Згодом додаєте до свого репертуару нові слова та пробуєте нові способи їх використання. З вивченням Python все те саме.\nЗараз ви вже думаєте: «Здорово! Можна вивчити Python швидко, дешево та легко. Просто скажіть, що читати, і направте мене потрібним шляхом». Не так швидко! Є ще четверта річ, яку потрібно врахувати, і це те, як саме вивчати Python.\nДослідження в галузі навчання показали, що не всі люди навчаються однаково. Одні найкраще навчаються, коли читають щось самостійно, інші — коли бачать і чують (іноді краще в групі з однодумців). Декому подобається вчитися у грі, а не на курсах чи лекціях. Вивчаючи наведений нижче список ресурсів, враховуйте свої переваги в навчанні.\nА тепер приступимо до роботи. Нижче наведені вісім базових порад, які допоможуть швидко вивчити Python. Це загальна покрокова стратегія, яку можна доповнювати\nВИВЧІТЬ ОСНОВИ PYTHON\nСпочатку треба вивчити основи. Без їх розуміння вам буде важко працювати над складними проблемами, проєктами чи сценаріями використання. Приклади основ Python включають такі напрями:\nЗмінні та типи.\nСписки, словники та множини.\nОсновні оператори.\nФорматування рядків.\nОсновні операції із рядками.\nУмови.\nЦикли.\nФункції.\nРозуміння списків.\nКласи й об’єкти.\nУсі ці основи можна швидко вивчити на різних вебсайтах: docs.python.org, RealPython.org, stavros.io, developers.google.com, pythonforbeginners.org.\nДокладніше див. розділ «Вебсайти» нижче.\nВИЗНАЧТЕ МЕТУ НАВЧАННЯ\nПерш ніж почати вивчати Python, визначте мету свого навчання. Труднощі, з якими ви стикнетеся на початку, буде легше подолати, якщо ви будете чітко пам’ятати про мету. Крім того, ви знатимете, на якому навчальному матеріалі зосередитися, а який можна пропустити.\nНаприклад, якщо хочете вивчити Python для аналізу даних, потрібно буде виконувати вправи, писати функції та вивчати бібліотеки Python, які полегшують аналіз даних. Нижче наведені типові приклади цілей вивчення Python, які можуть бути для вас актуальними:\nАналіз даних.\nНаука про дані та машинне навчання.\nМобільні застосунки.\nРозробка вебсайтів.\nАвтоматизація роботи.\n  ВИБЕРІТЬ РЕСУРС ДЛЯ ШВИДКОГО ВИВЧЕННЯ PYTHON\nРесурси з вивчення Python можна розділити на три основні категорії:\nінтерактивні ресурси;\nнеінтерактивні ресурси;\nвідеоресурси.\nОчні або дистанційні платні курси теж один з варіантів, але ми їх не будемо розглядати в цьому дописі (ми ж обіцяли бюджетне та доступне всім навчання).\nІнтерактивні ресурси широко поширилися останніми роками завдяки популяризації інтерактивних онлайн-курсів, які надають практичні завдання з кодингу та пояснення. А якщо вам здається, що ви кодите, то це тому, що ви дійсно кодите. Інтерактивні ресурси зазвичай доступні безкоштовно чи за символічну плату, або є безкоштовна пробна версія перед покупкою.\nНеінтерактивні ресурси — найтрадиційніші та перевірені часом, наприклад, книги (цифрові та паперові) та вебсайти («онлайн-підручники»). Багато з тих, хто починає вивчати Python, віддають їм перевагу через звичний і зручний вигляд. Є безліч таких неінтерактивних ресурсів, і більшість із них є повністю безкоштовними.\nВідеоресурси стали популярними останніми десятьма роками завдяки МВОКам (масовим відкритим онлайн-курсам) та нагадують університетські лекції, записані на відео. Більше того, вони часто підтримуються чи просуваються провідними університетами.\nЗараз, наприклад, на YouTube є безліч відеоресурсів з різних предметів, включаючи програмування на Python. Деякі з цих відеоресурсів є попередньо записаними курсами, а інші транслюються у прямому ефірі. Наприклад, компанія General Assembly випускає такий курс Python, який охоплює основи мови за один тиждень.\nНижче наведений список ресурсів, які допоможуть швидко освоїти Python. Вони відносяться до категорій, зазначених вище, та охоплюють як мінімум основи Python. У списку позначені зірочкою (*) безкоштовні ресурси.\nІ відразу зауваження: звикайте до англійської мови, це значно допоможе, коли ви перейдете до етапу пошуку роботи, адже в процесі навчання ви чудово схопите всю термінологію англійською. Без англійської мови заробляти на програмуванні досить складно, тому одразу почніть навчатися англійською. Це значно покращить ваші шанси на круту роботу.\nІнтерактивні ресурси: інструменти й уроки\nCodeAcademy: одна з найпопулярніших інтерактивних онлайн-платформ для швидкого вивчення Python. Курс CodeAcademy з основ Python відмінно підходить для абсолютного новачка, пройти його можна за тиждень. Він допоможе вам захопитися програмуванням на Python.\nDataCamp: короткі відеоролики від експертів із практичними вправами на клавіатурі. Не поступається курсам CodeAcademy.\n*PythonTutor.com: інструмент, який допомагає крок за кроком писати та візуалізувати код. Його можна використовувати в парі з іншим навчальним ресурсом. Цей інструмент значно полегшує вивчення основ Python, оскільки ви можете визуалізувати, що робить ваш код.\n*stepik.org: шалений адаптивний тренажер. Заходьте на «Степік» і знайдіть усі курси на тему Python, це дуже ефективно тренує ваші практичні навички. Потикатися туди є сенс лише після освоєння базової теорії, ІМХО для контролю своїх знань немає нічого кращого.\nНеінтерактивні ресурси\nНеінтерактивні ресурси поділяються на дві підкатегорії: книги та вебсайти.\nКнижки\nБільшість книг призначені для програмістів, зацікавлених у глибокому вивченні Python, або для майстрів Python, які шукають надійні довідкові матеріали («куховарські книги») або спеціалізовану літературу. Нижче я перерахував лише ті книги, які РЕАЛЬНО корисні для початківців.\nВведення в Python, 2-е видання: ця книга поєднує в собі підручники та рецепти коду у стилі куховарської книги для пояснення фундаментальних концепцій Python.\nLearn Python 3 The Hard Way: 52 добре розроблені вправи для тих, хто починає вивчати Python.\nОснови Python: A Practical Introduction to Python 3: на сайті книги все сказано — вона призначена для того, щоб ви пройшли шлях від новачка до середнього рівня.\nPython Crash Course, 2nd Edition: ця книга дає основи загальних концепцій програмування, основ Python та вирішення проблем з допомогою реальних проєктів.\nСайти\nЯ вирішив включити тільки ті, які мають явну перевагу щодо зручності або навчальної програми. Усі ці ресурси безкоштовні.\n*Google’s Python Class: підручники, відео та вправи з програмування на Python для початківців від компанії, дружньої до Python.\n*Hitchhiker’s Guide to Python: цей посібник допоможе вивчити та покращити ваш код на Python, а також навчить настроювати середовище кодування. Пошук по сайту надзвичайно ефективно допомагає знайти те, що потрібно.\n*Python для всіх: онлайн-книга, що містить інструкцію з вивчення Python для тих, хто зацікавлений у вирішенні проблем аналізу даних. Доступна у форматі PDF іспанською, італійською, португальською та китайською мовами.\n*Python для тебе і мене: онлайн-книга, яка охоплює теми для початківців ы просунутих у концепціях Python, а також знайомить з популярним фреймворком Python для вебзастосунків.\n*Python.org: Офіційна документація Python: на сайті також представлені посібники для початківців, глосарій Python, посібники з налаштування та методички.\n*Programiz in Python: Programiz містить докладний підручник з основ Python, який дійсно добре зроблений. Він настільки крутий, що не має бути безкоштовним, але є безкоштовним.\n*RealPython.com: велика колекція спеціалізованих підручників з Python, більшість з них супроводжуються відеодемонстраціями.\n*Sololearn: 92 розділи, 275 тестів і кілька проєктів з основ Python, доступ до яких можна отримати через мобільний застосунок.\n*Tutorialspoint.com: простий підручник з основ Python.\n*W3Schools for Python: ще один простий підручник від авторитетного ресурсу для веброзробників.\nВідеоресурси\nВідеоресурси стають усе популярнішими, і на те вагомі причини: вони зручні. Навіщо читати підручник чи навчальний посібник, якщо можна комфортно вивчити той самий матеріал у відеоформаті на комп’ютері чи мобільному пристрої? Відеокурси поділяються на дві підкатегорії: попередньо записані та живі.\nПопередньо записані курси\nCoursera: великий каталог популярних курсів Python для всіх рівнів. Більшість курсів можна пройти безкоштовно, а платні курси супроводжуються сертифікацією. Також можна переглядати курси в мобільному застосунку.\nEdX: проводить університетські курси, присвячені конкретним галузям застосування Python (наука про дані, розробка ігор, штучний інтелект), а також основ програмування. В EdX також є мобільний застосунок.\nPluralsight: каталог відеоматеріалів, присвячених основам Python, а також спеціалізованим темам, таким як машинне навчання на Python.\nRealyPython.com: колекція попередньо записаних відео з основ Python для початківців.\n*TreeHouse: бібліотека відеоматеріалів з основ Python і проміжних матеріалів.\nEvantoTutsPlus: вісім годин попередньо записаних відео з основ Python, а також деякі проміжні матеріали.\n*Udacity: надає п’ятитижневий курс з основ Python. Також розглядаються популярні модулі стандартної бібліотеки Python та інші сторонні бібліотеки.\nUdemy: бібліотека популярних курсів Python для учнів усіх рівнів. Важко виділити якийсь конкретний курс. Рекомендую попередньо переглянути кілька курсів з Python для початківців, поки не знайдете той, який вам найбільше сподобається. Також можете переглядати курси в їхньому мобільному застосунку.\nЖиві курси\nGeneral Assembly: цей відомий живий онлайн-курс від General Assembly позбавляє всіх здогадів або неточностей при вивченні Python. У General Assembly у вас є підготовлена та всеосяжна програма вивчення Python, живий викладач, помічник, а також мережа колег і випускників, з якими можна спілкуватися під час та після курсу.\n  РОЗГЛЯНЬТЕ МОЖЛИВІСТЬ ВИВЧИТИ БІБЛІОТЕКУ PYTHON\nКрім вивчення мови Python корисно вивчити одну або дві бібліотеки Python. Бібліотеки — це набори спеціалізованих функцій, які є «прискорювачами» для стандартних завдань розробки. Без них вам довелося б писати власний код з нуля для виконання спеціалізованих завдань. Наприклад, Pandas – дуже популярна бібліотека для роботи з табличними даними. Numpy допомагає виконувати математичні та логічні операції над масивами.\nДля опису популярних бібліотек потрібен окремий пост, а поки ознайомтеся з цією сторінкою Python.org про стандартні бібліотеки Python і цією сторінкою GitHub про додаткові бібліотеки Python.\n  ПРИСКОРТЕ ПРОЦЕС УСТАНОВКИ PYTHON З ДОПОМОГОЮ ANACONDA\nВи можете завантажити програму встановлення Python із сайту Python Software Foundation, а потім шукати та завантажувати додаткові бібліотеки; або можна завантажити програму установки Anaconda, яка вже поставляється з багатьма пакетами, які ви регулярно використовуватимете, особливо якщо плануєте використовувати Python для аналізу даних або науки про дані.\n  ВИБЕРІТЬ І ВСТАНОВІТЬ IDE\nВам необхідно встановити інтегроване середовище розробки (IDE), яке є застосунком, що дозволяє створювати сценарії, тестувати і виконувати код на Python.\nКоли йдеться про IDE, правильною буде та, якою вам найбільше подобається користуватися. Згідно з різними джерелами, найпопулярнішими IDE/текстовими редакторами Python є PyCharm, Spyder, Jupyter Notebook, Visual Studio, Atom та Sublime. Спочатку хороші новини: майже всі вони безкоштовні, тому спробуйте кілька, перш ніж зупинитися на одному.\nДалі «погані» новини: кожна IDE/текстовий редактор має трохи відмінний інтерфейс і набір функцій, тому знадобиться деякий час, щоб навчитися користуватися кожною з них, щоб нарешті усвідомлено вибрати щось своє.\nДля новачків у Python я рекомендую кодувати в Jupyter Notebook. У нього простий дизайн і впорядкований набір можливостей, які не відволікатимуть та полегшать практику та створення прототипів на Python. Він також постачається зі спеціальним дисплеєм для відображення кадрів даних і графіків. Якщо ви завантажите Anaconda, Jupyter Notebook буде встановлений. З часом я раджу вам спробувати інші IDE, які краще підходять для розробки (Pycharm) або науки даних (Rodeo) і дозволяють інтегруватися (Sublime).\nКрім того, подумайте про встановлення обробника помилок або автокомплітера на додаток до IDE, особливо якщо ви працюєте над тривалими проєктами. Він вкаже на помилки та допоможе вам писати код швидше. Хорошим варіантом є Kite, до того ж він безкоштовний та інтегрується з більшістю IDE.\nЯКЩО СУМНІВАЄТЕСЯ, ВИКОРИСТОВУЙТЕ GOOGLE ДЛЯ ПОШУКУ Й УСУНЕННЯ НЕПОЛАДОК У КОДІ\nКоли ви, будучи новачком, працюєте над вправами, прикладами та проєктами на Python, одним з найпростіших способів усунення помилок буде вивчення досвіду інших розробників Python. Просто запустіть швидкий пошук в інтернеті та вкажіть ключові слова щодо вашої помилки.\nНаприклад, «how to combine two lists in Python» или «Python how to convert to datetime» — цілком прийнятні пошукові запити, які приведуть вас на кілька популярних форумів, таких як StackOverFlow, Stack Exchange, Quora, Programiz та GeeksforGeeks.\n  СКЛАДІТЬ ГРАФІК ВИВЧЕННЯ PYTHON І ПРИТРИМУЙТЕСЯ ЙОГО\nЦе та частина, яку більшість людей пропускають, що призводить до невдач або затримок. Тепер усе, що вам залишилося, це скласти розклад. Я рекомендую вам скласти розклад мінімум на два тижні, щоб розподілити час між заняттями та забезпечити собі достатньо часу для адекватного вивчення основ Python, практики кодування в IDE та усунення неполадок у коді. Можна рухатися вперед такими двотижневими спринтами, причому дуже важлива систематичність занять.\nЧастина складності (і насолоди) вивчення Python або будь-якої іншої мови програмування полягає в усуненні помилок. Після перших двох тижнів ви будете вражені тим, наскільки далеко ви просунулися, і у вас буде достатньо практики, щоб продовжити вивчення більш просунутого матеріалу, що надається вибраним вами ресурсом. У міру накопичення досвіду та систематичності занять ви будете набувати все більшої впевненості в тому, що робите. Поки це самонавчання поступово не стане процесом, що самопідтримується, перетворившись на ще одну (хочеться вірити, що корисну) звичку.\nЗАКЛЮЧНІ ДУМКИ\nМи визначили мінімальні терміни навчання, ви знаєте, як вибрати мету навчання, у вас є список навчальних ресурсів і методів навчання, з яких реально можна вибирати, і ви знаєте, які ще міркування потрібно буде врахувати у процесі навчання.\nЯ сподіваюся, що ви скористаєтеся цими порадами, щоб прискорити та впорядкувати своє навчання Python!','2022-12-03 00:30:05','2022-12-03 00:30:05'),(205,'Плюси та мінуси JWT: короткий огляд тонкощів цієї технології','Игорь Грегорченко\nТехнический редактор Highload','У цій статті представлений аналіз JWT (JSON Web Tokens, правильно вимовляється як «джот») — починаючи з того, як вони використовуються, і закінчуючи плюсами та мінусами використання JWT у вашому додатку. Останнім часом автентифікація за допомогою JWT стала неймовірно популярна, тим часом, багато програмістів-початківців не до кінця розуміють, що крім очевидних плюсів у цього підходу є й мінуси. Ми спробували максимально візуалізувати схеми та логіки роботи авторизації, щоб наш аналіз був максимально зрозумілим та простим для читача.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nJWT стають все більш всюдисущими. Постачальники послуг з управління ідентифікацією та доступом клієнтів (CIAM) повсюдно просувають JWT як срібну кулю взагалі для всього. JWT — це дуже класно, але давайте поговоримо про деякі недоліки JWT та альтернативні рішення, які ви також можете розглянути.\nОдин із способів опису JWT полягає в тому, що він є «перенесеними одиницями ідентифікації». Це означає, що токени містять інформацію про ідентифікацію у форматі JSON і можуть універсальним способом передаватись службам та додаткам. Будь-який сервіс або програма може самостійно перевірити JWT. Служба/додаток, що отримує JWT, не має запитувати постачальника ідентифікаційних даних, який створив JWT, чи дійсний він. Після перевірки JWT-служба або програма може використовувати дані, що містяться в ньому, для виконання дій від імені користувача.\nОсь загальна діаграма, що ілюструє, як постачальник ідентифікаційних даних створює JWT, і як служба може використовувати JWT, не звертаючись до постачальника ідентифікаційних даних (так, на діаграмі зображено Palm Pilot):\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nКоли ви порівняєте це з непрозорим токеном, ви зрозумієте, чому багато розробників використовують JWT. Непрозорі токени — це просто великий рядок символів, що не містить жодних даних. Такий токен повинен бути перевірений шляхом додаткового запиту у постачальника ідентифікаційних даних, чи він дійсний, і повертає дані користувача, необхідні службі.\nОсь діаграма, що ілюструє, як викликається постачальник ідентифікаційних даних для перевірки непрозорого токена та для отримання даних користувача:\nЦей метод перевірки та обміну токенами може бути дуже «балакучим», створюючи певний оверхед. Крім того, він також вимагає метод збереження та завантаження токенів усередині провайдера ідентифікації. JWT-токени, з іншого боку, не вимагають збереження або специфічної логіки в провайдері ідентифікації, оскільки вони переносні та універсальні.\nЄ кілька моментів, які слід враховувати під час ухвалення рішення про використання JWT. Давайте розглянемо кілька основних із них.\nТермін дії JWT спливає через певні проміжки часу\nКоли створюється JWT, то йому призначається певний термін дії. Термін дії JWT є фіксованим, також рекомендується, щоб він був невеликим (думайте про хвилини, а не години). Якщо у вас є досвід роботи з традиційними сесіями, то JWT у цьому плані дуже від них відрізняється.\nТрадиційні сесії авторизації завжди мають певну тривалість з часу останньої взаємодії з користувачем. Це означає, що якщо користувач натискає кнопку, його сесія продовжується. Якщо згадати більшість додатків, якими ви користуєтеся, це досить поширене явище. Ви автоматично виходите з програми після певного часу бездіяльності.\nДія токенів JWT, з іншого боку, не подовжуються при взаємодії з користувачем. Натомість вони програмно замінюються шляхом створення нового JWT для користувача, причому все відбувається прозоро та у фоновому режимі.\nЩоб вирішити цю проблему, більшість програм використовують маркери оновлення. Маркери оновлення — це непрозорі токени, які використовуються для створення нових JWT. Термін дії маркерів оновлення також має закінчитися у певний момент, але вони можуть бути гнучкішими в цьому механізмі, оскільки зберігаються в провайдері ідентифікації. Це також робить їх схожими на стандартні непрозорі токени, описані вище.\nJWT підписуються\nОскільки JWT підписані криптографічно, для їх перевірки знадобиться аналогічний криптографічний алгоритм. Криптографічні алгоритми спеціально розробляються так, аби бути повільними. Чим повільніше алгоритм, тим вища складність і менша ймовірність того, що алгоритм можна зламати методом перебору (brute force).\nНа чотириядерному MacBook Pro можна створити та підписати близько 200 JWT на секунду за допомогою RSA з відкритим та закритим ключем. Це число різко знижується на віртуалізованому устаткуванні, такому як Amazon EC2s. Підписання HMAC набагато швидше, але не має такої ж гнучкості та характеристик безпеки.\nЗокрема, якщо постачальник ідентифікаційних даних використовує HMAC для підписання JWT, всі служби, які хочуть перевірити JWT, повинні мати секрет HMAC. Це означає, що всі служби тепер також можуть створювати та підписувати JWT. Це робить JWT менш переносимими (зокрема, для публічних служб) та менш безпечними.\nЩоб дати вам уявлення про характеристики продуктивності JWT і використовувані криптографічні алгоритми, ми провели кілька тестів на чотириядерному MacBook. Ось виміри, які ми отримали за масового створення JWT (у форматі метрика/таймінг):\nСеріалізація JSON + кодування Base64 — 400,000/s\nСеріалізація JSON + кодування Base64 + підписання HMAC — 150,000/s\nСеріалізація JSON + кодування Base64 + підписання RSA — 200/s\nДекодування Base64 + Парсинг JSON — 400,000/s\nДекодування Base64 + Парсинг JSON + Перевірка HMAC – 130,000/s\nДекодування Base64 + парсинг JSON + верифікація RSA — 6,000/s\n\nJWT не можна легко відкликати\nЦе означає, що JWT може бути дійсним, навіть якщо обліковий запис користувача було припинено або видалено. Є кілька способів обійти це, включаючи «подію відкликання оновленого токена» у поєднанні з webhook. Це рішення, наприклад, доступне в FusionAuth.\nJWT мають вразливості\nЦе радше питання поганого кодування, ніж недоліків, властивих JWT. Алгоритм «none» і злам «HMAC» — добре відомі випадки використання JWT. Я не буду вдаватися до подробиць про ці вразливості, але якщо трохи пошукати, то можна знайти безліч обговорень.\nОбидві ці атаки мають прості виправлення. Зокрема, ви ніколи не повинні дозволяти JWT, які створені за допомогою алгоритму «none». Також не слід сліпо завантажувати ключі/підписи, використовуючи заголовок «kid» в JWT. Натомість слід додатково перевірити, що ключ дійсно є правильним ключем для алгоритму, вказаному у заголовку.\nСесії як альтернатива\nЗамість використання JWT або непрозорих токенів, у вас завжди є можливість використовувати сесії. Сесії існують вже понад два десятиліття і є перевіреною технологією. Сесії зазвичай працюють за допомогою файлів cookie та стану, що зберігається на боці сервера. Cookie містить рядок символів, який є ідентифікатором сесії. Сервер містить великий хеш, де зберігаються довільні дані.\nКоли користувач входить до системи, об’єкт користувача зберігається в сесії, а сервер відправляє сесійний файл cookie, що містить ідентифікатор сесії. Кожен наступний запит на сервер включає індивідуальний файл cookie для цієї сесії. Сервер використовує файл cookie для завантаження об’єкта користувача із сесії Hash. Потім об’єкт користувача використовується для ідентифікації користувача, який зробив запит. Ось дві діаграми, що ілюструють цю концепцію:\nВхід до системи — приклад входу до системи для сесій\n  Другий запит — Приклад виклику API з сесією\nЯкщо у вас невелика програма, яка використовує один бекенд, сесії працюють добре. Як тільки ви починаєте масштабуватися або використовувати мікросервіси, сеанси можуть стати складнішим завданням.\nНайбільші архітектури вимагають балансування навантаження та прив’язки сесій, коли кожен клієнт прив’язується до певного сервера, на якому зберігається його сесія. Реплікація сеансів або розподілений кеш може бути потрібен для забезпечення відмовостійкості або оновлення без простою. Навіть з урахуванням цієї додаткової складності, сесії все ще можуть бути гарним варіантом, якщо ви готові ускладнювати логіку реалізації подібним чином.\nПідбиття підсумків\nЯ сподіваюся, що цей короткий огляд JWT і сесій був корисний і пролив світло на ці технології, які використовуються для ідентифікації та управління користувачами. Будь-яке з цих рішень працюватиме практично в будь-якому додатку. Вибір зазвичай зводиться до ваших потреб, мов та фреймворків.\nНаприкінці ще раз варто зазначити, що за замовчуванням JWT не шифруються (режим none), і що рядок, який ми бачимо, є просто серіалізацією в кодуванні base64url, яку можна легко декодувати, щоб побачити звичайний вміст JSON, який несе токен.\nТому відповідь на первісне питання статті про безпеку JWT звучить так: «Це залежить від…». Як і багато інших технологій, JWT значною мірою залежить від хорошої конфігурації при випуску токенів, а також від правильного використання та коректної валідації споживаних ззовні токенів.\nДля автоматизації тестів безпеки для JWT можна запропонувати спеціалізований проект з відкритим вихідним кодом. На даний момент він складається з двох утиліт:\nAPICheck складається з набору невеликих інструментів, які можуть бути з’єднані в ланцюг для виконання кількох тестів на API-запити.\nПісля цього ми також зайнялися розробкою нового інструменту перевірки JWT, jwt-checker , в якому реалізували можливість проходження перевірки на коректність токенів.','2022-12-03 00:30:05','2022-12-03 00:30:05'),(206,'Основи Rust: рядки та матчинг','Игорь Грегорченко\nТехнический редактор Highload','У нашій послідовній серії матеріалів ми розглянемо базові основи новомодної мови Rust. А в другій частині циклу на основі вивченого спробуємо написати найпростіші смарт-контракти для таких блокчейн-проєктів, як Solana. У цьому туторіалі буде багато прикладів, мало теорії та швидкий темп просування.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЦей пост — вільний переклад російською ось цієї оригінальної статті (з нашими доповненнями в місцях, де це здалося потрібним), яку написав Стів Донован. Початок можна знайти ось тут, а зміст всієї серії — ось тут.\nУ цій частині поговоримо про рядки та матчинг.\nРядки\nРядки в Rust трохи складніші, ніж в інших мовах. Тип String, як і Vec, виділяється динамічно і має можливість зміни розміру (отже він схожий на std::string в C++, але не схожий на незмінні рядки в Java і Python). Але програма може містити багато рядкових літералів (наприклад, «hello»), і системна мова має вміти зберігати їх статично в файлі, що виконується.\nУ вбудованих мікросхем це може означати розміщення їх у дешевому ПЗП, а не в дорогій оперативній пам’яті (для малопотужних пристроїв оперативна пам’ять також дорога з точки зору енергоспоживання).\nКурс Frontend розробка\nЗаробляйте від $1800 вже через два роки і навчайтесь у вільний час\nРЕЄСТРУЙТЕСЯ!\nТому системна мова повинна мати два типи рядків: динамічно виділені та статичні.\nТак що рядок «hello» не має типу String. Він має тип &str (вимовляється як string slice). Це схоже на різницю між const char* і std::string у C++, тільки &str набагато інтелектуальніший. Насправді &str і String мають дуже схоже відношення один до одного, як &[T] до Vec<T>.\n// string1.rs\nfn dump(s: &str) {\n    println!(\"str \'{}\'\", s);\n}\nfn main() {\n    let text = \"hello dolly\";  // the string slice\n    let s = text.to_string();  // it\'s now an allocated string\n    dump(text);\n    dump(&s);\n}\nЗнову ж таки, оператор borrow може перетворити String на &str, так само, як Vec<T> може бути перетворений на &[T].\nПо суті, String — це Vec<u8>, а &str — &[u8], але ці байти мають бути правильним текстом UTF-8. Як і у векторі, в String можна вставити символ і витягнути його з кінця:\n// string5.rs\nfn main() {\n    let mut s = String::new();\n    // initially empty!\n    s.push(\'H\');\n    s.push_str(\"ello\");\n    s.push(\' \');\n    s += \"World!\"; // short for `push_str`\n    // remove the last char\n    s.pop();\n    assert_eq!(s, \"Hello World\");\n}\nМожна перетворити багато типів на рядки за допомогою to_string (якщо можна відобразити їх за допомогою \'{}\', то можна і перетворити).\nМакрос format! — дуже корисний спосіб побудови складніших рядків із використанням тих самих форматованих рядків, що й у println!\n// string6.rs\nfn array_to_str(arr: &[i32]) -> String {\n    let mut res = \'[\'.to_string();\n    for v in arr {\n        res += &v.to_string();\n        res.push(\',\');\n    }\n    res.pop();\n    res.push(\']\');\n    res\n}\nfn main() {\n    let arr = array_to_str(&[10, 20, 30]);\n    let res = format!(\"hello {}\", arr);\n    assert_eq!(res, \"hello [10,20,30]\");\n}\nЗверніть увагу на & перед v.to_string() — оператор визначений для string slice, а не для самого рядка, тому його потрібно зіставити трохи інакше.\nНотація, яка використовується для фрагментів, працює з рядками:\n// string2.rs\nfn main() {\n    let text = \"static\";\n    let string = \"dynamic\".to_string();\n    let text_s = &text[1..];\n    let string_s = &string[2..4];\n    println!(\"slices {:?} {:?}\", text_s, string_s);\n}\n// slices \"tatic\" \"na\"\nАле рядки не можна індексувати! Це пов’язано з тим, що вони використовують єдине дійсне кодування UTF-8, де кожен символ може бути декількома байтами.\n// string3.rs\nfn main() {\n    let multilingual = \"Hi! ¡Hola! привет!\";\n    for ch in multilingual.chars() {\n        print!(\"\'{}\' \", ch);\n    }\n    println!(\"\");\n    println!(\"len {}\", multilingual.len());\n    println!(\"count {}\", multilingual.chars().count());\n    let maybe = multilingual.find(\'п\');\n    if maybe.is_some() {\n        let hi = &multilingual[maybe.unwrap()..];\n        println!(\"Russian hi {}\", hi);\n    }\n}\n// \'H\' \'i\' \'!\' \' \' \'¡\' \'H\' \'o\' \'l\' \'a\' \'!\' \' \' \'п\' \'р\' \'и\' \'в\' \'е\' \'т\' \'!\'\n// len 25\n// count 18\n// Russian hi привет!\nТепер давайте розжуємо — є 25 байт, але лише 18 символів! Однак якщо ви використовуєте метод типу find, то отримаєте правильний індекс (якщо його знайдено), а потім будь-який string slice підійде. Тип char в Rust — це 4-байтовий кодовий рядок Unicode.\nРядки тут — це не масиви символів!\nString slice може «вибухнути» як векторна індексація, тому що вона використовує зміщення байтів. У цьому випадку рядок складається з двох байтів, тому спроба витягнути перший байт викликає помилку Unicode.\nТому будьте обережні: працюйте зі string slice лише з використанням коректних зсувів, отриманих із рядкових методів. Ось приклад того, як легко можна помилитись:\nlet s = \"¡\";\n    println!(\"{}\", &s[0..1]); <-- bad, first byte of a multibyte character\nРозбиття рядків — ще одне популярне та корисне заняття. Метод string split_whitespace повертає ітератор і ми обираємо, що з ним робити. Найчастіше потрібно створити вектор розбитих підрядків.\nМетод collect є дуже загальним і тому потребує деяких підказок про те, що він збирає — звідси і явний тип.\nlet text = \"the red fox and the lazy dog\";\n    let words: Vec<&str> = text.split_whitespace().collect();\n    // [\"the\", \"red\", \"fox\", \"and\", \"the\", \"lazy\", \"dog\"]\nТакож можна написати це інакше, передавши ітератор у метод extend:\nlet mut words = Vec::new();\n    words.extend(text.split_whitespace());\nУ більшості мов нам довелося б створювати ці окремі рядки, тоді як тут кожен фрагмент вектора запозичується з вихідного рядка. Все, що ми виділяємо, це місце для зберігання фрагментів.\nПодивіться на цей симпатичний дворядковий рядок нижче — там ми отримуємо ітератор за символами і беремо тільки ті символи, які не є пробілом. Знову ж таки, collect потребує підказки (можливо, нам потрібен вектор символів, наприклад):\nlet stripped: String = text.chars()\n        .filter(|ch| ! ch.is_whitespace()).collect();\n    // theredfoxandthelazydog\nМетод filter приймає closure, що у Rust-стилі означає лямбди чи анонімні функції. Тут тип аргументу зрозумілий з контексту, тому явне правило пом’якшується.\nТак, ви можете зробити це як явний цикл за символами, заштовхуючи фрагменти, що повертаються, в змінюваний вектор, але рішення вище — коротше, добре читається (якщо ви звикли до такого, звичайно) і працює швидко. Але і використовувати цикл — не гріх, і я рекомендую вам як вправу написати і таку альтернативну версію.\nІнтерлюдія: отримання аргументів командного рядка\nДосі наші програми жили в блаженному незнанні щодо зовнішнього світу, але тепер настав час забезпечити їх даними.\nstd::env::args — це спосіб доступу до аргументів командного рядка. Він повертає ітератор з аргументів у вигляді рядків, включаючи ім’я програми.\n// args0.rs\nfn main() {\n    for arg in std::env::args() {\n        println!(\"\'{}\'\", arg);\n    }\n}\nsrc$ rustc args0.rs\nsrc$ ./args0 42 \'hello dolly\' frodo\n\'./args0\'\n\'42\'\n\'hello dolly\'\n\'frodo\'\nМожливо, краще було б повернути Vec? Досить легко використовувати collect для створення вектора, та використовуючи метод skip ітератора для переходу до імені програми. Переписуємо:\nlet args: Vec<String> = std::env::args().skip(1).collect();\n    if args.len() > 0 { // we have args!\n        ...\n    }\nТеж виглядає цілком нормально — саме так це робиться у більшості мов.\nБільш підходящий для Rust підхід до читання одного аргументу (разом із розбором цілісного значення):\n// args1.rs\nuse std::env;\nfn main() {\n    let first = env::args().nth(1).expect(\"please supply an argument\");\n    let n: i32 = first.parse().expect(\"not an integer!\");\n    // do your magic\n}\nnth(1) дає вам друге значення ітератора, а expect — це як unwrap з повідомленням, що читається. Перетворення рядка на число — справа нескладна, але вам необхідно вказати тип значення.\nЦя програма може «запанікувати», але рішення цілком підходить для невеликих тестових програм. Головне, не варто надто захоплюватися цією зручною звичкою у складних розробках.\nМатчінг\nКод у string3.rs, звідки ми отримуємо україномовне вітання, написаний не так, як завжди. Введіть критерій для матчінгу:\nmatch multilingual.find(\'п\') {\n     Some(idx) => {\n         let hi = &multilingual[idx..];\n         println!(\"Ukrainian hi {}\", hi);\n     },\n     None => println!(\"couldn\'t find the greeting, Друже\")\n };\nТут match складається з декількох шаблонів з збігається значенням після жирної стрілки, розділених комами. Зручно спочатку розвернути значення опції Option і прив’язати його до idx. Потрібно вказати всі можливості, тому нам доведеться працювати з None.\nКоли звикнете (тобто кілька разів надрукуєте все це повністю), це здасться природнішим, ніж явна перевірка is_some, яка потребувала б додаткової змінної для зберігання опції.\nАле якщо вас не цікавлять невдачі, то if let — ваш друг:\nif let Some(idx) = multilingual.find(\'п\') {\n       println!(\"Ukrainian hi {}\", &multilingual[idx..]);\n   }\nЦе зручно, якщо треба провести порівняння і вас цікавить лише один можливий результат.\nmatch також може працювати як відомий оператор switch C і, як і інші конструкції Rust, може повертати значення:\nlet text = match n {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n        _ => \"many\",\n    };\nЗначення _ подібно до значення default в C. Якщо ви його не надасте, rustc вважає це помилкою. До речі, у C++ у цій ситуації гірше, що ви можете очікувати — це попередження, що багато каже про мови, які ми обговорюємо.\nMatch-оператори Rust також можуть відповідати діапазонам. Зверніть увагу, що ці діапазони мають три точки і є інклюзивними діапазонами, тому перша умова буде відповідати «3»:\nlet text = match n {\n        0...3 => \"small\",\n        4...6 => \"medium\",\n        _ => \"large\",\n     };\n\nДалі буде…','2022-12-03 00:30:09','2022-12-03 00:30:09'),(207,'Intel готує загадковий процесор на 56 ядер — що відомо','Игорь Грегорченко\nТехнический редактор Highload','Згідно з неофіційним витоком інформації в мережі, Intel готує до випуску новий передовий процесор Intel Sapphire Rapids-SP — це 56-ядерний 112-потоковий флагман для серверів. Судячи з опублікованих фотографій, це досвідчений інженерний зразок, швидше за все, готовий до серійного випуску. Цей процесор стане найпотужнішим у лінійці продуктів Intel.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\n\nФахівці поки губляться у здогадах, яку систему охолодження  застосують: на скриншотах видно, що чип працює з температурою 99 градусів за Цельсієм.\nАле це не єдиний сюрприз від цього загадкового процесора, експерти вказують, що процесор є неймовірно енергомістким. TDP процесора становить 350 Вт, а PL2 досягає 420 Вт. Обмеження в BIOS вказує максимальне енергоспоживання 764 Вт.\nЗа даними зі скриншота, базова частота процесора — приблизно 1,7 ГГц, у «турборежимі» підвищується до 3,3 Гц (у режимі для всіх ядер). \nIntel Sapphire отримав 112 МБ кешу другого рівня та 105 МБ третього рівня, процесор встановлюється в сокет LGA4677 на чипсеті Intel C740 (Emmitsburg).\nКурс Розробка на Python\nОпануйте популярну мову програмування, щоб заробляти від $1300 через рік\nРЕЄСТРУЙТЕСЯ!\nЗ високою ймовірністю можна припустити, що цей процесор стане доступним на ринку наприкінці 2022 року.\n ','2022-12-03 00:30:12','2022-12-03 00:30:12'),(208,'«Математику люблю, але за неї не дуже добре платять»: розробниця про перехід із науки в IT та життя в Нідерландах','Анастасія Пономарьова\nЖурналістка Highload','Війна змінила інформаційний порядок денний, витісняючи історії про особисті перемоги айтівців і релокації. Інтерв’ю з Яною Ведель — фулстек-розробницею з Нідерландів та аспіранткою КНУ ім. Шевченка зрештою готували з перервою у п’ять місяців двоє журналістів Highload.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nСьогодні ми подаруємо вам шматочок «мирного життя» і розповімо, як математика може приносити гроші, в чому важливість навчання, яке воно — життя в Нідерландах і як голландці відреагували на напад росії на Україну.\nПерший досвід у програмуванні — дуже нетиповий\nЯ почала працювати у 2014 році в університетському стартапі, де займалася виключно математикою, аналітикою. Ми працювали з трейдинговими системами, а моїм завданням було розробляти алгоритми для них . Хлопці-розробники імплементували ці алгоритми, писали переважно на С++, а я тоді програмуванням не займалася.\nСтартап не “злетів”, і через рік перейшла до невеликої компанії у Києві. Там ще була чиста математика: розрахунки для казино, відеоігор, лотерей. Але через деякий час стало нудно, я попросила впровадити мене в програмування, мені стали давати завдання ближче до статистики, data science. Я на той момент навчила Python, і працювати стало реально цікаво! Під кінець роботи у тій компанії я вже сама реалізовувала власні алгоритми.\nЗайматися виключно математикою мені подобалося, але за це не дуже добре платили, тому я почала шукати щось у сфері розробки. Мені пощастило: у 2017 році я знайшла першу роботу як розробник. Досвіду в програмуванні було всього кілька місяців, але мене взяли через класне знання математики — на співбесіді було багато завдань на алгоритми.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nЦе була компанія BldBox у Києві, вона займається розрахунком прибутковості будівництва для американського ринку. Виходячи з того, які будівлі можна розміщувати згідно із законом та територіальними вимогами, ми пропонували модель найбільш прибуткової будівлі — промальовували геометрію, робили брошури. Це був перший досвід у програмуванні, причому дуже нетиповий. Моєю роботою здебільшого були математика і data science, але, оскільки компанія була досить маленька, я виконувала завдання розробників також.\nНадійшла пропозиція попрацювати у Нідерландах\nУ 2018 році надійшла пропозиція попрацювати в Нідерландах: знайомий айтівець з Харкова релокувався на рік раніше і сказав, що шукає алгоритм-інженера, математика-програміста для компанії, яка працює із сервісами доставки, логістикою. У мене було три співбесіди (щотижня), а також тестове завдання. Потім надіслали оффер, і ми підписали контракт.\nКомпанія займалася оформленням візи, покупкою квитка. Перша співбесіда була в середині вересня, переїхала до Нідерландів на початку грудня. Тож на релокацію пішло трохи більше двох місяців.\nВсі співбесіди проходили англійською. Я її підтягнула під час стажування в аспірантурі, коли доводилося їздити за кордон і спілкуватися з людьми. Зараз усім, хто мене запитує, як вивчити англійську, я раджу дійти до мінімального рівня, на якому зможеш розмовляти, і просто почати спілкуватися. Тоді справа піде набагато швидше.\nТой самий підхід я використовую у вивченні голландської. Зараз у мене рівень між А2 та B1, проходжу курс, можу зв’язати разом пару речень. Хоча живу в Нідерландах вже більше трьох років, крайньої необхідності спілкуватися голландською немає — тут усі, окрім літніх людей та маленьких дітей, добре розмовляють англійською. Я вчу її для себе.\nЯна у Нідерландах\nЗараз працюю як фулстек\nСпочатку на роботі займалася теж суто математикою, алгоритмами, до бекенд-розробки не залучали. Згодом почала виконувати завдання для розробників. Зараз уже працюю в іншій компанії в Нідерландах, але як фулстек.\n90% моєї роботи — бекенд.\nКоли мені робили оффер, сказали, що в майбутньому будуть важливими мої математичні скіли, буде і data science, але поки що у пріоритеті більш глобальні проблеми в розробці. Бувають завдання, пов’язані з аналітикою, статистикою, обробкою даних. Зовсім без математики робота не обходиться.  \nЗ досвідом дійшла висновку, що у деяких компаніях на посаді важливі знання математики, але загалом обов’язки переважно стосуються чистої розробки, оскільки таких питань більше виникає, ніж математичних завдань. Якщо вам хочеться, щоб майбутня робота була пов’язана з математикою, можна спробувати пошукати вакансії типу Maths + Python, ще на С++ багато подібних вакансій. Багато хто пише математику на С++, тому що на даний момент він працює швидше.\nЗнання математики допомагає мислити структурами, освоювати нові навички. Наприклад, раніше я не займалася фронтендом, але на цій роботі почала і мені вдалося легко його освоїти. Бекенд-програмуванням теж не планувала займатися, але дуже швидко і легко освоїла, напевно, завдяки математичному способу мислення.\nСтатус аспіранта викликає у людей додаткову повагу\nЗі знанням прикладної математики переважно йдуть у IT. Мої колеги стали тестувальниками або розробниками, виключно наукою рідко хтось займається. В аспірантурі продовжила навчатися лише я та ще один одногрупник.\nОскільки я маю стабільну улюблену роботу, поки що не планую змінювати напрямок. Загалом після аспірантури, окрім викладання чи академічної діяльності, не багато варіантів. Можна продовжити дослідження у Національній академії наук того, що ми вивчали в університетах, можна у фізичних дослідженнях. Але програмістський бекграунд потрібний і для наукової діяльності.\nМожна теоретично вигадати алгоритм, довести, що він працює, але завжди краще реалізувати це на практиці, чим я й займалася.\nЯ почала навчатися в аспірантурі у 2017 році, зараз фінальний етап — уже був передзахист. Коли закінчила магістратуру до КНУ ім. Т. Шевченка, мій керівник питав, чи хочу я продовжити вчитися — мабуть, йому подобалося працювати зі мною. Тімлід на роботі теж підштовхнув мене до навчання: він закінчив аспірантуру і мені теж радив, сказав, що в майбутньому не буде зайвим.\nМені здається, статус аспіранта викликає у людей додаткову повагу — навіть якщо не плануєш у майбутньому пов’язати своє життя з наукою, залишиться гарне звання. І, звичайно, освіта змінює спосіб мислення, а університет навчає нас вчитися.\nЗаймалася застосуванням оптимізаційних алгоритмів у ML\nВ аспірантурі займалася застосуванням оптимізаційних алгоритмів Machine Learning (ML), щоб прискорити їх. Це дуже часто застосовується в економіці. Ми винайшли кілька нових алгоритмів: спочатку теоретично довели, що вони сходяться, потім це закодила практично, по деяких прикладах з економіки. Виявилось, що вони працюють. Практична імплементація була саме для алгоритмів ML, для нейромереж, які зараз використовуються так часто, щоб зрозуміти, навіщо це потрібно.\nФото з архіву героїні\nМи з науковим керівником спільно працювали над алгоритмами, писали статті про них та відправляли у різні джерела, де вказувалося його та моє ім’я, але не патентували. Додаткових засобів захисту ми не мали. Ним можуть користуватися усі. Щоправда, не всі наукові журнали легко дістати: деякі є у відкритому доступі, інші продаються по $50 за випуск.\nАспірантура гарна тим, що можна працювати будь-коли\nМайже одразу після вступу до аспірантури сказала керівнику, що за два місяці планую їхати до Нідерландів. Але кидати навчання не хотілося. Спочатку планувала оформити академічну відпустку, але мене не захотіли відпускати. Потім удалося організувати віддалену роботу. Перші півроку було важко виділити час на аспірантуру — треба було освоюватися в новій країні, шукати житло, займатися організаційними питаннями.\nАспірантура гарна тим, що можна працювати будь-коли. Бажано, щоб була активність, але її ніхто не вимагає постійно.\nДалі поки що не планую будувати наукову кар’єру.\nМені подобається робота розробника — не тільки бекенд, а й фулстек, подобається брати весь процес розробки на себе і ні від кого не залежати. Щоб не було такого, що розробила математичний алгоритм і чекаю, доки його хтось напише. Роблю все сама, мені подобається.\nНапевно, рано чи пізно почну сумувати за математичним розбором алгоритмів. Може, знайдеться привід зайнятися ним знову, якщо щось вигадаю — поділюся зі своїм науковим керівником і за роботу. Наразі бачу вакансії типу алгоритм-девелопер, алгоритм-інженер. У деяких із них вимагають PHD ступінь — це те, чим я в ідеалі хотіла б займатися. Якщо я в майбутньому знайду роботу в цьому напрямку, то буде класно. Те, що на ринку IT такі вакансії є, тішить.\nГолландці дуже товариські, люблять ставити багато запитань\nЯ живу в Гаазі, працюю у Роттердамі. Мені загалом подобається в Нідерландах. Найбільше дивує людей, коли я кажу, що мені подобається погода — усі вважають, що це дуже дощова країна, але я не сказала б, що опадів набагато більше, ніж в Україні.\nПовітря тут чистіше, немає пилу, тобто якщо я виходжу під дощем у білих кедах, вони залишаються білими. Мені подобається, що тут комфортна зима — в середньому +5°C, не треба вдягати три светри під пуховик. Літо трохи прохолодніше, в середньому градусів +25 ° C, але мені таке теж подобається. Не спекотно.\nЛюди відкриті, привітні, атмосфера доброзичлива, зокрема експатів. Якщо щось потрібне, я не соромлюся — звертаюся за допомогою до колег, знайомих голландців, якщо є якісь питання щодо місцевих законів. Тут усі раді прийти на допомогу.\nКультурні відмінності є, але це помітно, якщо заводити тісні особисті стосунки з голландцями.\nВони дуже товариські, люблять ставити багато запитань. Навіть на співбесіді можуть запитати про особисте життя — де живеш, скільки платиш за квартиру, чи маєш хлопця, скільки ви разом. Спочатку мене це дуже дивувало, але потім зрозуміла, що вони не хочуть цим тебе образити, зачепити, принизити. Вони люблять small talk, поговорити з колегою за чашкою кави під час ланчу. Навіть мені один раз на роботі в перформанс-рев’ю написали, мовляв, усе добре, але мені не подобається, що ти не товариська за обідом. А я по натурі інтроверт, мені було важко в це влитися. Тепер до цього звикла.\nКоли виїжджала з України, хотілося чогось стабільнішого, впевненішого. У моїй країні також була дуже гідна робота, зарплата — я була офіційно оформлена, сплачувала податки. Але, якщо подивитися на 30-40 років наперед, що може чекати в Україні, ставало трохи страшно.\nТут все інакше, люди всі посміхаються, навіть пенсіонери. У людей похилого віку нормальна пенсія, є купа часу подорожувати. Люди можуть жити собі на радість. Тоді сумніви щодо переїзду розвіялися. Тут можна здобути громадянство, проживши п’ять років. Планую залишатися тут, поки що все подобається.\nПісля війни…\nСтабільне розмірене життя 24 лютого закінчилося. Я родом із Краматорська, і вісім років тому мені вже доводилося стикатися з бойовими діями. Кілька тижнів я прожила під обстрілами з батьками, це було дуже важко. Потім поїхала — мені треба було на сесію, і це було важко: виїжджала манівцями, через Донецьк. З огляду на пережитий досвід я думала, що цього разу буде легше, що я готова до такого повороту подій. Але насправді ні.\nБуло важко зібратися до купи.\nКолеги всі подзвонили, висловили співчуття, підтримували, як могли, пропонували допомогу. А я не знала, як і чим вони можуть допомогти, тому дала їм посилання для донатів української армії.\nЯ одразу зв’язалася з друзями, що мешкають тут, ми пішли на мітинг у Гаазі під російським посольством. Коли спілкувалася з нашими, ставало легше, бо перші дні (навіть тижні) була повна розгубленість. Ніхто не знав, що робити.\nНамагалася працювати, після роботи роздавала гуманітарку, підтримувала друзів та родичів в Україні, у вихідні ходила на мітинги. Приймала біженців у себе — місяць жила родина із Білогородки, що під Києвом. Вони були дуже налякані, коли приїхали, але через якийсь час прийшли до тями.\nОрганізували підгрупу, яка допомагає знайти роботу для біженців\nУ нас тут є фундація «Українці в Нідерландах» — офіційна організація, яка займається питаннями українців. З нею ми організували підгрупу, що допомагає знайти роботу для біженців. У цьому я знайшла себе.\nФото з архіву Яни\nМені та колегам приходить багато IT-вакансій від рекрутерів, у тому числі з інших сфер — ми збирали їх, співбесідували людей, пропонували роботу. Ще їздили до таборів для біженців, спілкувалися з людьми, щоб вони відчували підтримку, що їх не кидають, їм нададуть допомогу. Адже це складний крок — їхати в нікуди, не знаючи ані мови, ані культури.\nНідерланди підтримують українців, як і вся Європа — і допомогу виплачують, і транспорт спочатку був безкоштовний, і допомагають розмістити біженців буквально після приїзду — на станції вокзалу їх зустрічають волонтери. У Нідерландах деякі великі компанії зробили спрощені процедури найму для біженців — пропонують інтернатуру, підбирають роботу охочим.\nКрім того, в країні загалом стало простіше отримати дозвіл на роботу біженцям — його, по суті, навіть не треба отримувати. Просто живи та працюй. Раніше так просто не можна було влаштуватися.\nХочеться вірити у світле майбутнє країни\nДисертацію спочатку відклала — ми місяць-півтора не спілкувалися з науковим керівником, потім він зі мною зв’язався та поінформував, що робота переводиться в режим онлайн. В університеті навчання відновилося.\nХочеться вірити у світле майбутнє країни, що її приймуть до ЄС. Не впевнена, що це станеться незабаром, але Україна вже довела своїм потужним опором, що варта стати частиною союзу з Європою . Я вірю, що це станеться.\nПісля війни буде криза — друзі кажуть, що у столиці вже складно знайти роботу, і зарплату вдвічі нижчу пропонують, ніж до війни. Зараз страшно думати про повернення, але коли країну приймуть до ЄС, я швидше за все повернуся туди жити. Адже я люблю свою країну.','2022-12-03 00:30:13','2022-12-03 00:30:13'),(209,'«Співаючий рекрутер» зібрав близько 30 млн грн для ЗСУ','Анастасія Пономарьова\nЖурналістка Highload','Talent Acquisition Manager в Impressit Володимир Андрєєв став відомим в українському IT завдяки креативному підходу до рекрутингу: складав та записував на відео пісеньки про пошук кандидатів. З початком війни він «перекваліфікувався» на волонтера з нуля і вже відправив на допомогу українській армії амуніцію, дрони, автомобілі та навіть пристрої Starlink.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПро це Володимир розповів у короткому інтерв’ю Highload.\n— Чи була певна подія протягом війни, після якої твердо вирішили волонтерити? Чи достатньо було початку повномасштабного вторгнення?\n— Достатньо було першим ворожим ракетам прилетіти до України, як я зрозумів, що без мене тут не обійтися. Я жодної секунди не думав навіть залишати територію України. Навпаки, кілька днів розмірковував, як заручитися максимальною підтримкою однодумців. Завдяки, напевно, моїй “медійності” все вийшло.\nНасправді тут не мені треба дякувати, а всім тим, хто донатить. Адже я по суті виступаю в ролі посередника між людськими грошима і тим, що їде на «передок».\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\n— З чого все почалося, на що збирали?\n— Все почалося зі зборів коштів на різного роду амуніцію: рукавички, плитоноски, шоломи… Потім почали закуповувати рації, дрони, приціли, тепловізори, далекоміри.\nЯ не став приєднуватись до якихось фондів. Збори стали моєю особистою ініціативою, а також ініціативою моїх підписників у LinkedIn. Звичайно, було спочатку важко, адже ніхто не розумів, які треба броники, який там треба клас броні, які потрібні тепловізори, для чого вони взагалі, навіщо дрони з тепловізорами… Ситуацію також ускладнювали «дивані експерти». Але вона стабілізувалася приблизно за місяць методом спроб та помилок.\n— Який на сьогоднішній день наймасштабніший збір, який ви проводили?\n— Наймасштабніший збір? Напевно, це 1,85 млн гривень, за які ми придбаємо 73 пристрої зв’язку Starlink. Загалом за місяці війни не можу точно сказати, скільки зібрали — коли ми переступили поріг 15 мільйонів, я перестав рахувати. Зараз приблизно до 30 мільйонів вже доходить.\nЗа кількістю амуніції — чого і скільки купили — конкретно нічого не скажу, бо всього було багато, а от щодо таких цікавих речей, як дрони — десь 120, Starlink — 122, ще 18 автомобілів, один автобус, один баггі та шість снайперських гвинтівок. Тепер збираємо на фуру із тралом, щоб перевозити важку техніку.\n— Як ви мотивуєте людей активно донатити кілька місяців поспіль? І хто здебільшого донатить?\n— Мені здається, не я мотивую людей донатити, а власне те, що робить рашка. Кожен обстріл, кожна жертва, кожна вбита дитина… Ці події викликають в українців лють і жагу помсти, це і є мотивація, щоб ми купували щось, що допомагає знищувати русню. Хто моя аудиторія? Ті, хто бажає смерті русні!\n— Багато айтівців йдуть з роботи або переходять на півставки, бо не вистачає часу поєднувати IT із волонтерством. Як ви справляєтесь?\n— Спершу було дуже важко. По суті, ніхто толком і не працював, бо ніхто не знав, що на нас чекає далі. Тепер все нормалізувалося. Я рекручу, волонтерю, тримаю себе в тонусі кожною гарною новиною від ЗСУ та кожною закритою вакансією.\nФото: LinkedIn Volodymyr Andrieiev\n— Що дає волонтерство саме вам?\n— Відчуття потрібності, відчуття того, що я роблю хоча б невеликий внесок у те, від чого наша країна менше страждатиме від агресора. І ще дуже подобається відчуття, що мені довіряють стільки людей.\nЗбір на дві фури для ЗСУ\nКілька днів тому Володимир запустив збір на тягач Renault Premium 2011 (586 300 грн.) та Трал King King SAF 2003 (717 500 грн.). Загальна сума збору — 1 303 800 грн.\n«Хлопцям буде простіше і дешевше перевозити нашу техніку на фурі, ніж вона їхатиме своїм ходом, — пише волонтер, — Ну і, звичайно, ворожу, яку ще можна відремонтувати і використовувати для знищення ворогів».\nЯкщо хочете зробити внесок у перемогу України та приєднатися до збору, ось реквізити:\nБанка: 5375411200628761;\nБанка: https://lnkd.in/dYqY-x32 ;\nПриват: 5363542603051781;\nPayPal: volodymyr.andreev@gmail.com.\n ','2022-12-03 00:30:43','2022-12-03 00:30:43'),(210,'«Ця сфера для тих, хто любить драйв»: колишній кіберрозвідник про роботу в блокчейні','Анастасія Пономарьова\nЖурналістка Highload','Вже відомо багато історій про те, як айтівці пішли на фронт та стали професійними військовими. Сьогодні поділимося іншим кейсом: як військовому можна перейти в IT, а також як працюють стейкінгові блокчейн-компанії зсередини. Про це в інтерв’ю Highload розповів Head of DevOps Everstake Андрій Кравець.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЗа фахом я кіберрозвідник\nHead of DevOps Everstake Андрій Кравець і син Лев\nЯ міг стати будь-ким: в мене були гарні оцінки в школі, була можливість обрати професію хоч юриста, хоч космонавта, хоч медика (тим паче, в мене всі в сім’ї лікарі). Але я любив копатися у комп’ютерах, хотів зробити щось цікаве. Пішов вчитись у Київській політехнічний інститут на спецфакультет ІСЗЗІ (Інститут спеціального зв’язку та захисту інформації) — там набирають фахівців для Держспецзв’язку, для СБУ, державних служб, у тому числі розвідки, де я і навчався. За фахом я кіберрозвідник. Серйозно звучить, так? Молодим співробітникам завжди цікаво працювати з колишнім розвідником — це добре ллється в канву гарного спеціаліста.\nПісля інституту підписав контракт на 5 років, я капітан ЗСУ в запасі. Там на роботі був маленький центр обробки даних, дуже багато співробітників, локальна обчислювальна мережа — правда, оптична, с багатьма security-нюансами. Під час служби отримав багато практики працюючи як системний адміністратор та спеціаліст з інформаційних мереж, а от девопс-практики було мало.\nПісля закінчення контракту планово перейшов в IT-компанію\nДержустанови дуже інертні, в них немає такого гарного зворотнього зв’язку, як в IT-компаніях — у бізнесі, якщо твоя робота й ідеї справді комусь потрібні, тобі скажуть про це, бо там все підкріплено грошима. А в розвідці та інших органах в нас люди «закорінілі», їм не дуже все цікаво, скільки зусиль не докладай, і багато чого робиться суто для галочки. І це шкодить мотивації. Багато хто просто цілими днями просиджує штани. Робота там ду-у-уже відрізняється від комерційних компаній.\nУ блокчейні скільки б роботи не зробив, її завжди мало, тому є мотивація працювати ще. Тож після закінчення контракту я планово перейшов в IT-компанію. Мій кар’єрний шлях виглядає приблизно так: інститут — служба розвідки — Everstake, де я працюю і сьогодні (якщо не враховувати дрібні підробітки в IT у студентські часи). За три роки кропітливої роботи доріс до посади Head of DevOps.\nКурс POWER BI\nПриборкайте Power BI і прогнозуйте майбутнє своєї компанії.\nРЕЄСТРУЙТЕСЯ!\nБуло складно зрозуміти, що це за магія така\nУ блокчейн-індустрії головне — це розуміти, що ти робиш і як все працює. Тому що тільки за таких умов ти зможеш покращувати робочі процеси, деплоїти і так далі. Перший час мені було складно зрозуміти, що це за магія така — ти робиш транзакцію, а вона відображається на Ethereum або Solana. Це перший бар’єр для входу в крипту.\nНасправді, ніякої магії немає, просто потрібен час, щоб зрозуміти, що тут до чого. І досить багато — два місяці лише для того, щоб голова включилася, та близько півроку-рік, щоб вивчити всі деталі й відчувати себе досить комфортно та впевнено.\nНайбільш продуктивно навчання йде, коли до новачка прикріплений тімлід\nКоли йшов до компанії, не знав про блокчейн геть нічого! Знав, що Ethereum майнять. Коли я приходив, були два девопси, зараз їх більше 20, а компанія виросла — було 20 людей, стало більше 120. Тоді це був маленький український перспективний стартап, який знали дуже багато людей по всьому світу. За три роки Everstake дуже сильно виріс, і зараз це найбільший стейкінг-провайдер у світі.\nКоли йшов до компанії, не знав про блокчейн геть нічого!\nНавіть коли нас було двоє, у нас була певна схема онбордингу — хто що знає про блокчейн, той то і розповідає. Зараз вже є цілий план онбордингу, система управління знаннями, для нас як «Вікіпедія» по блокчейну — там розкривається дуже багато питань. Також є кооперація по курсах з Citrus, є внутрішня LMS, де є курси для людей з усіх підрозділів, у тому числі і для девопсів.\nНайбільш ефективно навчання йде, коли новачка онбоардить досвідчений тімлід. У нас ієрархічна система управління, тобто все поділено на команди/сегменти, і ми постійно синхронізуємося. Це дозволяє зменшити зусилля по менеджменту, і не заважає ділитися знаннями та досвідом — завжди є хтось, у кого можна вільно спитати, якщо щось не зрозумів.\nПростіше сказати, чим я не займаюсь на роботі\nЯ б не прив’язувався у своїй роботі до абревіатури девопс, бо тут усе складно. Іноді мені здається, що простіше сказати, чим я не займаюсь на роботі. Head of DevOps має добре знати роботу підлеглих, тому я маю бути у змозі виконувати всі ролі спеціалістів, щоб бути в змозі приймати управлінські рішення та допомагати.\nРобочий стіл, фото Андрія Кравця\nНаприклад, в якийсь момент зрозумів, що я — майстер по дебагу, можу швидко щось пофіксити. Нібито забагато, але якщо замислитись, хто такий девопс, то все правильно. Це спеціаліст, який хоче покращень. Ти бачиш проблему і намагаєшся її вирішити, і іноді у мідлменеджера більше повноважень, щоб це зробити.\nТа все ж найголовніше моє завдання — контроль успіхів моїх підлеглих та повнота виконання ними поставлених задач. Тому останні півроку я намагаюсь брати на себе менше технічної роботи і переходжу на менеджмент.\nНемає жорстких планів — тільки великий беклог\nЯкщо говорити про розпорядок, то мій ранок починається з того, що я дивлюся, чи не впало щось. Якщо так — наскільки це критично і як швидко треба це підняти. Перше та найголовніше — це damage-контроль: вирішення інцидентів пов’язаних з інфраструктурою блокчейн-нод, веб-сервісами, та іншими. Тобто виявляти і виправляти все, що «горить» — саме це дозволяє підтримувати наш SLA та репутацію надійного провайдера стейкінг-послуг. У нас такого досить багато — це нормально для компаній, які дуже швидко розвиваються. Компанія проходить крізь всі наявні проблеми та вирішує їх. У нас в команді більше 120 людей, і багато хто дивується: «Ого, скільки!». Але це показник, скільки проблем на роботі ми вирішуємо, бо всі ці люди нам потрібні і активно працюють.\nЯкщо все добре, то робимо план покращень, звільняємо беклог, плануємо роботу на тиждень. Зазвичай це п’ятиденний спринт, у п’ятницю отримуємо зворотній зв’язок по ньому. Ми намагаємося не ставити жорстких планів з дедлайнами — це дозволяє виконувати поставлені задачі краще. Так, у нас великий беклог, який ми поступово звільняємо, але рівень технічного боргу — дуже низький.\nДехто дуже «підсаджується» на роботу\nУ нас атмосфера стартапу: кожен день у людей якісь виклики, кожен день тут як на американських гірках. Ті, хто любить драйв на роботі, а не спокійні посиденьки, потрапили, куди треба — тут дуже цікаво. Дехто так «підсаджується» на роботу, що ввечері їх не стягнеш зі стільця: роблять, доки не впадуть перевтомлені. Це робота для ідейних айтівців.\nЯкщо казати про продуктивність, я не підтримую ідею «навіщо спати, якщо можна працювати і робити більше». Відпочивати треба обов’язково. Якщо ти не будеш собі планувати відпочинок та як мінімум 6–7 годин сну, то в тебе піде шкереберть вся робота.\nУ нас атмосфера стартапу: кожен день у людей якісь виклики, кожен день тут як на американських гірках.\nУ нас нульова «тєкучка» (серед девопсів точно), бо в нас гарна процедура онбординга, у нас є LMS-курси, курси англійської, є психологічна допомога (для тих, хто не може встати зі стільця). Раз на місяць я нагадую людям, що якою б цікавою не була робота, обов’язково треба брати відпустку, відгули та відпочивати. Бо вигорання для нас дуже знайома річ.\n У нас близько 400 різноманітних серверів і дуже багато стеку\nЯкщо дивитись по стеку, з чим ми тільки не працювали! У нас зараз інфраструктура нараховує близько 400 різноманітних серверів, і дуже багато стеку — і моніторинг, і логи, чого тільки там немає! Чого менше — це клауд-інфраструктури AWS, GCP, але вона теж є. Блокчейн-ноди розробляють люди з усього світу, використовуючи найрізноманітніші технології, тому у нас є величезний досвід, купа регламентів та чеклістів на усі випадки.\nВ чому особливість нашої роботи — це велика кількість ручної праці. В стезю DevOps не дуже вписуються сотні серверів з терабайтами оперативної пам’яті, бо це по факту здоровенний хайлоад. Ця специфічність дуже кропітка та складна — ми її тягнемо на рівні великих ентерпрайз-компаній. Але прикро, що не можемо приділити достатньо уваги автоматизації. Все дуже швидко змінюється, іноді не встигаємо зробити навіть часткову автоматизацію, бо воно просто того не варте — це як збирати воду решетом. Ніякого профіту.\nБлокчейн-технології стоять на тому, як швидко ти апдейтиш ноду, наскільки розібрався, знаєш деталі і тонкощі, і тут девопс-стек не дуже прямо потрібен. З автоматизацією в блокчейн-індустрії дуже тяжко, тому ті, у кого вона є — одиниці, і ми серед них. Але залишається дуже багато проєктів, які ми хотіли би покласти на покращену автоматизацію та зекономити ручний труд. Проте не можна досягти всього одразу, тому доводиться складати пріоритети та обирати.\nЗ технічної сторони: ми стейкінг-платформа, розгортаємо блокчейн-ноди — тобто певний софт на Linux-серверах (немає жодної Windows-системи, на щастя), і це дуже схоже з роботою депозитів в банках. Але ми не банк, тому що ніяк не контактуємо з грошима людей: доступ відкривається користувачам на рівні протоколу блокчейну. У нас дуже багато проєктів, працюємо не покладаючи рук. Наш продукт — проєкти, де Everstake виступає як валідатор, блокпродюсер, стейкінг-оператор, node-ops.\nСтек не настільки важливий, як бажання працювати\nПортрет нашого працівника — людина систематична і логічна, яка хоче докопатися до істини, а також працює швидко. Це ключове. Стек не настільки важливий, як бажання працювати і певні риси характеру. З моєї точки зору, стеком для нас є не те, що ми зараз використувуємо в роботі, а все що ми пройшли за роки праці. В якийсь момент ми зупинились і обрали певні технології, а чому вибрали — це і є те, що робить нас Everstake, бо ми все прорісерчили, засетапили, продебажили, зробили перформанс-тести, зібрали зворотній зв’язок з купи людей. І не зупиняємося на цьому — а постійно намагаємося покращити.\nКоманда Everstake\nЄ в команді люди, які дуже довго займались телекомунікаціями, були сисадмінами тощо. Є люди, які зараз працюють за фахом — вчились на спеціальності «електронні вибори», наприклад. Є хімік-біолог, який від блокчейну був дуже далеким. Але слово «хімічити», до речі, дуже добре підходить для описання нашої діяльності, бо крипта і блокчейн-технології дуже специфічні, проте перспективні та цікаві.\nДелегуючи, за допомогою свого досвіду можеш закрити значно більше задач\nУ нас є план, як стати девопсом, мідлдевопсом, а от головним девопсом — такого чеклісту немає. Досягти  рівня мідлменеджера або ліда займає близько півтора року (але це оптимістичні прорахунки, якщо людина — прямо вогонь).\nВ якийсь момент, щоб вирішити певну проблему, тобі потрібно зануритись глибше та зрозуміти деталі. Ти стаєш більш фаховим. В якийсь момент на своїй позиції, замість того, щоб братися і все робити самостійно, починаєш делегувати, роз’ясняти іншим співробітникам, як це правильно зробити, передаєш свій досвід. І це дає найкращі можливості кар’єрного росту — не тільки тобі, а й компанії. Ти вчиш десятьох людей, ці люди, в свою чергу, ще десятьох.\nТак, в якийсь момент в тебе вже навчені 100 людей, які взмозі занурюватися в свою роботу глибше і працювати круто. Якби ти сам брався, в тебе була би просто виконана певна частина роботи, бо неможливо всі задачі виконати самостійно. А так, делегуючи навченим людям, ти за допомогою свого досвіду можеш закрити значно більше задач, і виконуєш тільки те, на що інші не мають повноважень або досвіду. Я радий, що в мене залишається час на виконання технічних завдань, щоб в результаті отримати саме те, що ми хотіли.\nУ блокчейні знайдете найновіші технології і зможете з ними працювати\nНе можу сказати, що ніша блокчейну найбільш перспективна — можливо, розробляти ПЗ для марсоходів чи займатися супутниковими мережами перспективніше. Проте однозначно можна сказати, що блокчейн-технології зараз розвиваються найшвидше, тому тут ви знайдете найновіші технології і зможете з ними працювати. Приклади просто знайти в інтернеті — зазвичай, більшість проєктів опенсорс, легко доступні — відкривай і вивчай. Найбільший поріг в тому, що технології складні, не кожен може розібратися. \nНайбільше заробляє той, хто про гроші забув.\nМожу сказати, що в блокчейні точно найкращі перспективи для всіх видів розвитку. Якщо гонишся лише за грошима, то багато тут не заробиш. Найбільше заробляє той, хто про гроші забув — просто хоче класно працювати і досягати вершин як професійних, так і особистих.','2022-12-03 00:30:48','2022-12-03 00:30:48'),(211,'Три помилки в блокчейні, які роблять людей мільйонерами — досвід інженера смарт-контрактів в Ambisafe','Анастасія Пономарьова\nЖурналістка Highload','Про мову розробки Solidity та особливості роботи смарт-контрактів, через які з криптокомпаній «витікають» космічні гроші, продовжує розповідати Олексій Матіясевич — Lead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nНагадаємо, у першій частині інтерв’ю він поділився, як прийшов у сферу блокчейну, та чому стати тестувальником у цій ніші — гарна ідея.\nЄ позиції, де приймають програмістів джуніор-рівня\nLead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe Олексій Матіясевич\nЄ позиції, на які приймають програмістів навіть джуніор-рівня. Для QA при наймі буде плюсом досвід у тестуванні блокчейн-проектів, але це не обов’язкова умова. Для програмістів бувають різні позиції — наприклад, Ambisafe наймають спеціалістів без досвіду в блокчейні, але має бути хороший досвід роботи з Node.js або JavaScript, з написання фронтенду або бекенду (залежить від позиції). Вже на місці новачку розповідають та пояснюють все, що пов’язано з блокчейном.\nЗвісно, якщо це розробка якогось складного блокчейн-продукту, який дуже сильно зав’язаний на роботі якихось смарт-контрактів, тоді треба мати розуміння, як все це працює, і відповідний досвід роботи. Коли наймають людей для розробки блокчейн-інфраструктури, зазвичай тут теж потрібні досвідчені спеціалісти з дуже добрим розумінням, як все влаштовано.\nУ Solidity багато спільного з C++\nКажуть, що мова Solidity схожа на JavaScript, і цьому є пояснення. Коли розробляли Solidity, була ідея зробити її схожою на щось звичне розробникам, щоб максимально зменшити поріг входження і їм було легше починати працювати. Але це тільки зовні.\nЯкщо більш детально розібратися в тому, як мова працює та які можливості має, до чого призводить виконання програми, як вона компілюється, то там набагато більше спільного з C++.\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nТут є детальна взаємодія з пам’яттю, треба розуміти, як працює стек, треба вигадувати власні структури даних. В JS в тебе є купа бібліотек, нескінченні ресурси. А от коли розробляєш смарт-контракти на Solidity, то ресурси в тебе обмежені, кількість коду дуже сильно обмежена, плюс є власна специфіка, якої немає в інших мовах програмування. Смарт-контракти працюють на блокчейні — це специфіка, що має сенс лише в середовищі Ethereum.\nКоли ти пишеш якусь програму на JS, то зазвичай вона існує сама по собі, або ти використовуєш якісь API інших сервісів, які десь запущені. А у випадку зі смарт-контрактами їх можна уявити як купу програм, що всі запущені на одному сервері, всі бачать одна одну, можуть одна до одної звертатись. І їх мільйони.\nІлюстрація, джерело – YouTeam\nСмарт-контракти напряму керують грошима, і це важливий момент. В інших проектах такого зазвичай не відбувається. Програмно переказ може виконуватись як звернення до якогось сервера, який керує балансами користувачів і може якось регулювати доступи, зупинити процес переказу грошей і повернути попередній стан. У смарт-контрактах таке неможливо — все відбувається миттєво, і помічаєш, що щось не так, коли все вже відбулося. Можливості щось повернути зазвичай немає.  \nІ ще момент, про який розробники звичайних систем часто взагалі не думають: у блокчейні фіксована кількість ресурсів, і їх використання дуже дороге. Доводиться думати про те, що, якщо ти додаєш додаткову логіку або використовуєш пам’ять, за це все доведеться платити користувачу або тому, хто запускає проект. Тут не вдасться, як на звичайних проектах, розподілити навантаження на кілька серверів. Тому маємо розробляти таким чином, щоб все працювало, при тому не було потреби у майбутньому збільшувати кількість ресурсів. Збільшиш — все всім стане дорожче. А якщо сервіс дорогий, то нащо людям ним користуватись, коли завжди можна знайти щось дешевше?\nЧерез помилку мільйони доларів виводилися у невідомому напрямку\nПерша розповсюджена помилка смарт-контракту, яку виявили ще у 2016 році (але вона актуальна і зараз) — це так звана проблема reentrancy. Найпростіший приклад: є функція, яка кладе гроші в смарт-контракт і записує, що у такого-то користувача $100 покладено на баланс, і є функція, яка забирає гроші зі смарт-контракту — дивиться, хто викликає її та чи є в користувача гроші на балансу. Якщо є, то вона відправляє їх по запиту.\nЯк функція працює? Коли вона відправляє кошти користувачу, що знімає $100 зі $100 — це означає, що баланс треба обнулити. Проте, якщо користувач в цей момент повторює запит на зняття $100 (до того, як смарт-контракт встигне оновити статус балансу користувача), то контракт подивиться, що в нього все ще записана ця сума, і знову відправить користувачу $100. Але то вже будуть гроші інших людей, звісно. За допомогою цієї помилки мільйони доларів виводилися у невідомому напрямку, і це періодично відбувається зараз.\nLead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe Олексій Матіясевич, фото з FB\nЄ й інші розповсюджені проблеми. Коли виконується якась функція смарт-контракту, в тебе завжди є доступ до того, хто викликав цю функцію. Навіть логінитись не треба: відправляєш транзакцію і підписуєш її, і смарт-контракт вже тебе ідентифікує.\nТак от, зазвичай ти викликаєш функцію переказу грошей, смарт-контракт дивиться, хто її викликав, і з балансу викликаючого переводить кошти вказаному в запиті отримувачу. Тут помилок немає. Але якщо функцію переказу викликає інший користувач, іноді виникає помилка. Наприклад, я хочу взяти гроші з балансу мого друга (в мене є дозвіл на доступ до рахунку) і переказую третій особі. Смарт-контракту треба знімати гроші не з того, хто викликає, а з вказаного користувача. Але розробники за звичкою ставлять функцію знімати гроші з відправника запиту (тобто з мене, а не друга). Йде неправильне використання інформації про операцію.\nШахраї обманюють смарт-контракти\nЗазвичай для роботи фінансових інструментів потрібна інформація про цінність чогось — курс долару, вартість NFT, тощо. Вона береться з певних джерел — оракулів цін. Якщо хтось зможе зманіпулювати ціною в оракулі (навіть на секунди), це дуже сильно нашкодить проекту.\nНаприклад, візьмемо видачу позик під заставу. Ти приносиш $100 в смарт-контракт як заставу і просиш, щоб він видав тобі позику €50. Смарт-контракт перевіряє за допомогою оракулу, чи справді розмір позики менше, ніж вартість застави — так, €50 менше $100, і давати позику безпечно. Але якщо в тебе є можливість зманіпулювати ціною евро відносно долару, то сума позики може бути космічна. Якщо вдається якось змінити в оракулі курс перед тим, як запросити позику, смарт-контракт може подумати, що $1 коштує €10 тисяч, припустимо. Ти кладеш $100 і просиш дати позику в €1 млн — ОК, смарт-контракт видає тобі вказану суму. Твоя маніпуляція в оракулі діяти перестає, ціна стає нормальною, але гроші назад смарт-контракт забрати вже не може, бо розраховує, що оракул — надійне джерело ціни, де інформацією не вийде зманіпулювати.\nЗазвичай шахраї обманюють смарт-контракти за допомогою грошей — ставлять нереальну ціну і таким чином «заробляють» в рази більше. Це дуже дорого, але якщо хтось готовий ризикнути $1 млн, щоб виманити у блокчейн-проекту $100 млн, то вже виявляється, що ціна не така й висока.\nТаке відбувалося не один раз. Це шкодить, в першу чергу, користувачам. Бо це як ринок кредитування користувачів між собою: одні люди дають позики іншим, потім отримують або платять відсотки. Компанія, звісно, буде мати якийсь відсоток від заробітку на проекті, але основну вигоду отримують користувачі. Тож якщо хтось нечесно зміг забрати гроші зі смарт-контракту, то вийде так, що інші користувачі, які поклали свої кошти на депозит, забрати їх звідти вже не зможуть. Компанія несе репутаційні втрати. Якщо керівництво відповідальне та «хороше», компанія спробує відшкодувати втрати користувачам проекту.\nВиявити помилки можна за допомогою рев’ю смарт-контрактів — їх часто замовляють у сторонніх компаніях, де є висококваліфіковані спеціалісти. Але навіть воно не дає 100% гарантій, що гроші користувачів будуть у безпеці.\n ','2022-12-03 00:30:49','2022-12-03 00:30:49'),(212,'«Це простіше, ніж тестувати сайти, але зарплати вищі»: Олексій Матіясевич з Ambisafe — про те, як стати тестувальником у блокчейні','Анастасія Пономарьова\nЖурналістка Highload','Щоб працювати у сфері блокчейну, не обов’язково бути програмістом та вміти розробляти продукти. Наприклад, Олексій Матіясевич прийшов у цю нішу як QA Automation, а сьогодні він Lead Smart Contracts Engineer у компаніях Ambisafe та ChainSafe.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nПро смарт-контракти та особливості їх тестування, а також високий рівень зарплат у блокчейні він розповів в інтерв’ю Highload.\nБагато років я займався тестуванням\nОлексій Матіясевич, Lead Smart Contracts Engineer\nМій тато дуже цікавився комп’ютерами: з раннього дитинства, коли мені було 6 років, вдома був комп’ютер. Більшу частину часу він був включений — або мій тато зі своїми друзями щось налаштовували, або старший брат програмував, або хтось грав. А я любив сидіти і дивитись, що ж там роблять, намагався щось зрозуміти. Мріяв стати адміністратором комп’ютерного клубу, щоб сидіти, нічого не робити, гратися в ігри та ще й отримувати за це зарплату! Просто dream job!\nБатьки підтримували захоплення — влаштували в клас з уклоном в інформатику, щоб з раннього дитинства вивчав програмування. З роками цікавість не зникла, тому вибір професії був очевидним.\nПерша моя робота — системний адміністратор у неайтішній компанії. Пізніше, у 2006 році, влаштувався на позицію QA. Тоді ця професія тільки з’явилася та була не дуже розповсюдженою. Багато років я займався тестуванням: спочатку мануальним, потім автоматизацією, а вже потім став професійно програмувати продукти.\nРозібратися в блокчейні можна без досвіду програмування\nЯ би не сказав, що для входу в блокчейн необхідно бути саме розробником з багатьма роками практики. Звісно, чим більше досвіду, тим простіше буде розібратись у новій технології. Але це можна зробити, не маючи досвіду програмування та розробки якихось продуктів. Зараз в західних університетах блокчейн теж потрапляє в навчальні програми, студенти роблять курсові або дипломні з використанням блокчейн-технологій. Люди виходять з університету і вже мають уявлення, як там все працює.\nКурс Розробка на Java\nОпануйте популярну мову програмування Java у зручний для вас час, та заробляйте від $1000 на початку кар’єри\nРЕЄСТРУЙТЕСЯ!\nСама по собі технологія блокчейн революційного класу, але вона не надскладна.\nБудь хто, якщо поставить за мету розібратися в ній, зможе це зробити.\nСпочатку не було жодного розуміння, навіщо потрібні смарт-контракти\nЯ завжди працював в офісі, і десь у 2015 році вирішив пошукати віддалену роботу. Так сталося, що мене запросив засновник блокчейн-компанії Ambisafe працювати ремоут в компанії клієнта Tether — саме вона першою випустила масовий криптодолар. Там я пропрацював майже рік, і саме там я розібрався, як працює Bitcoin, Omni Protocol, які з’являються в них можливості. Мені це сподобалось. У кінці 2015 Tether зупинив розробку, щоб розвивати і популяризувати свій продукт. Тоді сумарна кількість криптодоларів, які вони випустили, була близько $450 тисяч, а зараз це мільярди доларів.\nПісля того почав працювати напряму в Ambisafe. Вони одні з перших почали використовувати Ethereum, щоб запускати на ньому продукти, випускати токени для якихось компаній. Спочатку прийшов до них як проджект-менеджер під конкретний продукт. В той же час у компанії почали розробляти смарт-контракти на Ethereum, і всією роботою по ним займався один розробник. Він розумів, що кількість ресурсів, яка витрачається на тести смарт-контрактів, недостатня, тому потрібен ще спеціаліст. У мене був великий досвід в автоматизованому тестуванні (а смарт-контракти завжди тестуються за допомогою автотестів), тому я почав розбиратись, як допомогти, що я можу зробити, як працюють смарт-контракти.\nСпочатку в мене не було жодного розуміння, навіщо потрібні смарт-контракти та хто буде ними користуватись. Частково прояснив ситуацію наш розробник, також я кілька разів перечитав документацію по мові програмування Solidity, і все стало більш-менш зрозумілим.\nТоді мене захлеснуло уявлення, наскільки це революційна технологія!\nПару місяців було дуже складно, не міг розібратися в окремих моментах. Потім також було складно, але цікавість вже перевищувала складність. З’явився драйв, коли хочеться постійно працювати, можеш цілий день вирішувати проблему, але цей процес приносить задоволення — бо знаєш, що рішення все-таки буде знайдено. З тих пір займаюсь розробкою та тестуванням смарт-контрактів, а також проводжу рев’ю смарт-контрактів інших розробників.\nЗараз є безліч курсів на різних платформах\nУ 2016 році, коли починав займатись розробкою смарт-контрактів, майже ніяких навчальних матеріалів не було, навіть на форумах не вдавалося знайти варіанти вирішення проблем — з ними ще ніхто не стикався, або стикався і не написав відповіді, тому що ніхто не питав. Інформації було мало. Тому, щоб навчитись, користувався документацією, писав питання в чати розробників, іноді — на Stack Overflow, на якому і сам часто писав відповіді іншим користувачам.\nФото з FB Олексія\nЗ часом вчитись стало легше. Зараз є безліч курсів на різних платформах. Наприклад, є відомий інтерактивний курс CryptoZombies.io, про який дуже багато хороших відгуків. Також є якісні книжки — наприклад, Mastering Ethereum. Матеріалів в інтернеті дуже багато, їх легко знайти, вони доступні.\nТестування смарт-контрактів в цілому простіше\nТестування смарт-контрактів в цілому простіше, тому що вони значно менші, ніж будь-які звичайні програми або сервіси, які ми можемо десь побачити. Тобто кількість коду, який використовується, значно менша. Смарт-контракт сам по собі — це просто клас (якщо брати підхід об’єктоорієнтованого програмування), у якому є якісь функції та змінні. Є купа інструментів, які дозволяють взаємодіяти з таким смарт-контрактом через інтерфейс, в інтерфейсі будуть поля для параметрів і кнопка «виконати функцію», і ти зможеш дивитись результат.\nАле в той же час ти можеш тестувати за допомогою юніт-тестів, тому що це просто частина коду. Це набагато ефективніше, швидше і надійніше. Вони допомагають підтримувати код у робочому стані, швидко отримувати фідбек про те, що код працює саме так, як задумано, і нічого не зламалося. Хоча смарт-контракти можливо тестувати вручну, стандартом в їх тестуванні є написання автотестів.\nЩе один момент: смарт-контракти в більшості випадків використовуються не напряму, а за допомогою якогось юзер-інтерфейсу, якийсь сайт, який дозволяє користувачу відправляти транзакції в смарт-контракт. Цей сайт може бути важким проектом з бекендом, базами даних, в якому може бути складна логіка і щось може ламатись. Тут тестування йде, як у звичайних продуктах.\nЗазвичай смарт-контракти і фронтенд тестуються окремо. Єдиний унікальний момент — коли йде взаємодія з контрактом, тобто користувач відправляє транзакцію, відкривається гаманець і просить підтвердити дію.  \nДе крутяться гроші, там і зарплати вищі\nЧому тестувати смарт-контракти простіше, ніж сайти, але зарплатня у блокчейні вища? Тому що спеціалістів з досвідом роботи в блокчейні значно менше, ніж потребує ринок. Через це оплата може бути вища. Це основна причина, яка розповсюджується переважно на джуніорів.  Якщо говорити про розробника на позиції senior, то тут інші фактори.\nВ блокчейні вартість помилок значно вища, ніж в інших проектах. Тому, коли в тебе вищий рівень відповідальності, то і платити тобі мають більше.\nЯкщо ти пишеш тести на смарт-контракти, то ти маєш писати їх так, щоб нічого не пропустити. Якщо пишеш смарт-контракти, ти маєш бути значно більш уважним, ніж під час роботи над звичайними Web2-сервісами. Все тому що шкода, яка може бути завдана в результаті помилки в коді смарт-контракту, буде значно більшою і швидшою.\nОкрім того, зараз дуже багато блокчейн-проектів працюють саме з фінансами, відповідно тут великий грошовий обіг. Де крутяться гроші, там і зарплати вищі.\nУ продовженні інтерв’ю Олексій розкаже, чи можливо джуніору працювати у блокчейні, які особливості має мова Solidity та як через уразливості можна виманити у смарт-контракту мільйони доларів. Не пропустіть скоро на Highload.','2022-12-03 00:31:18','2022-12-03 00:31:18'),(213,'«Джун у блокчейні може розраховувати на зарплату сеньйора у звичайному IT»: як потрапити в індустрію і кому тут не сподобається','Виктория Пушкина\nЖурналистка в Highload','Це інтерв’ю було дуже незвичайним: вперше я розмовляла по Zoom з однією людиною, але одразу з двох акаунтів — з одного йшло відео, а з іншого звук. Тема була також незвичайна: блокчейн. Але не просто блокчейн, а блокчейн для браузерної гри.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк це пов’язано, кому точно не варто йти в індустрію і який найпростіший спосіб туди увійти — про це розповідає Director of Engineering в Bitmedia Labs Віктор Мірошников.\nВіктор Мірошников, Director of Engineering у Bitmedia Labs\nМи вибрали Web3, щоб дати користувачеві реальну можливість володіння\nКомпанія Bitmedia у блокчейн-індустрії з 2014 року, допомагає іншим компаніям ростити продажі й аудиторію. Але мій проєкт — це новий напрям. Ми робимо ком’юніті-орієнтовану браузерну гру з упором на Web3. Багато розкривати не можу, але спробую пояснити хоча б, до чого тут Web3 і блокчейн.\nПройдемося термінами.\nЯкщо дуже просто, то блокчейн — це технологія передачі майна та виконання смартконтракту. Як коли ти продаєш машину: адже ти не просто віддаєш ключі, ти переоформляєш документи, записуєшся і виписуєшся десь у реєстрі. Ось це якраз про такий реєстр.\nАле в блокчейні реєстр децентралізований: тут немає єдиної сутності, яка вирішує, що правда, а що ні, про це домовляються учасники. Мовою блокчейну це називається «консенсус».\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nКриптовалюта — найпростіше застосування блокчейну. Але технологію використовують не лише для неї. І тут на сцену виходить Web3.\nУ Web 1.0 контент генерували і ним володіли компанії. У Web 2.0 — користувачі. А у Web 3.0 немає когось одного, хто керує інтернетом. Є спільнота, яка може вирішувати долю будь-якого сервісу (і ці рішення записуються до блокчейну). А найголовніше: усе, що ти зробив у Web3, належить тобі, і тільки ти цим розпоряджаєшся.\nТому для нашої браузерної гри ми й вибрали Web3, щоб дати людині реальну можливість володіння. Те, що вона створює в цій грі, вона може продавати, передавати і, взагалі, розпоряджатися цим як хоче. Тобто ми прив’язуємо до блокчейну економічну складову цієї гри. І якщо раптом наш сервер кудись пропаде (навряд це станеться, звичайно 🙂 ) — усе твоє залишиться при тобі.\nЯ — модник у плані технологій, але у блокчейн прийшов не в гонитві за модою\nЯ в розробці понад 15 років. Був і розробником, і лідом, і архітектором. Більшу частину кар’єри робив проєкти для засновників стартапів з Кремнієвої долини, тож вважаю себе ветераном стартап-розробки.\nУ доменах я пробував все: якщо було щось модне та цікаве — я туди ліз 🙂 Але у блокчейн прийшов не в гонитві за модою. Спочатку мене цікавили платіжні системи — я гадаю, це фундаментальні речі, без яких взагалі нічого не відбувається.\nБлокчейн здався мені наступним кроком їх розвитку та дуже цікавою знахідкою завдяки тому, що тут виключається елемент довіри до третьої особи. Сам блокчейном я теж користуюся — я давно живу в Європі і встиг оцінити, як зручно через цю систему, наприклад, надсилати гроші батькам.\nКоли до біткойнів почали виявляти інтерес дедалі більше людей, деякі мої друзі почали займатися майнінгом. У цьому я також частково брав участь, допомагав будувати ферми.\nПотім з’явився Ethereum і здався мені дуже цікавим проєктом — але тоді у стартап-тусовці в цей бік ніхто не дивився, і я почав тягнутися до тих, хто вже в темі. Мені взагалі здається, що у блокчейні дуже розумні та допитливі люди. В IT-індустрії в принципі немає стелі, куди можна рости, а блокчейн у ній — це бездонна бочка зі знаннями.\nЩе одна важлива властивість блокчейну — тут великі ризики. Будь-яка твоя помилка в реалізації софту може мати далекосяжні наслідки — можеш як себе, так і інших людей залишити без штанів. Тому для розробника тут багато челенджів. При цьому наше ком’юніті маленьке, і всі намагаються допомагати одне одному.\nОтже, блокчейн для:\nмодників;\nтих, хто любить ходити по краю.\nЄ і 3. — для тих, хто ідейний.\nЯ — ідейний. Я вірю в те, що софт може замінити купу непотрібної бюрократії, коли ми, наприклад, продаємо нерухомість чи отримуємо зарплату. Тому що в цих процесах нам доводиться довіряти комусь і в нас з’являється багато бар’єрів. Я вважаю: якщо прибрати ці бар’єри, ми станемо набагато багатшими і щасливішими. І я сподіваюся, що це увійде в наше життя так само, як інтернет — ми всі користуємося ним і не помічаємо, як часто. \nНе варто йти у блокчейн, якщо ти не готовий багато працювати\nТим, хто хоче займатися розробкою на блокчейні, доведеться багато чого вивчити. Якщо говорити лише про технології, то це Solidity та/або Rust. І це буде легше тим, хто вже вміє програмувати.\nАле взагалі те, що потрібно вчити, щоб увійти у блокчейн, залежить від того, чим ти хочеш тут займатися:\nЯкщо ти хочеш створювати прості NFT, буде достатньо розуміти саму концепцію.\nЯкщо ти хочеш створювати свої проєкти на блокчейні, знадобиться знання криптографії та низькорівневого програмування.\nА якщо ти маєш амбітну мету створювати свої блокчейн-протоколи, то тут потрібні дуже глибокі знання практично в усіх напрямах Computer Science.\nУ тих, кого зацікавили пункти 2–3, шлях буде складним. Присвятити доведеться приблизно рік — за умови, що у вас багато вільного часу. Але навіть у цьому випадку починати з вивчення самої екосистеми — непогане рішення. Наприклад, є така штука, яка називається Tatum — це обгортка над блокчейном, і вона дозволяє робити дуже складні, але типові речі.\nТак ви «помочите ніжки» і звідти вже пірнатимете. Тому що блокчейн — середовище, що швидко розвивається. Ще швидше розвивається, ніж IT-індустрія загалом. Те, що у звичайному IT відбувається за рік, тут триває кілька місяців. \nЩе простіший шлях увійти до блокчейну є в тестувальників. І тут особливої перекваліфікації не знадобиться. Хоча чим більше ти розумітимеш блокчейн — тим краще. Тож лайфхак для тестувальників, які хочуть у блокчейн: піти і відтестувати всі блокчейн-проєкти, які трапляться 🙂\nВзагалі, я вважаю, якщо в тебе є пристрасть, ти зможеш увійти в блокчейн незалежно від бекграунду. Потрібно буде просто лупати сю скалу раз за разом.\nА от якщо ти не впевнений, що із задоволенням будеш навчатися і багато працювати навіть після того, як уже увійдеш в індустрію, краще вибрати іншу сферу. Тут навіть гроші не допоможуть, хоча гроші тут великі: джуніор у блокчейні може розраховувати на зарплату сеньйора у звичайній розробці.\nА ще блокчейн не підійде тим, хто впевнений, що все знає. Індустрія швидко збиває цю пиху 🙂\nХоча не думаю, що за кілька років можна буде працювати в будь-якій іншій області IT і зовсім не розуміти, що таке блокчейн. Думаю, це стане базовою навичкою для технічного спеціаліста — як бази даних. На рівні «що ця технологія може/не може і як не пхати пальці в розетку».','2022-12-03 00:31:23','2022-12-03 00:31:23'),(214,'«Спочатку 90% часу витрачав на мітинги і нічого не встигав»: тимлід appflame про те, як правильно керувати командою навіть під час війни','Анастасія Пономарьова\nЖурналістка Highload','Тимлід iOS-команди в appflame Денис Рум’янцев тільки-но взяв на себе керування другою командою з незнайомою технологією, аж тут почалась війна і спеціалістів розкидало по всій країні. Та навіть за таких умов він налагодив роботу та вивів команду на 100% продуктивності.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nЯк йому це вдалось, він розповів журналістці Highload.\nПро компанію\nПродуктова IT-компанія appflame територіально знаходиться в Україні, реально — по всьому світу. Її команда розробила відомий застосунок Hily, що входить у найкращі 10 сервісів для знайомств у США та налічує понад 25 млн користувачів у світі. Частина компанії також працює над найбільшим у світі ЛГБТК+ застосунком Taimi. \nПро героя\nДенис із середньої школи займався програмуванням як хобі. Після школи вирішив отримати вищу освіту з електромеханіки, але на четвертому курсі зрозумів, що IT йому все ж більше до душі. Тому 2014 року почав кар’єру з посади QA у «ПриватБанку», паралельно вивчаючи iOS-розробку. Сьогодні він тимлід двох команд у компанії appflame.\nДалі — розповідь героя від першої особи.\nКурс Recruitment\nСтаньте професіональним IT-рекрутером та заробляйте $1800 вже через два роки\nРЕЄСТРУЙТЕСЯ!\nТимлід: очікування та реальність\nДенис Рум’янцев, тимлід в appflame\nНе було такого, що я в один день прокинувся і подумав: «А стану я тимлідом». Ні. Це було органічне кар’єрне зростання. На проєкті хтось мав брати на себе більше обов’язків і відповідати загалом за всю iOS-платформу, а я був зацікавлений у тому, щоб у команді було працювати комфортно, щоб ми розвивались.\nПерший час було дуже нелегко. Мабуть, усі розробники, які зростають до тимліда, не дуже розуміють, яка робота на них ляже. Це не тільки технічна відповідальність, а в першу чергу робота з людьми, піклування про їхній шлях розвитку, кар’єру, вирішення всіх конфліктів.\nЯ не очікував, що додасться історія з чекпойнтами, що треба буде прописувати цілі на перформанс-рев’ю, розрулювати конфлікти між командами та загалом на платформі. У той час вважав, що це логічний кар’єрний перехід просто зі зміною назви посади, а що там з нею в комплекті йде, я не дуже замислювався. Більше скажу, я тоді плутав поняття техліда та тимліда.\nЗагалом, тимлід — нестандартизована зона відповідальності, тому в кожній компанії свої обов’язки. У той час нам потрібен був баланс між позиціями тех- і тимліда. Якщо до технічної частини праці я був готовий, то до роботи з людьми… Там було що вдосконалювати.\nТимлід — нестандартизована зона відповідальності, тому в кожній компанії свої обов’язки\nЯ думав, що доведеться розв’язувати технічні питання на платформі. Замість цього довелося працювати з людьми, зрощувати їх разом, підвищувати рівень сіньорності, ставити перед ними цілі, розв’язувати організаційні питання — навіть з приводу техніки. До цього я психологічно не був готовий на 100%, але мені було цікаво розвиватися в цьому напрямі.\nПерші «проколи» і висновки\nФакапи, звісно, були. Я намагався бути присутнім на всіх можливих мітингах, навіть якщо вони були мені не дуже потрібні. Тож виходило, що я майже 90% робочого часу витрачав на мітинги, а власні обов’язки виконувати не встигав.\nБув ряд помилок, але вони досить життєві. Наприклад, небажання віддавати улюблену частину функціонала іншому розробнику, щоб він продовжив писати код. Так робити не треба — це проблема з початковим делегуванням. Набір «початкового менеджера» — це делегування та фідбек (як позитивний, так і негативний).\nЯкщо ти мізантроп, то позиція тимліда — дорога не туди. Тут треба мати бажання допомагати людям та емпатію, бо якщо їх немає, то нічого не вийде. То буде якась диктатура. І треба позбуватися в собі «чайка-менеджементу», коли ходиш і нескінченно питаєш: «Шо там?»\nУ мене труднощів з командами не було, просто з кимось контакт налагодили за тиждень-два, з кимось — за місяць-півтора. Головне — довести людині, що ти їй не ворог, не «начальник», а лідер і ви йдете в один бік. Якщо всім кльово, то кльово і проєкту, і бізнесу, і компанії загалом.\nМем-ілюстрація\nНачальник — більш директивний стиль керування: «Я так вирішив, а ти роби». Але ефективніше бути для команди прикладом і разом йти до поставленої мети.\n«Золоті правила» ефективного менеджменту\nПерше моє «золоте правило» — давати кредит довіри. Якщо людина його використовує правильно — супер, працюємо далі разом і розвиваємось. Ні — тоді з членом команди проводиться детальніша робота і розбираємось, чому так сталося, що ми не виправдали очікувань одне від одного. Я цим правилом користуюсь з року в рік, і воно працює дуже добре. Ми з розробниками проговорюємо цілі, і я даю волю команді в роботі, просто час від часу синхронізуємось.\nНемає правильної відповіді, які методи Scrum та Agile працюють, які — ні\nДруге — не вірити всьому, що пишуть у книжках з менеджменту. Сліпе використання процесів зі Scrum та Agile, коли не бачиш загальної мети — за таких умов гарних результатів годі й чекати. Не можна навіть копіювати процеси, які ти використовував на попередньому місці роботи. Їх треба адаптувати конкретно під певні команди. Тому немає правильної відповіді, які методи Scrum та Agile працюють, які — ні. Треба відштовхуватись від потреб проєкту, поточного стану бізнесу та команди.\nЗвісно, у кожного менеджера є певний інструментарій, який він використовує, і спочатку ти намагатимешся «приліпити» те, що в тебе раніше спрацювало. Але треба вмикати критичне мислення і діяти методом проб і помилок.\nІ третє правило — займатися найманням людей у команду самостійно, а не делегувати цей обов’язок комусь. Це пріоритет менеджера.\nКоли час подвоїти навантаження?\nЯ зібрав якісну команду й організував усю роботу, та згодом мені стало «удобнєнько» на своєму місці. Це стало сигналом, що прийшов час брати на себе більшу зону відповідальності, щось новеньке. Я вирішив взяти під керування людей з іншої, незнайомої мені платформи. У цей час компанії був потрібен Android-тимлід. Ним став я.\nПризначили мене, бо люди в команді мене вже знають, тобто вже є довіра до мене і простіше налагодити контакт — усі погодились, що це оптимальний варіант. Наразі можна сказати, що все добре, по перформансу ми не впали (враховуючи похибку початку повномасштабного вторгнення), уже з кожним членом Android-команди проставляємо оновленні цілі та рухаємось до них. Тож можна працювати з командою і робити все, щоб робота йшла краще, навіть якщо ти не знаєш технічного боку платформи. Треба налагодити контакт так, щоб члени команди навчились об’єктивно оцінювати поточний стан платформи і ви разом працювали.\nДенис із командою\nТак сталося, що я став тимлідом Android-платформи на початку січня, а наступного місяця почалась широкомасштабна війна. У момент вторгнення ми всі знаходились у Києві, де працює компанія appflame. А після територіально команду «розкидало» по Україні — хто в столиці, хто на заході України, хто де. Ця ситуація принесла ускладнення.\nРобота в умовах війни: як відновити ефективність\nПовномасштабна війна стала великим потрясінням абсолютно для всіх. Ми офісна компанія, звикли працювати за столами, що стоять поруч. Тож треба було налаштовувати нові канали комунікації, передивитись частину процесів, у тому числі планування та оцінювання роботи. Завдяки пандемії та карантину відповіді на деякі питання в нас уже були, і ми швидше налаштували віддалену роботу.\nДуже вдала була історія з плануванням роботи. До війни ми збирались усі разом у мітинг-румі, але повітряні тривоги (у різний час у різних областях) і біганина в підвал по черзі дала зрозуміти, що синхронізувати цей процес неможливо. Тому ми перейшли на асинхронне планування. Ми пояснюємо, які стоять перед нами завдання, у чому їх складність, потім запускаємо синхронне оцінювання, наскільки зрозумілі завдання, і в тебе є умовно два дні, щоб поставити її. Якщо показник варіюється від розробника до розробника, працюємо додатково. Але в нас ще не було такої потреби — усі розуміють проєкт та особливості роботи з тією чи іншою функціональністю.\nПершого тижня продуктивність упала відсотків на 80%\nУсі були дуже шоковані, тому робота йшла в’яло. Але то не про всіх: один хлопець з iOS-команди 25 лютого закрив завдання і питає: «Що там, коли тест буде?» Така індивідуальна реакція. Десь за тижні 3–4 продуктивність роботи піднялась з 20% до 80%, а зараз працюємо на довоєнному рівні, плюс дуже гарно закрили квартал за показниками.\nЩо допомогло? Ми направили думки команди на роботу через планування і цікаві задачі. У нас в командах немає людей, що просто полюють за гроші — вони в першу чергу цікавляться розробкою та розвитком нашого проєкту. Тому робота була способом відволіктися від того пекла, що коїться в нашій країні. Згодом продуктивність вирівнялась.\nТакож у критичні моменти треба постійно спілкуватись. У нас 24 лютого рано вранці почалась комунікація з командою, як тільки стало зрозуміло, що в нас війна. Не можна тримати команду в інформаційному вакуумі.','2022-12-03 00:31:23','2022-12-03 00:31:23'),(215,'«IT — це армія навпаки»: історія військового, який увійшов в IT з першої співбесіди, але встиг попрацювати тільки тиждень','Виктория Пушкина\nЖурналистка в Highload','Данило Борисенко понад сім років відслужив у армії і в 39 років вирішив увійти в IT. І йому це вдалося — причому з першої співбесіди.\nДопомагаємо\nЗбираємо на дрон для штурмовиків на Миколаївщині. Він допоможе знайти та знищити ворога\nНаразі Данило знову в лавах Збройних сил України захищає нас і нашу країну. Але зміг приділити годину і розповісти журналістці Highload про своє навчання на тестувальника, лайфхаки з пошуку роботи та плани після війни.\nДанило Борисенко, Manual QA та військовий\nНіколи не думав йти до армії\nМоя кар’єра військового почалася 2014 року з першою хвилею мобілізації. До того я ніколи не думав йти до армії в будь-якому форматі і закінчував військову кафедру лише для того, щоб ні в якому разі туди не потрапити. Тому що тоді, коли я закінчував виш, армія — то було страшне: «дєдовщина» і тому подібне.\nАле 2014 року я мав формальний статус офіцера в запасі і держава правомірно розраховувала, що я ним є, тому мене мобілізували. Ну а далі вже вчився всьому на практиці.\nМобілізація продовжилась рік, потім я трохи побув цивільним, але роботи було не багато, а війна не закінчувалась, тому я подався в Національну гвардію і п’ять років відслужив там за контрактом. Контракт завершився в червні минулого року.\nЗа цей час я встиг з’їздити на шість ротацій у зону бойових дій, отримати кілька державних нагород. Звільнявся я з посади командира батареї (або, по-піхотному, командира роти) у військовому званні капітана.\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nМене трохи бентежив мій вік, але я вирішив спробувати\nУ виші я отримав магістра математики, тому, можна сказати, що маю профільну технічну спеціальність. Але після випуску і до мобілізації я займався чим завгодно, тільки не математикою. У тому числі працював каскадером.\nА коли контракт у Нацгвардії став добігати кінця, я замислився, що хочу робити далі. Мені було вже 39 років, а перед очима стояв приклад молодшого брата — він уже вісім років в IT, працює як data scientist.\nМене трохи бентежив мій вік, але все ж таки я вирішив спробувати — сходити на курси і подивитися, зайде чи не зайде.\nЧерез своє ветеранське минуле на оплату курсів я отримав грант — від проєкту «Воїну — гідна праця». Спеціалізацію Manual QA обрав за принципом найшвидшого закінчення курсів та найпростішого пошуку роботи. По-перше, реклама у фейсбуку всюди про це пише, по-друге, мій брат також рекомендував саме тестування.\nКурси тривали два місяці, але я також займався додатково\nНа курсах, коли я глибше пірнув у професію, я зрозумів, що мені це цікаво і я туди хочу. До того ж у мене добре виходило — на фоні середньостатистичного студента я бачив, що виділяюсь. Допомагало додаткове навчання — курси тривали два місяці й увесь цей час я паралельно щось читав чи дивився на YouTube — і математична освіта.\nНасправді, ми не вчили нічого складного, але коли дійшли, наприклад, до технік тест-дизайну, я бачив, що багатьом одногрупникам не зрозуміло, як це працює, тому що вони не знають принципів комбінаторики. Зрештою деякі змирилися і вирішили просто запам’ятовувати, як треба робити. Але, як на мене, це дуже вагомий недолік — не може професіонал робити щось без розуміння, як машина.\nЩодо додаткового навчання, наш лектор рекомендував нам три книжки і, наскільки я знаю, я єдиний з групи, хто їх читав. Додаткове навчання в мене займало приблизно стільки ж часу, скільки й основне.\nЗі ста резюме отримав тільки дві відповіді і наважився на нетиповий крок\nЯк і всі, після курсів я почав розсилати резюме і, як і усі, не отримував відповідей. Конкретніше: на сто розісланих резюме в мене було тільки дві відповіді про те, що їх взагалі прочитали.\nПроте трохи пізніше я зробив один нетиповий крок — написав пост у фейсбуку про те, що я ветеран і шукаю першу роботу в IT. Один з моїх колишніх колег його прочитав і порадив мені рекрутера з великим обсягом контактів у LinkedIn — Романа Кушнарьова.\nТому я завів профіль на LinkedIn, написав Роману, а він, зацікавившись моєю історією, написав про мене допис. Так мені і запропонували співбесіду в компанії OneReach.ai.\nПісля співбесіди мені скинули тестове завдання. Я зробив його менше ніж за добу — сидів до третьої ночі. Наступного дня в мене була ще одна співбесіда з лідом, і вже ввечері я отримав офер.\nЦе здивувало усіх. Коли я подзвонив розказати про це брату, він сказав, що це фантастика і такого не буває.\nМені здається, той факт, що я ветеран, зіграв велику роль. Бо моя тимлідка з Краматорська і з війною вона стикнулася ще 2014-го.\nНа жаль, пропрацювати я встиг лише тиждень\nАле навіть за тиждень я з головою набрався вражень — настільки все в IT не схоже на армію. Я б навіть сказав, це як армія, але навпаки.\nМене багато що щиро дивувало. Наприклад, зранку мені видали ноутбук і під вечір я запитав, де мені його залишити. Виявилося, що можна його брати і додому. А я ж був командиром роти, я навіть саперну лопатку просто так нікому не видавав, не те що ноутбук — без журналів видачі й усього цього.\nТут настільки все простіше, комфортніше — процеси роботи будуються на зовсім інших принципах. Перші дні думаєш, що ти взагалі потрапив в інший вимір.\nАле 24-го числа я прокинувся зі звісткою про початок вторгнення, і тепер я знову в армії.\nМрію повернутися до роботи після служби\nМені нема з чим порівнювати окрім армії, але, за моїми відчуттями, OneReach.ai — дуже класна компанія. Навіть у тому, як вони поставилися до мене у зв’язку з мобілізацією. За мною зберегли робоче місце, мені виплачують зарплатню, а також допомагають моєму підрозділу з екіпіруванням, медициною тощо.\nЯ дуже за це вдячний і мрію повернутися до роботи після служби. За тиждень я зрозумів, що це майже ідеальне місце для мене.\nМаксимум за законом мобілізація триває рік, може, закінчиться і раніше. І треба буде готуватися до повернення також. Бо тут ситуації бувають різні: інколи можна не спати добами чи спати уривками по годині-півтори. І навіть коли все більш-менш спокійно, ти обов’язково щось копаєш, будуєш, керуєш — 18–20 годин мені є чим займатися.\nУ таких умовах немає часу читати чи дивитися щось, щоб підтримувати професійні знання тестувальника. І очевидно, що сидіти в м’якому кріслі за ноутбуком — це краще, ніж вічно брудним таскати автомат.\nАле я не жаліюся: так склалося, що ми живемо в такий період, коли багато людей пов’язали своє життя з війною. Я звик до цих умов, і я доволі непоганий військовий. Сподіваюся, що буду і доволі непоганим тестувальником.','2022-12-03 00:31:53','2022-12-03 00:31:53'),(216,'«Я зробила цей вибір 2014-го і знову роблю зараз. Я залишаюся в Україні»: розробниця з Донецька про те, як жити, коли у твоєму місті війна вже 8 років','Виктория Пушкина\nЖурналистка в Highload','Для більшої частини України війна почалася 24 лютого. Але на сході війна йде з 2014-го, і є люди, які зараз переживають ці події вдруге. Але переживають по-іншому.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nПолина Чупайленко має саме таку історію. Поліна — фронтенд-розробниця з Донецька, яка 2014 року переїхала до Львова, а рік тому — до Києва.\nВ інтерв’ю для Highload Поліна розповіла, як було бути донецькою біженкою, чому турбота про себе — одна з найважливіших речей і чи можна знайти сенс у розпал війни.\nПоліна Чупайленко, фронтенд-розробниця з Донецька\nУ Донецьку встигла закінчити лише перший курс\nУ мене непрофільна освіта — я навчалася на міжнародних відносинах і дипломатичній службі. Перший курс закінчила в Донецьку, а наприкінці першого навчального року поїхала до Львова.\nУ програмування прийшла на четвертому курсі. Хоча перші кроки робила ще у школі — мені було цікаво писати код на HTML, CSS, Delphi, робити лабораторні для подруг. Але на технічну спеціальність йти не наважилася — учителька математики вбила мені в голову, що я «гуманітарій».\nКурс Full Stack розробка\nНавчайтесь за вільним графіком, щоб стати універсальним фахівцем зі знанням Back-end та Front-end. Заробляйте $1300 на місяць\nРЕЄСТРУЙТЕСЯ!\nІз цим, до речі, пов’язана кумедна історія. Я тоді щось не зрозуміла в книзі та попросила її пояснити простими словами, а на її «ти гуманітарій» відповіла: «Якщо людина знає свій предмет, вона може на яблуках пояснити навіть складні теореми». З того часу вона мене дуже не любила 🙂\nВчити міжнародні відносини мені подобалося, але з роботою не склалося. І оскільки Львів — IT-столиця України, то було неминуче, що одного разу я потрапила на IT-конференцію. Там я познайомилася з величезною кількістю айтівців, які теж вважали себе гуманітаріями. Це стало для мене проривом, я почала шукати інформацію та вчитися, і ось уже п’ятий рік я фронтендщиця.\nЧерез п’ять років дізналася, що я маю ПТСР\nЗараз я працюю в Grid Dynamics на контракті з Nike. Працювала на Angular, але в поточній компанії пробую React.\nЗа рівнем я зараз мідл. Могла б бути сеньйором, але гадаю, краще розвиватися повільніше і з турботою про себе. Тому що я часто бачу, що у програмістів, які дуже поглиблені в тему, проблеми з комунікацією. А ще рік тому, переїхавши до Києва, я дізналася, що в мене ПТСР (посттравматичний стресовий розлад).\nЛьвів — місто з маленькими вуличками, затишне, але зовсім не моє. Київ з його широкими проспектами підходить мені більше. Але саме в Києві я помітила, як дивно реагую на салюти, на колони машин — до панічних атак. Тому я пішла до психотерапевтки, вона відправила мене до психіатра, і там мені поставили діагноз.\nНасправді ПТСР — це не лише страх гучних звуків. Мені тривожно, наприклад, якщо хтось поруч різко починає махати рукою або бити м’ячем об підлогу. Це не лікується, ця особливість тепер зі мною завжди, але тепер я її знаю, приймаю та розумію, як реагувати на дискомфорт. Наприклад, можна просто попросити людину не махати рукою або використати якісь спеціальні практики, які заспокоюють тебе.\nТож я рада, що нарешті пішла до психолога — доросла до цього фінансово та морально. І не лише я. У мене немає жодного друга з Донецька, хто б не пішов до психолога.\nМоменту «початку війни» на Донбасі не було — були дивні речі, які ніхто не розумів\nЯ знала, що цього року буде війна, готувалася. Накупила запас їжі на два місяці, газовий балон, таблетки, що знезаражують воду. Я знала — але не вірила. У повномасштабне вторгнення точно не вірила. Напевно, це була стадія заперечення. Хоча уявляла плюс-мінус сценарій розвитку подій. Але реальність завжди відрізняється від сценарію.\nПо-перше, перед Новим роком я травмувала ногу, і на момент початку війни вона в мене не згиналася. Тому першого ж дня, коли ми з хлопцем хотіли спуститися в метро, ми зрозуміли, що робити так щоразу, як увімкнеться тривога, буде складно. Тож я вирішила виїхати з Києва до Львова. Зараз маю намір повертатися.\nЗа два місяці війни Поліні вдалося нарешті розтягнути ногу, щоб вона згиналася хоча б на 90°\nПо-друге, війна на Донбасі та повномасштабне вторгнення — усе-таки різні речі.\nКоли почалася війна на Донбасі, мені було 16 років, і я була першокурсницею університету. Але моменту «початку війни» як такого не було. Були якісь дивні речі, які ніхто не розумів.\nНаприклад, тоді були мітинги на Майдані за Україну. У Донецьку вони також були. Але люди з Києва (у соцмережах, наприклад) ставили нам запитання: «А чому ви мовчите?»\nДонецьк, проукраїнський мітинг у 2014 році / RadioSvoboda\nПотім настало затишшя. З міста ніхто не виїжджав, але всі сиділи по домівках. Тиша була дуже підозріла і напружена. Одного дня у травні я йшла від репетитора на мітинг, трохи запізнюючись. Я йшла в навушниках і раптом крізь музику почула стрілянину. Я підбігла ближче і побачила, що людей на мітингу оточили росіяни — стояло багато російських автобусів, були чутні голоси людей російською і з російським акцентом.\nПізніше ми дізналися, як це сталося: вони зламали сторінку «ВКонтакте», де люди збиралися на проукраїнські мітинги, і поміняли місце зустрічі. Частина людей побачила це, частина — ні. На старе місце прийшло менше людей, і їх стало легше оточити.\nПісля цього в місті стало з’являтися дедалі більше росіян у військовій формі та російського транспорту. Потім почали з’являтись прапори, відбуватися перестрілки у дворах, бомбардували аеропорт. Тоді я вирішила поїхати. Це було на початку липня.\nТе, що зараз відбувається в Херсоні — це повторення історії з Донецьком\nЗ того часу я була в Донецьку лише раз — на Новий рік 2014/2015. Дуже просили батьки. Місто дуже змінилося. Звідкись з’явилися прапори ДНР, у центрі міста тремтіли вікна від вибухів, вгорі літали снаряди. Щоб виїхати з міста, потрібно було проїхати чотири блокпости. На одному з них до автобуса зайшов чоловік у військовій формі, вивів усіх дівчат, промовив дитячу лічилку і навів на мене дуло пістолета. У результаті відпустив, але хто знає, що могло статися.\nА у Львові все було не так. У Львові тоді для місцевих мешканців жодної війни не було. Я і частина моїх одногрупників були донецькими біженцями, людьми, які падали на землю, якщо чули щось дуже гучне — і на нас дивилися дивно. Але треба було продовжувати жити, навчатись у новому університеті, куди вдалося перевестися, підробляти. І слідкувати за новинами.\nЦе був якийсь сюр: заглядати в телефон і бачити там зовсім інший світ, про який ніхто у Львові не знає. Вдавати, що ти не з Донецька, щоб до тебе не чіплялися. Тому що сильно чіплялися. Адже ми ні в чому не були винні — тільки в тому, що народилися ближче до кордону із сусідом-дебілом.\nНині все стало краще. Люди почали розуміти. Деякі люди, які 2014-го ставилися до мене з ворожістю, після 24 лютого 2022-го зв’язувалися зі мною та вибачалися за своє ставлення. І я дуже цьому рада, що люди розуміють. Тому що сюжет, який відбувався в Донецьку, коли глушили зв’язок, показували російські канали, казали, що нас всі покинули, вводили рубль, робили фільтрацію — усе це зараз відбувається в Херсоні.\nМені вже не страшно втратити свої речі, але в чому зараз мій сенс — я не знаю\nМи переживаємо війну вдруге, і для мене і багатьох моїх друзів з Донецька вже не так страшно втратити свої речі. Усе можна купити та побудувати заново. І зараз я ясно бачу, що найважливіше — це те, що я вклала в себе. Цього ніхто не забере.\nАле я не можу сказати, що першого разу загартувалась і тепер мені все байдуже. Я відчуваю якусь… аморфність, фрустрацію. Я не можу працювати на повну, не здатна щось вчити після роботи, і навіть ті завдання, які я закриваю, — я ніби не бачу в цьому сенсу.\nНамагаючись розібратися з цими почуттями, я почала читати книгу Віктора Франкла «Людина в пошуках справжнього сенсу». Він пише жорстко, пише про концтабори, але доносить дуже правильні думки — про те, що не можна міряти себе тим, що з тобою сталося, і не можна мірятися болем. Я ніколи не дізнаюся, що переживають ті, хто виїхав з України або хто не виїхав у безпечні регіони. А вони не дізнаються, що я переживаю. Але біль у нас у всіх один. Тому що для кожної людини її біль — найсильніший.\nТак само, як і біль, нас поєднує наш сенс, хоча він у кожного різний. Хтось тримається за кохану людину, хтось — за справу всього життя. І якщо в тебе є сенс життя, є сенс у твоєму стражданні.\nЗавжди можна знайти щось, що тішить. Наприклад, ось такого кота-антистрес, який живе в людей, що прихистили Поліну у Львові\nЯкий у мене сенс? Якщо чесно, я не знаю. Але я намагаюся його знайти, нагадуючи собі, що роблю свій внесок. І нехай сайти, які я розробляю, не рятують життя і в порівнянні з тим, що відбувається, можливо, дурні та неважливі, але я так допомагаю Україні економічно. Тому що, здавалося б, сайтик із взуттям — кому він потрібний? Але так я можу сплачувати податки та донатити ЗСУ.\nТож, хоча в мене поки що немає сенсу, хоча я поки що не можу зрозуміти свої нові цінності, у мене потроху з’являється бажання. Працювати, читати, пити каву. Бажання жити.\nАле це дається складно, тому що складно побачити майбутнє. Я не хочу їхати за кордон. Подорожувати — так. Але жити я вибрала в Україні. Я прийняла це рішення 2014 року і знову усвідомлено роблю це зараз. Я залишаюся.','2022-12-03 00:31:57','2022-12-03 00:31:57'),(217,'«Інвестори завжди знаходили самі та пропонували гроші»: українець створив мінікардіограф з дизайном «як в Apple»','Анастасія Пономарьова\nЖурналістка Highload','Серцево-судинні захворювання — причина смерті №1 у світі, і, ймовірно, майже кожен має родичів зі слабким серцем, через здоров’я яких доводиться постійно хвилюватися. Роман Бєлкін створив мінікардіограф Cardiomo, який безперервно моніторить життєві показники людини, передає їх на смартфон і відправляє повідомлення близьким, коли щось не так.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nЯк з’явилась ідея створити такий девайс і що там всередині, Роман розповів в інтерв’ю Highload.\nНайцікавіший проєкт — книга для навчання дітей\nСТО Cardiomo Роман Бєлкін\nЗа своєю натурою я інженер: люблю досліджувати технічні новинки, залазити всередину, розбиратися, як працюють пристрої. З дитинства розбирав усе, що траплялося під руку, модернізував. Коли виріс, з’явилися власні проєкти, найцікавіший — книга для навчання дітей, яку ми з товаришем зібрали в 1997—1998 роки. Книга з дитиною розмовляє — каже: «Покажи будиночок». І, якщо дитина торкнулася потрібної кнопки, відповідає: «Правильно». Алгоритми розробляв я, а залізом займався мій друг. Ми робили збирання буквально на колінах, випустили одну тисячу екземплярів чотирма мовами — українською, російською, англійською та іспанською.\nУ ті часи круті стартапи якщо й були, то лише в Кремнієвій долині, а в Україні про таке не знали. Ми шукали спонсора та знайшли його — це був чи то колишній, чи то чинний депутат харківської ради. Спочатку він вкладав гроші у виробництво книг, потім раптом зник. Ми намагалися вийти з ним на зв’язок, але не вийшло. Коли закінчилося фінансування, почали шукати, де заробити гроші. На цьому історія з книгами закінчилася.\nЗадум створити компактний кардіограф з’явився у 2000-х\nПерший задум створити компактний кардіограф з’явився у 2000-х, коли я тісно працював з політиками, займався піаром. Принципово співпрацював лише з українськими демократичними силами, зокрема Юлією Володимирівною Тимошенко, партія якої мала серце на логотипі. Тоді ж мені потрапив на очі процесор, здатний знімати кардіограму.\nЯ написав для Ю. В. проєкт — їздити країною з мініатюрними кардіографами, пропонувати послугу скринінгу серця. Пристрої мали бути брендованими, своїми, щоб можна було дарувати їх сільським медпунктам. Але необхідне фінансування (приблизно $500 тис.) та терміни реалізації проєкту були завеликими, тому ідею відхилили.\nКурс UI/UX Design\nНавчіться у вільний час розробляти вебінтерфейси, які подобатимуться клієнтам, та заробляйте від $1000\nРЕЄСТРУЙТЕСЯ!\nПрототип Cardiomo\nПовернувся до ідеї запустити свій стартап 2014 року\nЯ повернувся до ідеї запустити свій стартап 2014 року. Напрацювався вже на «дядька»: займався системним адмініструванням, маркетингом, піаром, таким чином об’єднав у собі технічні та маркетингові скіли. Потім почав досліджувати досвід інших стартаперів — хто як реалізовував свої ідеї. І прийшов до думки, що для цього в мене вистачає досвіду. Можна розпочинати працювати на себе.\nКнигу, що говорить, запускати було вже пізно. Була в запасі ще ідея дармовисів-незабудок — вона з’явилася, коли почали робити наклейки-протиугонки з контуром. Ми подумали, що цю наклейку можна ліпити в гаманець — щоб вона спрацьовувала не тоді, коли потрапляє в зону дії сканера, а навпаки — коли виходить з неї. Були перші макети, але ми не мали фінансування для реалізації.\nНе міг знайти, кому мініатюрний кардіограф продавати\nТоді я згадав про кардіограф. Почав моніторити ситуацію на ринку: мініатюрних приладів практично немає і бездротових немає. Знайшов фінансування для проєкту, але з дуже незручними для мене умовами — 50/50 за $10 тисяч. Дякувати Богу, стосунки з тим інвестором не зрослися.\nІнша проблема – я не міг знайти, кому мініатюрний кардіограф продавати. Та одного разу, під час рідкісної телефонної розмови з мамою, вона сказала, що захворіла і лежить уже три дні — голова болить, тиск. Вона жила в Харкові, я – у Києві. Тут мене осяяло: це потрібно для моєї мами і тисяч таких самих мам. Якщо їй погано, вона приліпила пристрій і ходить з ним, а я отримую інформацію в режимі реального часу, щоб вчасно допомогти, якщо раптом буде погано із серцем — викликати лікаря, попросити прийти друзів, зателефонувати сусідам. Це мене дуже мотивувало, я почав активно працювати.\nЗробив бовванець, наліпив на нього електроди, щоб люди могли покрутити в руках макет\nЗа шість років роботи в девайсі нічого не змінилося, навіть бізнес-модель залишилася практично такою самою. Ми думали, як зробити так, щоб власник пристрою не залежав від смартфона, адже зазвичай дані з гаджетів ідуть на телефон, потім у хмарі обробляються й вертаються на смартфон. Я вирішив замінити його смартгодинником, який матиме доступ до інтернету. Але згодом відмовився від цієї ідеї.\nПерший дизайн Cardiomo я сам намалював — запустив програму 3D-моделювання та зробив модель — що називається, пальцем у небо. Вона була потрібна, щоб залучити інвесторів. На першому пітчі мені сказали: «Ви пропонуєте девайс, а ви його принесли?». Я говорю: «Його ще немає». А мені відповіли: «Нам потрібно подивитися на нього — нехай він навіть зроблений на 3D-принтері, зліплений з пластиліну». Тому я надрукував 3D-молд, зробив бовванець, наліпив на нього електроди, і з цього моменту під час пітчів люди завжди могли покрутити в руках макет. Вони підходили до мене зі словами: «Моєму татові такий кардіограф потрібен, це класна зручна штука, коли випустиш?», «Тато й мама з холтером ходили, це жах, а цей пристрій я хочу». Ідея зайшла на ура. Я зрозумів, що йду у правильному напрямку.\nПопросив оформити пристрій «як в Apple»\nУ другій версії змінився дизайн — ми звернулися до компанії Concepter. Я попросив оформити пристрій «як в Apple» — вони зробили, чим я дуже задоволений. Тоді ще настояв на роз’ємі USB Type-C і не помилився. Зараз світ йде до того, що в гаджетах залишиться лише такий роз’єм.\nБільше в Cardiomo нічого не змінюється, усе те саме. Напевно, тому що все спочатку добре спланували та спроєктували. У мене є дар заглядати в майбутнє й бачити, що потрібно людям.\nНачинка не змінювалась. Я не хотів використовувати один bluetooth-модуль, думав його замінити, але людина, яка розробляла плату, вибрала саме його — сказала, якщо робити таку з нуля, то зі сертифікацією замучишся. Ще ми планували використовувати для Cardiomo унікальний зарядний пристрій, дуже гарний. Але коли почали тестувати, нам сказали: «Навіщо воно вам, сьогодні-завтра будуть використовувати стандартні, від унікальних відмовляться». Так і вийшло.\nПерший MVP зробив за свої гроші приблизно за два місяці\nНад створенням пристрою я працював недовго: перший MVP зробив за свої гроші впродовж двох місяців. Паяти щось дрібне я не можу, тому на сайті пошуку роботи знайшов спеціаліста, який уміє паяти й зводити плати. Я йому назвав основні компоненти, він їх підібрав і зібрав докупи. Першу кардіограму, так би мовити, з повітря ми отримали на ноутбуці. Це було просто божественно. \nКоли я став показувати цей фантастичний пристрій на пітчах, знайшов нашого першого співробітника. Він сказав: «Хочу з вами працювати». Хлопець якраз закінчив інститут, займався кібернетикою, математикою, хотів робити нейронні мережі. Я сказав, що мені поки що нема чим платити, але якщо хоче почати готуватися — вперед. Поки хлопець вивчав нейромережі, я шукав гроші. Як тільки підняв першу інвестицію, говорю йому: «Час попрацювати». Потім ще знайшов проджект-менеджера та Android-девелопера.\nНайскладнішим було вирішити запустити стартап\nЗнайти інвесторів виявилося не найскладнішим етапом — досі інвестори знаходили нас самі та пропонували гроші. Так було і вперше: зі мною зв’язалася людина, яка чула про мій пристрій, і запропонувала інвестувати в нього. У нас усі інвестори були людьми, у яких батьки мали захворювання серця і мали потребу в такому девайсі. Найскладнішим було вирішити запустити свій стартап.\nЗвичайно, були різні проблеми під час розробки на виробництві в Китаї, під час оновлень пристрою. Наприклад, ти тренуєш мережі, навчаєш їх на якихось даних (ми вчили їх на даних з фізіонету, як і всі розробники софту для ЕКГ), набираєш дані, усе працює ідеально. Додаєш алгоритми – працює, чудово. З нашого ж девайсу отримали дані, а там мережа навіть пульс не може порахувати. Дані трохи інші, певною мірою чіткіші.\nВсе це тому, що я відразу хотів вбудувати 24-бітний модуль, тоді як інші виробники подібних пристроїв 12-бітні використовували. У нас вийшла роздільна здатність у два рази більша. Крім того, не було заземлення – два контакти замість трьох.\nЗгодом ми виправили несправності, навчили мережі на власних даних (зараз їх уже більше ніж мільйон), провели лабораторні випробування точності пристрою та отримали дуже хороші цифри.\nУ продовженні інтерв’ю Роман розповість про особливості сертифікації медичних гаджетів, причини для обмеження функціоналу Cardiomo, успіхи і проколи стартапу. Не пропустіть незабаром на Highload.','2022-12-03 00:31:58','2022-12-03 00:31:58'),(218,'Є ризик вийти з війни без українського IT: чому компанії втрачають до 80% замовлень і що з цим робити','Виктория Пушкина\nЖурналистка в Highload','«IT — протиударний і вже пережив багато чого», — такими словами починається моє інтерв’ю з Владиславом Савченком. Владислав — президент Європейської асоціації програмної інженерії. У мирний час ця організація була ком’юніті малого та середнього IT-бізнесу. Зараз її завдання трохи змінилися, бо, хоча IT-індустрія і протиударна, за словами Владислава, тепер вона в небезпеці.\nДопомагаємо\n«Якщо спіймають — можеш попрощатися з життям»: як виживають херсонці в окупації. Розповідь волонтера\nВ інтерв’ю Highload Владислав Савченко розповідає, чому є ризик вийти з війни без українського IT і, найголовніше, як цьому запобігти.\nВладислав Савченко, президент «Європейської асоціації програмної інженерії» & CEO Powercode\nЗакордонні компанії замість того, щоб допомогти замовленнями, хантять людей до себе\nЗ моменту свого створення у 2020 році основним завданням Європейської асоціації програмної інженерії був розвиток малих і середніх IT-компаній.\n«У великих компаній є свої об’єднання, і вони спілкуються, а малі й середні часто страждають від нестачі інформації і через те дуже повільно зростають або не зростають взагалі, — пояснює Владислав Савченко, президент асоціації і власник кількох IT-компаній, включаючи Powercode. — Це впливає на індустрію загалом — бо всі економіки світу драйвить саме мале та середнє підприємництво».\nЩоб забезпечити живе спілкування власників компаній, асоціація організовувала різні івенти. Але з початком війни діяльність дещо змінилися: тепер це більше психологічна підтримка членів асоціації, а також комунікація з державою.\n«Раніше ми також комунікували с Мінцифрою, але не мали конкретних запитів, — розказує Владислав. — Тепер маємо, адже індустрія в небезпеці і держава — одна з тих, хто може їй допомогти».\nКурс QA\nВивчайте важливi технології для тестувальника у зручний час, та отримуйте $1300 уже через рік роботи\nРЕЄСТРУЙТЕСЯ!\nВладислав наголошує, що українське IT намагаються «розірвати» і є великий ризик, що після війни його просто не буде. «Буде німецьке, польське, ще якесь, — каже він. — Бо закордонні компанії замість того, щоб допомогти замовленнями, хантять людей до себе». Переманюють розробників і всередині України, що у воєнний час — мародерство, вважає Владислав.\nУ кожної другої компанії злітають навіть узгоджені контракти\nЩодо міжнародної співпраці, то зараз з’являються проблеми з новими контрактами — максимум клієнти готові співпрацювати з українцями в європейських локаціях.\n«Я маю три компанії, одна з них, Powercode, українська. І постійно отримую листи з меседжем, що ті контракти, які от-от завершаться, продовжувати не будуть, а нових не укладатимуть», — ділиться Владислав.\nВнутрішнє опитування членів асоціації показало, що така сами ситуація в кожної другої української IT-компанії — вони втрачають до 80% замовлень. «Злітають» навіть контракти, які вже були узгоджені. Також закордонні партнери можуть не відповідати, якщо українці надсилають запити.\n«Наразі індустрія просіла лише на 10–15%, і це гарна новина. Погана новина в тому, що відмови, які ми зараз отримуємо — це попереджувальні знаки. А наслідки ми отримаємо десь через квартал. Тому, якщо ми переломимо цей тренд зараз, ми збережемо індустрію», — пояснює Владислав.\nЯк можуть допомогти держава, бізнес і звичайний найманий працівник\nЗа словами Владислава, є закордонні компанії, які і хочуть допомогти, але не знають як. «Вони пропонують нам донати і дивуються, коли ми кажемо, що краще б отримали замовлення — бо можемо і хочемо працювати, — розповідає Владислав. — Тому наше завдання зараз — транслювати цей меседж».\nЗ виконанням цього завдання може допомогти сам IT-бізнес і держава, з якою якраз багато комунікує останнім часом асоціація.\n«Окрім будування бренду українського IT — усіляких промо тощо — держава може надати якість інституційні гарантії, щоб замовники були певні, що отримають продукт і не втратять гроші», — пояснює Владислав. Також потрібна прозора процедура військової мобілізації, щоб компанії могли розуміти, на яку команду їм розраховувати.\nЩодо українського IT як бренду то, за словами Владислава, допомагає ще розповсюдження інформації. Наприклад, пости в соцмережах компаній, де розказують, що команда знаходиться в безпечних локаціях і продовжує працювати.\n«Те, що зараз усі заявляють, що IT-індустрія у стабільному стані — це якраз політичний підхід. Великі компанії не можуть собі дозволити показати сумніви. І це добре з погляду залучення замовників. Але ми самі, усередині індустрії, повинні розуміти, що відбувається та які кроки ми можемо зробити, що це припинити», — вважає Владислав. Він стверджує, що навіть звичайний найманий айтівець може зробити свій внесок.\n«За нашим досвідом, скорочення та звільнення відбуваються, коли люди не виходять на зв’язок, — каже Владислав. — Я маю на увазі не серйозні питання безпеки, а коли люди панікують, переїжджають і випадають з робочого процесу навіть без попередження. Перші тижні війни, звичайно, були шоком для всіх, але зараз настав час повертатися до роботи».\nТакож кожен може робити свій внесок на інформаційному фронті: розповідати не тільки про жахи, що відбуваються в Україні, але й те, що є спокійні регіони, у яких люди хочуть і можуть працювати. І своїм прикладом показувати, що українські інженери роблять це дуже і дуже добре.','2022-12-03 00:32:28','2022-12-03 00:32:28');
/*!40000 ALTER TABLE `scrap_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `email` varchar(180) COLLATE utf8mb4_unicode_ci NOT NULL,
  `roles` json NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQ_8D93D649E7927C74` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'admin@user.com','[\"ROLE_ADMIN\", \"ROLE_SUPER_ADMIN\"]','$2y$13$BMG6hRlhtCsN8KisOd/ULenRvtXNCfLNSG5N0O5wPtmSi.NGAWaGi'),(2,'moderator@user.com','[\"ROLE_ADMIN\"]','$2y$13$cWKRMxOmEzbxmZUywmz7h.Liqqs4S/ioSqxweEBbmMb7Hszv9AT4m');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-12-03  6:18:51
